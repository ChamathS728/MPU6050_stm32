
mpu6050_v1_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08008c80  08008c80  00018c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e8c  08008e8c  00018e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08008e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000110  24000074  08008f04  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000184  08008f04  00020184  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014e74  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002632  00000000  00000000  00034f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee8  00000000  00000000  00037548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e00  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030431  00000000  00000000  00039230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015381  00000000  00000000  00069661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001365cc  00000000  00000000  0007e9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b4fae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004764  00000000  00000000  001b5000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008c68 	.word	0x08008c68

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08008c68 	.word	0x08008c68

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MPU6050_wakeup>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef MPU6050_wakeup(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af04      	add	r7, sp, #16
  // Write 0's to the PWR_MGMT_1 register to wake it up
  // It sets clock source as internal 8MHz clock, and it is woken up
  uint8_t zero = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef res = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, sizeof(PWR_MGMT_1), &zero, sizeof(zero), TIMEOUT_DEFAULT);
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	2301      	movs	r3, #1
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	1dbb      	adds	r3, r7, #6
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2304      	movs	r3, #4
 80006ae:	226b      	movs	r2, #107	; 0x6b
 80006b0:	21d0      	movs	r1, #208	; 0xd0
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MPU6050_wakeup+0x34>)
 80006b4:	f002 fba2 	bl	8002dfc <HAL_I2C_Mem_Write>
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]

  return res;
 80006bc:	79fb      	ldrb	r3, [r7, #7]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	24000090 	.word	0x24000090

080006cc <MPU6050_set_pwr_mgmt>:

HAL_StatusTypeDef MPU6050_set_pwr_mgmt(int dev_rst, int sleep, int cycle, int temp_dis, int clksel) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af04      	add	r7, sp, #16
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	603b      	str	r3, [r7, #0]
  // Assumption is that the first 4 inputs are 1 bit (0 or 1), and clksel is 3 bit (0 to 7)
  assert(dev_rst >= 0 && dev_rst <= 1);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db02      	blt.n	80006e6 <MPU6050_set_pwr_mgmt+0x1a>
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	dd05      	ble.n	80006f2 <MPU6050_set_pwr_mgmt+0x26>
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <MPU6050_set_pwr_mgmt+0xe0>)
 80006e8:	4a31      	ldr	r2, [pc, #196]	; (80007b0 <MPU6050_set_pwr_mgmt+0xe4>)
 80006ea:	2191      	movs	r1, #145	; 0x91
 80006ec:	4831      	ldr	r0, [pc, #196]	; (80007b4 <MPU6050_set_pwr_mgmt+0xe8>)
 80006ee:	f007 fa97 	bl	8007c20 <__assert_func>
  assert(sleep >= 0 && sleep <= 1);
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db02      	blt.n	80006fe <MPU6050_set_pwr_mgmt+0x32>
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	dd05      	ble.n	800070a <MPU6050_set_pwr_mgmt+0x3e>
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <MPU6050_set_pwr_mgmt+0xec>)
 8000700:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <MPU6050_set_pwr_mgmt+0xe4>)
 8000702:	2192      	movs	r1, #146	; 0x92
 8000704:	482b      	ldr	r0, [pc, #172]	; (80007b4 <MPU6050_set_pwr_mgmt+0xe8>)
 8000706:	f007 fa8b 	bl	8007c20 <__assert_func>
  assert(cycle >= 0 && cycle <= 1);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db02      	blt.n	8000716 <MPU6050_set_pwr_mgmt+0x4a>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b01      	cmp	r3, #1
 8000714:	dd05      	ble.n	8000722 <MPU6050_set_pwr_mgmt+0x56>
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MPU6050_set_pwr_mgmt+0xf0>)
 8000718:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <MPU6050_set_pwr_mgmt+0xe4>)
 800071a:	2193      	movs	r1, #147	; 0x93
 800071c:	4825      	ldr	r0, [pc, #148]	; (80007b4 <MPU6050_set_pwr_mgmt+0xe8>)
 800071e:	f007 fa7f 	bl	8007c20 <__assert_func>
  assert(temp_dis >= 0 && temp_dis <= 1);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db02      	blt.n	800072e <MPU6050_set_pwr_mgmt+0x62>
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	dd05      	ble.n	800073a <MPU6050_set_pwr_mgmt+0x6e>
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MPU6050_set_pwr_mgmt+0xf4>)
 8000730:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <MPU6050_set_pwr_mgmt+0xe4>)
 8000732:	2194      	movs	r1, #148	; 0x94
 8000734:	481f      	ldr	r0, [pc, #124]	; (80007b4 <MPU6050_set_pwr_mgmt+0xe8>)
 8000736:	f007 fa73 	bl	8007c20 <__assert_func>
  assert(clksel >= 0 && clksel <= 7);
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db02      	blt.n	8000746 <MPU6050_set_pwr_mgmt+0x7a>
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	2b07      	cmp	r3, #7
 8000744:	dd05      	ble.n	8000752 <MPU6050_set_pwr_mgmt+0x86>
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MPU6050_set_pwr_mgmt+0xf8>)
 8000748:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <MPU6050_set_pwr_mgmt+0xe4>)
 800074a:	2195      	movs	r1, #149	; 0x95
 800074c:	4819      	ldr	r0, [pc, #100]	; (80007b4 <MPU6050_set_pwr_mgmt+0xe8>)
 800074e:	f007 fa67 	bl	8007c20 <__assert_func>

  // Create bit string to put into the register
  uint8_t res =  0 | (dev_rst << 7) | (sleep << 6) | (cycle << 5) | (temp_dis << 3) | clksel;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	01db      	lsls	r3, r3, #7
 8000756:	b25a      	sxtb	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	019b      	lsls	r3, r3, #6
 800075c:	b25b      	sxtb	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b25a      	sxtb	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	015b      	lsls	r3, r3, #5
 8000766:	b25b      	sxtb	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b25a      	sxtb	r2, r3
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	4313      	orrs	r3, r2
 8000774:	b25a      	sxtb	r2, r3
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	4313      	orrs	r3, r2
 800077c:	b25b      	sxtb	r3, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	75bb      	strb	r3, [r7, #22]
  
  // Write to the register over I2C
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, sizeof(PWR_MGMT_1), &res, sizeof(res), TIMEOUT_DEFAULT);
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	2301      	movs	r3, #1
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	f107 0316 	add.w	r3, r7, #22
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2304      	movs	r3, #4
 8000794:	226b      	movs	r2, #107	; 0x6b
 8000796:	21d0      	movs	r1, #208	; 0xd0
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MPU6050_set_pwr_mgmt+0xfc>)
 800079a:	f002 fb2f 	bl	8002dfc <HAL_I2C_Mem_Write>
 800079e:	4603      	mov	r3, r0
 80007a0:	75fb      	strb	r3, [r7, #23]

  return result;
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08008c80 	.word	0x08008c80
 80007b0:	08008d48 	.word	0x08008d48
 80007b4:	08008ca0 	.word	0x08008ca0
 80007b8:	08008cb4 	.word	0x08008cb4
 80007bc:	08008cd0 	.word	0x08008cd0
 80007c0:	08008cec 	.word	0x08008cec
 80007c4:	08008d0c 	.word	0x08008d0c
 80007c8:	24000090 	.word	0x24000090

080007cc <MPU6050_set_dlpf>:

HAL_StatusTypeDef MPU6050_set_dlpf(uint8_t* dlpf, MPU6050* mpu6050) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af04      	add	r7, sp, #16
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  /*
  Just set DLPF_CFG = 001 (so register )
  */

  // Ensure that dlpf is a number between 0 and 7
  assert((*dlpf >= 0) && (*dlpf <= 7));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b07      	cmp	r3, #7
 80007dc:	d905      	bls.n	80007ea <MPU6050_set_dlpf+0x1e>
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MPU6050_set_dlpf+0x50>)
 80007e0:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MPU6050_set_dlpf+0x54>)
 80007e2:	21a6      	movs	r1, #166	; 0xa6
 80007e4:	480f      	ldr	r0, [pc, #60]	; (8000824 <MPU6050_set_dlpf+0x58>)
 80007e6:	f007 fa1b 	bl	8007c20 <__assert_func>
  // assert(*dlpf >= 0);
  // assert(*dlpf <= 7);

  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, DLPF, sizeof(DLPF), dlpf, sizeof(*dlpf), TIMEOUT_DEFAULT);
 80007ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2301      	movs	r3, #1
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2304      	movs	r3, #4
 80007fa:	221a      	movs	r2, #26
 80007fc:	21d0      	movs	r1, #208	; 0xd0
 80007fe:	480a      	ldr	r0, [pc, #40]	; (8000828 <MPU6050_set_dlpf+0x5c>)
 8000800:	f002 fafc 	bl	8002dfc <HAL_I2C_Mem_Write>
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]
  
  // Store the dlpf number in the struct
  mpu6050->dlpf = *dlpf;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	73da      	strb	r2, [r3, #15]
  return result;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08008d28 	.word	0x08008d28
 8000820:	08008d60 	.word	0x08008d60
 8000824:	08008ca0 	.word	0x08008ca0
 8000828:	24000090 	.word	0x24000090

0800082c <MPU6050_set_sample_rate>:

// REVIEW - Maths behind the smplrt_div_input may not be good due to division.
HAL_StatusTypeDef MPU6050_set_sample_rate(uint8_t* freq_ptr, MPU6050* mpu650_obj) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af04      	add	r7, sp, #16
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]

  We need to calculate what needs to go into the SMPLRT_DIV register to get the desired frequency
  This also assumes that the gyro output rate is at 1kHz
  */
  
  uint8_t smplrt_div_input = (mpu650_obj->gyro_smplrt)/(*freq_ptr) - 1;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	7b9a      	ldrb	r2, [r3, #14]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	3b01      	subs	r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	73bb      	strb	r3, [r7, #14]

  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, SMPLRT_DIV, sizeof(SMPLRT_DIV), &smplrt_div_input, sizeof(smplrt_div_input), TIMEOUT_DEFAULT);
 800084a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	2301      	movs	r3, #1
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	f107 030e 	add.w	r3, r7, #14
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2304      	movs	r3, #4
 800085c:	2219      	movs	r2, #25
 800085e:	21d0      	movs	r1, #208	; 0xd0
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <MPU6050_set_sample_rate+0x50>)
 8000862:	f002 facb 	bl	8002dfc <HAL_I2C_Mem_Write>
 8000866:	4603      	mov	r3, r0
 8000868:	73fb      	strb	r3, [r7, #15]
  
  // Store the new sample rate divider in the struct
  mpu650_obj->gyro_smplrt = *freq_ptr;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	739a      	strb	r2, [r3, #14]
  return result;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000090 	.word	0x24000090

08000880 <MPU6050_set_gyro_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_gyro_FSR(Gyro_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af04      	add	r7, sp, #16
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d81e      	bhi.n	80008d0 <MPU6050_set_gyro_FSR+0x50>
 8000892:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <MPU6050_set_gyro_FSR+0x18>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	080008a9 	.word	0x080008a9
 800089c:	080008b3 	.word	0x080008b3
 80008a0:	080008bd 	.word	0x080008bd
 80008a4:	080008c7 	.word	0x080008c7
    // For each possibility, set the correct data to be written and store the setting away
    // Left shift data bits by 3 so that we only overwrite bits 4 and 3
    case GYRO_FSR_250:
      pData = (0 << 3);
 80008a8:	2300      	movs	r3, #0
 80008aa:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_250;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	2200      	movs	r2, #0
 80008b0:	741a      	strb	r2, [r3, #16]
    case GYRO_FSR_500:
      pData = (1 << 3);
 80008b2:	2308      	movs	r3, #8
 80008b4:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_500;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	2201      	movs	r2, #1
 80008ba:	741a      	strb	r2, [r3, #16]
    case GYRO_FSR_1000:
      pData = (2 << 3);
 80008bc:	2310      	movs	r3, #16
 80008be:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_1000;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	2202      	movs	r2, #2
 80008c4:	741a      	strb	r2, [r3, #16]
    case GYRO_FSR_2000:
      pData = (3 << 3);
 80008c6:	2318      	movs	r3, #24
 80008c8:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_2000;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	2203      	movs	r2, #3
 80008ce:	741a      	strb	r2, [r3, #16]
  }
  
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, GYRO_CONFIG, sizeof(GYRO_CONFIG), &pData, sizeof(pData), TIMEOUT_DEFAULT);
 80008d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d4:	9302      	str	r3, [sp, #8]
 80008d6:	2301      	movs	r3, #1
 80008d8:	9301      	str	r3, [sp, #4]
 80008da:	f107 030e 	add.w	r3, r7, #14
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2304      	movs	r3, #4
 80008e2:	221b      	movs	r2, #27
 80008e4:	21d0      	movs	r1, #208	; 0xd0
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MPU6050_set_gyro_FSR+0x7c>)
 80008e8:	f002 fa88 	bl	8002dfc <HAL_I2C_Mem_Write>
 80008ec:	4603      	mov	r3, r0
 80008ee:	73fb      	strb	r3, [r7, #15]
  return result;
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000090 	.word	0x24000090

08000900 <MPU6050_set_accel_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_accel_FSR(Accel_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af04      	add	r7, sp, #16
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d81e      	bhi.n	8000950 <MPU6050_set_accel_FSR+0x50>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <MPU6050_set_accel_FSR+0x18>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000929 	.word	0x08000929
 800091c:	08000933 	.word	0x08000933
 8000920:	0800093d 	.word	0x0800093d
 8000924:	08000947 	.word	0x08000947
    case ACCEL_FSR_2g:
      pData = (0 << 3);
 8000928:	2300      	movs	r3, #0
 800092a:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_2g;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	2200      	movs	r2, #0
 8000930:	745a      	strb	r2, [r3, #17]
    case ACCEL_FSR_4g:
      pData = (1 << 3);
 8000932:	2308      	movs	r3, #8
 8000934:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_4g;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	2201      	movs	r2, #1
 800093a:	745a      	strb	r2, [r3, #17]
    case ACCEL_FSR_8g:
      pData = (2 << 3);
 800093c:	2310      	movs	r3, #16
 800093e:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_8g;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2202      	movs	r2, #2
 8000944:	745a      	strb	r2, [r3, #17]
    case ACCEL_FSR_16g:
      pData = (3 << 3);
 8000946:	2318      	movs	r3, #24
 8000948:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_16g;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2203      	movs	r2, #3
 800094e:	745a      	strb	r2, [r3, #17]
  }
  
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, ACCEL_CONFIG, sizeof(ACCEL_CONFIG), &pData, sizeof(pData), TIMEOUT_DEFAULT);
 8000950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	2301      	movs	r3, #1
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	f107 030e 	add.w	r3, r7, #14
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2304      	movs	r3, #4
 8000962:	221c      	movs	r2, #28
 8000964:	21d0      	movs	r1, #208	; 0xd0
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MPU6050_set_accel_FSR+0x7c>)
 8000968:	f002 fa48 	bl	8002dfc <HAL_I2C_Mem_Write>
 800096c:	4603      	mov	r3, r0
 800096e:	73fb      	strb	r3, [r7, #15]
  return result;  
 8000970:	7bfb      	ldrb	r3, [r7, #15]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	24000090 	.word	0x24000090

08000980 <MPU6050_FIFO_enable>:


HAL_StatusTypeDef MPU6050_FIFO_enable(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af04      	add	r7, sp, #16
  // Write a 1 to bit 6 of register 0x6A
  uint8_t res = (1 << 6);
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	71bb      	strb	r3, [r7, #6]

  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, sizeof(USER_CTRL), &res, sizeof(res), TIMEOUT_DEFAULT);
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	2301      	movs	r3, #1
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	1dbb      	adds	r3, r7, #6
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2304      	movs	r3, #4
 800099a:	226a      	movs	r2, #106	; 0x6a
 800099c:	21d0      	movs	r1, #208	; 0xd0
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MPU6050_FIFO_enable+0x34>)
 80009a0:	f002 fa2c 	bl	8002dfc <HAL_I2C_Mem_Write>
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  return result;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24000090 	.word	0x24000090

080009b8 <MPU6050_FIFO_reset>:

HAL_StatusTypeDef MPU6050_FIFO_reset(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af04      	add	r7, sp, #16
  // Assumes that MPU6050 FIFO buffer is enabled. FIFO enable bit is driven low ONLY when MPU is power cycled (turned off and back on)
  // Write a 2 to bit 2 of register 0x6A -> this gets written to 0 once FIFO is reset anyway
  uint8_t res = (1 << 2);
 80009be:	2304      	movs	r3, #4
 80009c0:	71bb      	strb	r3, [r7, #6]

  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, sizeof(USER_CTRL), &res, sizeof(res), TIMEOUT_DEFAULT);
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	9302      	str	r3, [sp, #8]
 80009c8:	2301      	movs	r3, #1
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2304      	movs	r3, #4
 80009d2:	226a      	movs	r2, #106	; 0x6a
 80009d4:	21d0      	movs	r1, #208	; 0xd0
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MPU6050_FIFO_reset+0x34>)
 80009d8:	f002 fa10 	bl	8002dfc <HAL_I2C_Mem_Write>
 80009dc:	4603      	mov	r3, r0
 80009de:	71fb      	strb	r3, [r7, #7]
  return result;  
 80009e0:	79fb      	ldrb	r3, [r7, #7]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000090 	.word	0x24000090

080009f0 <MPU6050_init>:

HAL_StatusTypeDef MPU6050_init(MPU6050* mpu6050_ptr, uint8_t* dlpf, uint8_t* smpl_frq, Gyro_FSR_SEL_TypeDef gyro_setting, Accel_FSR_SEL_TypeDef accel_setting) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af04      	add	r7, sp, #16
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	70fb      	strb	r3, [r7, #3]
  // Check that we have the correct device by checking its address
  uint8_t check;
  // uint8_t check[4];

  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, sizeof(WHO_AM_I), &check, sizeof(check), TIMEOUT_DEFAULT);
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	f107 0316 	add.w	r3, r7, #22
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2304      	movs	r3, #4
 8000a10:	2275      	movs	r2, #117	; 0x75
 8000a12:	21d0      	movs	r1, #208	; 0xd0
 8000a14:	4812      	ldr	r0, [pc, #72]	; (8000a60 <MPU6050_init+0x70>)
 8000a16:	f002 fb05 	bl	8003024 <HAL_I2C_Mem_Read>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	75fb      	strb	r3, [r7, #23]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, 1, check, 1, 1000);

  if (result == HAL_OK && check == 0xD0) { //check == 0x68
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d117      	bne.n	8000a54 <MPU6050_init+0x64>
 8000a24:	7dbb      	ldrb	r3, [r7, #22]
 8000a26:	2bd0      	cmp	r3, #208	; 0xd0
 8000a28:	d114      	bne.n	8000a54 <MPU6050_init+0x64>
    // Device is identified as the MPU6050 yay -> Wake it up
    MPU6050_wakeup();
 8000a2a:	f7ff fe33 	bl	8000694 <MPU6050_wakeup>

    // Configure DLPF_CFG and store away settings
    MPU6050_set_dlpf(dlpf, mpu6050_ptr);
 8000a2e:	68f9      	ldr	r1, [r7, #12]
 8000a30:	68b8      	ldr	r0, [r7, #8]
 8000a32:	f7ff fecb 	bl	80007cc <MPU6050_set_dlpf>

    // Configure the gyro sample rate and store away settings
    MPU6050_set_sample_rate(smpl_frq, mpu6050_ptr);
 8000a36:	68f9      	ldr	r1, [r7, #12]
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fef7 	bl	800082c <MPU6050_set_sample_rate>

    // Set the full scale range for the gyroscope and accelerometer
    MPU6050_set_gyro_FSR(gyro_setting, mpu6050_ptr);
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	68f9      	ldr	r1, [r7, #12]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff1c 	bl	8000880 <MPU6050_set_gyro_FSR>
    MPU6050_set_accel_FSR(accel_setting, mpu6050_ptr);
 8000a48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a4c:	68f9      	ldr	r1, [r7, #12]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ff56 	bl	8000900 <MPU6050_set_accel_FSR>
  }

  return result;
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000090 	.word	0x24000090
 8000a64:	00000000 	.word	0x00000000

08000a68 <MPU6050_read_gyro>:

HAL_StatusTypeDef MPU6050_read_gyro(MPU6050* mpu6050) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af04      	add	r7, sp, #16
 8000a6e:	6078      	str	r0, [r7, #4]
  // Set the FIFO ENABLE register so that we can read gyro 
  uint8_t res = (7 << 4); // Set bits 6,5,4 to 1 by shifting 7 = b111 by 4 bits to the left
 8000a70:	2370      	movs	r3, #112	; 0x70
 8000a72:	757b      	strb	r3, [r7, #21]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, FIFO_EN, sizeof(FIFO_EN), &res, sizeof(res), TIMEOUT_DEFAULT);
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	f107 0315 	add.w	r3, r7, #21
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2304      	movs	r3, #4
 8000a86:	2223      	movs	r2, #35	; 0x23
 8000a88:	21d0      	movs	r1, #208	; 0xd0
 8000a8a:	48b1      	ldr	r0, [pc, #708]	; (8000d50 <MPU6050_read_gyro+0x2e8>)
 8000a8c:	f002 f9b6 	bl	8002dfc <HAL_I2C_Mem_Write>
 8000a90:	4603      	mov	r3, r0
 8000a92:	77fb      	strb	r3, [r7, #31]
  // Check FIFO_COUNT to see if we have enough bytes to read (always read high register first then low)
  uint16_t fifo_count_H;
  uint16_t fifo_count_L;

  // Read high and low addresses then concatenate them together properly
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, FIFO_COUNT_H, sizeof(FIFO_COUNT_H), &fifo_count_H, sizeof(fifo_count_H), TIMEOUT_DEFAULT);
 8000a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	f107 0312 	add.w	r3, r7, #18
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	2272      	movs	r2, #114	; 0x72
 8000aa8:	21d0      	movs	r1, #208	; 0xd0
 8000aaa:	48a9      	ldr	r0, [pc, #676]	; (8000d50 <MPU6050_read_gyro+0x2e8>)
 8000aac:	f002 faba 	bl	8003024 <HAL_I2C_Mem_Read>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	77fb      	strb	r3, [r7, #31]
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, FIFO_COUNT_L, sizeof(FIFO_COUNT_L), &fifo_count_L, sizeof(fifo_count_L), TIMEOUT_DEFAULT);
 8000ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab8:	9302      	str	r3, [sp, #8]
 8000aba:	2302      	movs	r3, #2
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	2273      	movs	r2, #115	; 0x73
 8000ac8:	21d0      	movs	r1, #208	; 0xd0
 8000aca:	48a1      	ldr	r0, [pc, #644]	; (8000d50 <MPU6050_read_gyro+0x2e8>)
 8000acc:	f002 faaa 	bl	8003024 <HAL_I2C_Mem_Read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	77fb      	strb	r3, [r7, #31]
    
  uint16_t fifo_count = (fifo_count_H << 8) | fifo_count_L;
 8000ad4:	8a7b      	ldrh	r3, [r7, #18]
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	8a3b      	ldrh	r3, [r7, #16]
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	82fb      	strh	r3, [r7, #22]
  // }

  // for loop 6 times to get readings from H and L registers for X Y and Z axes each
  uint8_t fifo_readings[FIFO_BRST_LEN];

  for (int i = 0; i < FIFO_BRST_LEN; ++i) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	e014      	b.n	8000b14 <MPU6050_read_gyro+0xac>
    result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, FIFO_R_W, sizeof(FIFO_R_W), fifo_readings + i, sizeof(*(fifo_readings + i)), TIMEOUT_DEFAULT);
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	f107 0208 	add.w	r2, r7, #8
 8000af0:	4413      	add	r3, r2
 8000af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af6:	9202      	str	r2, [sp, #8]
 8000af8:	2201      	movs	r2, #1
 8000afa:	9201      	str	r2, [sp, #4]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2304      	movs	r3, #4
 8000b00:	2274      	movs	r2, #116	; 0x74
 8000b02:	21d0      	movs	r1, #208	; 0xd0
 8000b04:	4892      	ldr	r0, [pc, #584]	; (8000d50 <MPU6050_read_gyro+0x2e8>)
 8000b06:	f002 fa8d 	bl	8003024 <HAL_I2C_Mem_Read>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	77fb      	strb	r3, [r7, #31]
  for (int i = 0; i < FIFO_BRST_LEN; ++i) {
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	3301      	adds	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	dde7      	ble.n	8000aea <MPU6050_read_gyro+0x82>
  }

  // Now that we have all the readings, chuck them into the struct
  mpu6050->gx = (int16_t) fifo_readings[0] << 8 | (int16_t) fifo_readings[1];
 8000b1a:	7a3b      	ldrb	r3, [r7, #8]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	7a7b      	ldrb	r3, [r7, #9]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	80da      	strh	r2, [r3, #6]
  mpu6050->gy = (int16_t) fifo_readings[2] << 8 | (int16_t) fifo_readings[3];
 8000b2c:	7abb      	ldrb	r3, [r7, #10]
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	7afb      	ldrb	r3, [r7, #11]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	811a      	strh	r2, [r3, #8]
  mpu6050->gz = (int16_t) fifo_readings[4] << 8 | (int16_t) fifo_readings[5];
 8000b3e:	7b3b      	ldrb	r3, [r7, #12]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	7b7b      	ldrb	r3, [r7, #13]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	815a      	strh	r2, [r3, #10]

  // Rescale them according to gyro FSR
  switch(mpu6050->gyro_FSR) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7c1b      	ldrb	r3, [r3, #16]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	f200 80e3 	bhi.w	8000d20 <MPU6050_read_gyro+0x2b8>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <MPU6050_read_gyro+0xf8>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000b71 	.word	0x08000b71
 8000b64:	08000bdd 	.word	0x08000bdd
 8000b68:	08000c49 	.word	0x08000c49
 8000b6c:	08000cb5 	.word	0x08000cb5
    case GYRO_FSR_250:
      mpu6050->gx = mpu6050->gx / 131.0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b76:	ee07 3a90 	vmov	s15, r3
 8000b7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b7e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8000d30 <MPU6050_read_gyro+0x2c8>
 8000b82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b86:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b8a:	ee17 3a90 	vmov	r3, s15
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	80da      	strh	r2, [r3, #6]
      mpu6050->gy = mpu6050->gy / 131.0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ba2:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8000d30 <MPU6050_read_gyro+0x2c8>
 8000ba6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000baa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bae:	ee17 3a90 	vmov	r3, s15
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	811a      	strh	r2, [r3, #8]
      mpu6050->gz = mpu6050->gz / 131.0;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bc6:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8000d30 <MPU6050_read_gyro+0x2c8>
 8000bca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bd2:	ee17 3a90 	vmov	r3, s15
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	815a      	strh	r2, [r3, #10]
    case GYRO_FSR_500:
      mpu6050->gx = mpu6050->gx / 65.5;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000be2:	ee07 3a90 	vmov	s15, r3
 8000be6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bea:	ed9f 5b53 	vldr	d5, [pc, #332]	; 8000d38 <MPU6050_read_gyro+0x2d0>
 8000bee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bf2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bf6:	ee17 3a90 	vmov	r3, s15
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	80da      	strh	r2, [r3, #6]
      mpu6050->gy = mpu6050->gy / 65.5;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c0e:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000d38 <MPU6050_read_gyro+0x2d0>
 8000c12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c16:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c1a:	ee17 3a90 	vmov	r3, s15
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	811a      	strh	r2, [r3, #8]
      mpu6050->gz = mpu6050->gz / 65.5;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c32:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8000d38 <MPU6050_read_gyro+0x2d0>
 8000c36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c3a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c3e:	ee17 3a90 	vmov	r3, s15
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	815a      	strh	r2, [r3, #10]
    case GYRO_FSR_1000:
      mpu6050->gx = mpu6050->gx / 32.8;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c4e:	ee07 3a90 	vmov	s15, r3
 8000c52:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c56:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8000d40 <MPU6050_read_gyro+0x2d8>
 8000c5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c5e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c62:	ee17 3a90 	vmov	r3, s15
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	80da      	strh	r2, [r3, #6]
      mpu6050->gy = mpu6050->gy / 32.8;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c7a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8000d40 <MPU6050_read_gyro+0x2d8>
 8000c7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c82:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c86:	ee17 3a90 	vmov	r3, s15
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	811a      	strh	r2, [r3, #8]
      mpu6050->gz = mpu6050->gz / 32.8;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c96:	ee07 3a90 	vmov	s15, r3
 8000c9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c9e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000d40 <MPU6050_read_gyro+0x2d8>
 8000ca2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000caa:	ee17 3a90 	vmov	r3, s15
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	815a      	strh	r2, [r3, #10]
    case GYRO_FSR_2000:
      mpu6050->gx = mpu6050->gx / 16.4;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cc2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000d48 <MPU6050_read_gyro+0x2e0>
 8000cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cce:	ee17 3a90 	vmov	r3, s15
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	80da      	strh	r2, [r3, #6]
      mpu6050->gy = mpu6050->gy / 16.4;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ce6:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8000d48 <MPU6050_read_gyro+0x2e0>
 8000cea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cf2:	ee17 3a90 	vmov	r3, s15
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	811a      	strh	r2, [r3, #8]
      mpu6050->gz = mpu6050->gz / 16.4;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d0a:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000d48 <MPU6050_read_gyro+0x2e0>
 8000d0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d12:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d16:	ee17 3a90 	vmov	r3, s15
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	815a      	strh	r2, [r3, #10]
  }

  return result;
 8000d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3720      	adds	r7, #32
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	f3af 8000 	nop.w
 8000d30:	00000000 	.word	0x00000000
 8000d34:	40606000 	.word	0x40606000
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	40506000 	.word	0x40506000
 8000d40:	66666666 	.word	0x66666666
 8000d44:	40406666 	.word	0x40406666
 8000d48:	66666666 	.word	0x66666666
 8000d4c:	40306666 	.word	0x40306666
 8000d50:	24000090 	.word	0x24000090
 8000d54:	00000000 	.word	0x00000000

08000d58 <MPU6050_read_accel>:

HAL_StatusTypeDef MPU6050_read_accel(MPU6050* mpu6050) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	6078      	str	r0, [r7, #4]

  // Set the FIFO ENABLE register so that we can read accelerometer 
  uint8_t res = (1 << 3); // Set bit 3 to 1 by shifting 1 by 3 bits to the left
 8000d60:	2308      	movs	r3, #8
 8000d62:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, FIFO_EN, sizeof(FIFO_EN), &res, sizeof(res), TIMEOUT_DEFAULT);
 8000d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	f107 030f 	add.w	r3, r7, #15
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2304      	movs	r3, #4
 8000d76:	2223      	movs	r2, #35	; 0x23
 8000d78:	21d0      	movs	r1, #208	; 0xd0
 8000d7a:	489d      	ldr	r0, [pc, #628]	; (8000ff0 <MPU6050_read_accel+0x298>)
 8000d7c:	f002 f83e 	bl	8002dfc <HAL_I2C_Mem_Write>
 8000d80:	4603      	mov	r3, r0
 8000d82:	75fb      	strb	r3, [r7, #23]
  

  // for loop 6 times to get readings from H and L registers for X Y and Z axes each
  uint8_t fifo_readings[FIFO_BRST_LEN];

  for (int i = 0; i < FIFO_BRST_LEN; ++i) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	e014      	b.n	8000db4 <MPU6050_read_accel+0x5c>
    result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, FIFO_R_W, sizeof(FIFO_R_W), fifo_readings + i, sizeof(*(fifo_readings + i)), TIMEOUT_DEFAULT);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	f107 0208 	add.w	r2, r7, #8
 8000d90:	4413      	add	r3, r2
 8000d92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d96:	9202      	str	r2, [sp, #8]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	9201      	str	r2, [sp, #4]
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2304      	movs	r3, #4
 8000da0:	2274      	movs	r2, #116	; 0x74
 8000da2:	21d0      	movs	r1, #208	; 0xd0
 8000da4:	4892      	ldr	r0, [pc, #584]	; (8000ff0 <MPU6050_read_accel+0x298>)
 8000da6:	f002 f93d 	bl	8003024 <HAL_I2C_Mem_Read>
 8000daa:	4603      	mov	r3, r0
 8000dac:	75fb      	strb	r3, [r7, #23]
  for (int i = 0; i < FIFO_BRST_LEN; ++i) {
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	3301      	adds	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	2b05      	cmp	r3, #5
 8000db8:	dde7      	ble.n	8000d8a <MPU6050_read_accel+0x32>
  }

  // Now that we have all the readings, chuck them into the struct
  mpu6050->ax = (int16_t) fifo_readings[0] << 8 | (int16_t) fifo_readings[1];
 8000dba:	7a3b      	ldrb	r3, [r7, #8]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	7a7b      	ldrb	r3, [r7, #9]
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b21a      	sxth	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	801a      	strh	r2, [r3, #0]
  mpu6050->ay = (int16_t) fifo_readings[2] << 8 | (int16_t) fifo_readings[3];
 8000dcc:	7abb      	ldrb	r3, [r7, #10]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	805a      	strh	r2, [r3, #2]
  mpu6050->az = (int16_t) fifo_readings[4] << 8 | (int16_t) fifo_readings[5];
 8000dde:	7b3b      	ldrb	r3, [r7, #12]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	809a      	strh	r2, [r3, #4]

  // Rescale them according to gyro FSR
  switch(mpu6050->accel_FSR) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7c5b      	ldrb	r3, [r3, #17]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	f200 80e3 	bhi.w	8000fc0 <MPU6050_read_accel+0x268>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <MPU6050_read_accel+0xa8>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	08000e7d 	.word	0x08000e7d
 8000e08:	08000ee9 	.word	0x08000ee9
 8000e0c:	08000f55 	.word	0x08000f55
    case ACCEL_FSR_2g:
      mpu6050->ax = mpu6050->ax / 16384.0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e16:	ee07 3a90 	vmov	s15, r3
 8000e1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e1e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8000fd0 <MPU6050_read_accel+0x278>
 8000e22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e26:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e2a:	ee17 3a90 	vmov	r3, s15
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	801a      	strh	r2, [r3, #0]
      mpu6050->ay = mpu6050->ay / 16384.0;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e42:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8000fd0 <MPU6050_read_accel+0x278>
 8000e46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e4a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e4e:	ee17 3a90 	vmov	r3, s15
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	805a      	strh	r2, [r3, #2]
      mpu6050->az = mpu6050->az / 16384.0;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e66:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8000fd0 <MPU6050_read_accel+0x278>
 8000e6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e6e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e72:	ee17 3a90 	vmov	r3, s15
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	809a      	strh	r2, [r3, #4]
    case ACCEL_FSR_4g:
      mpu6050->ax = mpu6050->ax / 8192.0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e8a:	ed9f 5b53 	vldr	d5, [pc, #332]	; 8000fd8 <MPU6050_read_accel+0x280>
 8000e8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e92:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e96:	ee17 3a90 	vmov	r3, s15
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	801a      	strh	r2, [r3, #0]
      mpu6050->ay = mpu6050->ay / 8192.0;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000eae:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000fd8 <MPU6050_read_accel+0x280>
 8000eb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eb6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eba:	ee17 3a90 	vmov	r3, s15
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	805a      	strh	r2, [r3, #2]
      mpu6050->az = mpu6050->az / 8192.0;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ed2:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8000fd8 <MPU6050_read_accel+0x280>
 8000ed6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eda:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ede:	ee17 3a90 	vmov	r3, s15
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	809a      	strh	r2, [r3, #4]
    case ACCEL_FSR_8g:
      mpu6050->ax = mpu6050->ax / 4096.0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ef6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8000fe0 <MPU6050_read_accel+0x288>
 8000efa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000efe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f02:	ee17 3a90 	vmov	r3, s15
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	801a      	strh	r2, [r3, #0]
      mpu6050->ay = mpu6050->ay / 4096.0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f1a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8000fe0 <MPU6050_read_accel+0x288>
 8000f1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f22:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f26:	ee17 3a90 	vmov	r3, s15
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	805a      	strh	r2, [r3, #2]
      mpu6050->az = mpu6050->az / 4096.0;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f3e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000fe0 <MPU6050_read_accel+0x288>
 8000f42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f46:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f4a:	ee17 3a90 	vmov	r3, s15
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	809a      	strh	r2, [r3, #4]
    case ACCEL_FSR_16g:
      mpu6050->ax = mpu6050->ax / 2048.0;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f62:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000fe8 <MPU6050_read_accel+0x290>
 8000f66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f6a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f6e:	ee17 3a90 	vmov	r3, s15
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	801a      	strh	r2, [r3, #0]
      mpu6050->ay = mpu6050->ay / 2048.0;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f86:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8000fe8 <MPU6050_read_accel+0x290>
 8000f8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f8e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f92:	ee17 3a90 	vmov	r3, s15
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	805a      	strh	r2, [r3, #2]
      mpu6050->az = mpu6050->az / 2048.0;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000faa:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000fe8 <MPU6050_read_accel+0x290>
 8000fae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fb6:	ee17 3a90 	vmov	r3, s15
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	809a      	strh	r2, [r3, #4]
  }

  return result;
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	40d00000 	.word	0x40d00000
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40c00000 	.word	0x40c00000
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	40b00000 	.word	0x40b00000
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	40a00000 	.word	0x40a00000
 8000ff0:	24000090 	.word	0x24000090

08000ff4 <MPU6050_read_temp>:

HAL_StatusTypeDef MPU6050_read_temp(MPU6050* mpu6050) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	6078      	str	r0, [r7, #4]
  // Set the FIFO ENABLE register so that we can read temperature 
  uint8_t res = (1 << 7); // Set bit 7 to 1 by shifting 1 by 7 bits to the left
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, FIFO_EN, sizeof(FIFO_EN), &res, sizeof(res), TIMEOUT_DEFAULT);
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	f107 030e 	add.w	r3, r7, #14
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2304      	movs	r3, #4
 8001012:	2223      	movs	r2, #35	; 0x23
 8001014:	21d0      	movs	r1, #208	; 0xd0
 8001016:	481a      	ldr	r0, [pc, #104]	; (8001080 <MPU6050_read_temp+0x8c>)
 8001018:	f001 fef0 	bl	8002dfc <HAL_I2C_Mem_Write>
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]

  // Read buffer twice to get high and low registers
  uint16_t temp_high;
  uint16_t temp_low;

  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, FIFO_R_W, sizeof(FIFO_R_W), &temp_high, sizeof(temp_high), TIMEOUT_DEFAULT);
 8001020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2302      	movs	r3, #2
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2304      	movs	r3, #4
 8001032:	2274      	movs	r2, #116	; 0x74
 8001034:	21d0      	movs	r1, #208	; 0xd0
 8001036:	4812      	ldr	r0, [pc, #72]	; (8001080 <MPU6050_read_temp+0x8c>)
 8001038:	f001 fff4 	bl	8003024 <HAL_I2C_Mem_Read>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, FIFO_R_W, sizeof(FIFO_R_W), &temp_low, sizeof(temp_low), TIMEOUT_DEFAULT);
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2302      	movs	r3, #2
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 030a 	add.w	r3, r7, #10
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2304      	movs	r3, #4
 8001052:	2274      	movs	r2, #116	; 0x74
 8001054:	21d0      	movs	r1, #208	; 0xd0
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <MPU6050_read_temp+0x8c>)
 8001058:	f001 ffe4 	bl	8003024 <HAL_I2C_Mem_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]

  // Now that we have all the readings, chuck them into the struct
  mpu6050->temp = (int16_t) temp_high << 8 | (int16_t) temp_low;
 8001060:	89bb      	ldrh	r3, [r7, #12]
 8001062:	b21b      	sxth	r3, r3
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	897b      	ldrh	r3, [r7, #10]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	819a      	strh	r2, [r3, #12]

  return result;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000090 	.word	0x24000090

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108a:	f000 fd33 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108e:	f000 f87d 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001092:	f000 f985 	bl	80013a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001096:	f000 f92f 	bl	80012f8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800109a:	f000 f979 	bl	8001390 <MX_USB_OTG_HS_USB_Init>
  MX_I2C4_Init();
 800109e:	f000 f8eb 	bl	8001278 <MX_I2C4_Init>

  // Run the MPU init
  MPU6050 mpu6050;
  
  // Wake up the MPU6050 as well
  MPU6050_wakeup();
 80010a2:	f7ff faf7 	bl	8000694 <MPU6050_wakeup>

  // Initialise the MPU6050
  uint8_t dlpf = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	74fb      	strb	r3, [r7, #19]
  uint8_t smplfrq = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	74bb      	strb	r3, [r7, #18]
  MPU6050_init(&mpu6050, &dlpf, &smplfrq, GYRO_FSR_250, ACCEL_FSR_2g);
 80010ae:	f107 0212 	add.w	r2, r7, #18
 80010b2:	f107 0113 	add.w	r1, r7, #19
 80010b6:	f107 0014 	add.w	r0, r7, #20
 80010ba:	2300      	movs	r3, #0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2300      	movs	r3, #0
 80010c0:	f7ff fc96 	bl	80009f0 <MPU6050_init>
  MPU6050_set_pwr_mgmt(0, 0, 0, 0, 1);
 80010c4:	2301      	movs	r3, #1
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2300      	movs	r3, #0
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fafc 	bl	80006cc <MPU6050_set_pwr_mgmt>

  // Enable the FIFO buffer
  MPU6050_FIFO_enable();
 80010d4:	f7ff fc54 	bl	8000980 <MPU6050_FIFO_enable>
  // Reset it as well so that it can be burst read or something -> https://stackoverflow.com/questions/60419390/mpu-6050-correctly-reading-data-from-the-fifo-register
  MPU6050_FIFO_reset();
 80010d8:	f7ff fc6e 	bl	80009b8 <MPU6050_FIFO_reset>
  MPU6050_FIFO_enable();
 80010dc:	f7ff fc50 	bl	8000980 <MPU6050_FIFO_enable>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Read data
    MPU6050_read_gyro(&mpu6050);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fcbf 	bl	8000a68 <MPU6050_read_gyro>
    HAL_Delay(100); // Delays in between just for timing??
 80010ea:	2064      	movs	r0, #100	; 0x64
 80010ec:	f000 fd94 	bl	8001c18 <HAL_Delay>
    MPU6050_read_accel(&mpu6050);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fe2f 	bl	8000d58 <MPU6050_read_accel>
    HAL_Delay(100); // Delays in between just for timing??
 80010fa:	2064      	movs	r0, #100	; 0x64
 80010fc:	f000 fd8c 	bl	8001c18 <HAL_Delay>
    MPU6050_read_temp(&mpu6050);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff75 	bl	8000ff4 <MPU6050_read_temp>
    HAL_Delay(100); // Delays in between just for timing??
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f000 fd84 	bl	8001c18 <HAL_Delay>
    

    // Stuff below here for printing to serial
    gyro_buff[0] = mpu6050.gx;
 8001110:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001114:	b29b      	uxth	r3, r3
 8001116:	81bb      	strh	r3, [r7, #12]
    gyro_buff[1] = mpu6050.gy;
 8001118:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800111c:	b29b      	uxth	r3, r3
 800111e:	81fb      	strh	r3, [r7, #14]
    gyro_buff[2] = mpu6050.gz;
 8001120:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001124:	b29b      	uxth	r3, r3
 8001126:	823b      	strh	r3, [r7, #16]

    accel_buff[0] = mpu6050.ax;
 8001128:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800112c:	b29b      	uxth	r3, r3
 800112e:	80bb      	strh	r3, [r7, #4]
    accel_buff[1] = mpu6050.ay;
 8001130:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001134:	b29b      	uxth	r3, r3
 8001136:	80fb      	strh	r3, [r7, #6]
    accel_buff[2] = mpu6050.az;
 8001138:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800113c:	b29b      	uxth	r3, r3
 800113e:	813b      	strh	r3, [r7, #8]

    temp_buff = mpu6050.temp;    
 8001140:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001144:	b29b      	uxth	r3, r3
 8001146:	807b      	strh	r3, [r7, #2]

    HAL_UART_Transmit(&huart3, gyro_buff, 3, TIMEOUT_DEFAULT);
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	2203      	movs	r2, #3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <main+0x104>)
 8001154:	f004 ff26 	bl	8005fa4 <HAL_UART_Transmit>
    HAL_Delay(100); // Delays in between just for timing??
 8001158:	2064      	movs	r0, #100	; 0x64
 800115a:	f000 fd5d 	bl	8001c18 <HAL_Delay>
    HAL_UART_Transmit(&huart3, accel_buff, 3, TIMEOUT_DEFAULT);
 800115e:	1d39      	adds	r1, r7, #4
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	2203      	movs	r2, #3
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <main+0x104>)
 8001168:	f004 ff1c 	bl	8005fa4 <HAL_UART_Transmit>
    HAL_Delay(100); // Delays in between just for timing??
 800116c:	2064      	movs	r0, #100	; 0x64
 800116e:	f000 fd53 	bl	8001c18 <HAL_Delay>
    HAL_UART_Transmit(&huart3, &temp_buff, 1, TIMEOUT_DEFAULT);
 8001172:	1cb9      	adds	r1, r7, #2
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	2201      	movs	r2, #1
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <main+0x104>)
 800117c:	f004 ff12 	bl	8005fa4 <HAL_UART_Transmit>
    HAL_Delay(100); // Delays in between just for timing??
 8001180:	2064      	movs	r0, #100	; 0x64
 8001182:	f000 fd49 	bl	8001c18 <HAL_Delay>
    MPU6050_read_gyro(&mpu6050);
 8001186:	e7ab      	b.n	80010e0 <main+0x5c>
 8001188:	240000dc 	.word	0x240000dc

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b09c      	sub	sp, #112	; 0x70
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	224c      	movs	r2, #76	; 0x4c
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fd9a 	bl	8007cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2220      	movs	r2, #32
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f006 fd94 	bl	8007cd4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <SystemClock_Config+0xe4>)
 80011ae:	f04f 32ff 	mov.w	r2, #4294967295
 80011b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011b6:	2004      	movs	r0, #4
 80011b8:	f002 fb8c 	bl	80038d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <SystemClock_Config+0xe8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a2b      	ldr	r2, [pc, #172]	; (8001274 <SystemClock_Config+0xe8>)
 80011c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <SystemClock_Config+0xe8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011d8:	bf00      	nop
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <SystemClock_Config+0xe8>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011e6:	d1f8      	bne.n	80011da <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80011e8:	2321      	movs	r3, #33	; 0x21
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011f2:	2301      	movs	r3, #1
 80011f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f6:	2302      	movs	r3, #2
 80011f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fa:	2302      	movs	r3, #2
 80011fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001202:	2346      	movs	r3, #70	; 0x46
 8001204:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001206:	2302      	movs	r3, #2
 8001208:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800120a:	2304      	movs	r3, #4
 800120c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001212:	230c      	movs	r3, #12
 8001214:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001216:	2300      	movs	r3, #0
 8001218:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fbb0 	bl	8003988 <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800122e:	f000 f9d1 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	233f      	movs	r3, #63	; 0x3f
 8001234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001236:	2303      	movs	r3, #3
 8001238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001242:	2340      	movs	r3, #64	; 0x40
 8001244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001246:	2340      	movs	r3, #64	; 0x40
 8001248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800124a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001250:	2340      	movs	r3, #64	; 0x40
 8001252:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2107      	movs	r1, #7
 8001258:	4618      	mov	r0, r3
 800125a:	f002 ff99 	bl	8004190 <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001264:	f000 f9b6 	bl	80015d4 <Error_Handler>
  }
}
 8001268:	bf00      	nop
 800126a:	3770      	adds	r7, #112	; 0x70
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	58024400 	.word	0x58024400
 8001274:	58024800 	.word	0x58024800

08001278 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_I2C4_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MX_I2C4_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_I2C4_Init+0x74>)
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <MX_I2C4_Init+0x7c>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_I2C4_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_I2C4_Init+0x74>)
 8001290:	2201      	movs	r2, #1
 8001292:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_I2C4_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_I2C4_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C4_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_I2C4_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C4_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <MX_I2C4_Init+0x74>)
 80012b4:	f001 fd12 	bl	8002cdc <HAL_I2C_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80012be:	f000 f989 	bl	80015d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <MX_I2C4_Init+0x74>)
 80012c6:	f002 fa6d 	bl	80037a4 <HAL_I2CEx_ConfigAnalogFilter>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80012d0:	f000 f980 	bl	80015d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_I2C4_Init+0x74>)
 80012d8:	f002 faaf 	bl	800383a <HAL_I2CEx_ConfigDigitalFilter>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f000 f977 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	24000090 	.word	0x24000090
 80012f0:	58001c00 	.word	0x58001c00
 80012f4:	20b0ccff 	.word	0x20b0ccff

080012f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_USART3_UART_Init+0x90>)
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <MX_USART3_UART_Init+0x94>)
 8001300:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_USART3_UART_Init+0x90>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_USART3_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_USART3_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001342:	f004 fddf 	bl	8005f04 <HAL_UART_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800134c:	f000 f942 	bl	80015d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001354:	f006 fb9a 	bl	8007a8c <HAL_UARTEx_SetTxFifoThreshold>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800135e:	f000 f939 	bl	80015d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001366:	f006 fbcf 	bl	8007b08 <HAL_UARTEx_SetRxFifoThreshold>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001370:	f000 f930 	bl	80015d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001376:	f006 fb50 	bl	8007a1a <HAL_UARTEx_DisableFifoMode>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001380:	f000 f928 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	240000dc 	.word	0x240000dc
 800138c:	40004800 	.word	0x40004800

08001390 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	; 0x38
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	4b80      	ldr	r3, [pc, #512]	; (80015b8 <MX_GPIO_Init+0x218>)
 80013b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013bc:	4a7e      	ldr	r2, [pc, #504]	; (80015b8 <MX_GPIO_Init+0x218>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013c6:	4b7c      	ldr	r3, [pc, #496]	; (80015b8 <MX_GPIO_Init+0x218>)
 80013c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	623b      	str	r3, [r7, #32]
 80013d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d4:	4b78      	ldr	r3, [pc, #480]	; (80015b8 <MX_GPIO_Init+0x218>)
 80013d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013da:	4a77      	ldr	r2, [pc, #476]	; (80015b8 <MX_GPIO_Init+0x218>)
 80013dc:	f043 0320 	orr.w	r3, r3, #32
 80013e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013e4:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <MX_GPIO_Init+0x218>)
 80013e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	4b71      	ldr	r3, [pc, #452]	; (80015b8 <MX_GPIO_Init+0x218>)
 80013f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f8:	4a6f      	ldr	r2, [pc, #444]	; (80015b8 <MX_GPIO_Init+0x218>)
 80013fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001402:	4b6d      	ldr	r3, [pc, #436]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001404:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001412:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001416:	4a68      	ldr	r2, [pc, #416]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001420:	4b65      	ldr	r3, [pc, #404]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001422:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001430:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001434:	4a60      	ldr	r2, [pc, #384]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800143e:	4b5e      	ldr	r3, [pc, #376]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001440:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800144c:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <MX_GPIO_Init+0x218>)
 800144e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001452:	4a59      	ldr	r2, [pc, #356]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001458:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800145c:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <MX_GPIO_Init+0x218>)
 800145e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <MX_GPIO_Init+0x218>)
 800146c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001470:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800147a:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <MX_GPIO_Init+0x218>)
 800147c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001488:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <MX_GPIO_Init+0x218>)
 800148a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800148e:	4a4a      	ldr	r2, [pc, #296]	; (80015b8 <MX_GPIO_Init+0x218>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001498:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <MX_GPIO_Init+0x218>)
 800149a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ac:	4843      	ldr	r0, [pc, #268]	; (80015bc <MX_GPIO_Init+0x21c>)
 80014ae:	f001 fbfb 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f244 0101 	movw	r1, #16385	; 0x4001
 80014b8:	4841      	ldr	r0, [pc, #260]	; (80015c0 <MX_GPIO_Init+0x220>)
 80014ba:	f001 fbf5 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2102      	movs	r1, #2
 80014c2:	4840      	ldr	r0, [pc, #256]	; (80015c4 <MX_GPIO_Init+0x224>)
 80014c4:	f001 fbf0 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	483a      	ldr	r0, [pc, #232]	; (80015c8 <MX_GPIO_Init+0x228>)
 80014de:	f001 fa33 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80014e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	4830      	ldr	r0, [pc, #192]	; (80015bc <MX_GPIO_Init+0x21c>)
 80014fc:	f001 fa24 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001500:	f244 0301 	movw	r3, #16385	; 0x4001
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4829      	ldr	r0, [pc, #164]	; (80015c0 <MX_GPIO_Init+0x220>)
 800151a:	f001 fa15 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001522:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	4826      	ldr	r0, [pc, #152]	; (80015cc <MX_GPIO_Init+0x22c>)
 8001534:	f001 fa08 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4820      	ldr	r0, [pc, #128]	; (80015d0 <MX_GPIO_Init+0x230>)
 800154e:	f001 f9fb 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001564:	230a      	movs	r3, #10
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <MX_GPIO_Init+0x230>)
 8001570:	f001 f9ea 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001574:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	4810      	ldr	r0, [pc, #64]	; (80015d0 <MX_GPIO_Init+0x230>)
 800158e:	f001 f9db 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001592:	2302      	movs	r3, #2
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <MX_GPIO_Init+0x224>)
 80015aa:	f001 f9cd 	bl	8002948 <HAL_GPIO_Init>

}
 80015ae:	bf00      	nop
 80015b0:	3738      	adds	r7, #56	; 0x38
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58021400 	.word	0x58021400
 80015c0:	58020400 	.word	0x58020400
 80015c4:	58021000 	.word	0x58021000
 80015c8:	58020800 	.word	0x58020800
 80015cc:	58021800 	.word	0x58021800
 80015d0:	58020000 	.word	0x58020000

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>
	...

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_MspInit+0x30>)
 80015e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_MspInit+0x30>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_MspInit+0x30>)
 80015f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	58024400 	.word	0x58024400

08001614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0b8      	sub	sp, #224	; 0xe0
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	22b8      	movs	r2, #184	; 0xb8
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f006 fb4d 	bl	8007cd4 <memset>
  if(hi2c->Instance==I2C4)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a25      	ldr	r2, [pc, #148]	; (80016d4 <HAL_I2C_MspInit+0xc0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d142      	bne.n	80016ca <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001644:	2310      	movs	r3, #16
 8001646:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4618      	mov	r0, r3
 8001654:	f003 f928 	bl	80048a8 <HAL_RCCEx_PeriphCLKConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800165e:	f7ff ffb9 	bl	80015d4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_I2C_MspInit+0xc4>)
 8001664:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <HAL_I2C_MspInit+0xc4>)
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_I2C_MspInit+0xc4>)
 8001674:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001680:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001688:	2312      	movs	r3, #18
 800168a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800169a:	2304      	movs	r3, #4
 800169c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <HAL_I2C_MspInit+0xc8>)
 80016a8:	f001 f94e 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_I2C_MspInit+0xc4>)
 80016ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_I2C_MspInit+0xc4>)
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_I2C_MspInit+0xc4>)
 80016be:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	37e0      	adds	r7, #224	; 0xe0
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	58001c00 	.word	0x58001c00
 80016d8:	58024400 	.word	0x58024400
 80016dc:	58021400 	.word	0x58021400

080016e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0b8      	sub	sp, #224	; 0xe0
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	22b8      	movs	r2, #184	; 0xb8
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f006 fae7 	bl	8007cd4 <memset>
  if(huart->Instance==USART3)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <HAL_UART_MspInit+0xd0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d14a      	bne.n	80017a6 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001710:	2302      	movs	r3, #2
 8001712:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4618      	mov	r0, r3
 8001720:	f003 f8c2 	bl	80048a8 <HAL_RCCEx_PeriphCLKConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800172a:	f7ff ff53 	bl	80015d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <HAL_UART_MspInit+0xd4>)
 8001730:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001734:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_UART_MspInit+0xd4>)
 8001736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_UART_MspInit+0xd4>)
 8001740:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_UART_MspInit+0xd4>)
 800174e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001752:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <HAL_UART_MspInit+0xd4>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_UART_MspInit+0xd4>)
 800175e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800176a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800176e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001784:	2307      	movs	r3, #7
 8001786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800178e:	4619      	mov	r1, r3
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <HAL_UART_MspInit+0xd8>)
 8001792:	f001 f8d9 	bl	8002948 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2027      	movs	r0, #39	; 0x27
 800179c:	f000 fb3b 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017a0:	2027      	movs	r0, #39	; 0x27
 80017a2:	f000 fb52 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	37e0      	adds	r7, #224	; 0xe0
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40004800 	.word	0x40004800
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020c00 	.word	0x58020c00

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001808:	f000 f9e6 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <USART3_IRQHandler+0x10>)
 8001816:	f004 fc5b 	bl	80060d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	240000dc 	.word	0x240000dc

08001824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_kill>:

int _kill(int pid, int sig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800183e:	f006 fa0d 	bl	8007c5c <__errno>
 8001842:	4603      	mov	r3, r0
 8001844:	2216      	movs	r2, #22
 8001846:	601a      	str	r2, [r3, #0]
	return -1;
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_exit>:

void _exit (int status)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffe7 	bl	8001834 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001866:	e7fe      	b.n	8001866 <_exit+0x12>

08001868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e00a      	b.n	8001890 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800187a:	f3af 8000 	nop.w
 800187e:	4601      	mov	r1, r0
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf0      	blt.n	800187a <_read+0x12>
	}

return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e009      	b.n	80018c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf1      	blt.n	80018b4 <_write+0x12>
	}
	return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_close>:

int _close(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
	return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001902:	605a      	str	r2, [r3, #4]
	return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_isatty>:

int _isatty(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f006 f972 	bl	8007c5c <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	24100000 	.word	0x24100000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	2400016c 	.word	0x2400016c
 80019ac:	24000188 	.word	0x24000188

080019b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <SystemInit+0xd0>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a31      	ldr	r2, [pc, #196]	; (8001a80 <SystemInit+0xd0>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <SystemInit+0xd4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d807      	bhi.n	80019e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019d0:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <SystemInit+0xd4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 030f 	bic.w	r3, r3, #15
 80019d8:	4a2a      	ldr	r2, [pc, #168]	; (8001a84 <SystemInit+0xd4>)
 80019da:	f043 0303 	orr.w	r3, r3, #3
 80019de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <SystemInit+0xd8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <SystemInit+0xd8>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <SystemInit+0xd8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <SystemInit+0xd8>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4924      	ldr	r1, [pc, #144]	; (8001a88 <SystemInit+0xd8>)
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <SystemInit+0xdc>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <SystemInit+0xd4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <SystemInit+0xd4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 030f 	bic.w	r3, r3, #15
 8001a12:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <SystemInit+0xd4>)
 8001a14:	f043 0303 	orr.w	r3, r3, #3
 8001a18:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <SystemInit+0xd8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <SystemInit+0xd8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <SystemInit+0xd8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <SystemInit+0xd8>)
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <SystemInit+0xe0>)
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <SystemInit+0xd8>)
 8001a34:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <SystemInit+0xe4>)
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <SystemInit+0xd8>)
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <SystemInit+0xe8>)
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <SystemInit+0xd8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <SystemInit+0xd8>)
 8001a46:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <SystemInit+0xe8>)
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <SystemInit+0xd8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <SystemInit+0xd8>)
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <SystemInit+0xe8>)
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <SystemInit+0xd8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <SystemInit+0xd8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <SystemInit+0xd8>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <SystemInit+0xd8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <SystemInit+0xec>)
 8001a70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00
 8001a84:	52002000 	.word	0x52002000
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a90:	02020200 	.word	0x02020200
 8001a94:	01ff0000 	.word	0x01ff0000
 8001a98:	01010280 	.word	0x01010280
 8001a9c:	52004000 	.word	0x52004000

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa4:	f7ff ff84 	bl	80019b0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	; (8001ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	; (8001aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f006 f8dd 	bl	8007c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7ff fad7 	bl	8001084 <main>
  bx  lr
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001adc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ae0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001ae4:	08008e90 	.word	0x08008e90
  ldr r2, =_sbss
 8001ae8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001aec:	24000184 	.word	0x24000184

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afa:	2003      	movs	r0, #3
 8001afc:	f000 f980 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b00:	f002 fcfc 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_Init+0x68>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	4913      	ldr	r1, [pc, #76]	; (8001b60 <HAL_Init+0x6c>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_Init+0x68>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_Init+0x6c>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_Init+0x70>)
 8001b36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b38:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <HAL_Init+0x74>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 f814 	bl	8001b6c <HAL_InitTick>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e002      	b.n	8001b54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4e:	f7ff fd47 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	08008d74 	.word	0x08008d74
 8001b64:	24000004 	.word	0x24000004
 8001b68:	24000000 	.word	0x24000000

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_InitTick+0x60>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e021      	b.n	8001bc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <HAL_InitTick+0x64>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_InitTick+0x60>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f965 	bl	8001e66 <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f000 f92f 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_InitTick+0x68>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2400000c 	.word	0x2400000c
 8001bd0:	24000000 	.word	0x24000000
 8001bd4:	24000008 	.word	0x24000008

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	2400000c 	.word	0x2400000c
 8001bfc:	24000170 	.word	0x24000170

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	24000170 	.word	0x24000170

08001c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff ffee 	bl	8001c00 <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d005      	beq.n	8001c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_Delay+0x44>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c3e:	bf00      	nop
 8001c40:	f7ff ffde 	bl	8001c00 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d8f7      	bhi.n	8001c40 <HAL_Delay+0x28>
  {
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2400000c 	.word	0x2400000c

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	05fa0000 	.word	0x05fa0000

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff29 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff40 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff90 	bl	8001d54 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5f 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff33 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa4 	bl	8001dbc <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff feba 	bl	8001c00 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e2dc      	b.n	8002452 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d008      	beq.n	8001eb6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e2cd      	b.n	8002452 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a76      	ldr	r2, [pc, #472]	; (8002094 <HAL_DMA_Abort+0x214>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d04a      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a74      	ldr	r2, [pc, #464]	; (8002098 <HAL_DMA_Abort+0x218>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d045      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a73      	ldr	r2, [pc, #460]	; (800209c <HAL_DMA_Abort+0x21c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d040      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a71      	ldr	r2, [pc, #452]	; (80020a0 <HAL_DMA_Abort+0x220>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d03b      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a70      	ldr	r2, [pc, #448]	; (80020a4 <HAL_DMA_Abort+0x224>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d036      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <HAL_DMA_Abort+0x228>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d031      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6d      	ldr	r2, [pc, #436]	; (80020ac <HAL_DMA_Abort+0x22c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d02c      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a6b      	ldr	r2, [pc, #428]	; (80020b0 <HAL_DMA_Abort+0x230>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d027      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6a      	ldr	r2, [pc, #424]	; (80020b4 <HAL_DMA_Abort+0x234>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d022      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a68      	ldr	r2, [pc, #416]	; (80020b8 <HAL_DMA_Abort+0x238>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01d      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a67      	ldr	r2, [pc, #412]	; (80020bc <HAL_DMA_Abort+0x23c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d018      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a65      	ldr	r2, [pc, #404]	; (80020c0 <HAL_DMA_Abort+0x240>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a64      	ldr	r2, [pc, #400]	; (80020c4 <HAL_DMA_Abort+0x244>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00e      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a62      	ldr	r2, [pc, #392]	; (80020c8 <HAL_DMA_Abort+0x248>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d009      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a61      	ldr	r2, [pc, #388]	; (80020cc <HAL_DMA_Abort+0x24c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d004      	beq.n	8001f56 <HAL_DMA_Abort+0xd6>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a5f      	ldr	r2, [pc, #380]	; (80020d0 <HAL_DMA_Abort+0x250>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA_Abort+0xda>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_DMA_Abort+0xdc>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 021e 	bic.w	r2, r2, #30
 8001f6e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e00a      	b.n	8001f9e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 020e 	bic.w	r2, r2, #14
 8001f96:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a3c      	ldr	r2, [pc, #240]	; (8002094 <HAL_DMA_Abort+0x214>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d072      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a3a      	ldr	r2, [pc, #232]	; (8002098 <HAL_DMA_Abort+0x218>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d06d      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a39      	ldr	r2, [pc, #228]	; (800209c <HAL_DMA_Abort+0x21c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d068      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a37      	ldr	r2, [pc, #220]	; (80020a0 <HAL_DMA_Abort+0x220>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d063      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a36      	ldr	r2, [pc, #216]	; (80020a4 <HAL_DMA_Abort+0x224>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d05e      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <HAL_DMA_Abort+0x228>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d059      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a33      	ldr	r2, [pc, #204]	; (80020ac <HAL_DMA_Abort+0x22c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d054      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a31      	ldr	r2, [pc, #196]	; (80020b0 <HAL_DMA_Abort+0x230>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04f      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a30      	ldr	r2, [pc, #192]	; (80020b4 <HAL_DMA_Abort+0x234>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d04a      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2e      	ldr	r2, [pc, #184]	; (80020b8 <HAL_DMA_Abort+0x238>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d045      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2d      	ldr	r2, [pc, #180]	; (80020bc <HAL_DMA_Abort+0x23c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d040      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2b      	ldr	r2, [pc, #172]	; (80020c0 <HAL_DMA_Abort+0x240>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d03b      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2a      	ldr	r2, [pc, #168]	; (80020c4 <HAL_DMA_Abort+0x244>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d036      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <HAL_DMA_Abort+0x248>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d031      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a27      	ldr	r2, [pc, #156]	; (80020cc <HAL_DMA_Abort+0x24c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d02c      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <HAL_DMA_Abort+0x250>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d027      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <HAL_DMA_Abort+0x254>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d022      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <HAL_DMA_Abort+0x258>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01d      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a21      	ldr	r2, [pc, #132]	; (80020dc <HAL_DMA_Abort+0x25c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d018      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <HAL_DMA_Abort+0x260>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_DMA_Abort+0x264>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00e      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <HAL_DMA_Abort+0x268>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_DMA_Abort+0x26c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_DMA_Abort+0x20e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <HAL_DMA_Abort+0x270>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d132      	bne.n	80020f4 <HAL_DMA_Abort+0x274>
 800208e:	2301      	movs	r3, #1
 8002090:	e031      	b.n	80020f6 <HAL_DMA_Abort+0x276>
 8002092:	bf00      	nop
 8002094:	40020010 	.word	0x40020010
 8002098:	40020028 	.word	0x40020028
 800209c:	40020040 	.word	0x40020040
 80020a0:	40020058 	.word	0x40020058
 80020a4:	40020070 	.word	0x40020070
 80020a8:	40020088 	.word	0x40020088
 80020ac:	400200a0 	.word	0x400200a0
 80020b0:	400200b8 	.word	0x400200b8
 80020b4:	40020410 	.word	0x40020410
 80020b8:	40020428 	.word	0x40020428
 80020bc:	40020440 	.word	0x40020440
 80020c0:	40020458 	.word	0x40020458
 80020c4:	40020470 	.word	0x40020470
 80020c8:	40020488 	.word	0x40020488
 80020cc:	400204a0 	.word	0x400204a0
 80020d0:	400204b8 	.word	0x400204b8
 80020d4:	58025408 	.word	0x58025408
 80020d8:	5802541c 	.word	0x5802541c
 80020dc:	58025430 	.word	0x58025430
 80020e0:	58025444 	.word	0x58025444
 80020e4:	58025458 	.word	0x58025458
 80020e8:	5802546c 	.word	0x5802546c
 80020ec:	58025480 	.word	0x58025480
 80020f0:	58025494 	.word	0x58025494
 80020f4:	2300      	movs	r3, #0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002108:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6d      	ldr	r2, [pc, #436]	; (80022c4 <HAL_DMA_Abort+0x444>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d04a      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6b      	ldr	r2, [pc, #428]	; (80022c8 <HAL_DMA_Abort+0x448>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d045      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6a      	ldr	r2, [pc, #424]	; (80022cc <HAL_DMA_Abort+0x44c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d040      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a68      	ldr	r2, [pc, #416]	; (80022d0 <HAL_DMA_Abort+0x450>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d03b      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a67      	ldr	r2, [pc, #412]	; (80022d4 <HAL_DMA_Abort+0x454>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d036      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a65      	ldr	r2, [pc, #404]	; (80022d8 <HAL_DMA_Abort+0x458>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d031      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a64      	ldr	r2, [pc, #400]	; (80022dc <HAL_DMA_Abort+0x45c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d02c      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a62      	ldr	r2, [pc, #392]	; (80022e0 <HAL_DMA_Abort+0x460>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d027      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a61      	ldr	r2, [pc, #388]	; (80022e4 <HAL_DMA_Abort+0x464>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d022      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a5f      	ldr	r2, [pc, #380]	; (80022e8 <HAL_DMA_Abort+0x468>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01d      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a5e      	ldr	r2, [pc, #376]	; (80022ec <HAL_DMA_Abort+0x46c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d018      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5c      	ldr	r2, [pc, #368]	; (80022f0 <HAL_DMA_Abort+0x470>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5b      	ldr	r2, [pc, #364]	; (80022f4 <HAL_DMA_Abort+0x474>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00e      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a59      	ldr	r2, [pc, #356]	; (80022f8 <HAL_DMA_Abort+0x478>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d009      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_DMA_Abort+0x47c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_DMA_Abort+0x32a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_DMA_Abort+0x480>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d108      	bne.n	80021bc <HAL_DMA_Abort+0x33c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e007      	b.n	80021cc <HAL_DMA_Abort+0x34c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021cc:	e013      	b.n	80021f6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ce:	f7ff fd17 	bl	8001c00 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d90c      	bls.n	80021f6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2203      	movs	r2, #3
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e12d      	b.n	8002452 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1e5      	bne.n	80021ce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a2f      	ldr	r2, [pc, #188]	; (80022c4 <HAL_DMA_Abort+0x444>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04a      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <HAL_DMA_Abort+0x448>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d045      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a2c      	ldr	r2, [pc, #176]	; (80022cc <HAL_DMA_Abort+0x44c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d040      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <HAL_DMA_Abort+0x450>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d03b      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <HAL_DMA_Abort+0x454>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d036      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_DMA_Abort+0x458>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d031      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a26      	ldr	r2, [pc, #152]	; (80022dc <HAL_DMA_Abort+0x45c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d02c      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <HAL_DMA_Abort+0x460>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d027      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <HAL_DMA_Abort+0x464>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d022      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_DMA_Abort+0x468>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01d      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a20      	ldr	r2, [pc, #128]	; (80022ec <HAL_DMA_Abort+0x46c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d018      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_DMA_Abort+0x470>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_DMA_Abort+0x474>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00e      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_DMA_Abort+0x478>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_DMA_Abort+0x47c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_DMA_Abort+0x422>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <HAL_DMA_Abort+0x480>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_DMA_Abort+0x426>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_DMA_Abort+0x428>
 80022a6:	2300      	movs	r3, #0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d02b      	beq.n	8002304 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	223f      	movs	r2, #63	; 0x3f
 80022bc:	409a      	lsls	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	e02a      	b.n	800231a <HAL_DMA_Abort+0x49a>
 80022c4:	40020010 	.word	0x40020010
 80022c8:	40020028 	.word	0x40020028
 80022cc:	40020040 	.word	0x40020040
 80022d0:	40020058 	.word	0x40020058
 80022d4:	40020070 	.word	0x40020070
 80022d8:	40020088 	.word	0x40020088
 80022dc:	400200a0 	.word	0x400200a0
 80022e0:	400200b8 	.word	0x400200b8
 80022e4:	40020410 	.word	0x40020410
 80022e8:	40020428 	.word	0x40020428
 80022ec:	40020440 	.word	0x40020440
 80022f0:	40020458 	.word	0x40020458
 80022f4:	40020470 	.word	0x40020470
 80022f8:	40020488 	.word	0x40020488
 80022fc:	400204a0 	.word	0x400204a0
 8002300:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	2201      	movs	r2, #1
 8002314:	409a      	lsls	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a4f      	ldr	r2, [pc, #316]	; (800245c <HAL_DMA_Abort+0x5dc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d072      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_DMA_Abort+0x5e0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d06d      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_DMA_Abort+0x5e4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d068      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a4a      	ldr	r2, [pc, #296]	; (8002468 <HAL_DMA_Abort+0x5e8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d063      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a49      	ldr	r2, [pc, #292]	; (800246c <HAL_DMA_Abort+0x5ec>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d05e      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a47      	ldr	r2, [pc, #284]	; (8002470 <HAL_DMA_Abort+0x5f0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d059      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a46      	ldr	r2, [pc, #280]	; (8002474 <HAL_DMA_Abort+0x5f4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d054      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a44      	ldr	r2, [pc, #272]	; (8002478 <HAL_DMA_Abort+0x5f8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d04f      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a43      	ldr	r2, [pc, #268]	; (800247c <HAL_DMA_Abort+0x5fc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d04a      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a41      	ldr	r2, [pc, #260]	; (8002480 <HAL_DMA_Abort+0x600>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d045      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a40      	ldr	r2, [pc, #256]	; (8002484 <HAL_DMA_Abort+0x604>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d040      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3e      	ldr	r2, [pc, #248]	; (8002488 <HAL_DMA_Abort+0x608>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d03b      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3d      	ldr	r2, [pc, #244]	; (800248c <HAL_DMA_Abort+0x60c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d036      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <HAL_DMA_Abort+0x610>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d031      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3a      	ldr	r2, [pc, #232]	; (8002494 <HAL_DMA_Abort+0x614>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d02c      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a38      	ldr	r2, [pc, #224]	; (8002498 <HAL_DMA_Abort+0x618>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d027      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a37      	ldr	r2, [pc, #220]	; (800249c <HAL_DMA_Abort+0x61c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d022      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a35      	ldr	r2, [pc, #212]	; (80024a0 <HAL_DMA_Abort+0x620>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01d      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a34      	ldr	r2, [pc, #208]	; (80024a4 <HAL_DMA_Abort+0x624>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d018      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a32      	ldr	r2, [pc, #200]	; (80024a8 <HAL_DMA_Abort+0x628>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a31      	ldr	r2, [pc, #196]	; (80024ac <HAL_DMA_Abort+0x62c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00e      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <HAL_DMA_Abort+0x630>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <HAL_DMA_Abort+0x634>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_DMA_Abort+0x58a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <HAL_DMA_Abort+0x638>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_DMA_Abort+0x58e>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_DMA_Abort+0x590>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d015      	beq.n	8002440 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800241c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002434:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800243e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40020010 	.word	0x40020010
 8002460:	40020028 	.word	0x40020028
 8002464:	40020040 	.word	0x40020040
 8002468:	40020058 	.word	0x40020058
 800246c:	40020070 	.word	0x40020070
 8002470:	40020088 	.word	0x40020088
 8002474:	400200a0 	.word	0x400200a0
 8002478:	400200b8 	.word	0x400200b8
 800247c:	40020410 	.word	0x40020410
 8002480:	40020428 	.word	0x40020428
 8002484:	40020440 	.word	0x40020440
 8002488:	40020458 	.word	0x40020458
 800248c:	40020470 	.word	0x40020470
 8002490:	40020488 	.word	0x40020488
 8002494:	400204a0 	.word	0x400204a0
 8002498:	400204b8 	.word	0x400204b8
 800249c:	58025408 	.word	0x58025408
 80024a0:	5802541c 	.word	0x5802541c
 80024a4:	58025430 	.word	0x58025430
 80024a8:	58025444 	.word	0x58025444
 80024ac:	58025458 	.word	0x58025458
 80024b0:	5802546c 	.word	0x5802546c
 80024b4:	58025480 	.word	0x58025480
 80024b8:	58025494 	.word	0x58025494

080024bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e237      	b.n	800293e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d004      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e22c      	b.n	800293e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5c      	ldr	r2, [pc, #368]	; (800265c <HAL_DMA_Abort_IT+0x1a0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d04a      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5b      	ldr	r2, [pc, #364]	; (8002660 <HAL_DMA_Abort_IT+0x1a4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d045      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a59      	ldr	r2, [pc, #356]	; (8002664 <HAL_DMA_Abort_IT+0x1a8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d040      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_DMA_Abort_IT+0x1ac>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d03b      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_DMA_Abort_IT+0x1b0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d036      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a55      	ldr	r2, [pc, #340]	; (8002670 <HAL_DMA_Abort_IT+0x1b4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d031      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a53      	ldr	r2, [pc, #332]	; (8002674 <HAL_DMA_Abort_IT+0x1b8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d02c      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_DMA_Abort_IT+0x1bc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d027      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a50      	ldr	r2, [pc, #320]	; (800267c <HAL_DMA_Abort_IT+0x1c0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d022      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a4f      	ldr	r2, [pc, #316]	; (8002680 <HAL_DMA_Abort_IT+0x1c4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d01d      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a4d      	ldr	r2, [pc, #308]	; (8002684 <HAL_DMA_Abort_IT+0x1c8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d018      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a4c      	ldr	r2, [pc, #304]	; (8002688 <HAL_DMA_Abort_IT+0x1cc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a4a      	ldr	r2, [pc, #296]	; (800268c <HAL_DMA_Abort_IT+0x1d0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00e      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a49      	ldr	r2, [pc, #292]	; (8002690 <HAL_DMA_Abort_IT+0x1d4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a47      	ldr	r2, [pc, #284]	; (8002694 <HAL_DMA_Abort_IT+0x1d8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a46      	ldr	r2, [pc, #280]	; (8002698 <HAL_DMA_Abort_IT+0x1dc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d101      	bne.n	8002588 <HAL_DMA_Abort_IT+0xcc>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_DMA_Abort_IT+0xce>
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8086 	beq.w	800269c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2204      	movs	r2, #4
 8002594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2f      	ldr	r2, [pc, #188]	; (800265c <HAL_DMA_Abort_IT+0x1a0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d04a      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2e      	ldr	r2, [pc, #184]	; (8002660 <HAL_DMA_Abort_IT+0x1a4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d045      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <HAL_DMA_Abort_IT+0x1a8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d040      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2b      	ldr	r2, [pc, #172]	; (8002668 <HAL_DMA_Abort_IT+0x1ac>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d03b      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a29      	ldr	r2, [pc, #164]	; (800266c <HAL_DMA_Abort_IT+0x1b0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d036      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a28      	ldr	r2, [pc, #160]	; (8002670 <HAL_DMA_Abort_IT+0x1b4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d031      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a26      	ldr	r2, [pc, #152]	; (8002674 <HAL_DMA_Abort_IT+0x1b8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02c      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a25      	ldr	r2, [pc, #148]	; (8002678 <HAL_DMA_Abort_IT+0x1bc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d027      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a23      	ldr	r2, [pc, #140]	; (800267c <HAL_DMA_Abort_IT+0x1c0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d022      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a22      	ldr	r2, [pc, #136]	; (8002680 <HAL_DMA_Abort_IT+0x1c4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d01d      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a20      	ldr	r2, [pc, #128]	; (8002684 <HAL_DMA_Abort_IT+0x1c8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d018      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_DMA_Abort_IT+0x1cc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_DMA_Abort_IT+0x1d0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00e      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <HAL_DMA_Abort_IT+0x1d4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_DMA_Abort_IT+0x1d8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_DMA_Abort_IT+0x17c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a19      	ldr	r2, [pc, #100]	; (8002698 <HAL_DMA_Abort_IT+0x1dc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d108      	bne.n	800264a <HAL_DMA_Abort_IT+0x18e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e178      	b.n	800293c <HAL_DMA_Abort_IT+0x480>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e16f      	b.n	800293c <HAL_DMA_Abort_IT+0x480>
 800265c:	40020010 	.word	0x40020010
 8002660:	40020028 	.word	0x40020028
 8002664:	40020040 	.word	0x40020040
 8002668:	40020058 	.word	0x40020058
 800266c:	40020070 	.word	0x40020070
 8002670:	40020088 	.word	0x40020088
 8002674:	400200a0 	.word	0x400200a0
 8002678:	400200b8 	.word	0x400200b8
 800267c:	40020410 	.word	0x40020410
 8002680:	40020428 	.word	0x40020428
 8002684:	40020440 	.word	0x40020440
 8002688:	40020458 	.word	0x40020458
 800268c:	40020470 	.word	0x40020470
 8002690:	40020488 	.word	0x40020488
 8002694:	400204a0 	.word	0x400204a0
 8002698:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 020e 	bic.w	r2, r2, #14
 80026aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a6c      	ldr	r2, [pc, #432]	; (8002864 <HAL_DMA_Abort_IT+0x3a8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d04a      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a6b      	ldr	r2, [pc, #428]	; (8002868 <HAL_DMA_Abort_IT+0x3ac>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d045      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a69      	ldr	r2, [pc, #420]	; (800286c <HAL_DMA_Abort_IT+0x3b0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d040      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a68      	ldr	r2, [pc, #416]	; (8002870 <HAL_DMA_Abort_IT+0x3b4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d03b      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a66      	ldr	r2, [pc, #408]	; (8002874 <HAL_DMA_Abort_IT+0x3b8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d036      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a65      	ldr	r2, [pc, #404]	; (8002878 <HAL_DMA_Abort_IT+0x3bc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d031      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a63      	ldr	r2, [pc, #396]	; (800287c <HAL_DMA_Abort_IT+0x3c0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02c      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a62      	ldr	r2, [pc, #392]	; (8002880 <HAL_DMA_Abort_IT+0x3c4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d027      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a60      	ldr	r2, [pc, #384]	; (8002884 <HAL_DMA_Abort_IT+0x3c8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a5f      	ldr	r2, [pc, #380]	; (8002888 <HAL_DMA_Abort_IT+0x3cc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d01d      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a5d      	ldr	r2, [pc, #372]	; (800288c <HAL_DMA_Abort_IT+0x3d0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a5c      	ldr	r2, [pc, #368]	; (8002890 <HAL_DMA_Abort_IT+0x3d4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5a      	ldr	r2, [pc, #360]	; (8002894 <HAL_DMA_Abort_IT+0x3d8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a59      	ldr	r2, [pc, #356]	; (8002898 <HAL_DMA_Abort_IT+0x3dc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_DMA_Abort_IT+0x3e0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_DMA_Abort_IT+0x290>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a56      	ldr	r2, [pc, #344]	; (80028a0 <HAL_DMA_Abort_IT+0x3e4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d108      	bne.n	800275e <HAL_DMA_Abort_IT+0x2a2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e007      	b.n	800276e <HAL_DMA_Abort_IT+0x2b2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a3c      	ldr	r2, [pc, #240]	; (8002864 <HAL_DMA_Abort_IT+0x3a8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d072      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3a      	ldr	r2, [pc, #232]	; (8002868 <HAL_DMA_Abort_IT+0x3ac>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d06d      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a39      	ldr	r2, [pc, #228]	; (800286c <HAL_DMA_Abort_IT+0x3b0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d068      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a37      	ldr	r2, [pc, #220]	; (8002870 <HAL_DMA_Abort_IT+0x3b4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d063      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a36      	ldr	r2, [pc, #216]	; (8002874 <HAL_DMA_Abort_IT+0x3b8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d05e      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a34      	ldr	r2, [pc, #208]	; (8002878 <HAL_DMA_Abort_IT+0x3bc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d059      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a33      	ldr	r2, [pc, #204]	; (800287c <HAL_DMA_Abort_IT+0x3c0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d054      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a31      	ldr	r2, [pc, #196]	; (8002880 <HAL_DMA_Abort_IT+0x3c4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d04f      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a30      	ldr	r2, [pc, #192]	; (8002884 <HAL_DMA_Abort_IT+0x3c8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d04a      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2e      	ldr	r2, [pc, #184]	; (8002888 <HAL_DMA_Abort_IT+0x3cc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d045      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a2d      	ldr	r2, [pc, #180]	; (800288c <HAL_DMA_Abort_IT+0x3d0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d040      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <HAL_DMA_Abort_IT+0x3d4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d03b      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <HAL_DMA_Abort_IT+0x3d8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d036      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a28      	ldr	r2, [pc, #160]	; (8002898 <HAL_DMA_Abort_IT+0x3dc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d031      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a27      	ldr	r2, [pc, #156]	; (800289c <HAL_DMA_Abort_IT+0x3e0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d02c      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <HAL_DMA_Abort_IT+0x3e4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d027      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a24      	ldr	r2, [pc, #144]	; (80028a4 <HAL_DMA_Abort_IT+0x3e8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d022      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a22      	ldr	r2, [pc, #136]	; (80028a8 <HAL_DMA_Abort_IT+0x3ec>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01d      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <HAL_DMA_Abort_IT+0x3f0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d018      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_DMA_Abort_IT+0x3f4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_DMA_Abort_IT+0x3f8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00e      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_DMA_Abort_IT+0x3fc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_DMA_Abort_IT+0x400>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_DMA_Abort_IT+0x3a2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_DMA_Abort_IT+0x404>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d132      	bne.n	80028c4 <HAL_DMA_Abort_IT+0x408>
 800285e:	2301      	movs	r3, #1
 8002860:	e031      	b.n	80028c6 <HAL_DMA_Abort_IT+0x40a>
 8002862:	bf00      	nop
 8002864:	40020010 	.word	0x40020010
 8002868:	40020028 	.word	0x40020028
 800286c:	40020040 	.word	0x40020040
 8002870:	40020058 	.word	0x40020058
 8002874:	40020070 	.word	0x40020070
 8002878:	40020088 	.word	0x40020088
 800287c:	400200a0 	.word	0x400200a0
 8002880:	400200b8 	.word	0x400200b8
 8002884:	40020410 	.word	0x40020410
 8002888:	40020428 	.word	0x40020428
 800288c:	40020440 	.word	0x40020440
 8002890:	40020458 	.word	0x40020458
 8002894:	40020470 	.word	0x40020470
 8002898:	40020488 	.word	0x40020488
 800289c:	400204a0 	.word	0x400204a0
 80028a0:	400204b8 	.word	0x400204b8
 80028a4:	58025408 	.word	0x58025408
 80028a8:	5802541c 	.word	0x5802541c
 80028ac:	58025430 	.word	0x58025430
 80028b0:	58025444 	.word	0x58025444
 80028b4:	58025458 	.word	0x58025458
 80028b8:	5802546c 	.word	0x5802546c
 80028bc:	58025480 	.word	0x58025480
 80028c0:	58025494 	.word	0x58025494
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d028      	beq.n	800291c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2201      	movs	r2, #1
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002910:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800291a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002956:	4b89      	ldr	r3, [pc, #548]	; (8002b7c <HAL_GPIO_Init+0x234>)
 8002958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800295a:	e194      	b.n	8002c86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2101      	movs	r1, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8186 	beq.w	8002c80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d005      	beq.n	800298c <HAL_GPIO_Init+0x44>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d130      	bne.n	80029ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029c2:	2201      	movs	r2, #1
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 0201 	and.w	r2, r3, #1
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d017      	beq.n	8002a2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d123      	bne.n	8002a7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	08da      	lsrs	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3208      	adds	r2, #8
 8002a78:	69b9      	ldr	r1, [r7, #24]
 8002a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	2203      	movs	r2, #3
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0203 	and.w	r2, r3, #3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80e0 	beq.w	8002c80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac0:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_GPIO_Init+0x238>)
 8002ac2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002ac6:	4a2e      	ldr	r2, [pc, #184]	; (8002b80 <HAL_GPIO_Init+0x238>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_GPIO_Init+0x238>)
 8002ad2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ade:	4a29      	ldr	r2, [pc, #164]	; (8002b84 <HAL_GPIO_Init+0x23c>)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	220f      	movs	r2, #15
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a20      	ldr	r2, [pc, #128]	; (8002b88 <HAL_GPIO_Init+0x240>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d052      	beq.n	8002bb0 <HAL_GPIO_Init+0x268>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <HAL_GPIO_Init+0x244>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d031      	beq.n	8002b76 <HAL_GPIO_Init+0x22e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <HAL_GPIO_Init+0x248>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02b      	beq.n	8002b72 <HAL_GPIO_Init+0x22a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_GPIO_Init+0x24c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d025      	beq.n	8002b6e <HAL_GPIO_Init+0x226>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <HAL_GPIO_Init+0x250>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01f      	beq.n	8002b6a <HAL_GPIO_Init+0x222>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <HAL_GPIO_Init+0x254>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d019      	beq.n	8002b66 <HAL_GPIO_Init+0x21e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <HAL_GPIO_Init+0x258>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_GPIO_Init+0x21a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <HAL_GPIO_Init+0x25c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00d      	beq.n	8002b5e <HAL_GPIO_Init+0x216>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_GPIO_Init+0x260>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <HAL_GPIO_Init+0x212>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a17      	ldr	r2, [pc, #92]	; (8002bac <HAL_GPIO_Init+0x264>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_GPIO_Init+0x20e>
 8002b52:	2309      	movs	r3, #9
 8002b54:	e02d      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b56:	230a      	movs	r3, #10
 8002b58:	e02b      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	e029      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b5e:	2307      	movs	r3, #7
 8002b60:	e027      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b62:	2306      	movs	r3, #6
 8002b64:	e025      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b66:	2305      	movs	r3, #5
 8002b68:	e023      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	e021      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e01f      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e01d      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e01b      	b.n	8002bb2 <HAL_GPIO_Init+0x26a>
 8002b7a:	bf00      	nop
 8002b7c:	58000080 	.word	0x58000080
 8002b80:	58024400 	.word	0x58024400
 8002b84:	58000400 	.word	0x58000400
 8002b88:	58020000 	.word	0x58020000
 8002b8c:	58020400 	.word	0x58020400
 8002b90:	58020800 	.word	0x58020800
 8002b94:	58020c00 	.word	0x58020c00
 8002b98:	58021000 	.word	0x58021000
 8002b9c:	58021400 	.word	0x58021400
 8002ba0:	58021800 	.word	0x58021800
 8002ba4:	58021c00 	.word	0x58021c00
 8002ba8:	58022000 	.word	0x58022000
 8002bac:	58022400 	.word	0x58022400
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	f002 0203 	and.w	r2, r2, #3
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	4093      	lsls	r3, r2
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc2:	4938      	ldr	r1, [pc, #224]	; (8002ca4 <HAL_GPIO_Init+0x35c>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3301      	adds	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f ae63 	bne.w	800295c <HAL_GPIO_Init+0x14>
  }
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	3724      	adds	r7, #36	; 0x24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	58000400 	.word	0x58000400

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002cc4:	e003      	b.n	8002cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	041a      	lsls	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e07f      	b.n	8002dee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fe fc86 	bl	8001614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	e006      	b.n	8002d64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d104      	bne.n	8002d76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_I2C_Init+0x11c>)
 8002d82:	430b      	orrs	r3, r1
 8002d84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69d9      	ldr	r1, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	02008000 	.word	0x02008000

08002dfc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	813b      	strh	r3, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	f040 80f9 	bne.w	8003016 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_I2C_Mem_Write+0x34>
 8002e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0ed      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_I2C_Mem_Write+0x4e>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0e6      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e52:	f7fe fed5 	bl	8001c00 <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2319      	movs	r3, #25
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fac3 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d1      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2221      	movs	r2, #33	; 0x21
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2240      	movs	r2, #64	; 0x40
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a3a      	ldr	r2, [r7, #32]
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e9c:	88f8      	ldrh	r0, [r7, #6]
 8002e9e:	893a      	ldrh	r2, [r7, #8]
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	4603      	mov	r3, r0
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f9d3 	bl	8003258 <I2C_RequestMemoryWrite>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0a9      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2bff      	cmp	r3, #255	; 0xff
 8002ecc:	d90e      	bls.n	8002eec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	22ff      	movs	r2, #255	; 0xff
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	8979      	ldrh	r1, [r7, #10]
 8002edc:	2300      	movs	r3, #0
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fc2b 	bl	8003740 <I2C_TransferConfig>
 8002eea:	e00f      	b.n	8002f0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	8979      	ldrh	r1, [r7, #10]
 8002efe:	2300      	movs	r3, #0
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fc1a 	bl	8003740 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 faad 	bl	8003470 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e07b      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d034      	beq.n	8002fc4 <HAL_I2C_Mem_Write+0x1c8>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d130      	bne.n	8002fc4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fa3f 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e04d      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2bff      	cmp	r3, #255	; 0xff
 8002f84:	d90e      	bls.n	8002fa4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	8979      	ldrh	r1, [r7, #10]
 8002f94:	2300      	movs	r3, #0
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fbcf 	bl	8003740 <I2C_TransferConfig>
 8002fa2:	e00f      	b.n	8002fc4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	8979      	ldrh	r1, [r7, #10]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fbbe 	bl	8003740 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d19e      	bne.n	8002f0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fa8c 	bl	80034f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e01a      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_I2C_Mem_Write+0x224>)
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	fe00e800 	.word	0xfe00e800

08003024 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	817b      	strh	r3, [r7, #10]
 8003036:	460b      	mov	r3, r1
 8003038:	813b      	strh	r3, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b20      	cmp	r3, #32
 8003048:	f040 80fd 	bne.w	8003246 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_I2C_Mem_Read+0x34>
 8003052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0f1      	b.n	8003248 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_I2C_Mem_Read+0x4e>
 800306e:	2302      	movs	r3, #2
 8003070:	e0ea      	b.n	8003248 <HAL_I2C_Mem_Read+0x224>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800307a:	f7fe fdc1 	bl	8001c00 <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2319      	movs	r3, #25
 8003086:	2201      	movs	r2, #1
 8003088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f9af 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0d5      	b.n	8003248 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2222      	movs	r2, #34	; 0x22
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030c4:	88f8      	ldrh	r0, [r7, #6]
 80030c6:	893a      	ldrh	r2, [r7, #8]
 80030c8:	8979      	ldrh	r1, [r7, #10]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	4603      	mov	r3, r0
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f913 	bl	8003300 <I2C_RequestMemoryRead>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0ad      	b.n	8003248 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2bff      	cmp	r3, #255	; 0xff
 80030f4:	d90e      	bls.n	8003114 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	22ff      	movs	r2, #255	; 0xff
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	b2da      	uxtb	r2, r3
 8003102:	8979      	ldrh	r1, [r7, #10]
 8003104:	4b52      	ldr	r3, [pc, #328]	; (8003250 <HAL_I2C_Mem_Read+0x22c>)
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fb17 	bl	8003740 <I2C_TransferConfig>
 8003112:	e00f      	b.n	8003134 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	b2da      	uxtb	r2, r3
 8003124:	8979      	ldrh	r1, [r7, #10]
 8003126:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <HAL_I2C_Mem_Read+0x22c>)
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fb06 	bl	8003740 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	2200      	movs	r2, #0
 800313c:	2104      	movs	r1, #4
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f956 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07c      	b.n	8003248 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d034      	beq.n	80031f4 <HAL_I2C_Mem_Read+0x1d0>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	2b00      	cmp	r3, #0
 8003190:	d130      	bne.n	80031f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	2200      	movs	r2, #0
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f927 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e04d      	b.n	8003248 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	d90e      	bls.n	80031d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	8979      	ldrh	r1, [r7, #10]
 80031c4:	2300      	movs	r3, #0
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 fab7 	bl	8003740 <I2C_TransferConfig>
 80031d2:	e00f      	b.n	80031f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	2300      	movs	r3, #0
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 faa6 	bl	8003740 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d19a      	bne.n	8003134 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f974 	bl	80034f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e01a      	b.n	8003248 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2220      	movs	r2, #32
 8003218:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_I2C_Mem_Read+0x230>)
 8003226:	400b      	ands	r3, r1
 8003228:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	80002400 	.word	0x80002400
 8003254:	fe00e800 	.word	0xfe00e800

08003258 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	4608      	mov	r0, r1
 8003262:	4611      	mov	r1, r2
 8003264:	461a      	mov	r2, r3
 8003266:	4603      	mov	r3, r0
 8003268:	817b      	strh	r3, [r7, #10]
 800326a:	460b      	mov	r3, r1
 800326c:	813b      	strh	r3, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	8979      	ldrh	r1, [r7, #10]
 8003278:	4b20      	ldr	r3, [pc, #128]	; (80032fc <I2C_RequestMemoryWrite+0xa4>)
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fa5d 	bl	8003740 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	69b9      	ldr	r1, [r7, #24]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f8f0 	bl	8003470 <I2C_WaitOnTXISFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e02c      	b.n	80032f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032a0:	893b      	ldrh	r3, [r7, #8]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
 80032aa:	e015      	b.n	80032d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	69b9      	ldr	r1, [r7, #24]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f8d6 	bl	8003470 <I2C_WaitOnTXISFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e012      	b.n	80032f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ce:	893b      	ldrh	r3, [r7, #8]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2200      	movs	r2, #0
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f884 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	80002000 	.word	0x80002000

08003300 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	4608      	mov	r0, r1
 800330a:	4611      	mov	r1, r2
 800330c:	461a      	mov	r2, r3
 800330e:	4603      	mov	r3, r0
 8003310:	817b      	strh	r3, [r7, #10]
 8003312:	460b      	mov	r3, r1
 8003314:	813b      	strh	r3, [r7, #8]
 8003316:	4613      	mov	r3, r2
 8003318:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <I2C_RequestMemoryRead+0xa4>)
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2300      	movs	r3, #0
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fa0a 	bl	8003740 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	69b9      	ldr	r1, [r7, #24]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f89d 	bl	8003470 <I2C_WaitOnTXISFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e02c      	b.n	800339a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003346:	893b      	ldrh	r3, [r7, #8]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
 8003350:	e015      	b.n	800337e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003352:	893b      	ldrh	r3, [r7, #8]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	b29b      	uxth	r3, r3
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	69b9      	ldr	r1, [r7, #24]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f883 	bl	8003470 <I2C_WaitOnTXISFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e012      	b.n	800339a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003374:	893b      	ldrh	r3, [r7, #8]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2200      	movs	r2, #0
 8003386:	2140      	movs	r1, #64	; 0x40
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f831 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	80002000 	.word	0x80002000

080033a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d103      	bne.n	80033c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2200      	movs	r2, #0
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d007      	beq.n	80033e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	619a      	str	r2, [r3, #24]
  }
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003400:	e022      	b.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d01e      	beq.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe fbf9 	bl	8001c00 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d113      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e00f      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4013      	ands	r3, r2
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	429a      	cmp	r2, r3
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	429a      	cmp	r2, r3
 8003464:	d0cd      	beq.n	8003402 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800347c:	e02c      	b.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f870 	bl	8003568 <I2C_IsErrorOccurred>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e02a      	b.n	80034e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d01e      	beq.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe fbb1 	bl	8001c00 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d113      	bne.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e007      	b.n	80034e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d1cb      	bne.n	800347e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fc:	e028      	b.n	8003550 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f830 	bl	8003568 <I2C_IsErrorOccurred>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e026      	b.n	8003560 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7fe fb75 	bl	8001c00 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	d302      	bcc.n	8003528 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d113      	bne.n	8003550 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e007      	b.n	8003560 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b20      	cmp	r3, #32
 800355c:	d1cf      	bne.n	80034fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d075      	beq.n	8003680 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2210      	movs	r2, #16
 800359a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800359c:	e056      	b.n	800364c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d052      	beq.n	800364c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fe fb2b 	bl	8001c00 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_IsErrorOccurred+0x54>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d147      	bne.n	800364c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035de:	d12e      	bne.n	800363e <I2C_IsErrorOccurred+0xd6>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e6:	d02a      	beq.n	800363e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d027      	beq.n	800363e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035fc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035fe:	f7fe faff 	bl	8001c00 <HAL_GetTick>
 8003602:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003604:	e01b      	b.n	800363e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003606:	f7fe fafb 	bl	8001c00 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b19      	cmp	r3, #25
 8003612:	d914      	bls.n	800363e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b20      	cmp	r3, #32
 800364a:	d1dc      	bne.n	8003606 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b20      	cmp	r3, #32
 8003658:	d003      	beq.n	8003662 <I2C_IsErrorOccurred+0xfa>
 800365a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800365e:	2b00      	cmp	r3, #0
 8003660:	d09d      	beq.n	800359e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2220      	movs	r2, #32
 8003670:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f043 0304 	orr.w	r3, r3, #4
 8003678:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	f043 0308 	orr.w	r3, r3, #8
 80036ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01c      	beq.n	8003730 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f7ff fe56 	bl	80033a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <I2C_IsErrorOccurred+0x1d4>)
 8003708:	400b      	ands	r3, r1
 800370a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	431a      	orrs	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003734:	4618      	mov	r0, r3
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	fe00e800 	.word	0xfe00e800

08003740 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	4613      	mov	r3, r2
 8003750:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003752:	897b      	ldrh	r3, [r7, #10]
 8003754:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003758:	7a7b      	ldrb	r3, [r7, #9]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003760:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	4313      	orrs	r3, r2
 800376a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800376e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	0d5b      	lsrs	r3, r3, #21
 800377a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <I2C_TransferConfig+0x60>)
 8003780:	430b      	orrs	r3, r1
 8003782:	43db      	mvns	r3, r3
 8003784:	ea02 0103 	and.w	r1, r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	03ff63ff 	.word	0x03ff63ff

080037a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d138      	bne.n	800382c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e032      	b.n	800382e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	; 0x24
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b20      	cmp	r3, #32
 800384e:	d139      	bne.n	80038c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800385a:	2302      	movs	r3, #2
 800385c:	e033      	b.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2224      	movs	r2, #36	; 0x24
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800388c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	2b06      	cmp	r3, #6
 80038e6:	d00a      	beq.n	80038fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038e8:	4b26      	ldr	r3, [pc, #152]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d001      	beq.n	80038fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e040      	b.n	800397c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e03e      	b.n	800397c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003906:	491f      	ldr	r1, [pc, #124]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4313      	orrs	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800390e:	f7fe f977 	bl	8001c00 <HAL_GetTick>
 8003912:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003914:	e009      	b.n	800392a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003916:	f7fe f973 	bl	8001c00 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003924:	d901      	bls.n	800392a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e028      	b.n	800397c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	d1ee      	bne.n	8003916 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b1e      	cmp	r3, #30
 800393c:	d008      	beq.n	8003950 <HAL_PWREx_ConfigSupply+0x7c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b2e      	cmp	r3, #46	; 0x2e
 8003942:	d005      	beq.n	8003950 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b1d      	cmp	r3, #29
 8003948:	d002      	beq.n	8003950 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b2d      	cmp	r3, #45	; 0x2d
 800394e:	d114      	bne.n	800397a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003950:	f7fe f956 	bl	8001c00 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003956:	e009      	b.n	800396c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003958:	f7fe f952 	bl	8001c00 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003966:	d901      	bls.n	800396c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e007      	b.n	800397c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	d1ee      	bne.n	8003958 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	58024800 	.word	0x58024800

08003988 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e3f4      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80b3 	beq.w	8003b0e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a8:	4b95      	ldr	r3, [pc, #596]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039b2:	4b93      	ldr	r3, [pc, #588]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d007      	beq.n	80039ce <HAL_RCC_OscConfig+0x46>
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	2b18      	cmp	r3, #24
 80039c2:	d112      	bne.n	80039ea <HAL_RCC_OscConfig+0x62>
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d10d      	bne.n	80039ea <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ce:	4b8c      	ldr	r3, [pc, #560]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8098 	beq.w	8003b0c <HAL_RCC_OscConfig+0x184>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8093 	bne.w	8003b0c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e3cc      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x7a>
 80039f4:	4b82      	ldr	r3, [pc, #520]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a81      	ldr	r2, [pc, #516]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 80039fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e058      	b.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d112      	bne.n	8003a30 <HAL_RCC_OscConfig+0xa8>
 8003a0a:	4b7d      	ldr	r3, [pc, #500]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7c      	ldr	r2, [pc, #496]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b7a      	ldr	r3, [pc, #488]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a79      	ldr	r2, [pc, #484]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b77      	ldr	r3, [pc, #476]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a76      	ldr	r2, [pc, #472]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e041      	b.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a38:	d112      	bne.n	8003a60 <HAL_RCC_OscConfig+0xd8>
 8003a3a:	4b71      	ldr	r3, [pc, #452]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a70      	ldr	r2, [pc, #448]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b6e      	ldr	r3, [pc, #440]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6d      	ldr	r2, [pc, #436]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	4b6b      	ldr	r3, [pc, #428]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a6a      	ldr	r2, [pc, #424]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e029      	b.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003a68:	d112      	bne.n	8003a90 <HAL_RCC_OscConfig+0x108>
 8003a6a:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a64      	ldr	r2, [pc, #400]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a5e      	ldr	r2, [pc, #376]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e011      	b.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a57      	ldr	r2, [pc, #348]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003aae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe f8a0 	bl	8001c00 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fe f89c 	bl	8001c00 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e356      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x13c>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f88c 	bl	8001c00 <HAL_GetTick>
 8003ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe f888 	bl	8001c00 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e342      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003afe:	4b40      	ldr	r3, [pc, #256]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x164>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 808d 	beq.w	8003c36 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b1c:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_RCC_OscConfig+0x1ba>
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2b18      	cmp	r3, #24
 8003b36:	d137      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x220>
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d132      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b42:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1d2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e314      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b5a:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0219 	bic.w	r2, r3, #25
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4926      	ldr	r1, [pc, #152]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b6c:	f7fe f848 	bl	8001c00 <HAL_GetTick>
 8003b70:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fe f844 	bl	8001c00 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e2fe      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b86:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b92:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	061b      	lsls	r3, r3, #24
 8003ba0:	4917      	ldr	r1, [pc, #92]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba6:	e046      	b.n	8003c36 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d029      	beq.n	8003c04 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f023 0219 	bic.w	r2, r3, #25
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4910      	ldr	r1, [pc, #64]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fe f81d 	bl	8001c00 <HAL_GetTick>
 8003bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fe f819 	bl	8001c00 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e2d3      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	4902      	ldr	r1, [pc, #8]	; (8003c00 <HAL_RCC_OscConfig+0x278>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
 8003bfc:	e01b      	b.n	8003c36 <HAL_RCC_OscConfig+0x2ae>
 8003bfe:	bf00      	nop
 8003c00:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c04:	4b97      	ldr	r3, [pc, #604]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a96      	ldr	r2, [pc, #600]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fff6 	bl	8001c00 <HAL_GetTick>
 8003c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c18:	f7fd fff2 	bl	8001c00 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e2ac      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c2a:	4b8e      	ldr	r3, [pc, #568]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d06a      	beq.n	8003d18 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c42:	4b88      	ldr	r3, [pc, #544]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c4c:	4b85      	ldr	r3, [pc, #532]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d007      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2e0>
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2b18      	cmp	r3, #24
 8003c5c:	d11b      	bne.n	8003c96 <HAL_RCC_OscConfig+0x30e>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d116      	bne.n	8003c96 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c68:	4b7e      	ldr	r3, [pc, #504]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_OscConfig+0x2f8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e281      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c80:	4b78      	ldr	r3, [pc, #480]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	4975      	ldr	r1, [pc, #468]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c94:	e040      	b.n	8003d18 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d023      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c9e:	4b71      	ldr	r3, [pc, #452]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a70      	ldr	r2, [pc, #448]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fd ffa9 	bl	8001c00 <HAL_GetTick>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cb2:	f7fd ffa5 	bl	8001c00 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e25f      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cc4:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cd0:	4b64      	ldr	r3, [pc, #400]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	4961      	ldr	r1, [pc, #388]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60cb      	str	r3, [r1, #12]
 8003ce4:	e018      	b.n	8003d18 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ce6:	4b5f      	ldr	r3, [pc, #380]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5e      	ldr	r2, [pc, #376]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fd ff85 	bl	8001c00 <HAL_GetTick>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cfa:	f7fd ff81 	bl	8001c00 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e23b      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d0c:	4b55      	ldr	r3, [pc, #340]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d036      	beq.n	8003d92 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d019      	beq.n	8003d60 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2c:	4b4d      	ldr	r3, [pc, #308]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	4a4c      	ldr	r2, [pc, #304]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fd ff62 	bl	8001c00 <HAL_GetTick>
 8003d3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fd ff5e 	bl	8001c00 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e218      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d52:	4b44      	ldr	r3, [pc, #272]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x3b8>
 8003d5e:	e018      	b.n	8003d92 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d60:	4b40      	ldr	r3, [pc, #256]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d64:	4a3f      	ldr	r2, [pc, #252]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd ff48 	bl	8001c00 <HAL_GetTick>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fd ff44 	bl	8001c00 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e1fe      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d86:	4b37      	ldr	r3, [pc, #220]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d036      	beq.n	8003e0c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d019      	beq.n	8003dda <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003da6:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2e      	ldr	r2, [pc, #184]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003db0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003db2:	f7fd ff25 	bl	8001c00 <HAL_GetTick>
 8003db6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dba:	f7fd ff21 	bl	8001c00 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1db      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003dcc:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x432>
 8003dd8:	e018      	b.n	8003e0c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dda:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a21      	ldr	r2, [pc, #132]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003de6:	f7fd ff0b 	bl	8001c00 <HAL_GetTick>
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dee:	f7fd ff07 	bl	8001c00 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e1c1      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e00:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f0      	bne.n	8003dee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80af 	beq.w	8003f78 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_RCC_OscConfig+0x4e0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <HAL_RCC_OscConfig+0x4e0>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e26:	f7fd feeb 	bl	8001c00 <HAL_GetTick>
 8003e2a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fd fee7 	bl	8001c00 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b64      	cmp	r3, #100	; 0x64
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e1a1      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <HAL_RCC_OscConfig+0x4e0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d10b      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4e4>
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a02      	ldr	r2, [pc, #8]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	e05b      	b.n	8003f1a <HAL_RCC_OscConfig+0x592>
 8003e62:	bf00      	nop
 8003e64:	58024400 	.word	0x58024400
 8003e68:	58024800 	.word	0x58024800
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d112      	bne.n	8003e9a <HAL_RCC_OscConfig+0x512>
 8003e74:	4b9d      	ldr	r3, [pc, #628]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a9c      	ldr	r2, [pc, #624]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e80:	4b9a      	ldr	r3, [pc, #616]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a99      	ldr	r2, [pc, #612]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	4b97      	ldr	r3, [pc, #604]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a96      	ldr	r2, [pc, #600]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	e03f      	b.n	8003f1a <HAL_RCC_OscConfig+0x592>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d112      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x540>
 8003ea2:	4b92      	ldr	r3, [pc, #584]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a91      	ldr	r2, [pc, #580]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
 8003eae:	4b8f      	ldr	r3, [pc, #572]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a8e      	ldr	r2, [pc, #568]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	4b8c      	ldr	r3, [pc, #560]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a8b      	ldr	r2, [pc, #556]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	e028      	b.n	8003f1a <HAL_RCC_OscConfig+0x592>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b85      	cmp	r3, #133	; 0x85
 8003ece:	d112      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x56e>
 8003ed0:	4b86      	ldr	r3, [pc, #536]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a85      	ldr	r2, [pc, #532]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003ed6:	f043 0304 	orr.w	r3, r3, #4
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	4b83      	ldr	r3, [pc, #524]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a82      	ldr	r2, [pc, #520]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	4b80      	ldr	r3, [pc, #512]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a7f      	ldr	r2, [pc, #508]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	e011      	b.n	8003f1a <HAL_RCC_OscConfig+0x592>
 8003ef6:	4b7d      	ldr	r3, [pc, #500]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a7c      	ldr	r2, [pc, #496]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	4b7a      	ldr	r3, [pc, #488]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a79      	ldr	r2, [pc, #484]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0e:	4b77      	ldr	r3, [pc, #476]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a76      	ldr	r2, [pc, #472]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d015      	beq.n	8003f4e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fd fe6d 	bl	8001c00 <HAL_GetTick>
 8003f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fd fe69 	bl	8001c00 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e121      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f40:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ee      	beq.n	8003f2a <HAL_RCC_OscConfig+0x5a2>
 8003f4c:	e014      	b.n	8003f78 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7fd fe57 	bl	8001c00 <HAL_GetTick>
 8003f52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f54:	e00a      	b.n	8003f6c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fd fe53 	bl	8001c00 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e10b      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f6c:	4b5f      	ldr	r3, [pc, #380]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ee      	bne.n	8003f56 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8100 	beq.w	8004182 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f82:	4b5a      	ldr	r3, [pc, #360]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f8a:	2b18      	cmp	r3, #24
 8003f8c:	f000 80bb 	beq.w	8004106 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	f040 8095 	bne.w	80040c4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9a:	4b54      	ldr	r3, [pc, #336]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a53      	ldr	r2, [pc, #332]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003fa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fd fe2b 	bl	8001c00 <HAL_GetTick>
 8003faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fae:	f7fd fe27 	bl	8001c00 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0e1      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fc0:	4b4a      	ldr	r3, [pc, #296]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fcc:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fd0:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_OscConfig+0x768>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fdc:	0112      	lsls	r2, r2, #4
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	4942      	ldr	r1, [pc, #264]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	628b      	str	r3, [r1, #40]	; 0x28
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	3b01      	subs	r3, #1
 8003fec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	025b      	lsls	r3, r3, #9
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	3b01      	subs	r3, #1
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	3b01      	subs	r3, #1
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004016:	4935      	ldr	r1, [pc, #212]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004018:	4313      	orrs	r3, r2
 800401a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800401c:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a32      	ldr	r2, [pc, #200]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 800402a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402c:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <HAL_RCC_OscConfig+0x76c>)
 800402e:	4013      	ands	r3, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004034:	00d2      	lsls	r2, r2, #3
 8004036:	492d      	ldr	r1, [pc, #180]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004038:	4313      	orrs	r3, r2
 800403a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800403c:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	f023 020c 	bic.w	r2, r3, #12
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	4928      	ldr	r1, [pc, #160]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 800404a:	4313      	orrs	r3, r2
 800404c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800404e:	4b27      	ldr	r3, [pc, #156]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	f023 0202 	bic.w	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	4924      	ldr	r1, [pc, #144]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 800405c:	4313      	orrs	r3, r2
 800405e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004060:	4b22      	ldr	r3, [pc, #136]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4a21      	ldr	r2, [pc, #132]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 800407e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004090:	4b16      	ldr	r3, [pc, #88]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a15      	ldr	r2, [pc, #84]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd fdb0 	bl	8001c00 <HAL_GetTick>
 80040a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fd fdac 	bl	8001c00 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e066      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x71c>
 80040c2:	e05e      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <HAL_RCC_OscConfig+0x764>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd fd96 	bl	8001c00 <HAL_GetTick>
 80040d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040d6:	e00f      	b.n	80040f8 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fd fd92 	bl	8001c00 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d908      	bls.n	80040f8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e04c      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
 80040ea:	bf00      	nop
 80040ec:	58024400 	.word	0x58024400
 80040f0:	fffffc0c 	.word	0xfffffc0c
 80040f4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f8:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_RCC_OscConfig+0x804>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e9      	bne.n	80040d8 <HAL_RCC_OscConfig+0x750>
 8004104:	e03d      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004106:	4b21      	ldr	r3, [pc, #132]	; (800418c <HAL_RCC_OscConfig+0x804>)
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800410c:	4b1f      	ldr	r3, [pc, #124]	; (800418c <HAL_RCC_OscConfig+0x804>)
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b01      	cmp	r3, #1
 8004118:	d031      	beq.n	800417e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d12a      	bne.n	800417e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d122      	bne.n	800417e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d11a      	bne.n	800417e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	0a5b      	lsrs	r3, r3, #9
 800414c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004154:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d111      	bne.n	800417e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d108      	bne.n	800417e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	0e1b      	lsrs	r3, r3, #24
 8004170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3730      	adds	r7, #48	; 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	58024400 	.word	0x58024400

08004190 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e19c      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b8a      	ldr	r3, [pc, #552]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d910      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b87      	ldr	r3, [pc, #540]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	4985      	ldr	r1, [pc, #532]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b83      	ldr	r3, [pc, #524]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e184      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	4b7b      	ldr	r3, [pc, #492]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d908      	bls.n	8004202 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041f0:	4b78      	ldr	r3, [pc, #480]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	4975      	ldr	r1, [pc, #468]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800421a:	429a      	cmp	r2, r3
 800421c:	d908      	bls.n	8004230 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800421e:	4b6d      	ldr	r3, [pc, #436]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	496a      	ldr	r1, [pc, #424]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800422c:	4313      	orrs	r3, r2
 800422e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004248:	429a      	cmp	r2, r3
 800424a:	d908      	bls.n	800425e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	495e      	ldr	r1, [pc, #376]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800425a:	4313      	orrs	r3, r2
 800425c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004276:	429a      	cmp	r2, r3
 8004278:	d908      	bls.n	800428c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800427a:	4b56      	ldr	r3, [pc, #344]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4953      	ldr	r1, [pc, #332]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004288:	4313      	orrs	r3, r2
 800428a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d010      	beq.n	80042ba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	4b4d      	ldr	r3, [pc, #308]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d908      	bls.n	80042ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a8:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f023 020f 	bic.w	r2, r3, #15
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4947      	ldr	r1, [pc, #284]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d055      	beq.n	8004372 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042c6:	4b43      	ldr	r3, [pc, #268]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	4940      	ldr	r1, [pc, #256]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d107      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042e0:	4b3c      	ldr	r3, [pc, #240]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d121      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0f6      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042f8:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d115      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0ea      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004310:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0de      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004320:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0d6      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004330:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f023 0207 	bic.w	r2, r3, #7
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4925      	ldr	r1, [pc, #148]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800433e:	4313      	orrs	r3, r2
 8004340:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fd fc5d 	bl	8001c00 <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004348:	e00a      	b.n	8004360 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434a:	f7fd fc59 	bl	8001c00 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0be      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004360:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	429a      	cmp	r2, r3
 8004370:	d1eb      	bne.n	800434a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	429a      	cmp	r2, r3
 800438c:	d208      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f023 020f 	bic.w	r2, r3, #15
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	490e      	ldr	r1, [pc, #56]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800439c:	4313      	orrs	r3, r2
 800439e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d214      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 020f 	bic.w	r2, r3, #15
 80043b6:	4906      	ldr	r1, [pc, #24]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e086      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
 80043d0:	52002000 	.word	0x52002000
 80043d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	4b3f      	ldr	r3, [pc, #252]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d208      	bcs.n	8004406 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043f4:	4b3c      	ldr	r3, [pc, #240]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4939      	ldr	r1, [pc, #228]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004402:	4313      	orrs	r3, r2
 8004404:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	4b34      	ldr	r3, [pc, #208]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800441e:	429a      	cmp	r2, r3
 8004420:	d208      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	492e      	ldr	r1, [pc, #184]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004430:	4313      	orrs	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d010      	beq.n	8004462 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800444c:	429a      	cmp	r2, r3
 800444e:	d208      	bcs.n	8004462 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4922      	ldr	r1, [pc, #136]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 800445e:	4313      	orrs	r3, r2
 8004460:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d010      	beq.n	8004490 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800447a:	429a      	cmp	r2, r3
 800447c:	d208      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800447e:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4917      	ldr	r1, [pc, #92]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 800448c:	4313      	orrs	r3, r2
 800448e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004490:	f000 f834 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	4912      	ldr	r1, [pc, #72]	; (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80044b8:	5cd3      	ldrb	r3, [r2, r3]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <HAL_RCC_ClockConfig+0x360>)
 80044c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044c8:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_RCC_ClockConfig+0x364>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80044ce:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_RCC_ClockConfig+0x368>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fb4a 	bl	8001b6c <HAL_InitTick>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	58024400 	.word	0x58024400
 80044ec:	08008d74 	.word	0x08008d74
 80044f0:	24000004 	.word	0x24000004
 80044f4:	24000000 	.word	0x24000000
 80044f8:	24000008 	.word	0x24000008

080044fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	; 0x24
 8004500:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004502:	4bb3      	ldr	r3, [pc, #716]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800450a:	2b18      	cmp	r3, #24
 800450c:	f200 8155 	bhi.w	80047ba <HAL_RCC_GetSysClockFreq+0x2be>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800457d 	.word	0x0800457d
 800451c:	080047bb 	.word	0x080047bb
 8004520:	080047bb 	.word	0x080047bb
 8004524:	080047bb 	.word	0x080047bb
 8004528:	080047bb 	.word	0x080047bb
 800452c:	080047bb 	.word	0x080047bb
 8004530:	080047bb 	.word	0x080047bb
 8004534:	080047bb 	.word	0x080047bb
 8004538:	080045a3 	.word	0x080045a3
 800453c:	080047bb 	.word	0x080047bb
 8004540:	080047bb 	.word	0x080047bb
 8004544:	080047bb 	.word	0x080047bb
 8004548:	080047bb 	.word	0x080047bb
 800454c:	080047bb 	.word	0x080047bb
 8004550:	080047bb 	.word	0x080047bb
 8004554:	080047bb 	.word	0x080047bb
 8004558:	080045a9 	.word	0x080045a9
 800455c:	080047bb 	.word	0x080047bb
 8004560:	080047bb 	.word	0x080047bb
 8004564:	080047bb 	.word	0x080047bb
 8004568:	080047bb 	.word	0x080047bb
 800456c:	080047bb 	.word	0x080047bb
 8004570:	080047bb 	.word	0x080047bb
 8004574:	080047bb 	.word	0x080047bb
 8004578:	080045af 	.word	0x080045af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800457c:	4b94      	ldr	r3, [pc, #592]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004588:	4b91      	ldr	r3, [pc, #580]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	08db      	lsrs	r3, r3, #3
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	4a90      	ldr	r2, [pc, #576]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
 8004598:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800459a:	e111      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800459c:	4b8d      	ldr	r3, [pc, #564]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800459e:	61bb      	str	r3, [r7, #24]
    break;
 80045a0:	e10e      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80045a2:	4b8d      	ldr	r3, [pc, #564]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045a4:	61bb      	str	r3, [r7, #24]
    break;
 80045a6:	e10b      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80045a8:	4b8c      	ldr	r3, [pc, #560]	; (80047dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045aa:	61bb      	str	r3, [r7, #24]
    break;
 80045ac:	e108      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80045b8:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045c4:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045ce:	4b80      	ldr	r3, [pc, #512]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	08db      	lsrs	r3, r3, #3
 80045d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80e1 	beq.w	80047b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f000 8083 	beq.w	8004700 <HAL_RCC_GetSysClockFreq+0x204>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	f200 80a1 	bhi.w	8004744 <HAL_RCC_GetSysClockFreq+0x248>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x114>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d056      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800460e:	e099      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004610:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02d      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800461c:	4b6c      	ldr	r3, [pc, #432]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	4a6b      	ldr	r2, [pc, #428]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	ee07 3a90 	vmov	s15, r3
 8004634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b62      	ldr	r3, [pc, #392]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a02 	vldr	s12, [r7, #8]
 800465a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004676:	e087      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a58 	vldr	s13, [pc, #352]	; 80047e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b51      	ldr	r3, [pc, #324]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a02 	vldr	s12, [r7, #8]
 800469e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ba:	e065      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80047e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ce:	4b40      	ldr	r3, [pc, #256]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046de:	ed97 6a02 	vldr	s12, [r7, #8]
 80046e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046fe:	e043      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80047ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	4b2f      	ldr	r3, [pc, #188]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004722:	ed97 6a02 	vldr	s12, [r7, #8]
 8004726:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800472a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004742:	e021      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80047e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004756:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004766:	ed97 6a02 	vldr	s12, [r7, #8]
 800476a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800476e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800477a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004786:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	0a5b      	lsrs	r3, r3, #9
 800478e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004792:	3301      	adds	r3, #1
 8004794:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ac:	ee17 3a90 	vmov	r3, s15
 80047b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80047b2:	e005      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
    break;
 80047b8:	e002      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047bc:	61bb      	str	r3, [r7, #24]
    break;
 80047be:	bf00      	nop
  }

  return sysclockfreq;
 80047c0:	69bb      	ldr	r3, [r7, #24]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3724      	adds	r7, #36	; 0x24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	58024400 	.word	0x58024400
 80047d4:	03d09000 	.word	0x03d09000
 80047d8:	003d0900 	.word	0x003d0900
 80047dc:	007a1200 	.word	0x007a1200
 80047e0:	46000000 	.word	0x46000000
 80047e4:	4c742400 	.word	0x4c742400
 80047e8:	4a742400 	.word	0x4a742400
 80047ec:	4af42400 	.word	0x4af42400

080047f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80047f6:	f7ff fe81 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80047fa:	4602      	mov	r2, r0
 80047fc:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_RCC_GetHCLKFreq+0x50>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	490f      	ldr	r1, [pc, #60]	; (8004844 <HAL_RCC_GetHCLKFreq+0x54>)
 8004808:	5ccb      	ldrb	r3, [r1, r3]
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <HAL_RCC_GetHCLKFreq+0x50>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	4a09      	ldr	r2, [pc, #36]	; (8004844 <HAL_RCC_GetHCLKFreq+0x54>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	fa22 f303 	lsr.w	r3, r2, r3
 800482a:	4a07      	ldr	r2, [pc, #28]	; (8004848 <HAL_RCC_GetHCLKFreq+0x58>)
 800482c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800482e:	4a07      	ldr	r2, [pc, #28]	; (800484c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <HAL_RCC_GetHCLKFreq+0x58>)
 8004836:	681b      	ldr	r3, [r3, #0]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	58024400 	.word	0x58024400
 8004844:	08008d74 	.word	0x08008d74
 8004848:	24000004 	.word	0x24000004
 800484c:	24000000 	.word	0x24000000

08004850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004854:	f7ff ffcc 	bl	80047f0 <HAL_RCC_GetHCLKFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	4904      	ldr	r1, [pc, #16]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	58024400 	.word	0x58024400
 8004878:	08008d74 	.word	0x08008d74

0800487c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004880:	f7ff ffb6 	bl	80047f0 <HAL_RCC_GetHCLKFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4904      	ldr	r1, [pc, #16]	; (80048a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	58024400 	.word	0x58024400
 80048a4:	08008d74 	.word	0x08008d74

080048a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048b0:	2300      	movs	r3, #0
 80048b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048b4:	2300      	movs	r3, #0
 80048b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d03f      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048cc:	d02a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d2:	d824      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048d8:	d018      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048de:	d81e      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e8:	d007      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048ea:	e018      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ec:	4b9f      	ldr	r3, [pc, #636]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	4a9e      	ldr	r2, [pc, #632]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048f8:	e015      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2102      	movs	r1, #2
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f99b 	bl	8005c3c <RCCEx_PLL2_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800490a:	e00c      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3324      	adds	r3, #36	; 0x24
 8004910:	2102      	movs	r1, #2
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fa44 	bl	8005da0 <RCCEx_PLL3_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
      break;
 8004922:	e000      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004926:	7dfb      	ldrb	r3, [r7, #23]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d109      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800492c:	4b8f      	ldr	r3, [pc, #572]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800492e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004938:	498c      	ldr	r1, [pc, #560]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	650b      	str	r3, [r1, #80]	; 0x50
 800493e:	e001      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d03d      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	2b04      	cmp	r3, #4
 8004956:	d826      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004975 	.word	0x08004975
 8004964:	08004983 	.word	0x08004983
 8004968:	08004995 	.word	0x08004995
 800496c:	080049ad 	.word	0x080049ad
 8004970:	080049ad 	.word	0x080049ad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004974:	4b7d      	ldr	r3, [pc, #500]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4a7c      	ldr	r2, [pc, #496]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800497a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004980:	e015      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f001 f957 	bl	8005c3c <RCCEx_PLL2_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004992:	e00c      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3324      	adds	r3, #36	; 0x24
 8004998:	2100      	movs	r1, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f001 fa00 	bl	8005da0 <RCCEx_PLL3_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049a4:	e003      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
      break;
 80049aa:	e000      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80049ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d109      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049b4:	4b6d      	ldr	r3, [pc, #436]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b8:	f023 0207 	bic.w	r2, r3, #7
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	496a      	ldr	r1, [pc, #424]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	650b      	str	r3, [r1, #80]	; 0x50
 80049c6:	e001      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d04a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80049e0:	d031      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80049e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80049e6:	d82b      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80049e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ec:	d02d      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f2:	d825      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80049f4:	2bc0      	cmp	r3, #192	; 0xc0
 80049f6:	d02a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80049f8:	2bc0      	cmp	r3, #192	; 0xc0
 80049fa:	d821      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d016      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d81d      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d007      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004a0c:	e018      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0e:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	4a56      	ldr	r2, [pc, #344]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004a1a:	e019      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 f90a 	bl	8005c3c <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004a2c:	e010      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3324      	adds	r3, #36	; 0x24
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 f9b3 	bl	8005da0 <RCCEx_PLL3_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004a3e:	e007      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
      break;
 8004a44:	e004      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004a56:	4b45      	ldr	r3, [pc, #276]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	4942      	ldr	r1, [pc, #264]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	650b      	str	r3, [r1, #80]	; 0x50
 8004a68:	e001      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d04f      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004a82:	d036      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004a84:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004a88:	d830      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8e:	d032      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a94:	d82a      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004a96:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a9a:	d02e      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004a9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004aa0:	d824      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa6:	d018      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aac:	d81e      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab6:	d007      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004ab8:	e018      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aba:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	4a2b      	ldr	r2, [pc, #172]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004ac6:	e019      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 f8b4 	bl	8005c3c <RCCEx_PLL2_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004ad8:	e010      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3324      	adds	r3, #36	; 0x24
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 f95d 	bl	8005da0 <RCCEx_PLL3_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004aea:	e007      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
      break;
 8004af0:	e004      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004af2:	bf00      	nop
 8004af4:	e002      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b06:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	4917      	ldr	r1, [pc, #92]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	650b      	str	r3, [r1, #80]	; 0x50
 8004b14:	e001      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d034      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2a:	2b30      	cmp	r3, #48	; 0x30
 8004b2c:	d01c      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004b2e:	2b30      	cmp	r3, #48	; 0x30
 8004b30:	d817      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d00c      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d813      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d10f      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b42:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004b4e:	e010      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	2102      	movs	r1, #2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 f870 	bl	8005c3c <RCCEx_PLL2_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004b60:	e007      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
      break;
 8004b66:	e004      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004b68:	bf00      	nop
 8004b6a:	e002      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b6c:	58024400 	.word	0x58024400
      break;
 8004b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b78:	4b9b      	ldr	r3, [pc, #620]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b84:	4998      	ldr	r1, [pc, #608]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b8a:	e001      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d047      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba4:	d030      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004baa:	d82a      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004bac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bb0:	d02c      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004bb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bb6:	d824      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d018      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	d81e      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bcc:	d007      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004bce:	e018      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd0:	4b85      	ldr	r3, [pc, #532]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	4a84      	ldr	r2, [pc, #528]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bdc:	e017      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3304      	adds	r3, #4
 8004be2:	2100      	movs	r1, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 f829 	bl	8005c3c <RCCEx_PLL2_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bee:	e00e      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3324      	adds	r3, #36	; 0x24
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 f8d2 	bl	8005da0 <RCCEx_PLL3_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c00:	e005      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	75fb      	strb	r3, [r7, #23]
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004c08:	bf00      	nop
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c14:	4b74      	ldr	r3, [pc, #464]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	4971      	ldr	r1, [pc, #452]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	650b      	str	r3, [r1, #80]	; 0x50
 8004c26:	e001      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d049      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c40:	d02e      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c46:	d828      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004c48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c4c:	d02a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004c4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c52:	d822      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004c54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c58:	d026      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004c5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c5e:	d81c      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c64:	d010      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c6a:	d816      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01d      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c74:	d111      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 ffdd 	bl	8005c3c <RCCEx_PLL2_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c86:	e012      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3324      	adds	r3, #36	; 0x24
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 f886 	bl	8005da0 <RCCEx_PLL3_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c98:	e009      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9e:	e006      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004ca0:	bf00      	nop
 8004ca2:	e004      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004ca4:	bf00      	nop
 8004ca6:	e002      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cb4:	4b4c      	ldr	r3, [pc, #304]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc0:	4949      	ldr	r1, [pc, #292]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	650b      	str	r3, [r1, #80]	; 0x50
 8004cc6:	e001      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d053      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cde:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004ce2:	d034      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ce4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004ce8:	d82e      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cee:	d030      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cf4:	d828      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfa:	d02c      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d822      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d06:	d028      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d0c:	d81c      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d12:	d010      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d18:	d816      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01f      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d22:	d111      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 ff86 	bl	8005c3c <RCCEx_PLL2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d34:	e014      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3324      	adds	r3, #36	; 0x24
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 f82f 	bl	8005da0 <RCCEx_PLL3_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d46:	e00b      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d4c:	e008      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e006      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004d52:	bf00      	nop
 8004d54:	e004      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004d56:	bf00      	nop
 8004d58:	e002      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e000      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d66:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d74:	491c      	ldr	r1, [pc, #112]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	658b      	str	r3, [r1, #88]	; 0x58
 8004d7a:	e001      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
 8004d7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d031      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d94:	d00e      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9a:	d814      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da4:	d10f      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	4a0f      	ldr	r2, [pc, #60]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004db2:	e00c      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	2101      	movs	r1, #1
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 ff3e 	bl	8005c3c <RCCEx_PLL2_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dc4:	e003      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dd4:	4b04      	ldr	r3, [pc, #16]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de0:	4901      	ldr	r1, [pc, #4]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	650b      	str	r3, [r1, #80]	; 0x50
 8004de6:	e003      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d032      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d81b      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e43 	.word	0x08004e43
 8004e10:	08004e1d 	.word	0x08004e1d
 8004e14:	08004e2b 	.word	0x08004e2b
 8004e18:	08004e43 	.word	0x08004e43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1c:	4bb2      	ldr	r3, [pc, #712]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	4ab1      	ldr	r2, [pc, #708]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e28:	e00c      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	2102      	movs	r1, #2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 ff03 	bl	8005c3c <RCCEx_PLL2_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e3a:	e003      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e4a:	4ba7      	ldr	r3, [pc, #668]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4e:	f023 0203 	bic.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	49a4      	ldr	r1, [pc, #656]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e5c:	e001      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
 8004e60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8086 	beq.w	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e70:	4b9e      	ldr	r3, [pc, #632]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a9d      	ldr	r2, [pc, #628]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e7c:	f7fc fec0 	bl	8001c00 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e82:	e009      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e84:	f7fc febc 	bl	8001c00 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d902      	bls.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	75fb      	strb	r3, [r7, #23]
        break;
 8004e96:	e005      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e98:	4b94      	ldr	r3, [pc, #592]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ef      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d166      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004eaa:	4b8f      	ldr	r3, [pc, #572]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eb4:	4053      	eors	r3, r2
 8004eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d013      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ebe:	4b8a      	ldr	r3, [pc, #552]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ec8:	4b87      	ldr	r3, [pc, #540]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	4a86      	ldr	r2, [pc, #536]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed4:	4b84      	ldr	r3, [pc, #528]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a83      	ldr	r2, [pc, #524]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ee0:	4a81      	ldr	r2, [pc, #516]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef0:	d115      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef2:	f7fc fe85 	bl	8001c00 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef8:	e00b      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efa:	f7fc fe81 	bl	8001c00 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d902      	bls.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f10:	e005      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f12:	4b75      	ldr	r3, [pc, #468]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ed      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d126      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f32:	d10d      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004f34:	4b6c      	ldr	r3, [pc, #432]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f42:	0919      	lsrs	r1, r3, #4
 8004f44:	4b6a      	ldr	r3, [pc, #424]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004f46:	400b      	ands	r3, r1
 8004f48:	4967      	ldr	r1, [pc, #412]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	610b      	str	r3, [r1, #16]
 8004f4e:	e005      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004f50:	4b65      	ldr	r3, [pc, #404]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	4a64      	ldr	r2, [pc, #400]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f5a:	6113      	str	r3, [r2, #16]
 8004f5c:	4b62      	ldr	r3, [pc, #392]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f6a:	495f      	ldr	r1, [pc, #380]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	670b      	str	r3, [r1, #112]	; 0x70
 8004f70:	e004      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	75bb      	strb	r3, [r7, #22]
 8004f76:	e001      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d07f      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8e:	2b28      	cmp	r3, #40	; 0x28
 8004f90:	d866      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08005067 	.word	0x08005067
 8004f9c:	08005061 	.word	0x08005061
 8004fa0:	08005061 	.word	0x08005061
 8004fa4:	08005061 	.word	0x08005061
 8004fa8:	08005061 	.word	0x08005061
 8004fac:	08005061 	.word	0x08005061
 8004fb0:	08005061 	.word	0x08005061
 8004fb4:	08005061 	.word	0x08005061
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	08005061 	.word	0x08005061
 8004fc0:	08005061 	.word	0x08005061
 8004fc4:	08005061 	.word	0x08005061
 8004fc8:	08005061 	.word	0x08005061
 8004fcc:	08005061 	.word	0x08005061
 8004fd0:	08005061 	.word	0x08005061
 8004fd4:	08005061 	.word	0x08005061
 8004fd8:	0800504f 	.word	0x0800504f
 8004fdc:	08005061 	.word	0x08005061
 8004fe0:	08005061 	.word	0x08005061
 8004fe4:	08005061 	.word	0x08005061
 8004fe8:	08005061 	.word	0x08005061
 8004fec:	08005061 	.word	0x08005061
 8004ff0:	08005061 	.word	0x08005061
 8004ff4:	08005061 	.word	0x08005061
 8004ff8:	08005067 	.word	0x08005067
 8004ffc:	08005061 	.word	0x08005061
 8005000:	08005061 	.word	0x08005061
 8005004:	08005061 	.word	0x08005061
 8005008:	08005061 	.word	0x08005061
 800500c:	08005061 	.word	0x08005061
 8005010:	08005061 	.word	0x08005061
 8005014:	08005061 	.word	0x08005061
 8005018:	08005067 	.word	0x08005067
 800501c:	08005061 	.word	0x08005061
 8005020:	08005061 	.word	0x08005061
 8005024:	08005061 	.word	0x08005061
 8005028:	08005061 	.word	0x08005061
 800502c:	08005061 	.word	0x08005061
 8005030:	08005061 	.word	0x08005061
 8005034:	08005061 	.word	0x08005061
 8005038:	08005067 	.word	0x08005067
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	2101      	movs	r1, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fdfa 	bl	8005c3c <RCCEx_PLL2_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800504c:	e00c      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3324      	adds	r3, #36	; 0x24
 8005052:	2101      	movs	r1, #1
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fea3 	bl	8005da0 <RCCEx_PLL3_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800505e:	e003      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	75fb      	strb	r3, [r7, #23]
      break;
 8005064:	e000      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8005066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800506e:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507c:	491a      	ldr	r1, [pc, #104]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800507e:	4313      	orrs	r3, r2
 8005080:	654b      	str	r3, [r1, #84]	; 0x54
 8005082:	e001      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d03f      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005098:	2b05      	cmp	r3, #5
 800509a:	d821      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800509c:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050f5 	.word	0x080050f5
 80050a8:	080050bd 	.word	0x080050bd
 80050ac:	080050cf 	.word	0x080050cf
 80050b0:	080050f5 	.word	0x080050f5
 80050b4:	080050f5 	.word	0x080050f5
 80050b8:	080050f5 	.word	0x080050f5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	2101      	movs	r1, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fdba 	bl	8005c3c <RCCEx_PLL2_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050cc:	e013      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3324      	adds	r3, #36	; 0x24
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fe63 	bl	8005da0 <RCCEx_PLL3_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050de:	e00a      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
      break;
 80050e4:	e007      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80050e6:	bf00      	nop
 80050e8:	58024400 	.word	0x58024400
 80050ec:	58024800 	.word	0x58024800
 80050f0:	00ffffcf 	.word	0x00ffffcf
      break;
 80050f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050fc:	4b9f      	ldr	r3, [pc, #636]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f023 0207 	bic.w	r2, r3, #7
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005108:	499c      	ldr	r1, [pc, #624]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800510a:	4313      	orrs	r3, r2
 800510c:	654b      	str	r3, [r1, #84]	; 0x54
 800510e:	e001      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d039      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005126:	2b05      	cmp	r3, #5
 8005128:	d820      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800512a:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005173 	.word	0x08005173
 8005134:	08005149 	.word	0x08005149
 8005138:	0800515b 	.word	0x0800515b
 800513c:	08005173 	.word	0x08005173
 8005140:	08005173 	.word	0x08005173
 8005144:	08005173 	.word	0x08005173
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	2101      	movs	r1, #1
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fd74 	bl	8005c3c <RCCEx_PLL2_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005158:	e00c      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3324      	adds	r3, #36	; 0x24
 800515e:	2101      	movs	r1, #1
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fe1d 	bl	8005da0 <RCCEx_PLL3_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800516a:	e003      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
      break;
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800517a:	4b80      	ldr	r3, [pc, #512]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	f023 0207 	bic.w	r2, r3, #7
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005188:	497c      	ldr	r1, [pc, #496]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	658b      	str	r3, [r1, #88]	; 0x58
 800518e:	e001      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d04b      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051aa:	d02e      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80051ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b0:	d828      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b6:	d02a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d822      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80051be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051c2:	d026      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80051c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051c8:	d81c      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80051ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ce:	d010      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80051d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d4:	d816      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01d      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80051da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051de:	d111      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fd28 	bl	8005c3c <RCCEx_PLL2_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051f0:	e012      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3324      	adds	r3, #36	; 0x24
 80051f6:	2102      	movs	r1, #2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fdd1 	bl	8005da0 <RCCEx_PLL3_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005202:	e009      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	75fb      	strb	r3, [r7, #23]
      break;
 8005208:	e006      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800520a:	bf00      	nop
 800520c:	e004      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800521e:	4b57      	ldr	r3, [pc, #348]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800522c:	4953      	ldr	r1, [pc, #332]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800522e:	4313      	orrs	r3, r2
 8005230:	654b      	str	r3, [r1, #84]	; 0x54
 8005232:	e001      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d04b      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800524a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800524e:	d02e      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005250:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005254:	d828      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525a:	d02a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005260:	d822      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005262:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005266:	d026      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005268:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800526c:	d81c      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800526e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005272:	d010      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005278:	d816      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01d      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005282:	d111      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	2100      	movs	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fcd6 	bl	8005c3c <RCCEx_PLL2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005294:	e012      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3324      	adds	r3, #36	; 0x24
 800529a:	2102      	movs	r1, #2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fd7f 	bl	8005da0 <RCCEx_PLL3_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052a6:	e009      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	75fb      	strb	r3, [r7, #23]
      break;
 80052ac:	e006      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80052ae:	bf00      	nop
 80052b0:	e004      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80052b2:	bf00      	nop
 80052b4:	e002      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80052ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052c2:	4b2e      	ldr	r3, [pc, #184]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80052c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052d0:	492a      	ldr	r1, [pc, #168]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	658b      	str	r3, [r1, #88]	; 0x58
 80052d6:	e001      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d04d      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052f2:	d02e      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80052f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052f8:	d828      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80052fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fe:	d02a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005304:	d822      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005306:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800530a:	d026      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800530c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005310:	d81c      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005316:	d010      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531c:	d816      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01d      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005326:	d111      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fc84 	bl	8005c3c <RCCEx_PLL2_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005338:	e012      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	2102      	movs	r1, #2
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd2d 	bl	8005da0 <RCCEx_PLL3_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800534a:	e009      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
      break;
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005352:	bf00      	nop
 8005354:	e004      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800535e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005374:	4901      	ldr	r1, [pc, #4]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005376:	4313      	orrs	r3, r2
 8005378:	658b      	str	r3, [r1, #88]	; 0x58
 800537a:	e003      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800537c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539a:	d10a      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3324      	adds	r3, #36	; 0x24
 80053a0:	2102      	movs	r1, #2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fcfc 	bl	8005da0 <RCCEx_PLL3_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053b2:	4b8c      	ldr	r3, [pc, #560]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	4988      	ldr	r1, [pc, #544]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053dc:	d10a      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3324      	adds	r3, #36	; 0x24
 80053e2:	2102      	movs	r1, #2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fcdb 	bl	8005da0 <RCCEx_PLL3_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053f4:	4b7b      	ldr	r3, [pc, #492]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005402:	4978      	ldr	r1, [pc, #480]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005404:	4313      	orrs	r3, r2
 8005406:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d034      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800541a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800541e:	d01d      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005424:	d817      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800542a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542e:	d009      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005430:	e011      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fbff 	bl	8005c3c <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005442:	e00c      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3324      	adds	r3, #36	; 0x24
 8005448:	2102      	movs	r1, #2
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fca8 	bl	8005da0 <RCCEx_PLL3_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005454:	e003      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800545c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005464:	4b5f      	ldr	r3, [pc, #380]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005472:	495c      	ldr	r1, [pc, #368]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	658b      	str	r3, [r1, #88]	; 0x58
 8005478:	e001      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d033      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005490:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005494:	d01c      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005496:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800549a:	d816      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800549c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a0:	d003      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80054a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a6:	d007      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80054a8:	e00f      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054aa:	4b4e      	ldr	r3, [pc, #312]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	4a4d      	ldr	r2, [pc, #308]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80054b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80054b6:	e00c      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3324      	adds	r3, #36	; 0x24
 80054bc:	2101      	movs	r1, #1
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fc6e 	bl	8005da0 <RCCEx_PLL3_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	75fb      	strb	r3, [r7, #23]
      break;
 80054ce:	e000      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80054d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054d8:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80054da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e6:	493f      	ldr	r1, [pc, #252]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	654b      	str	r3, [r1, #84]	; 0x54
 80054ec:	e001      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d029      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550a:	d007      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800550c:	e00f      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800550e:	4b35      	ldr	r3, [pc, #212]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	4a34      	ldr	r2, [pc, #208]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800551a:	e00b      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fb8a 	bl	8005c3c <RCCEx_PLL2_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800552c:	e002      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	75fb      	strb	r3, [r7, #23]
      break;
 8005532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005534:	7dfb      	ldrb	r3, [r7, #23]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800553a:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800553c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005546:	4927      	ldr	r1, [pc, #156]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005548:	4313      	orrs	r3, r2
 800554a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800554c:	e001      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3324      	adds	r3, #36	; 0x24
 8005562:	2102      	movs	r1, #2
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fc1b 	bl	8005da0 <RCCEx_PLL3_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d035      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558a:	d017      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800558c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005590:	d811      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005596:	d013      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559c:	d80b      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d010      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a6:	d106      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	4a0d      	ldr	r2, [pc, #52]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80055ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80055b4:	e007      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
      break;
 80055ba:	e004      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80055bc:	bf00      	nop
 80055be:	e002      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80055c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10d      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055da:	4902      	ldr	r1, [pc, #8]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	654b      	str	r3, [r1, #84]	; 0x54
 80055e0:	e004      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80055e2:	bf00      	nop
 80055e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
 80055ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055f8:	4b30      	ldr	r3, [pc, #192]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80055fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005604:	492d      	ldr	r1, [pc, #180]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005606:	4313      	orrs	r3, r2
 8005608:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005616:	4b29      	ldr	r3, [pc, #164]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005622:	4926      	ldr	r1, [pc, #152]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005624:	4313      	orrs	r3, r2
 8005626:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005634:	4b21      	ldr	r3, [pc, #132]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005638:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	491e      	ldr	r1, [pc, #120]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005642:	4313      	orrs	r3, r2
 8005644:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00d      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005652:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	4a19      	ldr	r2, [pc, #100]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005658:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800565c:	6113      	str	r3, [r2, #16]
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005668:	4914      	ldr	r1, [pc, #80]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800566a:	4313      	orrs	r3, r2
 800566c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	da08      	bge.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005676:	4b11      	ldr	r3, [pc, #68]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005682:	490e      	ldr	r1, [pc, #56]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005684:	4313      	orrs	r3, r2
 8005686:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005698:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	4906      	ldr	r1, [pc, #24]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80056a8:	7dbb      	ldrb	r3, [r7, #22]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	58024400 	.word	0x58024400

080056c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80056c4:	f7ff f894 	bl	80047f0 <HAL_RCC_GetHCLKFreq>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	4904      	ldr	r1, [pc, #16]	; (80056e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056d6:	5ccb      	ldrb	r3, [r1, r3]
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	58024400 	.word	0x58024400
 80056e8:	08008d74 	.word	0x08008d74

080056ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b089      	sub	sp, #36	; 0x24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056f4:	4ba1      	ldr	r3, [pc, #644]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80056fe:	4b9f      	ldr	r3, [pc, #636]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	0b1b      	lsrs	r3, r3, #12
 8005704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005708:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800570a:	4b9c      	ldr	r3, [pc, #624]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005716:	4b99      	ldr	r3, [pc, #612]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	08db      	lsrs	r3, r3, #3
 800571c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	fb02 f303 	mul.w	r3, r2, r3
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8111 	beq.w	800595c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b02      	cmp	r3, #2
 800573e:	f000 8083 	beq.w	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b02      	cmp	r3, #2
 8005746:	f200 80a1 	bhi.w	800588c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d056      	beq.n	8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005756:	e099      	b.n	800588c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005758:	4b88      	ldr	r3, [pc, #544]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d02d      	beq.n	80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005764:	4b85      	ldr	r3, [pc, #532]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	08db      	lsrs	r3, r3, #3
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	4a84      	ldr	r2, [pc, #528]	; (8005980 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578e:	4b7b      	ldr	r3, [pc, #492]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579e:	ed97 6a03 	vldr	s12, [r7, #12]
 80057a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057be:	e087      	b.n	80058d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005988 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d2:	4b6a      	ldr	r3, [pc, #424]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005802:	e065      	b.n	80058d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800598c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005816:	4b59      	ldr	r3, [pc, #356]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005826:	ed97 6a03 	vldr	s12, [r7, #12]
 800582a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800582e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800583a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005846:	e043      	b.n	80058d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585a:	4b48      	ldr	r3, [pc, #288]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586a:	ed97 6a03 	vldr	s12, [r7, #12]
 800586e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800587e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800588a:	e021      	b.n	80058d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005896:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800598c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800589a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589e:	4b37      	ldr	r3, [pc, #220]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80058b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80058d0:	4b2a      	ldr	r3, [pc, #168]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	0a5b      	lsrs	r3, r3, #9
 80058d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f6:	ee17 2a90 	vmov	r2, s15
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80058fe:	4b1f      	ldr	r3, [pc, #124]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005914:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005918:	edd7 6a07 	vldr	s13, [r7, #28]
 800591c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005924:	ee17 2a90 	vmov	r2, s15
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800592c:	4b13      	ldr	r3, [pc, #76]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	0e1b      	lsrs	r3, r3, #24
 8005932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005946:	edd7 6a07 	vldr	s13, [r7, #28]
 800594a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800594e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005952:	ee17 2a90 	vmov	r2, s15
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800595a:	e008      	b.n	800596e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	609a      	str	r2, [r3, #8]
}
 800596e:	bf00      	nop
 8005970:	3724      	adds	r7, #36	; 0x24
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	58024400 	.word	0x58024400
 8005980:	03d09000 	.word	0x03d09000
 8005984:	46000000 	.word	0x46000000
 8005988:	4c742400 	.word	0x4c742400
 800598c:	4a742400 	.word	0x4a742400
 8005990:	4af42400 	.word	0x4af42400

08005994 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005994:	b480      	push	{r7}
 8005996:	b089      	sub	sp, #36	; 0x24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800599c:	4ba1      	ldr	r3, [pc, #644]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80059a6:	4b9f      	ldr	r3, [pc, #636]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	0d1b      	lsrs	r3, r3, #20
 80059ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059b2:	4b9c      	ldr	r3, [pc, #624]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059be:	4b99      	ldr	r3, [pc, #612]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c2:	08db      	lsrs	r3, r3, #3
 80059c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8111 	beq.w	8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	f000 8083 	beq.w	8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	f200 80a1 	bhi.w	8005b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d056      	beq.n	8005aac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059fe:	e099      	b.n	8005b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a00:	4b88      	ldr	r3, [pc, #544]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02d      	beq.n	8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a0c:	4b85      	ldr	r3, [pc, #532]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	08db      	lsrs	r3, r3, #3
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	4a84      	ldr	r2, [pc, #528]	; (8005c28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a18:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b7b      	ldr	r3, [pc, #492]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a66:	e087      	b.n	8005b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7a:	4b6a      	ldr	r3, [pc, #424]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aaa:	e065      	b.n	8005b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005abe:	4b59      	ldr	r3, [pc, #356]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ad2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aee:	e043      	b.n	8005b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b02:	4b48      	ldr	r3, [pc, #288]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b32:	e021      	b.n	8005b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b46:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b78:	4b2a      	ldr	r3, [pc, #168]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	0a5b      	lsrs	r3, r3, #9
 8005b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9e:	ee17 2a90 	vmov	r2, s15
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005ba6:	4b1f      	ldr	r3, [pc, #124]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	0c1b      	lsrs	r3, r3, #16
 8005bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb0:	ee07 3a90 	vmov	s15, r3
 8005bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bcc:	ee17 2a90 	vmov	r2, s15
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005bd4:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	0e1b      	lsrs	r3, r3, #24
 8005bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bfa:	ee17 2a90 	vmov	r2, s15
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c02:	e008      	b.n	8005c16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	609a      	str	r2, [r3, #8]
}
 8005c16:	bf00      	nop
 8005c18:	3724      	adds	r7, #36	; 0x24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400
 8005c28:	03d09000 	.word	0x03d09000
 8005c2c:	46000000 	.word	0x46000000
 8005c30:	4c742400 	.word	0x4c742400
 8005c34:	4a742400 	.word	0x4a742400
 8005c38:	4af42400 	.word	0x4af42400

08005c3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c4a:	4b53      	ldr	r3, [pc, #332]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d101      	bne.n	8005c5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e099      	b.n	8005d8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c5a:	4b4f      	ldr	r3, [pc, #316]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a4e      	ldr	r2, [pc, #312]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005c60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c66:	f7fb ffcb 	bl	8001c00 <HAL_GetTick>
 8005c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c6c:	e008      	b.n	8005c80 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c6e:	f7fb ffc7 	bl	8001c00 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e086      	b.n	8005d8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c80:	4b45      	ldr	r3, [pc, #276]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1f0      	bne.n	8005c6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c8c:	4b42      	ldr	r3, [pc, #264]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	031b      	lsls	r3, r3, #12
 8005c9a:	493f      	ldr	r1, [pc, #252]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	628b      	str	r3, [r1, #40]	; 0x28
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	025b      	lsls	r3, r3, #9
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	041b      	lsls	r3, r3, #16
 8005cbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	061b      	lsls	r3, r3, #24
 8005ccc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cd0:	4931      	ldr	r1, [pc, #196]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cd6:	4b30      	ldr	r3, [pc, #192]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	492d      	ldr	r1, [pc, #180]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ce8:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	f023 0220 	bic.w	r2, r3, #32
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	4928      	ldr	r1, [pc, #160]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005cfa:	4b27      	ldr	r3, [pc, #156]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	4a26      	ldr	r2, [pc, #152]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d00:	f023 0310 	bic.w	r3, r3, #16
 8005d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d06:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d0a:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <RCCEx_PLL2_Config+0x160>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	69d2      	ldr	r2, [r2, #28]
 8005d12:	00d2      	lsls	r2, r2, #3
 8005d14:	4920      	ldr	r1, [pc, #128]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d1a:	4b1f      	ldr	r3, [pc, #124]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d20:	f043 0310 	orr.w	r3, r3, #16
 8005d24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d38:	e00f      	b.n	8005d5a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d106      	bne.n	8005d4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d40:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d4c:	e005      	b.n	8005d5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d4e:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	4a11      	ldr	r2, [pc, #68]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d5a:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a0e      	ldr	r2, [pc, #56]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d66:	f7fb ff4b 	bl	8001c00 <HAL_GetTick>
 8005d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d6c:	e008      	b.n	8005d80 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d6e:	f7fb ff47 	bl	8001c00 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e006      	b.n	8005d8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <RCCEx_PLL2_Config+0x15c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	58024400 	.word	0x58024400
 8005d9c:	ffff0007 	.word	0xffff0007

08005da0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dae:	4b53      	ldr	r3, [pc, #332]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d101      	bne.n	8005dbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e099      	b.n	8005ef2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005dbe:	4b4f      	ldr	r3, [pc, #316]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a4e      	ldr	r2, [pc, #312]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dca:	f7fb ff19 	bl	8001c00 <HAL_GetTick>
 8005dce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dd0:	e008      	b.n	8005de4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dd2:	f7fb ff15 	bl	8001c00 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e086      	b.n	8005ef2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005de4:	4b45      	ldr	r3, [pc, #276]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f0      	bne.n	8005dd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005df0:	4b42      	ldr	r3, [pc, #264]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	051b      	lsls	r3, r3, #20
 8005dfe:	493f      	ldr	r1, [pc, #252]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	628b      	str	r3, [r1, #40]	; 0x28
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	025b      	lsls	r3, r3, #9
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	061b      	lsls	r3, r3, #24
 8005e30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e34:	4931      	ldr	r1, [pc, #196]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e3a:	4b30      	ldr	r3, [pc, #192]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	492d      	ldr	r1, [pc, #180]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e4c:	4b2b      	ldr	r3, [pc, #172]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	4928      	ldr	r1, [pc, #160]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e5e:	4b27      	ldr	r3, [pc, #156]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	4a26      	ldr	r2, [pc, #152]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <RCCEx_PLL3_Config+0x160>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	69d2      	ldr	r2, [r2, #28]
 8005e76:	00d2      	lsls	r2, r2, #3
 8005e78:	4920      	ldr	r1, [pc, #128]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e7e:	4b1f      	ldr	r3, [pc, #124]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e90:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	4a19      	ldr	r2, [pc, #100]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005e96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e9c:	e00f      	b.n	8005ebe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d106      	bne.n	8005eb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ea4:	4b15      	ldr	r3, [pc, #84]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	4a14      	ldr	r2, [pc, #80]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005eaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005eae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005eb0:	e005      	b.n	8005ebe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005eb2:	4b12      	ldr	r3, [pc, #72]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	4a11      	ldr	r2, [pc, #68]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ebc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a0e      	ldr	r2, [pc, #56]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eca:	f7fb fe99 	bl	8001c00 <HAL_GetTick>
 8005ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ed0:	e008      	b.n	8005ee4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ed2:	f7fb fe95 	bl	8001c00 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e006      	b.n	8005ef2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <RCCEx_PLL3_Config+0x15c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	58024400 	.word	0x58024400
 8005f00:	ffff0007 	.word	0xffff0007

08005f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e042      	b.n	8005f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fb fbd9 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2224      	movs	r2, #36	; 0x24
 8005f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fc80 	bl	800684c <UART_SetConfig>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e022      	b.n	8005f9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f001 fae0 	bl	8007524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fb67 	bl	8007668 <UART_CheckIdleState>
 8005f9a:	4603      	mov	r3, r0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	f040 8083 	bne.w	80060c6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_UART_Transmit+0x28>
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e07b      	b.n	80060c8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Transmit+0x3a>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e074      	b.n	80060c8 <HAL_UART_Transmit+0x124>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2221      	movs	r2, #33	; 0x21
 8005ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ff6:	f7fb fe03 	bl	8001c00 <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006014:	d108      	bne.n	8006028 <HAL_UART_Transmit+0x84>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e003      	b.n	8006030 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006038:	e02c      	b.n	8006094 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2200      	movs	r2, #0
 8006042:	2180      	movs	r1, #128	; 0x80
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f001 fb5a 	bl	80076fe <UART_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e039      	b.n	80060c8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006068:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	3302      	adds	r3, #2
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e007      	b.n	8006082 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	3301      	adds	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1cc      	bne.n	800603a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2140      	movs	r1, #64	; 0x40
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f001 fb27 	bl	80076fe <UART_WaitOnFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e006      	b.n	80060c8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e000      	b.n	80060c8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
  }
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b0ba      	sub	sp, #232	; 0xe8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80060fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80060fe:	4013      	ands	r3, r2
 8006100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d11b      	bne.n	8006144 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800610c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d015      	beq.n	8006144 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 835a 	beq.w	80067ee <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
      }
      return;
 8006142:	e354      	b.n	80067ee <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 811f 	beq.w	800638c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800614e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006152:	4b8b      	ldr	r3, [pc, #556]	; (8006380 <HAL_UART_IRQHandler+0x2b0>)
 8006154:	4013      	ands	r3, r2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800615a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800615e:	4b89      	ldr	r3, [pc, #548]	; (8006384 <HAL_UART_IRQHandler+0x2b4>)
 8006160:	4013      	ands	r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8112 	beq.w	800638c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d011      	beq.n	8006198 <HAL_UART_IRQHandler+0xc8>
 8006174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2201      	movs	r2, #1
 8006186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800618e:	f043 0201 	orr.w	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d011      	beq.n	80061c8 <HAL_UART_IRQHandler+0xf8>
 80061a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2202      	movs	r2, #2
 80061b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061be:	f043 0204 	orr.w	r2, r3, #4
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d011      	beq.n	80061f8 <HAL_UART_IRQHandler+0x128>
 80061d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2204      	movs	r2, #4
 80061e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ee:	f043 0202 	orr.w	r2, r3, #2
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d017      	beq.n	8006234 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	d105      	bne.n	800621c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006210:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006214:	4b5a      	ldr	r3, [pc, #360]	; (8006380 <HAL_UART_IRQHandler+0x2b0>)
 8006216:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2208      	movs	r2, #8
 8006222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800622a:	f043 0208 	orr.w	r2, r3, #8
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800623c:	2b00      	cmp	r3, #0
 800623e:	d012      	beq.n	8006266 <HAL_UART_IRQHandler+0x196>
 8006240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00c      	beq.n	8006266 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800625c:	f043 0220 	orr.w	r2, r3, #32
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 82c0 	beq.w	80067f2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d013      	beq.n	80062a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800627e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d105      	bne.n	8006296 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800628a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800628e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d005      	beq.n	80062ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04f      	beq.n	800636a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fae0 	bl	8007890 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d141      	bne.n	8006362 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3308      	adds	r3, #8
 8006306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800630a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800630e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1d9      	bne.n	80062de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d013      	beq.n	800635a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <HAL_UART_IRQHandler+0x2b8>)
 8006338:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800633e:	4618      	mov	r0, r3
 8006340:	f7fc f8bc 	bl	80024bc <HAL_DMA_Abort_IT>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d017      	beq.n	800637a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800634e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006354:	4610      	mov	r0, r2
 8006356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	e00f      	b.n	800637a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa60 	bl	8006820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	e00b      	b.n	800637a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa5c 	bl	8006820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	e007      	b.n	800637a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fa58 	bl	8006820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006378:	e23b      	b.n	80067f2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637a:	bf00      	nop
    return;
 800637c:	e239      	b.n	80067f2 <HAL_UART_IRQHandler+0x722>
 800637e:	bf00      	nop
 8006380:	10000001 	.word	0x10000001
 8006384:	04000120 	.word	0x04000120
 8006388:	0800795d 	.word	0x0800795d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006390:	2b01      	cmp	r3, #1
 8006392:	f040 81ce 	bne.w	8006732 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 81c7 	beq.w	8006732 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 81c0 	beq.w	8006732 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2210      	movs	r2, #16
 80063b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	f040 813b 	bne.w	8006640 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a8b      	ldr	r2, [pc, #556]	; (8006600 <HAL_UART_IRQHandler+0x530>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d059      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a89      	ldr	r2, [pc, #548]	; (8006604 <HAL_UART_IRQHandler+0x534>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d053      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a87      	ldr	r2, [pc, #540]	; (8006608 <HAL_UART_IRQHandler+0x538>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d04d      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a85      	ldr	r2, [pc, #532]	; (800660c <HAL_UART_IRQHandler+0x53c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d047      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a83      	ldr	r2, [pc, #524]	; (8006610 <HAL_UART_IRQHandler+0x540>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d041      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a81      	ldr	r2, [pc, #516]	; (8006614 <HAL_UART_IRQHandler+0x544>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d03b      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a7f      	ldr	r2, [pc, #508]	; (8006618 <HAL_UART_IRQHandler+0x548>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d035      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a7d      	ldr	r2, [pc, #500]	; (800661c <HAL_UART_IRQHandler+0x54c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d02f      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a7b      	ldr	r2, [pc, #492]	; (8006620 <HAL_UART_IRQHandler+0x550>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d029      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a79      	ldr	r2, [pc, #484]	; (8006624 <HAL_UART_IRQHandler+0x554>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d023      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a77      	ldr	r2, [pc, #476]	; (8006628 <HAL_UART_IRQHandler+0x558>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01d      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a75      	ldr	r2, [pc, #468]	; (800662c <HAL_UART_IRQHandler+0x55c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d017      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a73      	ldr	r2, [pc, #460]	; (8006630 <HAL_UART_IRQHandler+0x560>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d011      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a71      	ldr	r2, [pc, #452]	; (8006634 <HAL_UART_IRQHandler+0x564>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00b      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a6f      	ldr	r2, [pc, #444]	; (8006638 <HAL_UART_IRQHandler+0x568>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d005      	beq.n	800648a <HAL_UART_IRQHandler+0x3ba>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a6d      	ldr	r2, [pc, #436]	; (800663c <HAL_UART_IRQHandler+0x56c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d105      	bne.n	8006496 <HAL_UART_IRQHandler+0x3c6>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	b29b      	uxth	r3, r3
 8006494:	e004      	b.n	80064a0 <HAL_UART_IRQHandler+0x3d0>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 81a4 	beq.w	80067f6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064b8:	429a      	cmp	r2, r3
 80064ba:	f080 819c 	bcs.w	80067f6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d2:	f000 8086 	beq.w	80065e2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006500:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006504:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800650c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1da      	bne.n	80064d6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3308      	adds	r3, #8
 8006526:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3308      	adds	r3, #8
 8006540:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006544:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006548:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800654c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006550:	e841 2300 	strex	r3, r2, [r1]
 8006554:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e1      	bne.n	8006520 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3308      	adds	r3, #8
 8006562:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800656c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800656e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006580:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006582:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006586:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800658e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e3      	bne.n	800655c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80065c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e4      	bne.n	80065a2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fb fc4f 	bl	8001e80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f91c 	bl	8006834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065fc:	e0fb      	b.n	80067f6 <HAL_UART_IRQHandler+0x726>
 80065fe:	bf00      	nop
 8006600:	40020010 	.word	0x40020010
 8006604:	40020028 	.word	0x40020028
 8006608:	40020040 	.word	0x40020040
 800660c:	40020058 	.word	0x40020058
 8006610:	40020070 	.word	0x40020070
 8006614:	40020088 	.word	0x40020088
 8006618:	400200a0 	.word	0x400200a0
 800661c:	400200b8 	.word	0x400200b8
 8006620:	40020410 	.word	0x40020410
 8006624:	40020428 	.word	0x40020428
 8006628:	40020440 	.word	0x40020440
 800662c:	40020458 	.word	0x40020458
 8006630:	40020470 	.word	0x40020470
 8006634:	40020488 	.word	0x40020488
 8006638:	400204a0 	.word	0x400204a0
 800663c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800664c:	b29b      	uxth	r3, r3
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80cc 	beq.w	80067fa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8006662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 80c7 	beq.w	80067fa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800668e:	647b      	str	r3, [r7, #68]	; 0x44
 8006690:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800669c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e4      	bne.n	800666c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3308      	adds	r3, #8
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	623b      	str	r3, [r7, #32]
   return(result);
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	4b54      	ldr	r3, [pc, #336]	; (8006808 <HAL_UART_IRQHandler+0x738>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066c6:	633a      	str	r2, [r7, #48]	; 0x30
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e3      	bne.n	80066a2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0310 	bic.w	r3, r3, #16
 8006702:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	69b9      	ldr	r1, [r7, #24]
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	617b      	str	r3, [r7, #20]
   return(result);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e4      	bne.n	80066ee <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f882 	bl	8006834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006730:	e063      	b.n	80067fa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00e      	beq.n	800675c <HAL_UART_IRQHandler+0x68c>
 800673e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d008      	beq.n	800675c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006752:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 f942 	bl	80079de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800675a:	e051      	b.n	8006800 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800675c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006764:	2b00      	cmp	r3, #0
 8006766:	d014      	beq.n	8006792 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006784:	2b00      	cmp	r3, #0
 8006786:	d03a      	beq.n	80067fe <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
    }
    return;
 8006790:	e035      	b.n	80067fe <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <HAL_UART_IRQHandler+0x6e2>
 800679e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 f8ec 	bl	8007988 <UART_EndTransmit_IT>
    return;
 80067b0:	e026      	b.n	8006800 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <HAL_UART_IRQHandler+0x702>
 80067be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 f91b 	bl	8007a06 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067d0:	e016      	b.n	8006800 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <HAL_UART_IRQHandler+0x730>
 80067de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	da0c      	bge.n	8006800 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 f903 	bl	80079f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067ec:	e008      	b.n	8006800 <HAL_UART_IRQHandler+0x730>
      return;
 80067ee:	bf00      	nop
 80067f0:	e006      	b.n	8006800 <HAL_UART_IRQHandler+0x730>
    return;
 80067f2:	bf00      	nop
 80067f4:	e004      	b.n	8006800 <HAL_UART_IRQHandler+0x730>
      return;
 80067f6:	bf00      	nop
 80067f8:	e002      	b.n	8006800 <HAL_UART_IRQHandler+0x730>
      return;
 80067fa:	bf00      	nop
 80067fc:	e000      	b.n	8006800 <HAL_UART_IRQHandler+0x730>
    return;
 80067fe:	bf00      	nop
  }
}
 8006800:	37e8      	adds	r7, #232	; 0xe8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	effffffe 	.word	0xeffffffe

0800680c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800684c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006850:	b092      	sub	sp, #72	; 0x48
 8006852:	af00      	add	r7, sp, #0
 8006854:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	431a      	orrs	r2, r3
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	431a      	orrs	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	4313      	orrs	r3, r2
 8006872:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4bbe      	ldr	r3, [pc, #760]	; (8006b74 <UART_SetConfig+0x328>)
 800687c:	4013      	ands	r3, r2
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006884:	430b      	orrs	r3, r1
 8006886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4ab3      	ldr	r2, [pc, #716]	; (8006b78 <UART_SetConfig+0x32c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d004      	beq.n	80068b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068b4:	4313      	orrs	r3, r2
 80068b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	4baf      	ldr	r3, [pc, #700]	; (8006b7c <UART_SetConfig+0x330>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	f023 010f 	bic.w	r1, r3, #15
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4aa6      	ldr	r2, [pc, #664]	; (8006b80 <UART_SetConfig+0x334>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d177      	bne.n	80069dc <UART_SetConfig+0x190>
 80068ec:	4ba5      	ldr	r3, [pc, #660]	; (8006b84 <UART_SetConfig+0x338>)
 80068ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f4:	2b28      	cmp	r3, #40	; 0x28
 80068f6:	d86d      	bhi.n	80069d4 <UART_SetConfig+0x188>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <UART_SetConfig+0xb4>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	080069a5 	.word	0x080069a5
 8006904:	080069d5 	.word	0x080069d5
 8006908:	080069d5 	.word	0x080069d5
 800690c:	080069d5 	.word	0x080069d5
 8006910:	080069d5 	.word	0x080069d5
 8006914:	080069d5 	.word	0x080069d5
 8006918:	080069d5 	.word	0x080069d5
 800691c:	080069d5 	.word	0x080069d5
 8006920:	080069ad 	.word	0x080069ad
 8006924:	080069d5 	.word	0x080069d5
 8006928:	080069d5 	.word	0x080069d5
 800692c:	080069d5 	.word	0x080069d5
 8006930:	080069d5 	.word	0x080069d5
 8006934:	080069d5 	.word	0x080069d5
 8006938:	080069d5 	.word	0x080069d5
 800693c:	080069d5 	.word	0x080069d5
 8006940:	080069b5 	.word	0x080069b5
 8006944:	080069d5 	.word	0x080069d5
 8006948:	080069d5 	.word	0x080069d5
 800694c:	080069d5 	.word	0x080069d5
 8006950:	080069d5 	.word	0x080069d5
 8006954:	080069d5 	.word	0x080069d5
 8006958:	080069d5 	.word	0x080069d5
 800695c:	080069d5 	.word	0x080069d5
 8006960:	080069bd 	.word	0x080069bd
 8006964:	080069d5 	.word	0x080069d5
 8006968:	080069d5 	.word	0x080069d5
 800696c:	080069d5 	.word	0x080069d5
 8006970:	080069d5 	.word	0x080069d5
 8006974:	080069d5 	.word	0x080069d5
 8006978:	080069d5 	.word	0x080069d5
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069c5 	.word	0x080069c5
 8006984:	080069d5 	.word	0x080069d5
 8006988:	080069d5 	.word	0x080069d5
 800698c:	080069d5 	.word	0x080069d5
 8006990:	080069d5 	.word	0x080069d5
 8006994:	080069d5 	.word	0x080069d5
 8006998:	080069d5 	.word	0x080069d5
 800699c:	080069d5 	.word	0x080069d5
 80069a0:	080069cd 	.word	0x080069cd
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069aa:	e326      	b.n	8006ffa <UART_SetConfig+0x7ae>
 80069ac:	2304      	movs	r3, #4
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b2:	e322      	b.n	8006ffa <UART_SetConfig+0x7ae>
 80069b4:	2308      	movs	r3, #8
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ba:	e31e      	b.n	8006ffa <UART_SetConfig+0x7ae>
 80069bc:	2310      	movs	r3, #16
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c2:	e31a      	b.n	8006ffa <UART_SetConfig+0x7ae>
 80069c4:	2320      	movs	r3, #32
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ca:	e316      	b.n	8006ffa <UART_SetConfig+0x7ae>
 80069cc:	2340      	movs	r3, #64	; 0x40
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069d2:	e312      	b.n	8006ffa <UART_SetConfig+0x7ae>
 80069d4:	2380      	movs	r3, #128	; 0x80
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069da:	e30e      	b.n	8006ffa <UART_SetConfig+0x7ae>
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a69      	ldr	r2, [pc, #420]	; (8006b88 <UART_SetConfig+0x33c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d130      	bne.n	8006a48 <UART_SetConfig+0x1fc>
 80069e6:	4b67      	ldr	r3, [pc, #412]	; (8006b84 <UART_SetConfig+0x338>)
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	2b05      	cmp	r3, #5
 80069f0:	d826      	bhi.n	8006a40 <UART_SetConfig+0x1f4>
 80069f2:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0x1ac>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a11 	.word	0x08006a11
 80069fc:	08006a19 	.word	0x08006a19
 8006a00:	08006a21 	.word	0x08006a21
 8006a04:	08006a29 	.word	0x08006a29
 8006a08:	08006a31 	.word	0x08006a31
 8006a0c:	08006a39 	.word	0x08006a39
 8006a10:	2300      	movs	r3, #0
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a16:	e2f0      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1e:	e2ec      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a20:	2308      	movs	r3, #8
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a26:	e2e8      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a28:	2310      	movs	r3, #16
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2e:	e2e4      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a30:	2320      	movs	r3, #32
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a36:	e2e0      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a38:	2340      	movs	r3, #64	; 0x40
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3e:	e2dc      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a40:	2380      	movs	r3, #128	; 0x80
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a46:	e2d8      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a4f      	ldr	r2, [pc, #316]	; (8006b8c <UART_SetConfig+0x340>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d130      	bne.n	8006ab4 <UART_SetConfig+0x268>
 8006a52:	4b4c      	ldr	r3, [pc, #304]	; (8006b84 <UART_SetConfig+0x338>)
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d826      	bhi.n	8006aac <UART_SetConfig+0x260>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <UART_SetConfig+0x218>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006a7d 	.word	0x08006a7d
 8006a68:	08006a85 	.word	0x08006a85
 8006a6c:	08006a8d 	.word	0x08006a8d
 8006a70:	08006a95 	.word	0x08006a95
 8006a74:	08006a9d 	.word	0x08006a9d
 8006a78:	08006aa5 	.word	0x08006aa5
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a82:	e2ba      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a84:	2304      	movs	r3, #4
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8a:	e2b6      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a8c:	2308      	movs	r3, #8
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a92:	e2b2      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a94:	2310      	movs	r3, #16
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9a:	e2ae      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006a9c:	2320      	movs	r3, #32
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa2:	e2aa      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006aa4:	2340      	movs	r3, #64	; 0x40
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aaa:	e2a6      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006aac:	2380      	movs	r3, #128	; 0x80
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab2:	e2a2      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a35      	ldr	r2, [pc, #212]	; (8006b90 <UART_SetConfig+0x344>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d130      	bne.n	8006b20 <UART_SetConfig+0x2d4>
 8006abe:	4b31      	ldr	r3, [pc, #196]	; (8006b84 <UART_SetConfig+0x338>)
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	2b05      	cmp	r3, #5
 8006ac8:	d826      	bhi.n	8006b18 <UART_SetConfig+0x2cc>
 8006aca:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0x284>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006ae9 	.word	0x08006ae9
 8006ad4:	08006af1 	.word	0x08006af1
 8006ad8:	08006af9 	.word	0x08006af9
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006b09 	.word	0x08006b09
 8006ae4:	08006b11 	.word	0x08006b11
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aee:	e284      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006af0:	2304      	movs	r3, #4
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af6:	e280      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006af8:	2308      	movs	r3, #8
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e27c      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006b00:	2310      	movs	r3, #16
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e278      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006b08:	2320      	movs	r3, #32
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e274      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006b10:	2340      	movs	r3, #64	; 0x40
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e270      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1e:	e26c      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1b      	ldr	r2, [pc, #108]	; (8006b94 <UART_SetConfig+0x348>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d142      	bne.n	8006bb0 <UART_SetConfig+0x364>
 8006b2a:	4b16      	ldr	r3, [pc, #88]	; (8006b84 <UART_SetConfig+0x338>)
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	2b05      	cmp	r3, #5
 8006b34:	d838      	bhi.n	8006ba8 <UART_SetConfig+0x35c>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0x2f0>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b55 	.word	0x08006b55
 8006b40:	08006b5d 	.word	0x08006b5d
 8006b44:	08006b65 	.word	0x08006b65
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b99 	.word	0x08006b99
 8006b50:	08006ba1 	.word	0x08006ba1
 8006b54:	2300      	movs	r3, #0
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5a:	e24e      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b62:	e24a      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006b64:	2308      	movs	r3, #8
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6a:	e246      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b72:	e242      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006b74:	cfff69f3 	.word	0xcfff69f3
 8006b78:	58000c00 	.word	0x58000c00
 8006b7c:	11fff4ff 	.word	0x11fff4ff
 8006b80:	40011000 	.word	0x40011000
 8006b84:	58024400 	.word	0x58024400
 8006b88:	40004400 	.word	0x40004400
 8006b8c:	40004800 	.word	0x40004800
 8006b90:	40004c00 	.word	0x40004c00
 8006b94:	40005000 	.word	0x40005000
 8006b98:	2320      	movs	r3, #32
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9e:	e22c      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006ba0:	2340      	movs	r3, #64	; 0x40
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba6:	e228      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006ba8:	2380      	movs	r3, #128	; 0x80
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bae:	e224      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4ab1      	ldr	r2, [pc, #708]	; (8006e7c <UART_SetConfig+0x630>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d176      	bne.n	8006ca8 <UART_SetConfig+0x45c>
 8006bba:	4bb1      	ldr	r3, [pc, #708]	; (8006e80 <UART_SetConfig+0x634>)
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bc2:	2b28      	cmp	r3, #40	; 0x28
 8006bc4:	d86c      	bhi.n	8006ca0 <UART_SetConfig+0x454>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <UART_SetConfig+0x380>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c71 	.word	0x08006c71
 8006bd0:	08006ca1 	.word	0x08006ca1
 8006bd4:	08006ca1 	.word	0x08006ca1
 8006bd8:	08006ca1 	.word	0x08006ca1
 8006bdc:	08006ca1 	.word	0x08006ca1
 8006be0:	08006ca1 	.word	0x08006ca1
 8006be4:	08006ca1 	.word	0x08006ca1
 8006be8:	08006ca1 	.word	0x08006ca1
 8006bec:	08006c79 	.word	0x08006c79
 8006bf0:	08006ca1 	.word	0x08006ca1
 8006bf4:	08006ca1 	.word	0x08006ca1
 8006bf8:	08006ca1 	.word	0x08006ca1
 8006bfc:	08006ca1 	.word	0x08006ca1
 8006c00:	08006ca1 	.word	0x08006ca1
 8006c04:	08006ca1 	.word	0x08006ca1
 8006c08:	08006ca1 	.word	0x08006ca1
 8006c0c:	08006c81 	.word	0x08006c81
 8006c10:	08006ca1 	.word	0x08006ca1
 8006c14:	08006ca1 	.word	0x08006ca1
 8006c18:	08006ca1 	.word	0x08006ca1
 8006c1c:	08006ca1 	.word	0x08006ca1
 8006c20:	08006ca1 	.word	0x08006ca1
 8006c24:	08006ca1 	.word	0x08006ca1
 8006c28:	08006ca1 	.word	0x08006ca1
 8006c2c:	08006c89 	.word	0x08006c89
 8006c30:	08006ca1 	.word	0x08006ca1
 8006c34:	08006ca1 	.word	0x08006ca1
 8006c38:	08006ca1 	.word	0x08006ca1
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006ca1 	.word	0x08006ca1
 8006c44:	08006ca1 	.word	0x08006ca1
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006c91 	.word	0x08006c91
 8006c50:	08006ca1 	.word	0x08006ca1
 8006c54:	08006ca1 	.word	0x08006ca1
 8006c58:	08006ca1 	.word	0x08006ca1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006ca1 	.word	0x08006ca1
 8006c64:	08006ca1 	.word	0x08006ca1
 8006c68:	08006ca1 	.word	0x08006ca1
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e1c0      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e1bc      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e1b8      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e1b4      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006c90:	2320      	movs	r3, #32
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e1b0      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9e:	e1ac      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca6:	e1a8      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a75      	ldr	r2, [pc, #468]	; (8006e84 <UART_SetConfig+0x638>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d130      	bne.n	8006d14 <UART_SetConfig+0x4c8>
 8006cb2:	4b73      	ldr	r3, [pc, #460]	; (8006e80 <UART_SetConfig+0x634>)
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d826      	bhi.n	8006d0c <UART_SetConfig+0x4c0>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0x478>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cdd 	.word	0x08006cdd
 8006cc8:	08006ce5 	.word	0x08006ce5
 8006ccc:	08006ced 	.word	0x08006ced
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006d05 	.word	0x08006d05
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e18a      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e186      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e182      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e17e      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e17a      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0a:	e176      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d0c:	2380      	movs	r3, #128	; 0x80
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d12:	e172      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a5b      	ldr	r2, [pc, #364]	; (8006e88 <UART_SetConfig+0x63c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d130      	bne.n	8006d80 <UART_SetConfig+0x534>
 8006d1e:	4b58      	ldr	r3, [pc, #352]	; (8006e80 <UART_SetConfig+0x634>)
 8006d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	d826      	bhi.n	8006d78 <UART_SetConfig+0x52c>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <UART_SetConfig+0x4e4>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d49 	.word	0x08006d49
 8006d34:	08006d51 	.word	0x08006d51
 8006d38:	08006d59 	.word	0x08006d59
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d69 	.word	0x08006d69
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4e:	e154      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d50:	2304      	movs	r3, #4
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e150      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d58:	2308      	movs	r3, #8
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e14c      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d60:	2310      	movs	r3, #16
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e148      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d68:	2320      	movs	r3, #32
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e144      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d70:	2340      	movs	r3, #64	; 0x40
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d76:	e140      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d78:	2380      	movs	r3, #128	; 0x80
 8006d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7e:	e13c      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a41      	ldr	r2, [pc, #260]	; (8006e8c <UART_SetConfig+0x640>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	f040 8082 	bne.w	8006e90 <UART_SetConfig+0x644>
 8006d8c:	4b3c      	ldr	r3, [pc, #240]	; (8006e80 <UART_SetConfig+0x634>)
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d94:	2b28      	cmp	r3, #40	; 0x28
 8006d96:	d86d      	bhi.n	8006e74 <UART_SetConfig+0x628>
 8006d98:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <UART_SetConfig+0x554>)
 8006d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9e:	bf00      	nop
 8006da0:	08006e45 	.word	0x08006e45
 8006da4:	08006e75 	.word	0x08006e75
 8006da8:	08006e75 	.word	0x08006e75
 8006dac:	08006e75 	.word	0x08006e75
 8006db0:	08006e75 	.word	0x08006e75
 8006db4:	08006e75 	.word	0x08006e75
 8006db8:	08006e75 	.word	0x08006e75
 8006dbc:	08006e75 	.word	0x08006e75
 8006dc0:	08006e4d 	.word	0x08006e4d
 8006dc4:	08006e75 	.word	0x08006e75
 8006dc8:	08006e75 	.word	0x08006e75
 8006dcc:	08006e75 	.word	0x08006e75
 8006dd0:	08006e75 	.word	0x08006e75
 8006dd4:	08006e75 	.word	0x08006e75
 8006dd8:	08006e75 	.word	0x08006e75
 8006ddc:	08006e75 	.word	0x08006e75
 8006de0:	08006e55 	.word	0x08006e55
 8006de4:	08006e75 	.word	0x08006e75
 8006de8:	08006e75 	.word	0x08006e75
 8006dec:	08006e75 	.word	0x08006e75
 8006df0:	08006e75 	.word	0x08006e75
 8006df4:	08006e75 	.word	0x08006e75
 8006df8:	08006e75 	.word	0x08006e75
 8006dfc:	08006e75 	.word	0x08006e75
 8006e00:	08006e5d 	.word	0x08006e5d
 8006e04:	08006e75 	.word	0x08006e75
 8006e08:	08006e75 	.word	0x08006e75
 8006e0c:	08006e75 	.word	0x08006e75
 8006e10:	08006e75 	.word	0x08006e75
 8006e14:	08006e75 	.word	0x08006e75
 8006e18:	08006e75 	.word	0x08006e75
 8006e1c:	08006e75 	.word	0x08006e75
 8006e20:	08006e65 	.word	0x08006e65
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	08006e75 	.word	0x08006e75
 8006e2c:	08006e75 	.word	0x08006e75
 8006e30:	08006e75 	.word	0x08006e75
 8006e34:	08006e75 	.word	0x08006e75
 8006e38:	08006e75 	.word	0x08006e75
 8006e3c:	08006e75 	.word	0x08006e75
 8006e40:	08006e6d 	.word	0x08006e6d
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e0d6      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e0d2      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006e54:	2308      	movs	r3, #8
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e0ce      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e0ca      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006e64:	2320      	movs	r3, #32
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e0c6      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e0c2      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006e74:	2380      	movs	r3, #128	; 0x80
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7a:	e0be      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006e7c:	40011400 	.word	0x40011400
 8006e80:	58024400 	.word	0x58024400
 8006e84:	40007800 	.word	0x40007800
 8006e88:	40007c00 	.word	0x40007c00
 8006e8c:	40011800 	.word	0x40011800
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4aad      	ldr	r2, [pc, #692]	; (800714c <UART_SetConfig+0x900>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d176      	bne.n	8006f88 <UART_SetConfig+0x73c>
 8006e9a:	4bad      	ldr	r3, [pc, #692]	; (8007150 <UART_SetConfig+0x904>)
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ea2:	2b28      	cmp	r3, #40	; 0x28
 8006ea4:	d86c      	bhi.n	8006f80 <UART_SetConfig+0x734>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0x660>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006f51 	.word	0x08006f51
 8006eb0:	08006f81 	.word	0x08006f81
 8006eb4:	08006f81 	.word	0x08006f81
 8006eb8:	08006f81 	.word	0x08006f81
 8006ebc:	08006f81 	.word	0x08006f81
 8006ec0:	08006f81 	.word	0x08006f81
 8006ec4:	08006f81 	.word	0x08006f81
 8006ec8:	08006f81 	.word	0x08006f81
 8006ecc:	08006f59 	.word	0x08006f59
 8006ed0:	08006f81 	.word	0x08006f81
 8006ed4:	08006f81 	.word	0x08006f81
 8006ed8:	08006f81 	.word	0x08006f81
 8006edc:	08006f81 	.word	0x08006f81
 8006ee0:	08006f81 	.word	0x08006f81
 8006ee4:	08006f81 	.word	0x08006f81
 8006ee8:	08006f81 	.word	0x08006f81
 8006eec:	08006f61 	.word	0x08006f61
 8006ef0:	08006f81 	.word	0x08006f81
 8006ef4:	08006f81 	.word	0x08006f81
 8006ef8:	08006f81 	.word	0x08006f81
 8006efc:	08006f81 	.word	0x08006f81
 8006f00:	08006f81 	.word	0x08006f81
 8006f04:	08006f81 	.word	0x08006f81
 8006f08:	08006f81 	.word	0x08006f81
 8006f0c:	08006f69 	.word	0x08006f69
 8006f10:	08006f81 	.word	0x08006f81
 8006f14:	08006f81 	.word	0x08006f81
 8006f18:	08006f81 	.word	0x08006f81
 8006f1c:	08006f81 	.word	0x08006f81
 8006f20:	08006f81 	.word	0x08006f81
 8006f24:	08006f81 	.word	0x08006f81
 8006f28:	08006f81 	.word	0x08006f81
 8006f2c:	08006f71 	.word	0x08006f71
 8006f30:	08006f81 	.word	0x08006f81
 8006f34:	08006f81 	.word	0x08006f81
 8006f38:	08006f81 	.word	0x08006f81
 8006f3c:	08006f81 	.word	0x08006f81
 8006f40:	08006f81 	.word	0x08006f81
 8006f44:	08006f81 	.word	0x08006f81
 8006f48:	08006f81 	.word	0x08006f81
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f56:	e050      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5e:	e04c      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006f60:	2308      	movs	r3, #8
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f66:	e048      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6e:	e044      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006f70:	2320      	movs	r3, #32
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f76:	e040      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006f78:	2340      	movs	r3, #64	; 0x40
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7e:	e03c      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006f80:	2380      	movs	r3, #128	; 0x80
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e038      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a71      	ldr	r2, [pc, #452]	; (8007154 <UART_SetConfig+0x908>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d130      	bne.n	8006ff4 <UART_SetConfig+0x7a8>
 8006f92:	4b6f      	ldr	r3, [pc, #444]	; (8007150 <UART_SetConfig+0x904>)
 8006f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	2b05      	cmp	r3, #5
 8006f9c:	d826      	bhi.n	8006fec <UART_SetConfig+0x7a0>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <UART_SetConfig+0x758>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fbd 	.word	0x08006fbd
 8006fa8:	08006fc5 	.word	0x08006fc5
 8006fac:	08006fcd 	.word	0x08006fcd
 8006fb0:	08006fd5 	.word	0x08006fd5
 8006fb4:	08006fdd 	.word	0x08006fdd
 8006fb8:	08006fe5 	.word	0x08006fe5
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc2:	e01a      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e016      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e012      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e00e      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006fdc:	2320      	movs	r3, #32
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe2:	e00a      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006fe4:	2340      	movs	r3, #64	; 0x40
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fea:	e006      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006fec:	2380      	movs	r3, #128	; 0x80
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e002      	b.n	8006ffa <UART_SetConfig+0x7ae>
 8006ff4:	2380      	movs	r3, #128	; 0x80
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a55      	ldr	r2, [pc, #340]	; (8007154 <UART_SetConfig+0x908>)
 8007000:	4293      	cmp	r3, r2
 8007002:	f040 80f8 	bne.w	80071f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007006:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800700a:	2b20      	cmp	r3, #32
 800700c:	dc46      	bgt.n	800709c <UART_SetConfig+0x850>
 800700e:	2b02      	cmp	r3, #2
 8007010:	db75      	blt.n	80070fe <UART_SetConfig+0x8b2>
 8007012:	3b02      	subs	r3, #2
 8007014:	2b1e      	cmp	r3, #30
 8007016:	d872      	bhi.n	80070fe <UART_SetConfig+0x8b2>
 8007018:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <UART_SetConfig+0x7d4>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	080070a3 	.word	0x080070a3
 8007024:	080070ff 	.word	0x080070ff
 8007028:	080070ab 	.word	0x080070ab
 800702c:	080070ff 	.word	0x080070ff
 8007030:	080070ff 	.word	0x080070ff
 8007034:	080070ff 	.word	0x080070ff
 8007038:	080070bb 	.word	0x080070bb
 800703c:	080070ff 	.word	0x080070ff
 8007040:	080070ff 	.word	0x080070ff
 8007044:	080070ff 	.word	0x080070ff
 8007048:	080070ff 	.word	0x080070ff
 800704c:	080070ff 	.word	0x080070ff
 8007050:	080070ff 	.word	0x080070ff
 8007054:	080070ff 	.word	0x080070ff
 8007058:	080070cb 	.word	0x080070cb
 800705c:	080070ff 	.word	0x080070ff
 8007060:	080070ff 	.word	0x080070ff
 8007064:	080070ff 	.word	0x080070ff
 8007068:	080070ff 	.word	0x080070ff
 800706c:	080070ff 	.word	0x080070ff
 8007070:	080070ff 	.word	0x080070ff
 8007074:	080070ff 	.word	0x080070ff
 8007078:	080070ff 	.word	0x080070ff
 800707c:	080070ff 	.word	0x080070ff
 8007080:	080070ff 	.word	0x080070ff
 8007084:	080070ff 	.word	0x080070ff
 8007088:	080070ff 	.word	0x080070ff
 800708c:	080070ff 	.word	0x080070ff
 8007090:	080070ff 	.word	0x080070ff
 8007094:	080070ff 	.word	0x080070ff
 8007098:	080070f1 	.word	0x080070f1
 800709c:	2b40      	cmp	r3, #64	; 0x40
 800709e:	d02a      	beq.n	80070f6 <UART_SetConfig+0x8aa>
 80070a0:	e02d      	b.n	80070fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070a2:	f7fe fb0d 	bl	80056c0 <HAL_RCCEx_GetD3PCLK1Freq>
 80070a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070a8:	e02f      	b.n	800710a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fb1c 	bl	80056ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b8:	e027      	b.n	800710a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ba:	f107 0318 	add.w	r3, r7, #24
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fc68 	bl	8005994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c8:	e01f      	b.n	800710a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ca:	4b21      	ldr	r3, [pc, #132]	; (8007150 <UART_SetConfig+0x904>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070d6:	4b1e      	ldr	r3, [pc, #120]	; (8007150 <UART_SetConfig+0x904>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	08db      	lsrs	r3, r3, #3
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	4a1d      	ldr	r2, [pc, #116]	; (8007158 <UART_SetConfig+0x90c>)
 80070e2:	fa22 f303 	lsr.w	r3, r2, r3
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070e8:	e00f      	b.n	800710a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80070ea:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <UART_SetConfig+0x90c>)
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ee:	e00c      	b.n	800710a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070f0:	4b1a      	ldr	r3, [pc, #104]	; (800715c <UART_SetConfig+0x910>)
 80070f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f4:	e009      	b.n	800710a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070fc:	e005      	b.n	800710a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007108:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800710a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 81ee 	beq.w	80074ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	4a12      	ldr	r2, [pc, #72]	; (8007160 <UART_SetConfig+0x914>)
 8007118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800711c:	461a      	mov	r2, r3
 800711e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007120:	fbb3 f3f2 	udiv	r3, r3, r2
 8007124:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	4413      	add	r3, r2
 8007130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007132:	429a      	cmp	r2, r3
 8007134:	d305      	bcc.n	8007142 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800713c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713e:	429a      	cmp	r2, r3
 8007140:	d910      	bls.n	8007164 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007148:	e1d1      	b.n	80074ee <UART_SetConfig+0xca2>
 800714a:	bf00      	nop
 800714c:	40011c00 	.word	0x40011c00
 8007150:	58024400 	.word	0x58024400
 8007154:	58000c00 	.word	0x58000c00
 8007158:	03d09000 	.word	0x03d09000
 800715c:	003d0900 	.word	0x003d0900
 8007160:	08008d84 	.word	0x08008d84
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007166:	2200      	movs	r2, #0
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	60fa      	str	r2, [r7, #12]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	4ac0      	ldr	r2, [pc, #768]	; (8007474 <UART_SetConfig+0xc28>)
 8007172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007176:	b29b      	uxth	r3, r3
 8007178:	2200      	movs	r2, #0
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007186:	f7f9 f903 	bl	8000390 <__aeabi_uldivmod>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	4610      	mov	r0, r2
 8007190:	4619      	mov	r1, r3
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	020b      	lsls	r3, r1, #8
 800719c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071a0:	0202      	lsls	r2, r0, #8
 80071a2:	6979      	ldr	r1, [r7, #20]
 80071a4:	6849      	ldr	r1, [r1, #4]
 80071a6:	0849      	lsrs	r1, r1, #1
 80071a8:	2000      	movs	r0, #0
 80071aa:	460c      	mov	r4, r1
 80071ac:	4605      	mov	r5, r0
 80071ae:	eb12 0804 	adds.w	r8, r2, r4
 80071b2:	eb43 0905 	adc.w	r9, r3, r5
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	469a      	mov	sl, r3
 80071be:	4693      	mov	fp, r2
 80071c0:	4652      	mov	r2, sl
 80071c2:	465b      	mov	r3, fp
 80071c4:	4640      	mov	r0, r8
 80071c6:	4649      	mov	r1, r9
 80071c8:	f7f9 f8e2 	bl	8000390 <__aeabi_uldivmod>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4613      	mov	r3, r2
 80071d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071da:	d308      	bcc.n	80071ee <UART_SetConfig+0x9a2>
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e2:	d204      	bcs.n	80071ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ea:	60da      	str	r2, [r3, #12]
 80071ec:	e17f      	b.n	80074ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80071f4:	e17b      	b.n	80074ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071fe:	f040 80bd 	bne.w	800737c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007202:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007206:	2b20      	cmp	r3, #32
 8007208:	dc48      	bgt.n	800729c <UART_SetConfig+0xa50>
 800720a:	2b00      	cmp	r3, #0
 800720c:	db7b      	blt.n	8007306 <UART_SetConfig+0xaba>
 800720e:	2b20      	cmp	r3, #32
 8007210:	d879      	bhi.n	8007306 <UART_SetConfig+0xaba>
 8007212:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <UART_SetConfig+0x9cc>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	080072a3 	.word	0x080072a3
 800721c:	080072ab 	.word	0x080072ab
 8007220:	08007307 	.word	0x08007307
 8007224:	08007307 	.word	0x08007307
 8007228:	080072b3 	.word	0x080072b3
 800722c:	08007307 	.word	0x08007307
 8007230:	08007307 	.word	0x08007307
 8007234:	08007307 	.word	0x08007307
 8007238:	080072c3 	.word	0x080072c3
 800723c:	08007307 	.word	0x08007307
 8007240:	08007307 	.word	0x08007307
 8007244:	08007307 	.word	0x08007307
 8007248:	08007307 	.word	0x08007307
 800724c:	08007307 	.word	0x08007307
 8007250:	08007307 	.word	0x08007307
 8007254:	08007307 	.word	0x08007307
 8007258:	080072d3 	.word	0x080072d3
 800725c:	08007307 	.word	0x08007307
 8007260:	08007307 	.word	0x08007307
 8007264:	08007307 	.word	0x08007307
 8007268:	08007307 	.word	0x08007307
 800726c:	08007307 	.word	0x08007307
 8007270:	08007307 	.word	0x08007307
 8007274:	08007307 	.word	0x08007307
 8007278:	08007307 	.word	0x08007307
 800727c:	08007307 	.word	0x08007307
 8007280:	08007307 	.word	0x08007307
 8007284:	08007307 	.word	0x08007307
 8007288:	08007307 	.word	0x08007307
 800728c:	08007307 	.word	0x08007307
 8007290:	08007307 	.word	0x08007307
 8007294:	08007307 	.word	0x08007307
 8007298:	080072f9 	.word	0x080072f9
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d02e      	beq.n	80072fe <UART_SetConfig+0xab2>
 80072a0:	e031      	b.n	8007306 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a2:	f7fd fad5 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 80072a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072a8:	e033      	b.n	8007312 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072aa:	f7fd fae7 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 80072ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072b0:	e02f      	b.n	8007312 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fa18 	bl	80056ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c0:	e027      	b.n	8007312 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072c2:	f107 0318 	add.w	r3, r7, #24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fb64 	bl	8005994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072d0:	e01f      	b.n	8007312 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072d2:	4b69      	ldr	r3, [pc, #420]	; (8007478 <UART_SetConfig+0xc2c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d009      	beq.n	80072f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072de:	4b66      	ldr	r3, [pc, #408]	; (8007478 <UART_SetConfig+0xc2c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	08db      	lsrs	r3, r3, #3
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	4a64      	ldr	r2, [pc, #400]	; (800747c <UART_SetConfig+0xc30>)
 80072ea:	fa22 f303 	lsr.w	r3, r2, r3
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072f0:	e00f      	b.n	8007312 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80072f2:	4b62      	ldr	r3, [pc, #392]	; (800747c <UART_SetConfig+0xc30>)
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072f6:	e00c      	b.n	8007312 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80072f8:	4b61      	ldr	r3, [pc, #388]	; (8007480 <UART_SetConfig+0xc34>)
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072fc:	e009      	b.n	8007312 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007304:	e005      	b.n	8007312 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80ea 	beq.w	80074ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	4a55      	ldr	r2, [pc, #340]	; (8007474 <UART_SetConfig+0xc28>)
 8007320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007324:	461a      	mov	r2, r3
 8007326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007328:	fbb3 f3f2 	udiv	r3, r3, r2
 800732c:	005a      	lsls	r2, r3, #1
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	085b      	lsrs	r3, r3, #1
 8007334:	441a      	add	r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	2b0f      	cmp	r3, #15
 8007344:	d916      	bls.n	8007374 <UART_SetConfig+0xb28>
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800734c:	d212      	bcs.n	8007374 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	b29b      	uxth	r3, r3
 8007352:	f023 030f 	bic.w	r3, r3, #15
 8007356:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735a:	085b      	lsrs	r3, r3, #1
 800735c:	b29b      	uxth	r3, r3
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	b29a      	uxth	r2, r3
 8007364:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007366:	4313      	orrs	r3, r2
 8007368:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	e0bc      	b.n	80074ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800737a:	e0b8      	b.n	80074ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800737c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007380:	2b20      	cmp	r3, #32
 8007382:	dc4b      	bgt.n	800741c <UART_SetConfig+0xbd0>
 8007384:	2b00      	cmp	r3, #0
 8007386:	f2c0 8087 	blt.w	8007498 <UART_SetConfig+0xc4c>
 800738a:	2b20      	cmp	r3, #32
 800738c:	f200 8084 	bhi.w	8007498 <UART_SetConfig+0xc4c>
 8007390:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <UART_SetConfig+0xb4c>)
 8007392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007396:	bf00      	nop
 8007398:	08007423 	.word	0x08007423
 800739c:	0800742b 	.word	0x0800742b
 80073a0:	08007499 	.word	0x08007499
 80073a4:	08007499 	.word	0x08007499
 80073a8:	08007433 	.word	0x08007433
 80073ac:	08007499 	.word	0x08007499
 80073b0:	08007499 	.word	0x08007499
 80073b4:	08007499 	.word	0x08007499
 80073b8:	08007443 	.word	0x08007443
 80073bc:	08007499 	.word	0x08007499
 80073c0:	08007499 	.word	0x08007499
 80073c4:	08007499 	.word	0x08007499
 80073c8:	08007499 	.word	0x08007499
 80073cc:	08007499 	.word	0x08007499
 80073d0:	08007499 	.word	0x08007499
 80073d4:	08007499 	.word	0x08007499
 80073d8:	08007453 	.word	0x08007453
 80073dc:	08007499 	.word	0x08007499
 80073e0:	08007499 	.word	0x08007499
 80073e4:	08007499 	.word	0x08007499
 80073e8:	08007499 	.word	0x08007499
 80073ec:	08007499 	.word	0x08007499
 80073f0:	08007499 	.word	0x08007499
 80073f4:	08007499 	.word	0x08007499
 80073f8:	08007499 	.word	0x08007499
 80073fc:	08007499 	.word	0x08007499
 8007400:	08007499 	.word	0x08007499
 8007404:	08007499 	.word	0x08007499
 8007408:	08007499 	.word	0x08007499
 800740c:	08007499 	.word	0x08007499
 8007410:	08007499 	.word	0x08007499
 8007414:	08007499 	.word	0x08007499
 8007418:	0800748b 	.word	0x0800748b
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d037      	beq.n	8007490 <UART_SetConfig+0xc44>
 8007420:	e03a      	b.n	8007498 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007422:	f7fd fa15 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 8007426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007428:	e03c      	b.n	80074a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800742a:	f7fd fa27 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 800742e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007430:	e038      	b.n	80074a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe f958 	bl	80056ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007440:	e030      	b.n	80074a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007442:	f107 0318 	add.w	r3, r7, #24
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe faa4 	bl	8005994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007450:	e028      	b.n	80074a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007452:	4b09      	ldr	r3, [pc, #36]	; (8007478 <UART_SetConfig+0xc2c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d012      	beq.n	8007484 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800745e:	4b06      	ldr	r3, [pc, #24]	; (8007478 <UART_SetConfig+0xc2c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	08db      	lsrs	r3, r3, #3
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	4a04      	ldr	r2, [pc, #16]	; (800747c <UART_SetConfig+0xc30>)
 800746a:	fa22 f303 	lsr.w	r3, r2, r3
 800746e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007470:	e018      	b.n	80074a4 <UART_SetConfig+0xc58>
 8007472:	bf00      	nop
 8007474:	08008d84 	.word	0x08008d84
 8007478:	58024400 	.word	0x58024400
 800747c:	03d09000 	.word	0x03d09000
 8007480:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <UART_SetConfig+0xccc>)
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007488:	e00c      	b.n	80074a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800748a:	4b24      	ldr	r3, [pc, #144]	; (800751c <UART_SetConfig+0xcd0>)
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800748e:	e009      	b.n	80074a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007496:	e005      	b.n	80074a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80074a2:	bf00      	nop
    }

    if (pclk != 0U)
 80074a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d021      	beq.n	80074ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	4a1c      	ldr	r2, [pc, #112]	; (8007520 <UART_SetConfig+0xcd4>)
 80074b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b4:	461a      	mov	r2, r3
 80074b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	441a      	add	r2, r3
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074cc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	2b0f      	cmp	r3, #15
 80074d2:	d909      	bls.n	80074e8 <UART_SetConfig+0xc9c>
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074da:	d205      	bcs.n	80074e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	b29a      	uxth	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60da      	str	r2, [r3, #12]
 80074e6:	e002      	b.n	80074ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2200      	movs	r2, #0
 8007502:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2200      	movs	r2, #0
 8007508:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800750a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800750e:	4618      	mov	r0, r3
 8007510:	3748      	adds	r7, #72	; 0x48
 8007512:	46bd      	mov	sp, r7
 8007514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007518:	03d09000 	.word	0x03d09000
 800751c:	003d0900 	.word	0x003d0900
 8007520:	08008d84 	.word	0x08008d84

08007524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	f003 0310 	and.w	r3, r3, #16
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d01a      	beq.n	800763a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007622:	d10a      	bne.n	800763a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  }
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af02      	add	r7, sp, #8
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007678:	f7fa fac2 	bl	8001c00 <HAL_GetTick>
 800767c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b08      	cmp	r3, #8
 800768a:	d10e      	bne.n	80076aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800768c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f82f 	bl	80076fe <UART_WaitOnFlagUntilTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e025      	b.n	80076f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b04      	cmp	r3, #4
 80076b6:	d10e      	bne.n	80076d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f819 	bl	80076fe <UART_WaitOnFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e00f      	b.n	80076f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b09c      	sub	sp, #112	; 0x70
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	603b      	str	r3, [r7, #0]
 800770a:	4613      	mov	r3, r2
 800770c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800770e:	e0a9      	b.n	8007864 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007716:	f000 80a5 	beq.w	8007864 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771a:	f7fa fa71 	bl	8001c00 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007726:	429a      	cmp	r2, r3
 8007728:	d302      	bcc.n	8007730 <UART_WaitOnFlagUntilTimeout+0x32>
 800772a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800772c:	2b00      	cmp	r3, #0
 800772e:	d140      	bne.n	80077b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800773e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007744:	667b      	str	r3, [r7, #100]	; 0x64
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007750:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800775c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e6      	bne.n	8007730 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	f023 0301 	bic.w	r3, r3, #1
 8007778:	663b      	str	r3, [r7, #96]	; 0x60
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3308      	adds	r3, #8
 8007780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007782:	64ba      	str	r2, [r7, #72]	; 0x48
 8007784:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e5      	bne.n	8007762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e069      	b.n	8007886 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d051      	beq.n	8007864 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ce:	d149      	bne.n	8007864 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
 80077fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e6      	bne.n	80077da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	613b      	str	r3, [r7, #16]
   return(result);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f023 0301 	bic.w	r3, r3, #1
 8007822:	66bb      	str	r3, [r7, #104]	; 0x68
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800782c:	623a      	str	r2, [r7, #32]
 800782e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	69f9      	ldr	r1, [r7, #28]
 8007832:	6a3a      	ldr	r2, [r7, #32]
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	61bb      	str	r3, [r7, #24]
   return(result);
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2220      	movs	r2, #32
 8007844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e010      	b.n	8007886 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	69da      	ldr	r2, [r3, #28]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	4013      	ands	r3, r2
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	429a      	cmp	r2, r3
 8007872:	bf0c      	ite	eq
 8007874:	2301      	moveq	r3, #1
 8007876:	2300      	movne	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	429a      	cmp	r2, r3
 8007880:	f43f af46 	beq.w	8007710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3770      	adds	r7, #112	; 0x70
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b095      	sub	sp, #84	; 0x54
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b6:	643b      	str	r3, [r7, #64]	; 0x40
 80078b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e6      	bne.n	8007898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	4b1e      	ldr	r3, [pc, #120]	; (8007958 <UART_EndRxTransfer+0xc8>)
 80078de:	4013      	ands	r3, r2
 80078e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e5      	bne.n	80078ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007902:	2b01      	cmp	r3, #1
 8007904:	d118      	bne.n	8007938 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	60bb      	str	r3, [r7, #8]
   return(result);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f023 0310 	bic.w	r3, r3, #16
 800791a:	647b      	str	r3, [r7, #68]	; 0x44
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6979      	ldr	r1, [r7, #20]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	613b      	str	r3, [r7, #16]
   return(result);
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e6      	bne.n	8007906 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800794c:	bf00      	nop
 800794e:	3754      	adds	r7, #84	; 0x54
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	effffffe 	.word	0xeffffffe

0800795c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7fe ff50 	bl	8006820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	60bb      	str	r3, [r7, #8]
   return(result);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	61bb      	str	r3, [r7, #24]
 80079b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6979      	ldr	r1, [r7, #20]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	613b      	str	r3, [r7, #16]
   return(result);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e6      	bne.n	8007990 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7fe ff1b 	bl	800680c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079d6:	bf00      	nop
 80079d8:	3720      	adds	r7, #32
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b085      	sub	sp, #20
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e027      	b.n	8007a80 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2224      	movs	r2, #36	; 0x24
 8007a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0201 	bic.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e02d      	b.n	8007b00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2224      	movs	r2, #36	; 0x24
 8007ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f84f 	bl	8007b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e02d      	b.n	8007b7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2224      	movs	r2, #36	; 0x24
 8007b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0201 	bic.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f811 	bl	8007b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d108      	bne.n	8007ba6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ba4:	e031      	b.n	8007c0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ba6:	2310      	movs	r3, #16
 8007ba8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007baa:	2310      	movs	r3, #16
 8007bac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	0e5b      	lsrs	r3, r3, #25
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	0f5b      	lsrs	r3, r3, #29
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	7b3a      	ldrb	r2, [r7, #12]
 8007bd2:	4911      	ldr	r1, [pc, #68]	; (8007c18 <UARTEx_SetNbDataToProcess+0x94>)
 8007bd4:	5c8a      	ldrb	r2, [r1, r2]
 8007bd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bda:	7b3a      	ldrb	r2, [r7, #12]
 8007bdc:	490f      	ldr	r1, [pc, #60]	; (8007c1c <UARTEx_SetNbDataToProcess+0x98>)
 8007bde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007be0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	7b7a      	ldrb	r2, [r7, #13]
 8007bf0:	4909      	ldr	r1, [pc, #36]	; (8007c18 <UARTEx_SetNbDataToProcess+0x94>)
 8007bf2:	5c8a      	ldrb	r2, [r1, r2]
 8007bf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bf8:	7b7a      	ldrb	r2, [r7, #13]
 8007bfa:	4908      	ldr	r1, [pc, #32]	; (8007c1c <UARTEx_SetNbDataToProcess+0x98>)
 8007bfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	08008d9c 	.word	0x08008d9c
 8007c1c:	08008da4 	.word	0x08008da4

08007c20 <__assert_func>:
 8007c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c22:	4614      	mov	r4, r2
 8007c24:	461a      	mov	r2, r3
 8007c26:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <__assert_func+0x2c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	68d8      	ldr	r0, [r3, #12]
 8007c2e:	b14c      	cbz	r4, 8007c44 <__assert_func+0x24>
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <__assert_func+0x30>)
 8007c32:	9100      	str	r1, [sp, #0]
 8007c34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c38:	4906      	ldr	r1, [pc, #24]	; (8007c54 <__assert_func+0x34>)
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	f000 f814 	bl	8007c68 <fiprintf>
 8007c40:	f000 fbfe 	bl	8008440 <abort>
 8007c44:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <__assert_func+0x38>)
 8007c46:	461c      	mov	r4, r3
 8007c48:	e7f3      	b.n	8007c32 <__assert_func+0x12>
 8007c4a:	bf00      	nop
 8007c4c:	24000010 	.word	0x24000010
 8007c50:	08008dac 	.word	0x08008dac
 8007c54:	08008db9 	.word	0x08008db9
 8007c58:	08008de7 	.word	0x08008de7

08007c5c <__errno>:
 8007c5c:	4b01      	ldr	r3, [pc, #4]	; (8007c64 <__errno+0x8>)
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	24000010 	.word	0x24000010

08007c68 <fiprintf>:
 8007c68:	b40e      	push	{r1, r2, r3}
 8007c6a:	b503      	push	{r0, r1, lr}
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	ab03      	add	r3, sp, #12
 8007c70:	4805      	ldr	r0, [pc, #20]	; (8007c88 <fiprintf+0x20>)
 8007c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c76:	6800      	ldr	r0, [r0, #0]
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	f000 f85d 	bl	8007d38 <_vfiprintf_r>
 8007c7e:	b002      	add	sp, #8
 8007c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c84:	b003      	add	sp, #12
 8007c86:	4770      	bx	lr
 8007c88:	24000010 	.word	0x24000010

08007c8c <__libc_init_array>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	4d0d      	ldr	r5, [pc, #52]	; (8007cc4 <__libc_init_array+0x38>)
 8007c90:	4c0d      	ldr	r4, [pc, #52]	; (8007cc8 <__libc_init_array+0x3c>)
 8007c92:	1b64      	subs	r4, r4, r5
 8007c94:	10a4      	asrs	r4, r4, #2
 8007c96:	2600      	movs	r6, #0
 8007c98:	42a6      	cmp	r6, r4
 8007c9a:	d109      	bne.n	8007cb0 <__libc_init_array+0x24>
 8007c9c:	4d0b      	ldr	r5, [pc, #44]	; (8007ccc <__libc_init_array+0x40>)
 8007c9e:	4c0c      	ldr	r4, [pc, #48]	; (8007cd0 <__libc_init_array+0x44>)
 8007ca0:	f000 ffe2 	bl	8008c68 <_init>
 8007ca4:	1b64      	subs	r4, r4, r5
 8007ca6:	10a4      	asrs	r4, r4, #2
 8007ca8:	2600      	movs	r6, #0
 8007caa:	42a6      	cmp	r6, r4
 8007cac:	d105      	bne.n	8007cba <__libc_init_array+0x2e>
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb4:	4798      	blx	r3
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7ee      	b.n	8007c98 <__libc_init_array+0xc>
 8007cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cbe:	4798      	blx	r3
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	e7f2      	b.n	8007caa <__libc_init_array+0x1e>
 8007cc4:	08008e88 	.word	0x08008e88
 8007cc8:	08008e88 	.word	0x08008e88
 8007ccc:	08008e88 	.word	0x08008e88
 8007cd0:	08008e8c 	.word	0x08008e8c

08007cd4 <memset>:
 8007cd4:	4402      	add	r2, r0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d100      	bne.n	8007cde <memset+0xa>
 8007cdc:	4770      	bx	lr
 8007cde:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce2:	e7f9      	b.n	8007cd8 <memset+0x4>

08007ce4 <__sfputc_r>:
 8007ce4:	6893      	ldr	r3, [r2, #8]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	b410      	push	{r4}
 8007cec:	6093      	str	r3, [r2, #8]
 8007cee:	da08      	bge.n	8007d02 <__sfputc_r+0x1e>
 8007cf0:	6994      	ldr	r4, [r2, #24]
 8007cf2:	42a3      	cmp	r3, r4
 8007cf4:	db01      	blt.n	8007cfa <__sfputc_r+0x16>
 8007cf6:	290a      	cmp	r1, #10
 8007cf8:	d103      	bne.n	8007d02 <__sfputc_r+0x1e>
 8007cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cfe:	f000 badf 	b.w	80082c0 <__swbuf_r>
 8007d02:	6813      	ldr	r3, [r2, #0]
 8007d04:	1c58      	adds	r0, r3, #1
 8007d06:	6010      	str	r0, [r2, #0]
 8007d08:	7019      	strb	r1, [r3, #0]
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <__sfputs_r>:
 8007d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d14:	4606      	mov	r6, r0
 8007d16:	460f      	mov	r7, r1
 8007d18:	4614      	mov	r4, r2
 8007d1a:	18d5      	adds	r5, r2, r3
 8007d1c:	42ac      	cmp	r4, r5
 8007d1e:	d101      	bne.n	8007d24 <__sfputs_r+0x12>
 8007d20:	2000      	movs	r0, #0
 8007d22:	e007      	b.n	8007d34 <__sfputs_r+0x22>
 8007d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d28:	463a      	mov	r2, r7
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7ff ffda 	bl	8007ce4 <__sfputc_r>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d1f3      	bne.n	8007d1c <__sfputs_r+0xa>
 8007d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d38 <_vfiprintf_r>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	460d      	mov	r5, r1
 8007d3e:	b09d      	sub	sp, #116	; 0x74
 8007d40:	4614      	mov	r4, r2
 8007d42:	4698      	mov	r8, r3
 8007d44:	4606      	mov	r6, r0
 8007d46:	b118      	cbz	r0, 8007d50 <_vfiprintf_r+0x18>
 8007d48:	6983      	ldr	r3, [r0, #24]
 8007d4a:	b90b      	cbnz	r3, 8007d50 <_vfiprintf_r+0x18>
 8007d4c:	f000 fc9a 	bl	8008684 <__sinit>
 8007d50:	4b89      	ldr	r3, [pc, #548]	; (8007f78 <_vfiprintf_r+0x240>)
 8007d52:	429d      	cmp	r5, r3
 8007d54:	d11b      	bne.n	8007d8e <_vfiprintf_r+0x56>
 8007d56:	6875      	ldr	r5, [r6, #4]
 8007d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d5a:	07d9      	lsls	r1, r3, #31
 8007d5c:	d405      	bmi.n	8007d6a <_vfiprintf_r+0x32>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	059a      	lsls	r2, r3, #22
 8007d62:	d402      	bmi.n	8007d6a <_vfiprintf_r+0x32>
 8007d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d66:	f000 fd2b 	bl	80087c0 <__retarget_lock_acquire_recursive>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	071b      	lsls	r3, r3, #28
 8007d6e:	d501      	bpl.n	8007d74 <_vfiprintf_r+0x3c>
 8007d70:	692b      	ldr	r3, [r5, #16]
 8007d72:	b9eb      	cbnz	r3, 8007db0 <_vfiprintf_r+0x78>
 8007d74:	4629      	mov	r1, r5
 8007d76:	4630      	mov	r0, r6
 8007d78:	f000 faf4 	bl	8008364 <__swsetup_r>
 8007d7c:	b1c0      	cbz	r0, 8007db0 <_vfiprintf_r+0x78>
 8007d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d80:	07dc      	lsls	r4, r3, #31
 8007d82:	d50e      	bpl.n	8007da2 <_vfiprintf_r+0x6a>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	b01d      	add	sp, #116	; 0x74
 8007d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8e:	4b7b      	ldr	r3, [pc, #492]	; (8007f7c <_vfiprintf_r+0x244>)
 8007d90:	429d      	cmp	r5, r3
 8007d92:	d101      	bne.n	8007d98 <_vfiprintf_r+0x60>
 8007d94:	68b5      	ldr	r5, [r6, #8]
 8007d96:	e7df      	b.n	8007d58 <_vfiprintf_r+0x20>
 8007d98:	4b79      	ldr	r3, [pc, #484]	; (8007f80 <_vfiprintf_r+0x248>)
 8007d9a:	429d      	cmp	r5, r3
 8007d9c:	bf08      	it	eq
 8007d9e:	68f5      	ldreq	r5, [r6, #12]
 8007da0:	e7da      	b.n	8007d58 <_vfiprintf_r+0x20>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	0598      	lsls	r0, r3, #22
 8007da6:	d4ed      	bmi.n	8007d84 <_vfiprintf_r+0x4c>
 8007da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007daa:	f000 fd0a 	bl	80087c2 <__retarget_lock_release_recursive>
 8007dae:	e7e9      	b.n	8007d84 <_vfiprintf_r+0x4c>
 8007db0:	2300      	movs	r3, #0
 8007db2:	9309      	str	r3, [sp, #36]	; 0x24
 8007db4:	2320      	movs	r3, #32
 8007db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dbe:	2330      	movs	r3, #48	; 0x30
 8007dc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f84 <_vfiprintf_r+0x24c>
 8007dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc8:	f04f 0901 	mov.w	r9, #1
 8007dcc:	4623      	mov	r3, r4
 8007dce:	469a      	mov	sl, r3
 8007dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd4:	b10a      	cbz	r2, 8007dda <_vfiprintf_r+0xa2>
 8007dd6:	2a25      	cmp	r2, #37	; 0x25
 8007dd8:	d1f9      	bne.n	8007dce <_vfiprintf_r+0x96>
 8007dda:	ebba 0b04 	subs.w	fp, sl, r4
 8007dde:	d00b      	beq.n	8007df8 <_vfiprintf_r+0xc0>
 8007de0:	465b      	mov	r3, fp
 8007de2:	4622      	mov	r2, r4
 8007de4:	4629      	mov	r1, r5
 8007de6:	4630      	mov	r0, r6
 8007de8:	f7ff ff93 	bl	8007d12 <__sfputs_r>
 8007dec:	3001      	adds	r0, #1
 8007dee:	f000 80aa 	beq.w	8007f46 <_vfiprintf_r+0x20e>
 8007df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df4:	445a      	add	r2, fp
 8007df6:	9209      	str	r2, [sp, #36]	; 0x24
 8007df8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 80a2 	beq.w	8007f46 <_vfiprintf_r+0x20e>
 8007e02:	2300      	movs	r3, #0
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295
 8007e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e0c:	f10a 0a01 	add.w	sl, sl, #1
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	9307      	str	r3, [sp, #28]
 8007e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e18:	931a      	str	r3, [sp, #104]	; 0x68
 8007e1a:	4654      	mov	r4, sl
 8007e1c:	2205      	movs	r2, #5
 8007e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e22:	4858      	ldr	r0, [pc, #352]	; (8007f84 <_vfiprintf_r+0x24c>)
 8007e24:	f7f8 fa64 	bl	80002f0 <memchr>
 8007e28:	9a04      	ldr	r2, [sp, #16]
 8007e2a:	b9d8      	cbnz	r0, 8007e64 <_vfiprintf_r+0x12c>
 8007e2c:	06d1      	lsls	r1, r2, #27
 8007e2e:	bf44      	itt	mi
 8007e30:	2320      	movmi	r3, #32
 8007e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e36:	0713      	lsls	r3, r2, #28
 8007e38:	bf44      	itt	mi
 8007e3a:	232b      	movmi	r3, #43	; 0x2b
 8007e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e40:	f89a 3000 	ldrb.w	r3, [sl]
 8007e44:	2b2a      	cmp	r3, #42	; 0x2a
 8007e46:	d015      	beq.n	8007e74 <_vfiprintf_r+0x13c>
 8007e48:	9a07      	ldr	r2, [sp, #28]
 8007e4a:	4654      	mov	r4, sl
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	f04f 0c0a 	mov.w	ip, #10
 8007e52:	4621      	mov	r1, r4
 8007e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e58:	3b30      	subs	r3, #48	; 0x30
 8007e5a:	2b09      	cmp	r3, #9
 8007e5c:	d94e      	bls.n	8007efc <_vfiprintf_r+0x1c4>
 8007e5e:	b1b0      	cbz	r0, 8007e8e <_vfiprintf_r+0x156>
 8007e60:	9207      	str	r2, [sp, #28]
 8007e62:	e014      	b.n	8007e8e <_vfiprintf_r+0x156>
 8007e64:	eba0 0308 	sub.w	r3, r0, r8
 8007e68:	fa09 f303 	lsl.w	r3, r9, r3
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	46a2      	mov	sl, r4
 8007e72:	e7d2      	b.n	8007e1a <_vfiprintf_r+0xe2>
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	1d19      	adds	r1, r3, #4
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	9103      	str	r1, [sp, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bfbb      	ittet	lt
 8007e80:	425b      	neglt	r3, r3
 8007e82:	f042 0202 	orrlt.w	r2, r2, #2
 8007e86:	9307      	strge	r3, [sp, #28]
 8007e88:	9307      	strlt	r3, [sp, #28]
 8007e8a:	bfb8      	it	lt
 8007e8c:	9204      	strlt	r2, [sp, #16]
 8007e8e:	7823      	ldrb	r3, [r4, #0]
 8007e90:	2b2e      	cmp	r3, #46	; 0x2e
 8007e92:	d10c      	bne.n	8007eae <_vfiprintf_r+0x176>
 8007e94:	7863      	ldrb	r3, [r4, #1]
 8007e96:	2b2a      	cmp	r3, #42	; 0x2a
 8007e98:	d135      	bne.n	8007f06 <_vfiprintf_r+0x1ce>
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	1d1a      	adds	r2, r3, #4
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	9203      	str	r2, [sp, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfb8      	it	lt
 8007ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eaa:	3402      	adds	r4, #2
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f94 <_vfiprintf_r+0x25c>
 8007eb2:	7821      	ldrb	r1, [r4, #0]
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f7f8 fa1a 	bl	80002f0 <memchr>
 8007ebc:	b140      	cbz	r0, 8007ed0 <_vfiprintf_r+0x198>
 8007ebe:	2340      	movs	r3, #64	; 0x40
 8007ec0:	eba0 000a 	sub.w	r0, r0, sl
 8007ec4:	fa03 f000 	lsl.w	r0, r3, r0
 8007ec8:	9b04      	ldr	r3, [sp, #16]
 8007eca:	4303      	orrs	r3, r0
 8007ecc:	3401      	adds	r4, #1
 8007ece:	9304      	str	r3, [sp, #16]
 8007ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed4:	482c      	ldr	r0, [pc, #176]	; (8007f88 <_vfiprintf_r+0x250>)
 8007ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eda:	2206      	movs	r2, #6
 8007edc:	f7f8 fa08 	bl	80002f0 <memchr>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d03f      	beq.n	8007f64 <_vfiprintf_r+0x22c>
 8007ee4:	4b29      	ldr	r3, [pc, #164]	; (8007f8c <_vfiprintf_r+0x254>)
 8007ee6:	bb1b      	cbnz	r3, 8007f30 <_vfiprintf_r+0x1f8>
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	3307      	adds	r3, #7
 8007eec:	f023 0307 	bic.w	r3, r3, #7
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef6:	443b      	add	r3, r7
 8007ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8007efa:	e767      	b.n	8007dcc <_vfiprintf_r+0x94>
 8007efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f00:	460c      	mov	r4, r1
 8007f02:	2001      	movs	r0, #1
 8007f04:	e7a5      	b.n	8007e52 <_vfiprintf_r+0x11a>
 8007f06:	2300      	movs	r3, #0
 8007f08:	3401      	adds	r4, #1
 8007f0a:	9305      	str	r3, [sp, #20]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	f04f 0c0a 	mov.w	ip, #10
 8007f12:	4620      	mov	r0, r4
 8007f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f18:	3a30      	subs	r2, #48	; 0x30
 8007f1a:	2a09      	cmp	r2, #9
 8007f1c:	d903      	bls.n	8007f26 <_vfiprintf_r+0x1ee>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0c5      	beq.n	8007eae <_vfiprintf_r+0x176>
 8007f22:	9105      	str	r1, [sp, #20]
 8007f24:	e7c3      	b.n	8007eae <_vfiprintf_r+0x176>
 8007f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e7f0      	b.n	8007f12 <_vfiprintf_r+0x1da>
 8007f30:	ab03      	add	r3, sp, #12
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	462a      	mov	r2, r5
 8007f36:	4b16      	ldr	r3, [pc, #88]	; (8007f90 <_vfiprintf_r+0x258>)
 8007f38:	a904      	add	r1, sp, #16
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f3af 8000 	nop.w
 8007f40:	4607      	mov	r7, r0
 8007f42:	1c78      	adds	r0, r7, #1
 8007f44:	d1d6      	bne.n	8007ef4 <_vfiprintf_r+0x1bc>
 8007f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f48:	07d9      	lsls	r1, r3, #31
 8007f4a:	d405      	bmi.n	8007f58 <_vfiprintf_r+0x220>
 8007f4c:	89ab      	ldrh	r3, [r5, #12]
 8007f4e:	059a      	lsls	r2, r3, #22
 8007f50:	d402      	bmi.n	8007f58 <_vfiprintf_r+0x220>
 8007f52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f54:	f000 fc35 	bl	80087c2 <__retarget_lock_release_recursive>
 8007f58:	89ab      	ldrh	r3, [r5, #12]
 8007f5a:	065b      	lsls	r3, r3, #25
 8007f5c:	f53f af12 	bmi.w	8007d84 <_vfiprintf_r+0x4c>
 8007f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f62:	e711      	b.n	8007d88 <_vfiprintf_r+0x50>
 8007f64:	ab03      	add	r3, sp, #12
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	462a      	mov	r2, r5
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <_vfiprintf_r+0x258>)
 8007f6c:	a904      	add	r1, sp, #16
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f000 f880 	bl	8008074 <_printf_i>
 8007f74:	e7e4      	b.n	8007f40 <_vfiprintf_r+0x208>
 8007f76:	bf00      	nop
 8007f78:	08008e40 	.word	0x08008e40
 8007f7c:	08008e60 	.word	0x08008e60
 8007f80:	08008e20 	.word	0x08008e20
 8007f84:	08008dec 	.word	0x08008dec
 8007f88:	08008df6 	.word	0x08008df6
 8007f8c:	00000000 	.word	0x00000000
 8007f90:	08007d13 	.word	0x08007d13
 8007f94:	08008df2 	.word	0x08008df2

08007f98 <_printf_common>:
 8007f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	4699      	mov	r9, r3
 8007fa0:	688a      	ldr	r2, [r1, #8]
 8007fa2:	690b      	ldr	r3, [r1, #16]
 8007fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	bfb8      	it	lt
 8007fac:	4613      	movlt	r3, r2
 8007fae:	6033      	str	r3, [r6, #0]
 8007fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	b10a      	cbz	r2, 8007fbe <_printf_common+0x26>
 8007fba:	3301      	adds	r3, #1
 8007fbc:	6033      	str	r3, [r6, #0]
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	0699      	lsls	r1, r3, #26
 8007fc2:	bf42      	ittt	mi
 8007fc4:	6833      	ldrmi	r3, [r6, #0]
 8007fc6:	3302      	addmi	r3, #2
 8007fc8:	6033      	strmi	r3, [r6, #0]
 8007fca:	6825      	ldr	r5, [r4, #0]
 8007fcc:	f015 0506 	ands.w	r5, r5, #6
 8007fd0:	d106      	bne.n	8007fe0 <_printf_common+0x48>
 8007fd2:	f104 0a19 	add.w	sl, r4, #25
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	6832      	ldr	r2, [r6, #0]
 8007fda:	1a9b      	subs	r3, r3, r2
 8007fdc:	42ab      	cmp	r3, r5
 8007fde:	dc26      	bgt.n	800802e <_printf_common+0x96>
 8007fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fe4:	1e13      	subs	r3, r2, #0
 8007fe6:	6822      	ldr	r2, [r4, #0]
 8007fe8:	bf18      	it	ne
 8007fea:	2301      	movne	r3, #1
 8007fec:	0692      	lsls	r2, r2, #26
 8007fee:	d42b      	bmi.n	8008048 <_printf_common+0xb0>
 8007ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	47c0      	blx	r8
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	d01e      	beq.n	800803c <_printf_common+0xa4>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	68e5      	ldr	r5, [r4, #12]
 8008002:	6832      	ldr	r2, [r6, #0]
 8008004:	f003 0306 	and.w	r3, r3, #6
 8008008:	2b04      	cmp	r3, #4
 800800a:	bf08      	it	eq
 800800c:	1aad      	subeq	r5, r5, r2
 800800e:	68a3      	ldr	r3, [r4, #8]
 8008010:	6922      	ldr	r2, [r4, #16]
 8008012:	bf0c      	ite	eq
 8008014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008018:	2500      	movne	r5, #0
 800801a:	4293      	cmp	r3, r2
 800801c:	bfc4      	itt	gt
 800801e:	1a9b      	subgt	r3, r3, r2
 8008020:	18ed      	addgt	r5, r5, r3
 8008022:	2600      	movs	r6, #0
 8008024:	341a      	adds	r4, #26
 8008026:	42b5      	cmp	r5, r6
 8008028:	d11a      	bne.n	8008060 <_printf_common+0xc8>
 800802a:	2000      	movs	r0, #0
 800802c:	e008      	b.n	8008040 <_printf_common+0xa8>
 800802e:	2301      	movs	r3, #1
 8008030:	4652      	mov	r2, sl
 8008032:	4649      	mov	r1, r9
 8008034:	4638      	mov	r0, r7
 8008036:	47c0      	blx	r8
 8008038:	3001      	adds	r0, #1
 800803a:	d103      	bne.n	8008044 <_printf_common+0xac>
 800803c:	f04f 30ff 	mov.w	r0, #4294967295
 8008040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008044:	3501      	adds	r5, #1
 8008046:	e7c6      	b.n	8007fd6 <_printf_common+0x3e>
 8008048:	18e1      	adds	r1, r4, r3
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	2030      	movs	r0, #48	; 0x30
 800804e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008052:	4422      	add	r2, r4
 8008054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800805c:	3302      	adds	r3, #2
 800805e:	e7c7      	b.n	8007ff0 <_printf_common+0x58>
 8008060:	2301      	movs	r3, #1
 8008062:	4622      	mov	r2, r4
 8008064:	4649      	mov	r1, r9
 8008066:	4638      	mov	r0, r7
 8008068:	47c0      	blx	r8
 800806a:	3001      	adds	r0, #1
 800806c:	d0e6      	beq.n	800803c <_printf_common+0xa4>
 800806e:	3601      	adds	r6, #1
 8008070:	e7d9      	b.n	8008026 <_printf_common+0x8e>
	...

08008074 <_printf_i>:
 8008074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008078:	7e0f      	ldrb	r7, [r1, #24]
 800807a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800807c:	2f78      	cmp	r7, #120	; 0x78
 800807e:	4691      	mov	r9, r2
 8008080:	4680      	mov	r8, r0
 8008082:	460c      	mov	r4, r1
 8008084:	469a      	mov	sl, r3
 8008086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800808a:	d807      	bhi.n	800809c <_printf_i+0x28>
 800808c:	2f62      	cmp	r7, #98	; 0x62
 800808e:	d80a      	bhi.n	80080a6 <_printf_i+0x32>
 8008090:	2f00      	cmp	r7, #0
 8008092:	f000 80d8 	beq.w	8008246 <_printf_i+0x1d2>
 8008096:	2f58      	cmp	r7, #88	; 0x58
 8008098:	f000 80a3 	beq.w	80081e2 <_printf_i+0x16e>
 800809c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080a4:	e03a      	b.n	800811c <_printf_i+0xa8>
 80080a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080aa:	2b15      	cmp	r3, #21
 80080ac:	d8f6      	bhi.n	800809c <_printf_i+0x28>
 80080ae:	a101      	add	r1, pc, #4	; (adr r1, 80080b4 <_printf_i+0x40>)
 80080b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080b4:	0800810d 	.word	0x0800810d
 80080b8:	08008121 	.word	0x08008121
 80080bc:	0800809d 	.word	0x0800809d
 80080c0:	0800809d 	.word	0x0800809d
 80080c4:	0800809d 	.word	0x0800809d
 80080c8:	0800809d 	.word	0x0800809d
 80080cc:	08008121 	.word	0x08008121
 80080d0:	0800809d 	.word	0x0800809d
 80080d4:	0800809d 	.word	0x0800809d
 80080d8:	0800809d 	.word	0x0800809d
 80080dc:	0800809d 	.word	0x0800809d
 80080e0:	0800822d 	.word	0x0800822d
 80080e4:	08008151 	.word	0x08008151
 80080e8:	0800820f 	.word	0x0800820f
 80080ec:	0800809d 	.word	0x0800809d
 80080f0:	0800809d 	.word	0x0800809d
 80080f4:	0800824f 	.word	0x0800824f
 80080f8:	0800809d 	.word	0x0800809d
 80080fc:	08008151 	.word	0x08008151
 8008100:	0800809d 	.word	0x0800809d
 8008104:	0800809d 	.word	0x0800809d
 8008108:	08008217 	.word	0x08008217
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	1d1a      	adds	r2, r3, #4
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	602a      	str	r2, [r5, #0]
 8008114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800811c:	2301      	movs	r3, #1
 800811e:	e0a3      	b.n	8008268 <_printf_i+0x1f4>
 8008120:	6820      	ldr	r0, [r4, #0]
 8008122:	6829      	ldr	r1, [r5, #0]
 8008124:	0606      	lsls	r6, r0, #24
 8008126:	f101 0304 	add.w	r3, r1, #4
 800812a:	d50a      	bpl.n	8008142 <_printf_i+0xce>
 800812c:	680e      	ldr	r6, [r1, #0]
 800812e:	602b      	str	r3, [r5, #0]
 8008130:	2e00      	cmp	r6, #0
 8008132:	da03      	bge.n	800813c <_printf_i+0xc8>
 8008134:	232d      	movs	r3, #45	; 0x2d
 8008136:	4276      	negs	r6, r6
 8008138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800813c:	485e      	ldr	r0, [pc, #376]	; (80082b8 <_printf_i+0x244>)
 800813e:	230a      	movs	r3, #10
 8008140:	e019      	b.n	8008176 <_printf_i+0x102>
 8008142:	680e      	ldr	r6, [r1, #0]
 8008144:	602b      	str	r3, [r5, #0]
 8008146:	f010 0f40 	tst.w	r0, #64	; 0x40
 800814a:	bf18      	it	ne
 800814c:	b236      	sxthne	r6, r6
 800814e:	e7ef      	b.n	8008130 <_printf_i+0xbc>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	6820      	ldr	r0, [r4, #0]
 8008154:	1d19      	adds	r1, r3, #4
 8008156:	6029      	str	r1, [r5, #0]
 8008158:	0601      	lsls	r1, r0, #24
 800815a:	d501      	bpl.n	8008160 <_printf_i+0xec>
 800815c:	681e      	ldr	r6, [r3, #0]
 800815e:	e002      	b.n	8008166 <_printf_i+0xf2>
 8008160:	0646      	lsls	r6, r0, #25
 8008162:	d5fb      	bpl.n	800815c <_printf_i+0xe8>
 8008164:	881e      	ldrh	r6, [r3, #0]
 8008166:	4854      	ldr	r0, [pc, #336]	; (80082b8 <_printf_i+0x244>)
 8008168:	2f6f      	cmp	r7, #111	; 0x6f
 800816a:	bf0c      	ite	eq
 800816c:	2308      	moveq	r3, #8
 800816e:	230a      	movne	r3, #10
 8008170:	2100      	movs	r1, #0
 8008172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008176:	6865      	ldr	r5, [r4, #4]
 8008178:	60a5      	str	r5, [r4, #8]
 800817a:	2d00      	cmp	r5, #0
 800817c:	bfa2      	ittt	ge
 800817e:	6821      	ldrge	r1, [r4, #0]
 8008180:	f021 0104 	bicge.w	r1, r1, #4
 8008184:	6021      	strge	r1, [r4, #0]
 8008186:	b90e      	cbnz	r6, 800818c <_printf_i+0x118>
 8008188:	2d00      	cmp	r5, #0
 800818a:	d04d      	beq.n	8008228 <_printf_i+0x1b4>
 800818c:	4615      	mov	r5, r2
 800818e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008192:	fb03 6711 	mls	r7, r3, r1, r6
 8008196:	5dc7      	ldrb	r7, [r0, r7]
 8008198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800819c:	4637      	mov	r7, r6
 800819e:	42bb      	cmp	r3, r7
 80081a0:	460e      	mov	r6, r1
 80081a2:	d9f4      	bls.n	800818e <_printf_i+0x11a>
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	d10b      	bne.n	80081c0 <_printf_i+0x14c>
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	07de      	lsls	r6, r3, #31
 80081ac:	d508      	bpl.n	80081c0 <_printf_i+0x14c>
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	6861      	ldr	r1, [r4, #4]
 80081b2:	4299      	cmp	r1, r3
 80081b4:	bfde      	ittt	le
 80081b6:	2330      	movle	r3, #48	; 0x30
 80081b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081c0:	1b52      	subs	r2, r2, r5
 80081c2:	6122      	str	r2, [r4, #16]
 80081c4:	f8cd a000 	str.w	sl, [sp]
 80081c8:	464b      	mov	r3, r9
 80081ca:	aa03      	add	r2, sp, #12
 80081cc:	4621      	mov	r1, r4
 80081ce:	4640      	mov	r0, r8
 80081d0:	f7ff fee2 	bl	8007f98 <_printf_common>
 80081d4:	3001      	adds	r0, #1
 80081d6:	d14c      	bne.n	8008272 <_printf_i+0x1fe>
 80081d8:	f04f 30ff 	mov.w	r0, #4294967295
 80081dc:	b004      	add	sp, #16
 80081de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e2:	4835      	ldr	r0, [pc, #212]	; (80082b8 <_printf_i+0x244>)
 80081e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081e8:	6829      	ldr	r1, [r5, #0]
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80081f0:	6029      	str	r1, [r5, #0]
 80081f2:	061d      	lsls	r5, r3, #24
 80081f4:	d514      	bpl.n	8008220 <_printf_i+0x1ac>
 80081f6:	07df      	lsls	r7, r3, #31
 80081f8:	bf44      	itt	mi
 80081fa:	f043 0320 	orrmi.w	r3, r3, #32
 80081fe:	6023      	strmi	r3, [r4, #0]
 8008200:	b91e      	cbnz	r6, 800820a <_printf_i+0x196>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	f023 0320 	bic.w	r3, r3, #32
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	2310      	movs	r3, #16
 800820c:	e7b0      	b.n	8008170 <_printf_i+0xfc>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	f043 0320 	orr.w	r3, r3, #32
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	2378      	movs	r3, #120	; 0x78
 8008218:	4828      	ldr	r0, [pc, #160]	; (80082bc <_printf_i+0x248>)
 800821a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800821e:	e7e3      	b.n	80081e8 <_printf_i+0x174>
 8008220:	0659      	lsls	r1, r3, #25
 8008222:	bf48      	it	mi
 8008224:	b2b6      	uxthmi	r6, r6
 8008226:	e7e6      	b.n	80081f6 <_printf_i+0x182>
 8008228:	4615      	mov	r5, r2
 800822a:	e7bb      	b.n	80081a4 <_printf_i+0x130>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	6826      	ldr	r6, [r4, #0]
 8008230:	6961      	ldr	r1, [r4, #20]
 8008232:	1d18      	adds	r0, r3, #4
 8008234:	6028      	str	r0, [r5, #0]
 8008236:	0635      	lsls	r5, r6, #24
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	d501      	bpl.n	8008240 <_printf_i+0x1cc>
 800823c:	6019      	str	r1, [r3, #0]
 800823e:	e002      	b.n	8008246 <_printf_i+0x1d2>
 8008240:	0670      	lsls	r0, r6, #25
 8008242:	d5fb      	bpl.n	800823c <_printf_i+0x1c8>
 8008244:	8019      	strh	r1, [r3, #0]
 8008246:	2300      	movs	r3, #0
 8008248:	6123      	str	r3, [r4, #16]
 800824a:	4615      	mov	r5, r2
 800824c:	e7ba      	b.n	80081c4 <_printf_i+0x150>
 800824e:	682b      	ldr	r3, [r5, #0]
 8008250:	1d1a      	adds	r2, r3, #4
 8008252:	602a      	str	r2, [r5, #0]
 8008254:	681d      	ldr	r5, [r3, #0]
 8008256:	6862      	ldr	r2, [r4, #4]
 8008258:	2100      	movs	r1, #0
 800825a:	4628      	mov	r0, r5
 800825c:	f7f8 f848 	bl	80002f0 <memchr>
 8008260:	b108      	cbz	r0, 8008266 <_printf_i+0x1f2>
 8008262:	1b40      	subs	r0, r0, r5
 8008264:	6060      	str	r0, [r4, #4]
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	2300      	movs	r3, #0
 800826c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008270:	e7a8      	b.n	80081c4 <_printf_i+0x150>
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	462a      	mov	r2, r5
 8008276:	4649      	mov	r1, r9
 8008278:	4640      	mov	r0, r8
 800827a:	47d0      	blx	sl
 800827c:	3001      	adds	r0, #1
 800827e:	d0ab      	beq.n	80081d8 <_printf_i+0x164>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	079b      	lsls	r3, r3, #30
 8008284:	d413      	bmi.n	80082ae <_printf_i+0x23a>
 8008286:	68e0      	ldr	r0, [r4, #12]
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	4298      	cmp	r0, r3
 800828c:	bfb8      	it	lt
 800828e:	4618      	movlt	r0, r3
 8008290:	e7a4      	b.n	80081dc <_printf_i+0x168>
 8008292:	2301      	movs	r3, #1
 8008294:	4632      	mov	r2, r6
 8008296:	4649      	mov	r1, r9
 8008298:	4640      	mov	r0, r8
 800829a:	47d0      	blx	sl
 800829c:	3001      	adds	r0, #1
 800829e:	d09b      	beq.n	80081d8 <_printf_i+0x164>
 80082a0:	3501      	adds	r5, #1
 80082a2:	68e3      	ldr	r3, [r4, #12]
 80082a4:	9903      	ldr	r1, [sp, #12]
 80082a6:	1a5b      	subs	r3, r3, r1
 80082a8:	42ab      	cmp	r3, r5
 80082aa:	dcf2      	bgt.n	8008292 <_printf_i+0x21e>
 80082ac:	e7eb      	b.n	8008286 <_printf_i+0x212>
 80082ae:	2500      	movs	r5, #0
 80082b0:	f104 0619 	add.w	r6, r4, #25
 80082b4:	e7f5      	b.n	80082a2 <_printf_i+0x22e>
 80082b6:	bf00      	nop
 80082b8:	08008dfd 	.word	0x08008dfd
 80082bc:	08008e0e 	.word	0x08008e0e

080082c0 <__swbuf_r>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	460e      	mov	r6, r1
 80082c4:	4614      	mov	r4, r2
 80082c6:	4605      	mov	r5, r0
 80082c8:	b118      	cbz	r0, 80082d2 <__swbuf_r+0x12>
 80082ca:	6983      	ldr	r3, [r0, #24]
 80082cc:	b90b      	cbnz	r3, 80082d2 <__swbuf_r+0x12>
 80082ce:	f000 f9d9 	bl	8008684 <__sinit>
 80082d2:	4b21      	ldr	r3, [pc, #132]	; (8008358 <__swbuf_r+0x98>)
 80082d4:	429c      	cmp	r4, r3
 80082d6:	d12b      	bne.n	8008330 <__swbuf_r+0x70>
 80082d8:	686c      	ldr	r4, [r5, #4]
 80082da:	69a3      	ldr	r3, [r4, #24]
 80082dc:	60a3      	str	r3, [r4, #8]
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	071a      	lsls	r2, r3, #28
 80082e2:	d52f      	bpl.n	8008344 <__swbuf_r+0x84>
 80082e4:	6923      	ldr	r3, [r4, #16]
 80082e6:	b36b      	cbz	r3, 8008344 <__swbuf_r+0x84>
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	6820      	ldr	r0, [r4, #0]
 80082ec:	1ac0      	subs	r0, r0, r3
 80082ee:	6963      	ldr	r3, [r4, #20]
 80082f0:	b2f6      	uxtb	r6, r6
 80082f2:	4283      	cmp	r3, r0
 80082f4:	4637      	mov	r7, r6
 80082f6:	dc04      	bgt.n	8008302 <__swbuf_r+0x42>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 f92e 	bl	800855c <_fflush_r>
 8008300:	bb30      	cbnz	r0, 8008350 <__swbuf_r+0x90>
 8008302:	68a3      	ldr	r3, [r4, #8]
 8008304:	3b01      	subs	r3, #1
 8008306:	60a3      	str	r3, [r4, #8]
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	6022      	str	r2, [r4, #0]
 800830e:	701e      	strb	r6, [r3, #0]
 8008310:	6963      	ldr	r3, [r4, #20]
 8008312:	3001      	adds	r0, #1
 8008314:	4283      	cmp	r3, r0
 8008316:	d004      	beq.n	8008322 <__swbuf_r+0x62>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	07db      	lsls	r3, r3, #31
 800831c:	d506      	bpl.n	800832c <__swbuf_r+0x6c>
 800831e:	2e0a      	cmp	r6, #10
 8008320:	d104      	bne.n	800832c <__swbuf_r+0x6c>
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 f919 	bl	800855c <_fflush_r>
 800832a:	b988      	cbnz	r0, 8008350 <__swbuf_r+0x90>
 800832c:	4638      	mov	r0, r7
 800832e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008330:	4b0a      	ldr	r3, [pc, #40]	; (800835c <__swbuf_r+0x9c>)
 8008332:	429c      	cmp	r4, r3
 8008334:	d101      	bne.n	800833a <__swbuf_r+0x7a>
 8008336:	68ac      	ldr	r4, [r5, #8]
 8008338:	e7cf      	b.n	80082da <__swbuf_r+0x1a>
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <__swbuf_r+0xa0>)
 800833c:	429c      	cmp	r4, r3
 800833e:	bf08      	it	eq
 8008340:	68ec      	ldreq	r4, [r5, #12]
 8008342:	e7ca      	b.n	80082da <__swbuf_r+0x1a>
 8008344:	4621      	mov	r1, r4
 8008346:	4628      	mov	r0, r5
 8008348:	f000 f80c 	bl	8008364 <__swsetup_r>
 800834c:	2800      	cmp	r0, #0
 800834e:	d0cb      	beq.n	80082e8 <__swbuf_r+0x28>
 8008350:	f04f 37ff 	mov.w	r7, #4294967295
 8008354:	e7ea      	b.n	800832c <__swbuf_r+0x6c>
 8008356:	bf00      	nop
 8008358:	08008e40 	.word	0x08008e40
 800835c:	08008e60 	.word	0x08008e60
 8008360:	08008e20 	.word	0x08008e20

08008364 <__swsetup_r>:
 8008364:	4b32      	ldr	r3, [pc, #200]	; (8008430 <__swsetup_r+0xcc>)
 8008366:	b570      	push	{r4, r5, r6, lr}
 8008368:	681d      	ldr	r5, [r3, #0]
 800836a:	4606      	mov	r6, r0
 800836c:	460c      	mov	r4, r1
 800836e:	b125      	cbz	r5, 800837a <__swsetup_r+0x16>
 8008370:	69ab      	ldr	r3, [r5, #24]
 8008372:	b913      	cbnz	r3, 800837a <__swsetup_r+0x16>
 8008374:	4628      	mov	r0, r5
 8008376:	f000 f985 	bl	8008684 <__sinit>
 800837a:	4b2e      	ldr	r3, [pc, #184]	; (8008434 <__swsetup_r+0xd0>)
 800837c:	429c      	cmp	r4, r3
 800837e:	d10f      	bne.n	80083a0 <__swsetup_r+0x3c>
 8008380:	686c      	ldr	r4, [r5, #4]
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008388:	0719      	lsls	r1, r3, #28
 800838a:	d42c      	bmi.n	80083e6 <__swsetup_r+0x82>
 800838c:	06dd      	lsls	r5, r3, #27
 800838e:	d411      	bmi.n	80083b4 <__swsetup_r+0x50>
 8008390:	2309      	movs	r3, #9
 8008392:	6033      	str	r3, [r6, #0]
 8008394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008398:	81a3      	strh	r3, [r4, #12]
 800839a:	f04f 30ff 	mov.w	r0, #4294967295
 800839e:	e03e      	b.n	800841e <__swsetup_r+0xba>
 80083a0:	4b25      	ldr	r3, [pc, #148]	; (8008438 <__swsetup_r+0xd4>)
 80083a2:	429c      	cmp	r4, r3
 80083a4:	d101      	bne.n	80083aa <__swsetup_r+0x46>
 80083a6:	68ac      	ldr	r4, [r5, #8]
 80083a8:	e7eb      	b.n	8008382 <__swsetup_r+0x1e>
 80083aa:	4b24      	ldr	r3, [pc, #144]	; (800843c <__swsetup_r+0xd8>)
 80083ac:	429c      	cmp	r4, r3
 80083ae:	bf08      	it	eq
 80083b0:	68ec      	ldreq	r4, [r5, #12]
 80083b2:	e7e6      	b.n	8008382 <__swsetup_r+0x1e>
 80083b4:	0758      	lsls	r0, r3, #29
 80083b6:	d512      	bpl.n	80083de <__swsetup_r+0x7a>
 80083b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ba:	b141      	cbz	r1, 80083ce <__swsetup_r+0x6a>
 80083bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c0:	4299      	cmp	r1, r3
 80083c2:	d002      	beq.n	80083ca <__swsetup_r+0x66>
 80083c4:	4630      	mov	r0, r6
 80083c6:	f000 fa63 	bl	8008890 <_free_r>
 80083ca:	2300      	movs	r3, #0
 80083cc:	6363      	str	r3, [r4, #52]	; 0x34
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	2300      	movs	r3, #0
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	f043 0308 	orr.w	r3, r3, #8
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	6923      	ldr	r3, [r4, #16]
 80083e8:	b94b      	cbnz	r3, 80083fe <__swsetup_r+0x9a>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f4:	d003      	beq.n	80083fe <__swsetup_r+0x9a>
 80083f6:	4621      	mov	r1, r4
 80083f8:	4630      	mov	r0, r6
 80083fa:	f000 fa09 	bl	8008810 <__smakebuf_r>
 80083fe:	89a0      	ldrh	r0, [r4, #12]
 8008400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008404:	f010 0301 	ands.w	r3, r0, #1
 8008408:	d00a      	beq.n	8008420 <__swsetup_r+0xbc>
 800840a:	2300      	movs	r3, #0
 800840c:	60a3      	str	r3, [r4, #8]
 800840e:	6963      	ldr	r3, [r4, #20]
 8008410:	425b      	negs	r3, r3
 8008412:	61a3      	str	r3, [r4, #24]
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	b943      	cbnz	r3, 800842a <__swsetup_r+0xc6>
 8008418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800841c:	d1ba      	bne.n	8008394 <__swsetup_r+0x30>
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	0781      	lsls	r1, r0, #30
 8008422:	bf58      	it	pl
 8008424:	6963      	ldrpl	r3, [r4, #20]
 8008426:	60a3      	str	r3, [r4, #8]
 8008428:	e7f4      	b.n	8008414 <__swsetup_r+0xb0>
 800842a:	2000      	movs	r0, #0
 800842c:	e7f7      	b.n	800841e <__swsetup_r+0xba>
 800842e:	bf00      	nop
 8008430:	24000010 	.word	0x24000010
 8008434:	08008e40 	.word	0x08008e40
 8008438:	08008e60 	.word	0x08008e60
 800843c:	08008e20 	.word	0x08008e20

08008440 <abort>:
 8008440:	b508      	push	{r3, lr}
 8008442:	2006      	movs	r0, #6
 8008444:	f000 fb3c 	bl	8008ac0 <raise>
 8008448:	2001      	movs	r0, #1
 800844a:	f7f9 fa03 	bl	8001854 <_exit>
	...

08008450 <__sflush_r>:
 8008450:	898a      	ldrh	r2, [r1, #12]
 8008452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008456:	4605      	mov	r5, r0
 8008458:	0710      	lsls	r0, r2, #28
 800845a:	460c      	mov	r4, r1
 800845c:	d458      	bmi.n	8008510 <__sflush_r+0xc0>
 800845e:	684b      	ldr	r3, [r1, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	dc05      	bgt.n	8008470 <__sflush_r+0x20>
 8008464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	dc02      	bgt.n	8008470 <__sflush_r+0x20>
 800846a:	2000      	movs	r0, #0
 800846c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008472:	2e00      	cmp	r6, #0
 8008474:	d0f9      	beq.n	800846a <__sflush_r+0x1a>
 8008476:	2300      	movs	r3, #0
 8008478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800847c:	682f      	ldr	r7, [r5, #0]
 800847e:	602b      	str	r3, [r5, #0]
 8008480:	d032      	beq.n	80084e8 <__sflush_r+0x98>
 8008482:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	075a      	lsls	r2, r3, #29
 8008488:	d505      	bpl.n	8008496 <__sflush_r+0x46>
 800848a:	6863      	ldr	r3, [r4, #4]
 800848c:	1ac0      	subs	r0, r0, r3
 800848e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008490:	b10b      	cbz	r3, 8008496 <__sflush_r+0x46>
 8008492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008494:	1ac0      	subs	r0, r0, r3
 8008496:	2300      	movs	r3, #0
 8008498:	4602      	mov	r2, r0
 800849a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800849c:	6a21      	ldr	r1, [r4, #32]
 800849e:	4628      	mov	r0, r5
 80084a0:	47b0      	blx	r6
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	d106      	bne.n	80084b6 <__sflush_r+0x66>
 80084a8:	6829      	ldr	r1, [r5, #0]
 80084aa:	291d      	cmp	r1, #29
 80084ac:	d82c      	bhi.n	8008508 <__sflush_r+0xb8>
 80084ae:	4a2a      	ldr	r2, [pc, #168]	; (8008558 <__sflush_r+0x108>)
 80084b0:	40ca      	lsrs	r2, r1
 80084b2:	07d6      	lsls	r6, r2, #31
 80084b4:	d528      	bpl.n	8008508 <__sflush_r+0xb8>
 80084b6:	2200      	movs	r2, #0
 80084b8:	6062      	str	r2, [r4, #4]
 80084ba:	04d9      	lsls	r1, r3, #19
 80084bc:	6922      	ldr	r2, [r4, #16]
 80084be:	6022      	str	r2, [r4, #0]
 80084c0:	d504      	bpl.n	80084cc <__sflush_r+0x7c>
 80084c2:	1c42      	adds	r2, r0, #1
 80084c4:	d101      	bne.n	80084ca <__sflush_r+0x7a>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b903      	cbnz	r3, 80084cc <__sflush_r+0x7c>
 80084ca:	6560      	str	r0, [r4, #84]	; 0x54
 80084cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ce:	602f      	str	r7, [r5, #0]
 80084d0:	2900      	cmp	r1, #0
 80084d2:	d0ca      	beq.n	800846a <__sflush_r+0x1a>
 80084d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084d8:	4299      	cmp	r1, r3
 80084da:	d002      	beq.n	80084e2 <__sflush_r+0x92>
 80084dc:	4628      	mov	r0, r5
 80084de:	f000 f9d7 	bl	8008890 <_free_r>
 80084e2:	2000      	movs	r0, #0
 80084e4:	6360      	str	r0, [r4, #52]	; 0x34
 80084e6:	e7c1      	b.n	800846c <__sflush_r+0x1c>
 80084e8:	6a21      	ldr	r1, [r4, #32]
 80084ea:	2301      	movs	r3, #1
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b0      	blx	r6
 80084f0:	1c41      	adds	r1, r0, #1
 80084f2:	d1c7      	bne.n	8008484 <__sflush_r+0x34>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0c4      	beq.n	8008484 <__sflush_r+0x34>
 80084fa:	2b1d      	cmp	r3, #29
 80084fc:	d001      	beq.n	8008502 <__sflush_r+0xb2>
 80084fe:	2b16      	cmp	r3, #22
 8008500:	d101      	bne.n	8008506 <__sflush_r+0xb6>
 8008502:	602f      	str	r7, [r5, #0]
 8008504:	e7b1      	b.n	800846a <__sflush_r+0x1a>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	e7ad      	b.n	800846c <__sflush_r+0x1c>
 8008510:	690f      	ldr	r7, [r1, #16]
 8008512:	2f00      	cmp	r7, #0
 8008514:	d0a9      	beq.n	800846a <__sflush_r+0x1a>
 8008516:	0793      	lsls	r3, r2, #30
 8008518:	680e      	ldr	r6, [r1, #0]
 800851a:	bf08      	it	eq
 800851c:	694b      	ldreq	r3, [r1, #20]
 800851e:	600f      	str	r7, [r1, #0]
 8008520:	bf18      	it	ne
 8008522:	2300      	movne	r3, #0
 8008524:	eba6 0807 	sub.w	r8, r6, r7
 8008528:	608b      	str	r3, [r1, #8]
 800852a:	f1b8 0f00 	cmp.w	r8, #0
 800852e:	dd9c      	ble.n	800846a <__sflush_r+0x1a>
 8008530:	6a21      	ldr	r1, [r4, #32]
 8008532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008534:	4643      	mov	r3, r8
 8008536:	463a      	mov	r2, r7
 8008538:	4628      	mov	r0, r5
 800853a:	47b0      	blx	r6
 800853c:	2800      	cmp	r0, #0
 800853e:	dc06      	bgt.n	800854e <__sflush_r+0xfe>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	e78e      	b.n	800846c <__sflush_r+0x1c>
 800854e:	4407      	add	r7, r0
 8008550:	eba8 0800 	sub.w	r8, r8, r0
 8008554:	e7e9      	b.n	800852a <__sflush_r+0xda>
 8008556:	bf00      	nop
 8008558:	20400001 	.word	0x20400001

0800855c <_fflush_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	690b      	ldr	r3, [r1, #16]
 8008560:	4605      	mov	r5, r0
 8008562:	460c      	mov	r4, r1
 8008564:	b913      	cbnz	r3, 800856c <_fflush_r+0x10>
 8008566:	2500      	movs	r5, #0
 8008568:	4628      	mov	r0, r5
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	b118      	cbz	r0, 8008576 <_fflush_r+0x1a>
 800856e:	6983      	ldr	r3, [r0, #24]
 8008570:	b90b      	cbnz	r3, 8008576 <_fflush_r+0x1a>
 8008572:	f000 f887 	bl	8008684 <__sinit>
 8008576:	4b14      	ldr	r3, [pc, #80]	; (80085c8 <_fflush_r+0x6c>)
 8008578:	429c      	cmp	r4, r3
 800857a:	d11b      	bne.n	80085b4 <_fflush_r+0x58>
 800857c:	686c      	ldr	r4, [r5, #4]
 800857e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0ef      	beq.n	8008566 <_fflush_r+0xa>
 8008586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008588:	07d0      	lsls	r0, r2, #31
 800858a:	d404      	bmi.n	8008596 <_fflush_r+0x3a>
 800858c:	0599      	lsls	r1, r3, #22
 800858e:	d402      	bmi.n	8008596 <_fflush_r+0x3a>
 8008590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008592:	f000 f915 	bl	80087c0 <__retarget_lock_acquire_recursive>
 8008596:	4628      	mov	r0, r5
 8008598:	4621      	mov	r1, r4
 800859a:	f7ff ff59 	bl	8008450 <__sflush_r>
 800859e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085a0:	07da      	lsls	r2, r3, #31
 80085a2:	4605      	mov	r5, r0
 80085a4:	d4e0      	bmi.n	8008568 <_fflush_r+0xc>
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	059b      	lsls	r3, r3, #22
 80085aa:	d4dd      	bmi.n	8008568 <_fflush_r+0xc>
 80085ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ae:	f000 f908 	bl	80087c2 <__retarget_lock_release_recursive>
 80085b2:	e7d9      	b.n	8008568 <_fflush_r+0xc>
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <_fflush_r+0x70>)
 80085b6:	429c      	cmp	r4, r3
 80085b8:	d101      	bne.n	80085be <_fflush_r+0x62>
 80085ba:	68ac      	ldr	r4, [r5, #8]
 80085bc:	e7df      	b.n	800857e <_fflush_r+0x22>
 80085be:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <_fflush_r+0x74>)
 80085c0:	429c      	cmp	r4, r3
 80085c2:	bf08      	it	eq
 80085c4:	68ec      	ldreq	r4, [r5, #12]
 80085c6:	e7da      	b.n	800857e <_fflush_r+0x22>
 80085c8:	08008e40 	.word	0x08008e40
 80085cc:	08008e60 	.word	0x08008e60
 80085d0:	08008e20 	.word	0x08008e20

080085d4 <std>:
 80085d4:	2300      	movs	r3, #0
 80085d6:	b510      	push	{r4, lr}
 80085d8:	4604      	mov	r4, r0
 80085da:	e9c0 3300 	strd	r3, r3, [r0]
 80085de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085e2:	6083      	str	r3, [r0, #8]
 80085e4:	8181      	strh	r1, [r0, #12]
 80085e6:	6643      	str	r3, [r0, #100]	; 0x64
 80085e8:	81c2      	strh	r2, [r0, #14]
 80085ea:	6183      	str	r3, [r0, #24]
 80085ec:	4619      	mov	r1, r3
 80085ee:	2208      	movs	r2, #8
 80085f0:	305c      	adds	r0, #92	; 0x5c
 80085f2:	f7ff fb6f 	bl	8007cd4 <memset>
 80085f6:	4b05      	ldr	r3, [pc, #20]	; (800860c <std+0x38>)
 80085f8:	6263      	str	r3, [r4, #36]	; 0x24
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <std+0x3c>)
 80085fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80085fe:	4b05      	ldr	r3, [pc, #20]	; (8008614 <std+0x40>)
 8008600:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <std+0x44>)
 8008604:	6224      	str	r4, [r4, #32]
 8008606:	6323      	str	r3, [r4, #48]	; 0x30
 8008608:	bd10      	pop	{r4, pc}
 800860a:	bf00      	nop
 800860c:	08008af9 	.word	0x08008af9
 8008610:	08008b1b 	.word	0x08008b1b
 8008614:	08008b53 	.word	0x08008b53
 8008618:	08008b77 	.word	0x08008b77

0800861c <_cleanup_r>:
 800861c:	4901      	ldr	r1, [pc, #4]	; (8008624 <_cleanup_r+0x8>)
 800861e:	f000 b8af 	b.w	8008780 <_fwalk_reent>
 8008622:	bf00      	nop
 8008624:	0800855d 	.word	0x0800855d

08008628 <__sfmoreglue>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	2268      	movs	r2, #104	; 0x68
 800862c:	1e4d      	subs	r5, r1, #1
 800862e:	4355      	muls	r5, r2
 8008630:	460e      	mov	r6, r1
 8008632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008636:	f000 f997 	bl	8008968 <_malloc_r>
 800863a:	4604      	mov	r4, r0
 800863c:	b140      	cbz	r0, 8008650 <__sfmoreglue+0x28>
 800863e:	2100      	movs	r1, #0
 8008640:	e9c0 1600 	strd	r1, r6, [r0]
 8008644:	300c      	adds	r0, #12
 8008646:	60a0      	str	r0, [r4, #8]
 8008648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800864c:	f7ff fb42 	bl	8007cd4 <memset>
 8008650:	4620      	mov	r0, r4
 8008652:	bd70      	pop	{r4, r5, r6, pc}

08008654 <__sfp_lock_acquire>:
 8008654:	4801      	ldr	r0, [pc, #4]	; (800865c <__sfp_lock_acquire+0x8>)
 8008656:	f000 b8b3 	b.w	80087c0 <__retarget_lock_acquire_recursive>
 800865a:	bf00      	nop
 800865c:	24000175 	.word	0x24000175

08008660 <__sfp_lock_release>:
 8008660:	4801      	ldr	r0, [pc, #4]	; (8008668 <__sfp_lock_release+0x8>)
 8008662:	f000 b8ae 	b.w	80087c2 <__retarget_lock_release_recursive>
 8008666:	bf00      	nop
 8008668:	24000175 	.word	0x24000175

0800866c <__sinit_lock_acquire>:
 800866c:	4801      	ldr	r0, [pc, #4]	; (8008674 <__sinit_lock_acquire+0x8>)
 800866e:	f000 b8a7 	b.w	80087c0 <__retarget_lock_acquire_recursive>
 8008672:	bf00      	nop
 8008674:	24000176 	.word	0x24000176

08008678 <__sinit_lock_release>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__sinit_lock_release+0x8>)
 800867a:	f000 b8a2 	b.w	80087c2 <__retarget_lock_release_recursive>
 800867e:	bf00      	nop
 8008680:	24000176 	.word	0x24000176

08008684 <__sinit>:
 8008684:	b510      	push	{r4, lr}
 8008686:	4604      	mov	r4, r0
 8008688:	f7ff fff0 	bl	800866c <__sinit_lock_acquire>
 800868c:	69a3      	ldr	r3, [r4, #24]
 800868e:	b11b      	cbz	r3, 8008698 <__sinit+0x14>
 8008690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008694:	f7ff bff0 	b.w	8008678 <__sinit_lock_release>
 8008698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800869c:	6523      	str	r3, [r4, #80]	; 0x50
 800869e:	4b13      	ldr	r3, [pc, #76]	; (80086ec <__sinit+0x68>)
 80086a0:	4a13      	ldr	r2, [pc, #76]	; (80086f0 <__sinit+0x6c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	bf04      	itt	eq
 80086aa:	2301      	moveq	r3, #1
 80086ac:	61a3      	streq	r3, [r4, #24]
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 f820 	bl	80086f4 <__sfp>
 80086b4:	6060      	str	r0, [r4, #4]
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 f81c 	bl	80086f4 <__sfp>
 80086bc:	60a0      	str	r0, [r4, #8]
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 f818 	bl	80086f4 <__sfp>
 80086c4:	2200      	movs	r2, #0
 80086c6:	60e0      	str	r0, [r4, #12]
 80086c8:	2104      	movs	r1, #4
 80086ca:	6860      	ldr	r0, [r4, #4]
 80086cc:	f7ff ff82 	bl	80085d4 <std>
 80086d0:	68a0      	ldr	r0, [r4, #8]
 80086d2:	2201      	movs	r2, #1
 80086d4:	2109      	movs	r1, #9
 80086d6:	f7ff ff7d 	bl	80085d4 <std>
 80086da:	68e0      	ldr	r0, [r4, #12]
 80086dc:	2202      	movs	r2, #2
 80086de:	2112      	movs	r1, #18
 80086e0:	f7ff ff78 	bl	80085d4 <std>
 80086e4:	2301      	movs	r3, #1
 80086e6:	61a3      	str	r3, [r4, #24]
 80086e8:	e7d2      	b.n	8008690 <__sinit+0xc>
 80086ea:	bf00      	nop
 80086ec:	08008de8 	.word	0x08008de8
 80086f0:	0800861d 	.word	0x0800861d

080086f4 <__sfp>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	4607      	mov	r7, r0
 80086f8:	f7ff ffac 	bl	8008654 <__sfp_lock_acquire>
 80086fc:	4b1e      	ldr	r3, [pc, #120]	; (8008778 <__sfp+0x84>)
 80086fe:	681e      	ldr	r6, [r3, #0]
 8008700:	69b3      	ldr	r3, [r6, #24]
 8008702:	b913      	cbnz	r3, 800870a <__sfp+0x16>
 8008704:	4630      	mov	r0, r6
 8008706:	f7ff ffbd 	bl	8008684 <__sinit>
 800870a:	3648      	adds	r6, #72	; 0x48
 800870c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008710:	3b01      	subs	r3, #1
 8008712:	d503      	bpl.n	800871c <__sfp+0x28>
 8008714:	6833      	ldr	r3, [r6, #0]
 8008716:	b30b      	cbz	r3, 800875c <__sfp+0x68>
 8008718:	6836      	ldr	r6, [r6, #0]
 800871a:	e7f7      	b.n	800870c <__sfp+0x18>
 800871c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008720:	b9d5      	cbnz	r5, 8008758 <__sfp+0x64>
 8008722:	4b16      	ldr	r3, [pc, #88]	; (800877c <__sfp+0x88>)
 8008724:	60e3      	str	r3, [r4, #12]
 8008726:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800872a:	6665      	str	r5, [r4, #100]	; 0x64
 800872c:	f000 f847 	bl	80087be <__retarget_lock_init_recursive>
 8008730:	f7ff ff96 	bl	8008660 <__sfp_lock_release>
 8008734:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008738:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800873c:	6025      	str	r5, [r4, #0]
 800873e:	61a5      	str	r5, [r4, #24]
 8008740:	2208      	movs	r2, #8
 8008742:	4629      	mov	r1, r5
 8008744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008748:	f7ff fac4 	bl	8007cd4 <memset>
 800874c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008754:	4620      	mov	r0, r4
 8008756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008758:	3468      	adds	r4, #104	; 0x68
 800875a:	e7d9      	b.n	8008710 <__sfp+0x1c>
 800875c:	2104      	movs	r1, #4
 800875e:	4638      	mov	r0, r7
 8008760:	f7ff ff62 	bl	8008628 <__sfmoreglue>
 8008764:	4604      	mov	r4, r0
 8008766:	6030      	str	r0, [r6, #0]
 8008768:	2800      	cmp	r0, #0
 800876a:	d1d5      	bne.n	8008718 <__sfp+0x24>
 800876c:	f7ff ff78 	bl	8008660 <__sfp_lock_release>
 8008770:	230c      	movs	r3, #12
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	e7ee      	b.n	8008754 <__sfp+0x60>
 8008776:	bf00      	nop
 8008778:	08008de8 	.word	0x08008de8
 800877c:	ffff0001 	.word	0xffff0001

08008780 <_fwalk_reent>:
 8008780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008784:	4606      	mov	r6, r0
 8008786:	4688      	mov	r8, r1
 8008788:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800878c:	2700      	movs	r7, #0
 800878e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008792:	f1b9 0901 	subs.w	r9, r9, #1
 8008796:	d505      	bpl.n	80087a4 <_fwalk_reent+0x24>
 8008798:	6824      	ldr	r4, [r4, #0]
 800879a:	2c00      	cmp	r4, #0
 800879c:	d1f7      	bne.n	800878e <_fwalk_reent+0xe>
 800879e:	4638      	mov	r0, r7
 80087a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087a4:	89ab      	ldrh	r3, [r5, #12]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d907      	bls.n	80087ba <_fwalk_reent+0x3a>
 80087aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087ae:	3301      	adds	r3, #1
 80087b0:	d003      	beq.n	80087ba <_fwalk_reent+0x3a>
 80087b2:	4629      	mov	r1, r5
 80087b4:	4630      	mov	r0, r6
 80087b6:	47c0      	blx	r8
 80087b8:	4307      	orrs	r7, r0
 80087ba:	3568      	adds	r5, #104	; 0x68
 80087bc:	e7e9      	b.n	8008792 <_fwalk_reent+0x12>

080087be <__retarget_lock_init_recursive>:
 80087be:	4770      	bx	lr

080087c0 <__retarget_lock_acquire_recursive>:
 80087c0:	4770      	bx	lr

080087c2 <__retarget_lock_release_recursive>:
 80087c2:	4770      	bx	lr

080087c4 <__swhatbuf_r>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	460e      	mov	r6, r1
 80087c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087cc:	2900      	cmp	r1, #0
 80087ce:	b096      	sub	sp, #88	; 0x58
 80087d0:	4614      	mov	r4, r2
 80087d2:	461d      	mov	r5, r3
 80087d4:	da08      	bge.n	80087e8 <__swhatbuf_r+0x24>
 80087d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	602a      	str	r2, [r5, #0]
 80087de:	061a      	lsls	r2, r3, #24
 80087e0:	d410      	bmi.n	8008804 <__swhatbuf_r+0x40>
 80087e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e6:	e00e      	b.n	8008806 <__swhatbuf_r+0x42>
 80087e8:	466a      	mov	r2, sp
 80087ea:	f000 f9eb 	bl	8008bc4 <_fstat_r>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	dbf1      	blt.n	80087d6 <__swhatbuf_r+0x12>
 80087f2:	9a01      	ldr	r2, [sp, #4]
 80087f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087fc:	425a      	negs	r2, r3
 80087fe:	415a      	adcs	r2, r3
 8008800:	602a      	str	r2, [r5, #0]
 8008802:	e7ee      	b.n	80087e2 <__swhatbuf_r+0x1e>
 8008804:	2340      	movs	r3, #64	; 0x40
 8008806:	2000      	movs	r0, #0
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	b016      	add	sp, #88	; 0x58
 800880c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008810 <__smakebuf_r>:
 8008810:	898b      	ldrh	r3, [r1, #12]
 8008812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008814:	079d      	lsls	r5, r3, #30
 8008816:	4606      	mov	r6, r0
 8008818:	460c      	mov	r4, r1
 800881a:	d507      	bpl.n	800882c <__smakebuf_r+0x1c>
 800881c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	6123      	str	r3, [r4, #16]
 8008824:	2301      	movs	r3, #1
 8008826:	6163      	str	r3, [r4, #20]
 8008828:	b002      	add	sp, #8
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	ab01      	add	r3, sp, #4
 800882e:	466a      	mov	r2, sp
 8008830:	f7ff ffc8 	bl	80087c4 <__swhatbuf_r>
 8008834:	9900      	ldr	r1, [sp, #0]
 8008836:	4605      	mov	r5, r0
 8008838:	4630      	mov	r0, r6
 800883a:	f000 f895 	bl	8008968 <_malloc_r>
 800883e:	b948      	cbnz	r0, 8008854 <__smakebuf_r+0x44>
 8008840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008844:	059a      	lsls	r2, r3, #22
 8008846:	d4ef      	bmi.n	8008828 <__smakebuf_r+0x18>
 8008848:	f023 0303 	bic.w	r3, r3, #3
 800884c:	f043 0302 	orr.w	r3, r3, #2
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	e7e3      	b.n	800881c <__smakebuf_r+0xc>
 8008854:	4b0d      	ldr	r3, [pc, #52]	; (800888c <__smakebuf_r+0x7c>)
 8008856:	62b3      	str	r3, [r6, #40]	; 0x28
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	6020      	str	r0, [r4, #0]
 800885c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	9b00      	ldr	r3, [sp, #0]
 8008864:	6163      	str	r3, [r4, #20]
 8008866:	9b01      	ldr	r3, [sp, #4]
 8008868:	6120      	str	r0, [r4, #16]
 800886a:	b15b      	cbz	r3, 8008884 <__smakebuf_r+0x74>
 800886c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008870:	4630      	mov	r0, r6
 8008872:	f000 f9b9 	bl	8008be8 <_isatty_r>
 8008876:	b128      	cbz	r0, 8008884 <__smakebuf_r+0x74>
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f023 0303 	bic.w	r3, r3, #3
 800887e:	f043 0301 	orr.w	r3, r3, #1
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	89a0      	ldrh	r0, [r4, #12]
 8008886:	4305      	orrs	r5, r0
 8008888:	81a5      	strh	r5, [r4, #12]
 800888a:	e7cd      	b.n	8008828 <__smakebuf_r+0x18>
 800888c:	0800861d 	.word	0x0800861d

08008890 <_free_r>:
 8008890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008892:	2900      	cmp	r1, #0
 8008894:	d044      	beq.n	8008920 <_free_r+0x90>
 8008896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800889a:	9001      	str	r0, [sp, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f1a1 0404 	sub.w	r4, r1, #4
 80088a2:	bfb8      	it	lt
 80088a4:	18e4      	addlt	r4, r4, r3
 80088a6:	f000 f9c1 	bl	8008c2c <__malloc_lock>
 80088aa:	4a1e      	ldr	r2, [pc, #120]	; (8008924 <_free_r+0x94>)
 80088ac:	9801      	ldr	r0, [sp, #4]
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	b933      	cbnz	r3, 80088c0 <_free_r+0x30>
 80088b2:	6063      	str	r3, [r4, #4]
 80088b4:	6014      	str	r4, [r2, #0]
 80088b6:	b003      	add	sp, #12
 80088b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088bc:	f000 b9bc 	b.w	8008c38 <__malloc_unlock>
 80088c0:	42a3      	cmp	r3, r4
 80088c2:	d908      	bls.n	80088d6 <_free_r+0x46>
 80088c4:	6825      	ldr	r5, [r4, #0]
 80088c6:	1961      	adds	r1, r4, r5
 80088c8:	428b      	cmp	r3, r1
 80088ca:	bf01      	itttt	eq
 80088cc:	6819      	ldreq	r1, [r3, #0]
 80088ce:	685b      	ldreq	r3, [r3, #4]
 80088d0:	1949      	addeq	r1, r1, r5
 80088d2:	6021      	streq	r1, [r4, #0]
 80088d4:	e7ed      	b.n	80088b2 <_free_r+0x22>
 80088d6:	461a      	mov	r2, r3
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	b10b      	cbz	r3, 80088e0 <_free_r+0x50>
 80088dc:	42a3      	cmp	r3, r4
 80088de:	d9fa      	bls.n	80088d6 <_free_r+0x46>
 80088e0:	6811      	ldr	r1, [r2, #0]
 80088e2:	1855      	adds	r5, r2, r1
 80088e4:	42a5      	cmp	r5, r4
 80088e6:	d10b      	bne.n	8008900 <_free_r+0x70>
 80088e8:	6824      	ldr	r4, [r4, #0]
 80088ea:	4421      	add	r1, r4
 80088ec:	1854      	adds	r4, r2, r1
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	6011      	str	r1, [r2, #0]
 80088f2:	d1e0      	bne.n	80088b6 <_free_r+0x26>
 80088f4:	681c      	ldr	r4, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	6053      	str	r3, [r2, #4]
 80088fa:	4421      	add	r1, r4
 80088fc:	6011      	str	r1, [r2, #0]
 80088fe:	e7da      	b.n	80088b6 <_free_r+0x26>
 8008900:	d902      	bls.n	8008908 <_free_r+0x78>
 8008902:	230c      	movs	r3, #12
 8008904:	6003      	str	r3, [r0, #0]
 8008906:	e7d6      	b.n	80088b6 <_free_r+0x26>
 8008908:	6825      	ldr	r5, [r4, #0]
 800890a:	1961      	adds	r1, r4, r5
 800890c:	428b      	cmp	r3, r1
 800890e:	bf04      	itt	eq
 8008910:	6819      	ldreq	r1, [r3, #0]
 8008912:	685b      	ldreq	r3, [r3, #4]
 8008914:	6063      	str	r3, [r4, #4]
 8008916:	bf04      	itt	eq
 8008918:	1949      	addeq	r1, r1, r5
 800891a:	6021      	streq	r1, [r4, #0]
 800891c:	6054      	str	r4, [r2, #4]
 800891e:	e7ca      	b.n	80088b6 <_free_r+0x26>
 8008920:	b003      	add	sp, #12
 8008922:	bd30      	pop	{r4, r5, pc}
 8008924:	24000178 	.word	0x24000178

08008928 <sbrk_aligned>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4e0e      	ldr	r6, [pc, #56]	; (8008964 <sbrk_aligned+0x3c>)
 800892c:	460c      	mov	r4, r1
 800892e:	6831      	ldr	r1, [r6, #0]
 8008930:	4605      	mov	r5, r0
 8008932:	b911      	cbnz	r1, 800893a <sbrk_aligned+0x12>
 8008934:	f000 f88c 	bl	8008a50 <_sbrk_r>
 8008938:	6030      	str	r0, [r6, #0]
 800893a:	4621      	mov	r1, r4
 800893c:	4628      	mov	r0, r5
 800893e:	f000 f887 	bl	8008a50 <_sbrk_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d00a      	beq.n	800895c <sbrk_aligned+0x34>
 8008946:	1cc4      	adds	r4, r0, #3
 8008948:	f024 0403 	bic.w	r4, r4, #3
 800894c:	42a0      	cmp	r0, r4
 800894e:	d007      	beq.n	8008960 <sbrk_aligned+0x38>
 8008950:	1a21      	subs	r1, r4, r0
 8008952:	4628      	mov	r0, r5
 8008954:	f000 f87c 	bl	8008a50 <_sbrk_r>
 8008958:	3001      	adds	r0, #1
 800895a:	d101      	bne.n	8008960 <sbrk_aligned+0x38>
 800895c:	f04f 34ff 	mov.w	r4, #4294967295
 8008960:	4620      	mov	r0, r4
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	2400017c 	.word	0x2400017c

08008968 <_malloc_r>:
 8008968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896c:	1ccd      	adds	r5, r1, #3
 800896e:	f025 0503 	bic.w	r5, r5, #3
 8008972:	3508      	adds	r5, #8
 8008974:	2d0c      	cmp	r5, #12
 8008976:	bf38      	it	cc
 8008978:	250c      	movcc	r5, #12
 800897a:	2d00      	cmp	r5, #0
 800897c:	4607      	mov	r7, r0
 800897e:	db01      	blt.n	8008984 <_malloc_r+0x1c>
 8008980:	42a9      	cmp	r1, r5
 8008982:	d905      	bls.n	8008990 <_malloc_r+0x28>
 8008984:	230c      	movs	r3, #12
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	2600      	movs	r6, #0
 800898a:	4630      	mov	r0, r6
 800898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008990:	4e2e      	ldr	r6, [pc, #184]	; (8008a4c <_malloc_r+0xe4>)
 8008992:	f000 f94b 	bl	8008c2c <__malloc_lock>
 8008996:	6833      	ldr	r3, [r6, #0]
 8008998:	461c      	mov	r4, r3
 800899a:	bb34      	cbnz	r4, 80089ea <_malloc_r+0x82>
 800899c:	4629      	mov	r1, r5
 800899e:	4638      	mov	r0, r7
 80089a0:	f7ff ffc2 	bl	8008928 <sbrk_aligned>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	4604      	mov	r4, r0
 80089a8:	d14d      	bne.n	8008a46 <_malloc_r+0xde>
 80089aa:	6834      	ldr	r4, [r6, #0]
 80089ac:	4626      	mov	r6, r4
 80089ae:	2e00      	cmp	r6, #0
 80089b0:	d140      	bne.n	8008a34 <_malloc_r+0xcc>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	4631      	mov	r1, r6
 80089b6:	4638      	mov	r0, r7
 80089b8:	eb04 0803 	add.w	r8, r4, r3
 80089bc:	f000 f848 	bl	8008a50 <_sbrk_r>
 80089c0:	4580      	cmp	r8, r0
 80089c2:	d13a      	bne.n	8008a3a <_malloc_r+0xd2>
 80089c4:	6821      	ldr	r1, [r4, #0]
 80089c6:	3503      	adds	r5, #3
 80089c8:	1a6d      	subs	r5, r5, r1
 80089ca:	f025 0503 	bic.w	r5, r5, #3
 80089ce:	3508      	adds	r5, #8
 80089d0:	2d0c      	cmp	r5, #12
 80089d2:	bf38      	it	cc
 80089d4:	250c      	movcc	r5, #12
 80089d6:	4629      	mov	r1, r5
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff ffa5 	bl	8008928 <sbrk_aligned>
 80089de:	3001      	adds	r0, #1
 80089e0:	d02b      	beq.n	8008a3a <_malloc_r+0xd2>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	442b      	add	r3, r5
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	e00e      	b.n	8008a08 <_malloc_r+0xa0>
 80089ea:	6822      	ldr	r2, [r4, #0]
 80089ec:	1b52      	subs	r2, r2, r5
 80089ee:	d41e      	bmi.n	8008a2e <_malloc_r+0xc6>
 80089f0:	2a0b      	cmp	r2, #11
 80089f2:	d916      	bls.n	8008a22 <_malloc_r+0xba>
 80089f4:	1961      	adds	r1, r4, r5
 80089f6:	42a3      	cmp	r3, r4
 80089f8:	6025      	str	r5, [r4, #0]
 80089fa:	bf18      	it	ne
 80089fc:	6059      	strne	r1, [r3, #4]
 80089fe:	6863      	ldr	r3, [r4, #4]
 8008a00:	bf08      	it	eq
 8008a02:	6031      	streq	r1, [r6, #0]
 8008a04:	5162      	str	r2, [r4, r5]
 8008a06:	604b      	str	r3, [r1, #4]
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f104 060b 	add.w	r6, r4, #11
 8008a0e:	f000 f913 	bl	8008c38 <__malloc_unlock>
 8008a12:	f026 0607 	bic.w	r6, r6, #7
 8008a16:	1d23      	adds	r3, r4, #4
 8008a18:	1af2      	subs	r2, r6, r3
 8008a1a:	d0b6      	beq.n	800898a <_malloc_r+0x22>
 8008a1c:	1b9b      	subs	r3, r3, r6
 8008a1e:	50a3      	str	r3, [r4, r2]
 8008a20:	e7b3      	b.n	800898a <_malloc_r+0x22>
 8008a22:	6862      	ldr	r2, [r4, #4]
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	bf0c      	ite	eq
 8008a28:	6032      	streq	r2, [r6, #0]
 8008a2a:	605a      	strne	r2, [r3, #4]
 8008a2c:	e7ec      	b.n	8008a08 <_malloc_r+0xa0>
 8008a2e:	4623      	mov	r3, r4
 8008a30:	6864      	ldr	r4, [r4, #4]
 8008a32:	e7b2      	b.n	800899a <_malloc_r+0x32>
 8008a34:	4634      	mov	r4, r6
 8008a36:	6876      	ldr	r6, [r6, #4]
 8008a38:	e7b9      	b.n	80089ae <_malloc_r+0x46>
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	603b      	str	r3, [r7, #0]
 8008a3e:	4638      	mov	r0, r7
 8008a40:	f000 f8fa 	bl	8008c38 <__malloc_unlock>
 8008a44:	e7a1      	b.n	800898a <_malloc_r+0x22>
 8008a46:	6025      	str	r5, [r4, #0]
 8008a48:	e7de      	b.n	8008a08 <_malloc_r+0xa0>
 8008a4a:	bf00      	nop
 8008a4c:	24000178 	.word	0x24000178

08008a50 <_sbrk_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4d06      	ldr	r5, [pc, #24]	; (8008a6c <_sbrk_r+0x1c>)
 8008a54:	2300      	movs	r3, #0
 8008a56:	4604      	mov	r4, r0
 8008a58:	4608      	mov	r0, r1
 8008a5a:	602b      	str	r3, [r5, #0]
 8008a5c:	f7f8 ff72 	bl	8001944 <_sbrk>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_sbrk_r+0x1a>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_sbrk_r+0x1a>
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	24000180 	.word	0x24000180

08008a70 <_raise_r>:
 8008a70:	291f      	cmp	r1, #31
 8008a72:	b538      	push	{r3, r4, r5, lr}
 8008a74:	4604      	mov	r4, r0
 8008a76:	460d      	mov	r5, r1
 8008a78:	d904      	bls.n	8008a84 <_raise_r+0x14>
 8008a7a:	2316      	movs	r3, #22
 8008a7c:	6003      	str	r3, [r0, #0]
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a86:	b112      	cbz	r2, 8008a8e <_raise_r+0x1e>
 8008a88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a8c:	b94b      	cbnz	r3, 8008aa2 <_raise_r+0x32>
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 f830 	bl	8008af4 <_getpid_r>
 8008a94:	462a      	mov	r2, r5
 8008a96:	4601      	mov	r1, r0
 8008a98:	4620      	mov	r0, r4
 8008a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9e:	f000 b817 	b.w	8008ad0 <_kill_r>
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d00a      	beq.n	8008abc <_raise_r+0x4c>
 8008aa6:	1c59      	adds	r1, r3, #1
 8008aa8:	d103      	bne.n	8008ab2 <_raise_r+0x42>
 8008aaa:	2316      	movs	r3, #22
 8008aac:	6003      	str	r3, [r0, #0]
 8008aae:	2001      	movs	r0, #1
 8008ab0:	e7e7      	b.n	8008a82 <_raise_r+0x12>
 8008ab2:	2400      	movs	r4, #0
 8008ab4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ab8:	4628      	mov	r0, r5
 8008aba:	4798      	blx	r3
 8008abc:	2000      	movs	r0, #0
 8008abe:	e7e0      	b.n	8008a82 <_raise_r+0x12>

08008ac0 <raise>:
 8008ac0:	4b02      	ldr	r3, [pc, #8]	; (8008acc <raise+0xc>)
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	6818      	ldr	r0, [r3, #0]
 8008ac6:	f7ff bfd3 	b.w	8008a70 <_raise_r>
 8008aca:	bf00      	nop
 8008acc:	24000010 	.word	0x24000010

08008ad0 <_kill_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d07      	ldr	r5, [pc, #28]	; (8008af0 <_kill_r+0x20>)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	4608      	mov	r0, r1
 8008ada:	4611      	mov	r1, r2
 8008adc:	602b      	str	r3, [r5, #0]
 8008ade:	f7f8 fea9 	bl	8001834 <_kill>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	d102      	bne.n	8008aec <_kill_r+0x1c>
 8008ae6:	682b      	ldr	r3, [r5, #0]
 8008ae8:	b103      	cbz	r3, 8008aec <_kill_r+0x1c>
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	bd38      	pop	{r3, r4, r5, pc}
 8008aee:	bf00      	nop
 8008af0:	24000180 	.word	0x24000180

08008af4 <_getpid_r>:
 8008af4:	f7f8 be96 	b.w	8001824 <_getpid>

08008af8 <__sread>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	460c      	mov	r4, r1
 8008afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b00:	f000 f8a0 	bl	8008c44 <_read_r>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	bfab      	itete	ge
 8008b08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b0c:	181b      	addge	r3, r3, r0
 8008b0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b12:	bfac      	ite	ge
 8008b14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b16:	81a3      	strhlt	r3, [r4, #12]
 8008b18:	bd10      	pop	{r4, pc}

08008b1a <__swrite>:
 8008b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1e:	461f      	mov	r7, r3
 8008b20:	898b      	ldrh	r3, [r1, #12]
 8008b22:	05db      	lsls	r3, r3, #23
 8008b24:	4605      	mov	r5, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	4616      	mov	r6, r2
 8008b2a:	d505      	bpl.n	8008b38 <__swrite+0x1e>
 8008b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b30:	2302      	movs	r3, #2
 8008b32:	2200      	movs	r2, #0
 8008b34:	f000 f868 	bl	8008c08 <_lseek_r>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	4632      	mov	r2, r6
 8008b46:	463b      	mov	r3, r7
 8008b48:	4628      	mov	r0, r5
 8008b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4e:	f000 b817 	b.w	8008b80 <_write_r>

08008b52 <__sseek>:
 8008b52:	b510      	push	{r4, lr}
 8008b54:	460c      	mov	r4, r1
 8008b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5a:	f000 f855 	bl	8008c08 <_lseek_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	bf15      	itete	ne
 8008b64:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b6e:	81a3      	strheq	r3, [r4, #12]
 8008b70:	bf18      	it	ne
 8008b72:	81a3      	strhne	r3, [r4, #12]
 8008b74:	bd10      	pop	{r4, pc}

08008b76 <__sclose>:
 8008b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7a:	f000 b813 	b.w	8008ba4 <_close_r>
	...

08008b80 <_write_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	; (8008ba0 <_write_r+0x20>)
 8008b84:	4604      	mov	r4, r0
 8008b86:	4608      	mov	r0, r1
 8008b88:	4611      	mov	r1, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	602a      	str	r2, [r5, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f7f8 fe87 	bl	80018a2 <_write>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_write_r+0x1e>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_write_r+0x1e>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	24000180 	.word	0x24000180

08008ba4 <_close_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d06      	ldr	r5, [pc, #24]	; (8008bc0 <_close_r+0x1c>)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4604      	mov	r4, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	602b      	str	r3, [r5, #0]
 8008bb0:	f7f8 fe93 	bl	80018da <_close>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_close_r+0x1a>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_close_r+0x1a>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	24000180 	.word	0x24000180

08008bc4 <_fstat_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4d07      	ldr	r5, [pc, #28]	; (8008be4 <_fstat_r+0x20>)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4604      	mov	r4, r0
 8008bcc:	4608      	mov	r0, r1
 8008bce:	4611      	mov	r1, r2
 8008bd0:	602b      	str	r3, [r5, #0]
 8008bd2:	f7f8 fe8e 	bl	80018f2 <_fstat>
 8008bd6:	1c43      	adds	r3, r0, #1
 8008bd8:	d102      	bne.n	8008be0 <_fstat_r+0x1c>
 8008bda:	682b      	ldr	r3, [r5, #0]
 8008bdc:	b103      	cbz	r3, 8008be0 <_fstat_r+0x1c>
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	bd38      	pop	{r3, r4, r5, pc}
 8008be2:	bf00      	nop
 8008be4:	24000180 	.word	0x24000180

08008be8 <_isatty_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d06      	ldr	r5, [pc, #24]	; (8008c04 <_isatty_r+0x1c>)
 8008bec:	2300      	movs	r3, #0
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	602b      	str	r3, [r5, #0]
 8008bf4:	f7f8 fe8d 	bl	8001912 <_isatty>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_isatty_r+0x1a>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_isatty_r+0x1a>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	24000180 	.word	0x24000180

08008c08 <_lseek_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d07      	ldr	r5, [pc, #28]	; (8008c28 <_lseek_r+0x20>)
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	4608      	mov	r0, r1
 8008c10:	4611      	mov	r1, r2
 8008c12:	2200      	movs	r2, #0
 8008c14:	602a      	str	r2, [r5, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f7f8 fe86 	bl	8001928 <_lseek>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_lseek_r+0x1e>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_lseek_r+0x1e>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	24000180 	.word	0x24000180

08008c2c <__malloc_lock>:
 8008c2c:	4801      	ldr	r0, [pc, #4]	; (8008c34 <__malloc_lock+0x8>)
 8008c2e:	f7ff bdc7 	b.w	80087c0 <__retarget_lock_acquire_recursive>
 8008c32:	bf00      	nop
 8008c34:	24000174 	.word	0x24000174

08008c38 <__malloc_unlock>:
 8008c38:	4801      	ldr	r0, [pc, #4]	; (8008c40 <__malloc_unlock+0x8>)
 8008c3a:	f7ff bdc2 	b.w	80087c2 <__retarget_lock_release_recursive>
 8008c3e:	bf00      	nop
 8008c40:	24000174 	.word	0x24000174

08008c44 <_read_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d07      	ldr	r5, [pc, #28]	; (8008c64 <_read_r+0x20>)
 8008c48:	4604      	mov	r4, r0
 8008c4a:	4608      	mov	r0, r1
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	602a      	str	r2, [r5, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f7f8 fe08 	bl	8001868 <_read>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_read_r+0x1e>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_read_r+0x1e>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	24000180 	.word	0x24000180

08008c68 <_init>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	bf00      	nop
 8008c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6e:	bc08      	pop	{r3}
 8008c70:	469e      	mov	lr, r3
 8008c72:	4770      	bx	lr

08008c74 <_fini>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	bf00      	nop
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr

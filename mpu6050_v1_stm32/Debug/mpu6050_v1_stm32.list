
mpu6050_v1_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b68c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800b940  0800b940  0001b940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be48  0800be48  0001be48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be50  0800be50  0001be50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be54  0800be54  0001be54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800be58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000110  240001e0  0800c038  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002f0  0800c038  000202f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015343  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002671  00000000  00000000  00035551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f28  00000000  00000000  00037bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e40  00000000  00000000  00038af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003043d  00000000  00000000  00039930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000153d3  00000000  00000000  00069d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136670  00000000  00000000  0007f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b57b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d6c  00000000  00000000  001b5800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b924 	.word	0x0800b924

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800b924 	.word	0x0800b924

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MPU6050_readRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


HAL_StatusTypeDef MPU6050_readRegister(MPU6050* mpu6050, uint8_t reg, uint8_t* data) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
  /*
  Reads 1 byte from the specified register using I2C configuration from the MPU6050 instance
  Info is stored away into the data array
  */
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read_IT(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	b299      	uxth	r1, r3
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	f002 fbf1 	bl	8002eb0 <HAL_I2C_Mem_Read_IT>
 80006ce:	4603      	mov	r3, r0
 80006d0:	75fb      	strb	r3, [r7, #23]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1, HAL_MAX_DELAY);
  return result;
 80006d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <MPU6050_writeRegister>:

HAL_StatusTypeDef MPU6050_writeRegister(MPU6050* mpu6050, uint8_t reg, uint8_t* data) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	460b      	mov	r3, r1
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	72fb      	strb	r3, [r7, #11]
  /*
  Writes 1 byte from the data array into the specified register reg using I2C configuration from the MPU6050 instance
  */  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write_IT(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6818      	ldr	r0, [r3, #0]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	b299      	uxth	r1, r3
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	2301      	movs	r3, #1
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2301      	movs	r3, #1
 8000702:	f002 fb41 	bl	8002d88 <HAL_I2C_Mem_Write_IT>
 8000706:	4603      	mov	r3, r0
 8000708:	75fb      	strb	r3, [r7, #23]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1, HAL_MAX_DELAY);
  return HAL_OK;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <MPU6050_readRegisters>:

HAL_StatusTypeDef MPU6050_readRegisters(MPU6050* mpu6050, uint8_t reg, uint8_t* data, uint8_t length) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af02      	add	r7, sp, #8
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	461a      	mov	r2, r3
 8000720:	460b      	mov	r3, r1
 8000722:	72fb      	strb	r3, [r7, #11]
 8000724:	4613      	mov	r3, r2
 8000726:	72bb      	strb	r3, [r7, #10]
  Reads 1 byte from the specified register using I2C configuration from the MPU6050 instance
  Info is stored away into the data array
  */  
  // NOTE: Length is the number of bytes we wanna read from the register -> 1 means read that register. 2 would mean reading this register then the next one
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read_IT(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	b299      	uxth	r1, r3
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	b29a      	uxth	r2, r3
 8000736:	7abb      	ldrb	r3, [r7, #10]
 8000738:	b29b      	uxth	r3, r3
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f002 fbb5 	bl	8002eb0 <HAL_I2C_Mem_Read_IT>
 8000746:	4603      	mov	r3, r0
 8000748:	75fb      	strb	r3, [r7, #23]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length, HAL_MAX_DELAY);
  return HAL_OK;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <MPU6050_wakeup>:


HAL_StatusTypeDef MPU6050_wakeup(MPU6050* mpu6050) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  // Write 0's to the PWR_MGMT_1 register to wake it up
  // It sets clock source as internal 8MHz clock, and it is woken up
  // uint8_t zero = 0;
  // HAL_StatusTypeDef res = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &zero, sizeof(zero), TIMEOUT_DEFAULT);

  HAL_StatusTypeDef res = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	216b      	movs	r1, #107	; 0x6b
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ffbb 	bl	80006dc <MPU6050_writeRegister>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
  return res;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <MPU6050_set_pwr_mgmt>:

HAL_StatusTypeDef MPU6050_set_pwr_mgmt(MPU6050* mpu6050, int dev_rst, int sleep, int cycle, int temp_dis, int clksel) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	603b      	str	r3, [r7, #0]
  // Assumption is that the first 4 inputs are 1 bit (0 or 1), and clksel is 3 bit (0 to 7)
  assert(dev_rst >= 0 && dev_rst <= 1);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db02      	blt.n	800078e <MPU6050_set_pwr_mgmt+0x1a>
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	2b01      	cmp	r3, #1
 800078c:	dd05      	ble.n	800079a <MPU6050_set_pwr_mgmt+0x26>
 800078e:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <MPU6050_set_pwr_mgmt+0xd4>)
 8000790:	4a2e      	ldr	r2, [pc, #184]	; (800084c <MPU6050_set_pwr_mgmt+0xd8>)
 8000792:	21bb      	movs	r1, #187	; 0xbb
 8000794:	482e      	ldr	r0, [pc, #184]	; (8000850 <MPU6050_set_pwr_mgmt+0xdc>)
 8000796:	f008 fc27 	bl	8008fe8 <__assert_func>
  assert(sleep >= 0 && sleep <= 1);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	db02      	blt.n	80007a6 <MPU6050_set_pwr_mgmt+0x32>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	dd05      	ble.n	80007b2 <MPU6050_set_pwr_mgmt+0x3e>
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MPU6050_set_pwr_mgmt+0xe0>)
 80007a8:	4a28      	ldr	r2, [pc, #160]	; (800084c <MPU6050_set_pwr_mgmt+0xd8>)
 80007aa:	21bc      	movs	r1, #188	; 0xbc
 80007ac:	4828      	ldr	r0, [pc, #160]	; (8000850 <MPU6050_set_pwr_mgmt+0xdc>)
 80007ae:	f008 fc1b 	bl	8008fe8 <__assert_func>
  assert(cycle >= 0 && cycle <= 1);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db02      	blt.n	80007be <MPU6050_set_pwr_mgmt+0x4a>
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	dd05      	ble.n	80007ca <MPU6050_set_pwr_mgmt+0x56>
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MPU6050_set_pwr_mgmt+0xe4>)
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <MPU6050_set_pwr_mgmt+0xd8>)
 80007c2:	21bd      	movs	r1, #189	; 0xbd
 80007c4:	4822      	ldr	r0, [pc, #136]	; (8000850 <MPU6050_set_pwr_mgmt+0xdc>)
 80007c6:	f008 fc0f 	bl	8008fe8 <__assert_func>
  assert(temp_dis >= 0 && temp_dis <= 1);
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db02      	blt.n	80007d6 <MPU6050_set_pwr_mgmt+0x62>
 80007d0:	6a3b      	ldr	r3, [r7, #32]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	dd05      	ble.n	80007e2 <MPU6050_set_pwr_mgmt+0x6e>
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MPU6050_set_pwr_mgmt+0xe8>)
 80007d8:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MPU6050_set_pwr_mgmt+0xd8>)
 80007da:	21be      	movs	r1, #190	; 0xbe
 80007dc:	481c      	ldr	r0, [pc, #112]	; (8000850 <MPU6050_set_pwr_mgmt+0xdc>)
 80007de:	f008 fc03 	bl	8008fe8 <__assert_func>
  assert(clksel >= 0 && clksel <= 7);
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db02      	blt.n	80007ee <MPU6050_set_pwr_mgmt+0x7a>
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	dd05      	ble.n	80007fa <MPU6050_set_pwr_mgmt+0x86>
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MPU6050_set_pwr_mgmt+0xec>)
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <MPU6050_set_pwr_mgmt+0xd8>)
 80007f2:	21bf      	movs	r1, #191	; 0xbf
 80007f4:	4816      	ldr	r0, [pc, #88]	; (8000850 <MPU6050_set_pwr_mgmt+0xdc>)
 80007f6:	f008 fbf7 	bl	8008fe8 <__assert_func>

  // Create bit string to put into the register
  uint8_t res =  0 | (dev_rst << 7) | (sleep << 6) | (cycle << 5) | (temp_dis << 3) | clksel;
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	01db      	lsls	r3, r3, #7
 80007fe:	b25a      	sxtb	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	019b      	lsls	r3, r3, #6
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b25a      	sxtb	r2, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	015b      	lsls	r3, r3, #5
 800080e:	b25b      	sxtb	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	b25a      	sxtb	r2, r3
 8000814:	6a3b      	ldr	r3, [r7, #32]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	b25b      	sxtb	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b25a      	sxtb	r2, r3
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	b25b      	sxtb	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b25b      	sxtb	r3, r3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	75bb      	strb	r3, [r7, #22]
  
  // Write to the register over I2C
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, &res);
 800082a:	f107 0316 	add.w	r3, r7, #22
 800082e:	461a      	mov	r2, r3
 8000830:	216b      	movs	r1, #107	; 0x6b
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f7ff ff52 	bl	80006dc <MPU6050_writeRegister>
 8000838:	4603      	mov	r3, r0
 800083a:	75fb      	strb	r3, [r7, #23]

  return result;
 800083c:	7dfb      	ldrb	r3, [r7, #23]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	0800b940 	.word	0x0800b940
 800084c:	0800ba08 	.word	0x0800ba08
 8000850:	0800b960 	.word	0x0800b960
 8000854:	0800b974 	.word	0x0800b974
 8000858:	0800b990 	.word	0x0800b990
 800085c:	0800b9ac 	.word	0x0800b9ac
 8000860:	0800b9cc 	.word	0x0800b9cc

08000864 <MPU6050_set_dlpf>:

HAL_StatusTypeDef MPU6050_set_dlpf(uint8_t* dlpf, MPU6050* mpu6050) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  /*
  Just set DLPF_CFG = 001 (so register )
  */

  // Ensure that dlpf is a number between 0 and 7
  assert((*dlpf >= 0) && (*dlpf <= 7));
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b07      	cmp	r3, #7
 8000874:	d905      	bls.n	8000882 <MPU6050_set_dlpf+0x1e>
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MPU6050_set_dlpf+0x40>)
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <MPU6050_set_dlpf+0x44>)
 800087a:	21d1      	movs	r1, #209	; 0xd1
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <MPU6050_set_dlpf+0x48>)
 800087e:	f008 fbb3 	bl	8008fe8 <__assert_func>
  // assert(*dlpf >= 0);
  // assert(*dlpf <= 7);

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, DLPF, I2C_MEMADD_SIZE_8BIT, dlpf, sizeof(*dlpf), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, dlpf);
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	216b      	movs	r1, #107	; 0x6b
 8000886:	6838      	ldr	r0, [r7, #0]
 8000888:	f7ff ff28 	bl	80006dc <MPU6050_writeRegister>
 800088c:	4603      	mov	r3, r0
 800088e:	73fb      	strb	r3, [r7, #15]
  

  // Store the dlpf number in the struct
  mpu6050->dlpf = *dlpf;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	719a      	strb	r2, [r3, #6]
  return result;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	0800b9e8 	.word	0x0800b9e8
 80008a8:	0800ba20 	.word	0x0800ba20
 80008ac:	0800b960 	.word	0x0800b960

080008b0 <MPU6050_set_sample_rate>:

// REVIEW - Maths behind the smplrt_div_input may not be good due to division.
HAL_StatusTypeDef MPU6050_set_sample_rate(uint8_t* freq_ptr, MPU6050* mpu6050) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]

  We need to calculate what needs to go into the SMPLRT_DIV register to get the desired frequency
  This also assumes that the gyro output rate is at 1kHz
  */
  
  uint8_t smplrt_div_input = (mpu6050->gyro_smplrt)/(*freq_ptr) - 1;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	795a      	ldrb	r2, [r3, #5]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	3b01      	subs	r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &smplrt_div_input, sizeof(smplrt_div_input), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, SMPLRT_DIV, &smplrt_div_input);
 80008ce:	f107 030e 	add.w	r3, r7, #14
 80008d2:	461a      	mov	r2, r3
 80008d4:	2119      	movs	r1, #25
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	f7ff ff00 	bl	80006dc <MPU6050_writeRegister>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]

  // Store the new sample rate divider in the struct
  mpu6050->gyro_smplrt = *freq_ptr;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	715a      	strb	r2, [r3, #5]
  return result;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <MPU6050_set_gyro_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_gyro_FSR(Gyro_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d822      	bhi.n	800094c <MPU6050_set_gyro_FSR+0x58>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <MPU6050_set_gyro_FSR+0x18>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	0800091d 	.word	0x0800091d
 8000910:	08000929 	.word	0x08000929
 8000914:	08000935 	.word	0x08000935
 8000918:	08000941 	.word	0x08000941
    // For each possibility, set the correct data to be written and store the setting away
    // Left shift data bits by 3 so that we only overwrite bits 4 and 3
    case GYRO_FSR_250:
      pData = (0 << 3);
 800091c:	2300      	movs	r3, #0
 800091e:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_250;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2200      	movs	r2, #0
 8000924:	71da      	strb	r2, [r3, #7]
      break;
 8000926:	e011      	b.n	800094c <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_500:
      pData = (1 << 3);
 8000928:	2308      	movs	r3, #8
 800092a:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_500;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	2201      	movs	r2, #1
 8000930:	71da      	strb	r2, [r3, #7]
      break;
 8000932:	e00b      	b.n	800094c <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_1000:
      pData = (2 << 3);
 8000934:	2310      	movs	r3, #16
 8000936:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_1000;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	2202      	movs	r2, #2
 800093c:	71da      	strb	r2, [r3, #7]
      break;
 800093e:	e005      	b.n	800094c <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_2000:
      pData = (3 << 3);
 8000940:	2318      	movs	r3, #24
 8000942:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_2000;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2203      	movs	r2, #3
 8000948:	71da      	strb	r2, [r3, #7]
      break;
 800094a:	bf00      	nop
  }
  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, GYRO_CONFIG, &pData);  
 800094c:	f107 030e 	add.w	r3, r7, #14
 8000950:	461a      	mov	r2, r3
 8000952:	211b      	movs	r1, #27
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f7ff fec1 	bl	80006dc <MPU6050_writeRegister>
 800095a:	4603      	mov	r3, r0
 800095c:	73fb      	strb	r3, [r7, #15]
  
  return result;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <MPU6050_set_accel_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_accel_FSR(Accel_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d822      	bhi.n	80009c0 <MPU6050_set_accel_FSR+0x58>
 800097a:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <MPU6050_set_accel_FSR+0x18>)
 800097c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000980:	08000991 	.word	0x08000991
 8000984:	0800099d 	.word	0x0800099d
 8000988:	080009a9 	.word	0x080009a9
 800098c:	080009b5 	.word	0x080009b5
    case ACCEL_FSR_2g:
      pData = (0 << 3);
 8000990:	2300      	movs	r3, #0
 8000992:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_2g;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2200      	movs	r2, #0
 8000998:	721a      	strb	r2, [r3, #8]
      break;
 800099a:	e011      	b.n	80009c0 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_4g:
      pData = (1 << 3);
 800099c:	2308      	movs	r3, #8
 800099e:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_4g;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2201      	movs	r2, #1
 80009a4:	721a      	strb	r2, [r3, #8]
      break;
 80009a6:	e00b      	b.n	80009c0 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_8g:
      pData = (2 << 3);
 80009a8:	2310      	movs	r3, #16
 80009aa:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_8g;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	2202      	movs	r2, #2
 80009b0:	721a      	strb	r2, [r3, #8]
      break;
 80009b2:	e005      	b.n	80009c0 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_16g:
      pData = (3 << 3);
 80009b4:	2318      	movs	r3, #24
 80009b6:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_16g;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	2203      	movs	r2, #3
 80009bc:	721a      	strb	r2, [r3, #8]
      break;
 80009be:	bf00      	nop
  }
  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, ACCEL_CONFIG, &pData);    
 80009c0:	f107 030e 	add.w	r3, r7, #14
 80009c4:	461a      	mov	r2, r3
 80009c6:	211c      	movs	r1, #28
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f7ff fe87 	bl	80006dc <MPU6050_writeRegister>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73fb      	strb	r3, [r7, #15]
  
  return result;  
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <MPU6050_FIFO_enable>:


HAL_StatusTypeDef MPU6050_FIFO_enable(MPU6050* mpu6050) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  // Write a 1 to bit 6 of register 0x6A
  uint8_t res = (1 << 6);
 80009e4:	2340      	movs	r3, #64	; 0x40
 80009e6:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, USER_CTRL, &res);     
 80009e8:	f107 030e 	add.w	r3, r7, #14
 80009ec:	461a      	mov	r2, r3
 80009ee:	216a      	movs	r1, #106	; 0x6a
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fe73 	bl	80006dc <MPU6050_writeRegister>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]
  return result;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <MPU6050_FIFO_reset>:

HAL_StatusTypeDef MPU6050_FIFO_reset(MPU6050* mpu6050) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  // Assumes that MPU6050 FIFO buffer is enabled. FIFO enable bit is driven low ONLY when MPU is power cycled (turned off and back on)
  // Write a 2 to bit 2 of register 0x6A -> this gets written to 0 once FIFO is reset anyway
  uint8_t res = (1 << 2);
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, USER_CTRL, &res);  
 8000a10:	f107 030e 	add.w	r3, r7, #14
 8000a14:	461a      	mov	r2, r3
 8000a16:	216a      	movs	r1, #106	; 0x6a
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fe5f 	bl	80006dc <MPU6050_writeRegister>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	73fb      	strb	r3, [r7, #15]

  return result;  
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <MPU6050_init>:

HAL_StatusTypeDef MPU6050_init(MPU6050* mpu6050_ptr, uint8_t* dlpf, uint8_t* smpl_frq, Gyro_FSR_SEL_TypeDef gyro_setting, Accel_FSR_SEL_TypeDef accel_setting) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	70fb      	strb	r3, [r7, #3]
  // Check that we have the correct device by checking its address
  uint8_t check = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	75bb      	strb	r3, [r7, #22]
  // uint8_t check[4];
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &check, sizeof(check), TIMEOUT_DEFAULT);
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &check, sizeof(check), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_readRegister(mpu6050_ptr, WHO_AM_I, &check);
 8000a3e:	f107 0316 	add.w	r3, r7, #22
 8000a42:	461a      	mov	r2, r3
 8000a44:	2175      	movs	r1, #117	; 0x75
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff fe2c 	bl	80006a4 <MPU6050_readRegister>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	75fb      	strb	r3, [r7, #23]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, 1, check, 1, 1000);

  if (result == HAL_OK && check == 0x68) { //check == 0x68
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d118      	bne.n	8000a88 <MPU6050_init+0x5c>
 8000a56:	7dbb      	ldrb	r3, [r7, #22]
 8000a58:	2b68      	cmp	r3, #104	; 0x68
 8000a5a:	d115      	bne.n	8000a88 <MPU6050_init+0x5c>
    // Device is identified as the MPU6050 yay -> Wake it up
    MPU6050_wakeup(mpu6050_ptr);
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f7ff fe79 	bl	8000754 <MPU6050_wakeup>

    // Configure DLPF_CFG and store away settings
    MPU6050_set_dlpf(dlpf, mpu6050_ptr);
 8000a62:	68f9      	ldr	r1, [r7, #12]
 8000a64:	68b8      	ldr	r0, [r7, #8]
 8000a66:	f7ff fefd 	bl	8000864 <MPU6050_set_dlpf>

    // Configure the gyro sample rate and store away settings
    MPU6050_set_sample_rate(smpl_frq, mpu6050_ptr);
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff1f 	bl	80008b0 <MPU6050_set_sample_rate>

    // Set the full scale range for the gyroscope and accelerometer
    MPU6050_set_gyro_FSR(gyro_setting, mpu6050_ptr);
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	68f9      	ldr	r1, [r7, #12]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff3c 	bl	80008f4 <MPU6050_set_gyro_FSR>
    MPU6050_set_accel_FSR(accel_setting, mpu6050_ptr);
 8000a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a80:	68f9      	ldr	r1, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff70 	bl	8000968 <MPU6050_set_accel_FSR>
  }

  return result;
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	0000      	movs	r0, r0
 8000a94:	0000      	movs	r0, r0
	...

08000a98 <MPU6050_read_gyro_reg>:

HAL_StatusTypeDef MPU6050_read_gyro_reg(MPU6050* mpu6050) {
 8000a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a9c:	b089      	sub	sp, #36	; 0x24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	466b      	mov	r3, sp
 8000aa4:	461e      	mov	r6, r3
  // Initialise temporary variables
  int16_t gx_raw = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	83fb      	strh	r3, [r7, #30]
  int16_t gy_raw = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	83bb      	strh	r3, [r7, #28]
  int16_t gz_raw = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	837b      	strh	r3, [r7, #26]

  uint8_t num_of_bytes = 6;
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	767b      	strb	r3, [r7, #25]
  int8_t g_raw[num_of_bytes];
 8000ab6:	7e79      	ldrb	r1, [r7, #25]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	3b01      	subs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	b2cb      	uxtb	r3, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	4691      	mov	r9, r2
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	f04f 0300 	mov.w	r3, #0
 8000ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ada:	b2cb      	uxtb	r3, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	461c      	mov	r4, r3
 8000ae0:	4615      	mov	r5, r2
 8000ae2:	f04f 0200 	mov.w	r2, #0
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	00eb      	lsls	r3, r5, #3
 8000aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000af0:	00e2      	lsls	r2, r4, #3
 8000af2:	460b      	mov	r3, r1
 8000af4:	3307      	adds	r3, #7
 8000af6:	08db      	lsrs	r3, r3, #3
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	ebad 0d03 	sub.w	sp, sp, r3
 8000afe:	466b      	mov	r3, sp
 8000b00:	3300      	adds	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]

  // Read X gyro registers and store the raw gyroscope value away
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
  
  // Read all gyroscope registers starting from GYRO_XOUT_H and ending at GYRO_ZOUT_L
  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, GYRO_XOUT_H, g_raw, num_of_bytes);
 8000b04:	7e7b      	ldrb	r3, [r7, #25]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	2143      	movs	r1, #67	; 0x43
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fe02 	bl	8000714 <MPU6050_readRegisters>
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]

  // Get the raw x, y and z values
  gx_raw = (g_raw[0] << 8) | (g_raw[1]);
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	f993 3000 	ldrsb.w	r3, [r3]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	4313      	orrs	r3, r2
 8000b28:	83fb      	strh	r3, [r7, #30]
  gy_raw = (g_raw[2] << 8) | (g_raw[3]);
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	83bb      	strh	r3, [r7, #28]
  gz_raw = (g_raw[4] << 8) | (g_raw[5]);
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	b21a      	sxth	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	837b      	strh	r3, [r7, #26]
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_ZOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_ZOUT_L, I2C_MEMADD_SIZE_8BIT, &g_raw_L, sizeof(g_raw_L), TIMEOUT_DEFAULT);
  // gz_raw = (g_raw[4] << 8) | (g_raw[5]);

  // Rescale raw readings according to gyro FSR
  switch(mpu6050->gyro_FSR) {
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	79db      	ldrb	r3, [r3, #7]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	f200 80c4 	bhi.w	8000ce8 <MPU6050_read_gyro_reg+0x250>
 8000b60:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <MPU6050_read_gyro_reg+0xd0>)
 8000b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b66:	bf00      	nop
 8000b68:	08000b79 	.word	0x08000b79
 8000b6c:	08000bc9 	.word	0x08000bc9
 8000b70:	08000c19 	.word	0x08000c19
 8000b74:	08000c81 	.word	0x08000c81
    case GYRO_FSR_250:
      mpu6050->gx = ((float) gx_raw) / 131.0;
 8000b78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b84:	eddf 6a60 	vldr	s13, [pc, #384]	; 8000d08 <MPU6050_read_gyro_reg+0x270>
 8000b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 131.0;
 8000b92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000b96:	ee07 3a90 	vmov	s15, r3
 8000b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b9e:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8000d08 <MPU6050_read_gyro_reg+0x270>
 8000ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 131.0;
 8000bac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb8:	eddf 6a53 	vldr	s13, [pc, #332]	; 8000d08 <MPU6050_read_gyro_reg+0x270>
 8000bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000bc6:	e08f      	b.n	8000ce8 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_500:
      mpu6050->gx = ((float) gx_raw) / 65.5;
 8000bc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bd4:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000d0c <MPU6050_read_gyro_reg+0x274>
 8000bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 65.5;
 8000be2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bee:	eddf 6a47 	vldr	s13, [pc, #284]	; 8000d0c <MPU6050_read_gyro_reg+0x274>
 8000bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 65.5;
 8000bfc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c00:	ee07 3a90 	vmov	s15, r3
 8000c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c08:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000d0c <MPU6050_read_gyro_reg+0x274>
 8000c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000c16:	e067      	b.n	8000ce8 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_1000:
      mpu6050->gx = ((float) gx_raw) / 32.8;
 8000c18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c24:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c28:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000cf8 <MPU6050_read_gyro_reg+0x260>
 8000c2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 32.8;
 8000c3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000c3e:	ee07 3a90 	vmov	s15, r3
 8000c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c46:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c4a:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8000cf8 <MPU6050_read_gyro_reg+0x260>
 8000c4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 32.8;
 8000c5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c60:	ee07 3a90 	vmov	s15, r3
 8000c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c68:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c6c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8000cf8 <MPU6050_read_gyro_reg+0x260>
 8000c70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000c7e:	e033      	b.n	8000ce8 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_2000:
      mpu6050->gx = ((float) gx_raw) / 16.4;
 8000c80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c90:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000d00 <MPU6050_read_gyro_reg+0x268>
 8000c94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 16.4;
 8000ca2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ca6:	ee07 3a90 	vmov	s15, r3
 8000caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cb2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000d00 <MPU6050_read_gyro_reg+0x268>
 8000cb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 16.4;
 8000cc4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cd4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000d00 <MPU6050_read_gyro_reg+0x268>
 8000cd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000ce6:	bf00      	nop
  }

  return result;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	46b5      	mov	sp, r6
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3724      	adds	r7, #36	; 0x24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cf6:	bf00      	nop
 8000cf8:	66666666 	.word	0x66666666
 8000cfc:	40406666 	.word	0x40406666
 8000d00:	66666666 	.word	0x66666666
 8000d04:	40306666 	.word	0x40306666
 8000d08:	43030000 	.word	0x43030000
 8000d0c:	42830000 	.word	0x42830000

08000d10 <MPU6050_read_accel_reg>:

HAL_StatusTypeDef MPU6050_read_accel_reg(MPU6050* mpu6050) {
 8000d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d14:	b089      	sub	sp, #36	; 0x24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	466b      	mov	r3, sp
 8000d1c:	461e      	mov	r6, r3
  // Initialise temporary variables
  int16_t ax_raw = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	83fb      	strh	r3, [r7, #30]
  int16_t ay_raw = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	83bb      	strh	r3, [r7, #28]
  int16_t az_raw = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	837b      	strh	r3, [r7, #26]

  uint8_t num_of_bytes = 6;
 8000d2a:	2306      	movs	r3, #6
 8000d2c:	767b      	strb	r3, [r7, #25]
  int8_t a_raw[num_of_bytes];
 8000d2e:	7e79      	ldrb	r1, [r7, #25]
 8000d30:	460b      	mov	r3, r1
 8000d32:	3b01      	subs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	b2cb      	uxtb	r3, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4698      	mov	r8, r3
 8000d3c:	4691      	mov	r9, r2
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d52:	b2cb      	uxtb	r3, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	461c      	mov	r4, r3
 8000d58:	4615      	mov	r5, r2
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	00eb      	lsls	r3, r5, #3
 8000d64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d68:	00e2      	lsls	r2, r4, #3
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	3307      	adds	r3, #7
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	ebad 0d03 	sub.w	sp, sp, r3
 8000d76:	466b      	mov	r3, sp
 8000d78:	3300      	adds	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]

  // Read all gyroscope registers starting from GYRO_XOUT_H and ending at GYRO_ZOUT_L
  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, ACCEL_XOUT_H, a_raw, num_of_bytes);
 8000d7c:	7e7b      	ldrb	r3, [r7, #25]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	213b      	movs	r1, #59	; 0x3b
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fcc6 	bl	8000714 <MPU6050_readRegisters>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]

  // Get the raw x, y and z values
  ax_raw = (a_raw[0] << 8) | (a_raw[1]);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	83fb      	strh	r3, [r7, #30]
  ay_raw = (a_raw[2] << 8) | (a_raw[3]);
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	83bb      	strh	r3, [r7, #28]
  az_raw = (a_raw[4] << 8) | (a_raw[5]);
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	837b      	strh	r3, [r7, #26]
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_ZOUT_H, I2C_MEMADD_SIZE_8BIT, &a_raw_H, sizeof(a_raw_H), TIMEOUT_DEFAULT);
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_ZOUT_L, I2C_MEMADD_SIZE_8BIT, &a_raw_L, sizeof(a_raw_L), TIMEOUT_DEFAULT);
  // az_raw = (a_raw_H << 8) | (a_raw_L);

  // Rescale them according to accel FSR
  switch(mpu6050->accel_FSR) {
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7a1b      	ldrb	r3, [r3, #8]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	f200 80ac 	bhi.w	8000f30 <MPU6050_read_accel_reg+0x220>
 8000dd8:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <MPU6050_read_accel_reg+0xd0>)
 8000dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dde:	bf00      	nop
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000e41 	.word	0x08000e41
 8000de8:	08000e91 	.word	0x08000e91
 8000dec:	08000ee1 	.word	0x08000ee1
    case ACCEL_FSR_2g:
      mpu6050->ax = ((float) ax_raw) / 16384.0;
 8000df0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfc:	eddf 6a50 	vldr	s13, [pc, #320]	; 8000f40 <MPU6050_read_accel_reg+0x230>
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 16384.0;
 8000e0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e16:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8000f40 <MPU6050_read_accel_reg+0x230>
 8000e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 16384.0;
 8000e24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e30:	eddf 6a43 	vldr	s13, [pc, #268]	; 8000f40 <MPU6050_read_accel_reg+0x230>
 8000e34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000e3e:	e077      	b.n	8000f30 <MPU6050_read_accel_reg+0x220>
    case ACCEL_FSR_4g:
      mpu6050->ax = ((float) ax_raw) / 8192.0;
 8000e40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e4c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000f44 <MPU6050_read_accel_reg+0x234>
 8000e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 8192.0;
 8000e5a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e66:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000f44 <MPU6050_read_accel_reg+0x234>
 8000e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 8192.0;
 8000e74:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e78:	ee07 3a90 	vmov	s15, r3
 8000e7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e80:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000f44 <MPU6050_read_accel_reg+0x234>
 8000e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000e8e:	e04f      	b.n	8000f30 <MPU6050_read_accel_reg+0x220>
    case ACCEL_FSR_8g:
      mpu6050->ax = ((float) ax_raw) / 4096.0;
 8000e90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e9c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000f48 <MPU6050_read_accel_reg+0x238>
 8000ea0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 4096.0;
 8000eaa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000f48 <MPU6050_read_accel_reg+0x238>
 8000eba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 4096.0;
 8000ec4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000f48 <MPU6050_read_accel_reg+0x238>
 8000ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000ede:	e027      	b.n	8000f30 <MPU6050_read_accel_reg+0x220>
    case ACCEL_FSR_16g:
      mpu6050->ax = ((float) ax_raw) / 2048.0;
 8000ee0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eec:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000f4c <MPU6050_read_accel_reg+0x23c>
 8000ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 2048.0;
 8000efa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f06:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000f4c <MPU6050_read_accel_reg+0x23c>
 8000f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 2048.0;
 8000f14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f20:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000f4c <MPU6050_read_accel_reg+0x23c>
 8000f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000f2e:	bf00      	nop
  }

  return result;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	46b5      	mov	sp, r6
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3724      	adds	r7, #36	; 0x24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f3e:	bf00      	nop
 8000f40:	46800000 	.word	0x46800000
 8000f44:	46000000 	.word	0x46000000
 8000f48:	45800000 	.word	0x45800000
 8000f4c:	45000000 	.word	0x45000000

08000f50 <MPU6050_read_temp_reg>:

HAL_StatusTypeDef MPU6050_read_temp_reg(MPU6050* mpu6050) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  int16_t raw_temp = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	81fb      	strh	r3, [r7, #14]

  uint8_t num_of_bytes = 2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	737b      	strb	r3, [r7, #13]
  int8_t temp[2];

  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, TEMP_OUT_H, temp, num_of_bytes);
 8000f60:	7b7b      	ldrb	r3, [r7, #13]
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	2141      	movs	r1, #65	; 0x41
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fbd3 	bl	8000714 <MPU6050_readRegisters>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	733b      	strb	r3, [r7, #12]
  raw_temp = (temp[0] << 8) | (temp[1]);
 8000f72:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	81fb      	strh	r3, [r7, #14]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, &temp_H, sizeof(temp_H), TIMEOUT_DEFAULT);
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, &temp_L, sizeof(temp_L), TIMEOUT_DEFAULT);
  // raw_temp = (temp_H << 8) | (temp_L);

  // Fix the readings to be in celsius
  mpu6050->temp = ((float) raw_temp)/340.0 + 36.53;
 8000f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f90:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f94:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000fb8 <MPU6050_read_temp_reg+0x68>
 8000f98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000fc0 <MPU6050_read_temp_reg+0x70>
 8000fa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fa4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40754000 	.word	0x40754000
 8000fc0:	0a3d70a4 	.word	0x0a3d70a4
 8000fc4:	404243d7 	.word	0x404243d7

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 fd49 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f85b 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 f963 	bl	80012a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fda:	f000 f90d 	bl	80011f8 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 8000fde:	f000 f8cb 	bl	8001178 <MX_I2C4_Init>
  MX_USB_OTG_HS_USB_Init();
 8000fe2:	f000 f955 	bl	8001290 <MX_USB_OTG_HS_USB_Init>
  float ax, ay, az; // 16 bit integer
  float gx, gy, gz; // 16 bit integer with 3 entries for x, y and z rotational velocities
  float temp; // 16 bit integer
*/

  MPU6050 mpu6050 = {
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	2228      	movs	r2, #40	; 0x28
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f008 f854 	bl	800909c <memset>
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <main+0xc0>)
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	23d0      	movs	r3, #208	; 0xd0
 8000ffa:	733b      	strb	r3, [r7, #12]
    .gz = 0,
    .temp = 0,
  };
  
  // Wake up the MPU6050 as well
  MPU6050_wakeup(&mpu6050);
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fba7 	bl	8000754 <MPU6050_wakeup>

  // Initialise the MPU6050
  uint8_t dlpf = 1;
 8001006:	2301      	movs	r3, #1
 8001008:	71fb      	strb	r3, [r7, #7]
  uint8_t smplfrq = 1;
 800100a:	2301      	movs	r3, #1
 800100c:	71bb      	strb	r3, [r7, #6]
  MPU6050_init(&mpu6050, &dlpf, &smplfrq, GYRO_FSR_250, ACCEL_FSR_2g);
 800100e:	1dba      	adds	r2, r7, #6
 8001010:	1df9      	adds	r1, r7, #7
 8001012:	f107 0008 	add.w	r0, r7, #8
 8001016:	2300      	movs	r3, #0
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2300      	movs	r3, #0
 800101c:	f7ff fd06 	bl	8000a2c <MPU6050_init>
  MPU6050_set_pwr_mgmt(&mpu6050, 0, 0, 0, 0, 1);
 8001020:	f107 0008 	add.w	r0, r7, #8
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2300      	movs	r3, #0
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	f7ff fb9f 	bl	8000774 <MPU6050_set_pwr_mgmt>

  // Enable the FIFO buffer
  MPU6050_FIFO_enable(&mpu6050);
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fcce 	bl	80009dc <MPU6050_FIFO_enable>
  // Reset it as well so that it can be burst read or something -> https://stackoverflow.com/questions/60419390/mpu-6050-correctly-reading-data-from-the-fifo-register
  MPU6050_FIFO_reset(&mpu6050);
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fcdd 	bl	8000a04 <MPU6050_FIFO_reset>
  MPU6050_FIFO_enable(&mpu6050);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fcc4 	bl	80009dc <MPU6050_FIFO_enable>
    // MPU6050_read_accel_fifo(&mpu6050);
    // HAL_Delay(100); // Delays in between just for timing??
    // MPU6050_read_temp_fifo(&mpu6050);
    // HAL_Delay(100); // Delays in between just for timing??

    MPU6050_read_gyro_reg(&mpu6050);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fd1d 	bl	8000a98 <MPU6050_read_gyro_reg>
    HAL_Delay(100); // Delays in between just for timing??
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f000 fd92 	bl	8001b88 <HAL_Delay>
    MPU6050_read_accel_reg(&mpu6050);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe51 	bl	8000d10 <MPU6050_read_accel_reg>
    HAL_Delay(100); // Delays in between just for timing??
 800106e:	2064      	movs	r0, #100	; 0x64
 8001070:	f000 fd8a 	bl	8001b88 <HAL_Delay>
    MPU6050_read_temp_reg(&mpu6050);
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff69 	bl	8000f50 <MPU6050_read_temp_reg>
    HAL_Delay(100); // Delays in between just for timing??
 800107e:	2064      	movs	r0, #100	; 0x64
 8001080:	f000 fd82 	bl	8001b88 <HAL_Delay>
    MPU6050_read_gyro_reg(&mpu6050);
 8001084:	e7e6      	b.n	8001054 <main+0x8c>
 8001086:	bf00      	nop
 8001088:	240001fc 	.word	0x240001fc

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09c      	sub	sp, #112	; 0x70
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	224c      	movs	r2, #76	; 0x4c
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f007 fffe 	bl	800909c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2220      	movs	r2, #32
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f007 fff8 	bl	800909c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <SystemClock_Config+0xe4>)
 80010ae:	f04f 32ff 	mov.w	r2, #4294967295
 80010b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80010b6:	2004      	movs	r0, #4
 80010b8:	f003 fe86 	bl	8004dc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <SystemClock_Config+0xe8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <SystemClock_Config+0xe8>)
 80010c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b29      	ldr	r3, [pc, #164]	; (8001174 <SystemClock_Config+0xe8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010d8:	bf00      	nop
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <SystemClock_Config+0xe8>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010e6:	d1f8      	bne.n	80010da <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010e8:	2321      	movs	r3, #33	; 0x21
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fa:	2302      	movs	r3, #2
 80010fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001102:	2346      	movs	r3, #70	; 0x46
 8001104:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001106:	2302      	movs	r3, #2
 8001108:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800110a:	2304      	movs	r3, #4
 800110c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800110e:	2302      	movs	r3, #2
 8001110:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001112:	230c      	movs	r3, #12
 8001114:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001116:	2300      	movs	r3, #0
 8001118:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	4618      	mov	r0, r3
 8001124:	f003 feaa 	bl	8004e7c <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800112e:	f000 f9d1 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	233f      	movs	r3, #63	; 0x3f
 8001134:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001142:	2340      	movs	r3, #64	; 0x40
 8001144:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001146:	2340      	movs	r3, #64	; 0x40
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800114a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001150:	2340      	movs	r3, #64	; 0x40
 8001152:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2107      	movs	r1, #7
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fa93 	bl	8005684 <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001164:	f000 f9b6 	bl	80014d4 <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3770      	adds	r7, #112	; 0x70
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58024400 	.word	0x58024400
 8001174:	58024800 	.word	0x58024800

08001178 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_I2C4_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <MX_I2C4_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_I2C4_Init+0x74>)
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <MX_I2C4_Init+0x7c>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_I2C4_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_I2C4_Init+0x74>)
 8001190:	2201      	movs	r2, #1
 8001192:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_I2C4_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_I2C4_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_I2C4_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_I2C4_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_I2C4_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <MX_I2C4_Init+0x74>)
 80011b4:	f001 fd58 	bl	8002c68 <HAL_I2C_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80011be:	f000 f989 	bl	80014d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <MX_I2C4_Init+0x74>)
 80011c6:	f003 fd67 	bl	8004c98 <HAL_I2CEx_ConfigAnalogFilter>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80011d0:	f000 f980 	bl	80014d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_I2C4_Init+0x74>)
 80011d8:	f003 fda9 	bl	8004d2e <HAL_I2CEx_ConfigDigitalFilter>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80011e2:	f000 f977 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	240001fc 	.word	0x240001fc
 80011f0:	58001c00 	.word	0x58001c00
 80011f4:	20b0ccff 	.word	0x20b0ccff

080011f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_USART3_UART_Init+0x90>)
 80011fe:	4a23      	ldr	r2, [pc, #140]	; (800128c <MX_USART3_UART_Init+0x94>)
 8001200:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001240:	4811      	ldr	r0, [pc, #68]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001242:	f006 f8d9 	bl	80073f8 <HAL_UART_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800124c:	f000 f942 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001254:	f007 fdfe 	bl	8008e54 <HAL_UARTEx_SetTxFifoThreshold>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800125e:	f000 f939 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001266:	f007 fe33 	bl	8008ed0 <HAL_UARTEx_SetRxFifoThreshold>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001270:	f000 f930 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001276:	f007 fdb4 	bl	8008de2 <HAL_UARTEx_DisableFifoMode>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001280:	f000 f928 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	24000248 	.word	0x24000248
 800128c:	40004800 	.word	0x40004800

08001290 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b80      	ldr	r3, [pc, #512]	; (80014b8 <MX_GPIO_Init+0x218>)
 80012b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012bc:	4a7e      	ldr	r2, [pc, #504]	; (80014b8 <MX_GPIO_Init+0x218>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012c6:	4b7c      	ldr	r3, [pc, #496]	; (80014b8 <MX_GPIO_Init+0x218>)
 80012c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	623b      	str	r3, [r7, #32]
 80012d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d4:	4b78      	ldr	r3, [pc, #480]	; (80014b8 <MX_GPIO_Init+0x218>)
 80012d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012da:	4a77      	ldr	r2, [pc, #476]	; (80014b8 <MX_GPIO_Init+0x218>)
 80012dc:	f043 0320 	orr.w	r3, r3, #32
 80012e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012e4:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <MX_GPIO_Init+0x218>)
 80012e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f2:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <MX_GPIO_Init+0x218>)
 80012f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012f8:	4a6f      	ldr	r2, [pc, #444]	; (80014b8 <MX_GPIO_Init+0x218>)
 80012fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001302:	4b6d      	ldr	r3, [pc, #436]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001304:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001310:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001312:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001316:	4a68      	ldr	r2, [pc, #416]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001320:	4b65      	ldr	r3, [pc, #404]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001322:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001330:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001334:	4a60      	ldr	r2, [pc, #384]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800133e:	4b5e      	ldr	r3, [pc, #376]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001340:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134c:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <MX_GPIO_Init+0x218>)
 800134e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001352:	4a59      	ldr	r2, [pc, #356]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800135c:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <MX_GPIO_Init+0x218>)
 800135e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <MX_GPIO_Init+0x218>)
 800136c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800137a:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <MX_GPIO_Init+0x218>)
 800137c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001388:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <MX_GPIO_Init+0x218>)
 800138a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138e:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <MX_GPIO_Init+0x218>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001398:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <MX_GPIO_Init+0x218>)
 800139a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	4843      	ldr	r0, [pc, #268]	; (80014bc <MX_GPIO_Init+0x21c>)
 80013ae:	f001 fc41 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f244 0101 	movw	r1, #16385	; 0x4001
 80013b8:	4841      	ldr	r0, [pc, #260]	; (80014c0 <MX_GPIO_Init+0x220>)
 80013ba:	f001 fc3b 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2102      	movs	r1, #2
 80013c2:	4840      	ldr	r0, [pc, #256]	; (80014c4 <MX_GPIO_Init+0x224>)
 80013c4:	f001 fc36 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	483a      	ldr	r0, [pc, #232]	; (80014c8 <MX_GPIO_Init+0x228>)
 80013de:	f001 fa79 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80013e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	4830      	ldr	r0, [pc, #192]	; (80014bc <MX_GPIO_Init+0x21c>)
 80013fc:	f001 fa6a 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001400:	f244 0301 	movw	r3, #16385	; 0x4001
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4829      	ldr	r0, [pc, #164]	; (80014c0 <MX_GPIO_Init+0x220>)
 800141a:	f001 fa5b 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001422:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4826      	ldr	r0, [pc, #152]	; (80014cc <MX_GPIO_Init+0x22c>)
 8001434:	f001 fa4e 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144a:	4619      	mov	r1, r3
 800144c:	4820      	ldr	r0, [pc, #128]	; (80014d0 <MX_GPIO_Init+0x230>)
 800144e:	f001 fa41 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001464:	230a      	movs	r3, #10
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <MX_GPIO_Init+0x230>)
 8001470:	f001 fa30 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001474:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <MX_GPIO_Init+0x230>)
 800148e:	f001 fa21 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001492:	2302      	movs	r3, #2
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_GPIO_Init+0x224>)
 80014aa:	f001 fa13 	bl	80028d4 <HAL_GPIO_Init>

}
 80014ae:	bf00      	nop
 80014b0:	3738      	adds	r7, #56	; 0x38
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58021400 	.word	0x58021400
 80014c0:	58020400 	.word	0x58020400
 80014c4:	58021000 	.word	0x58021000
 80014c8:	58020800 	.word	0x58020800
 80014cc:	58021800 	.word	0x58021800
 80014d0:	58020000 	.word	0x58020000

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_MspInit+0x30>)
 80014e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x30>)
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x30>)
 80014f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	58024400 	.word	0x58024400

08001514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0b8      	sub	sp, #224	; 0xe0
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	22b8      	movs	r2, #184	; 0xb8
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f007 fdb1 	bl	800909c <memset>
  if(hi2c->Instance==I2C4)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2d      	ldr	r2, [pc, #180]	; (80015f4 <HAL_I2C_MspInit+0xe0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d152      	bne.n	80015ea <HAL_I2C_MspInit+0xd6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001544:	2310      	movs	r3, #16
 8001546:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fc22 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800155e:	f7ff ffb9 	bl	80014d4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_I2C_MspInit+0xe4>)
 8001564:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001568:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <HAL_I2C_MspInit+0xe4>)
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_I2C_MspInit+0xe4>)
 8001574:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001580:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800159a:	2304      	movs	r3, #4
 800159c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015a4:	4619      	mov	r1, r3
 80015a6:	4815      	ldr	r0, [pc, #84]	; (80015fc <HAL_I2C_MspInit+0xe8>)
 80015a8:	f001 f994 	bl	80028d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_I2C_MspInit+0xe4>)
 80015ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015b2:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_I2C_MspInit+0xe4>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_I2C_MspInit+0xe4>)
 80015be:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	205f      	movs	r0, #95	; 0x5f
 80015d0:	f000 fbd9 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80015d4:	205f      	movs	r0, #95	; 0x5f
 80015d6:	f000 fbf0 	bl	8001dba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2060      	movs	r0, #96	; 0x60
 80015e0:	f000 fbd1 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80015e4:	2060      	movs	r0, #96	; 0x60
 80015e6:	f000 fbe8 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	37e0      	adds	r7, #224	; 0xe0
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	58001c00 	.word	0x58001c00
 80015f8:	58024400 	.word	0x58024400
 80015fc:	58021400 	.word	0x58021400

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0b8      	sub	sp, #224	; 0xe0
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	22b8      	movs	r2, #184	; 0xb8
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f007 fd3b 	bl	800909c <memset>
  if(huart->Instance==USART3)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <HAL_UART_MspInit+0xd0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d14a      	bne.n	80016c6 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001630:	2302      	movs	r3, #2
 8001632:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fbac 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800164a:	f7ff ff43 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <HAL_UART_MspInit+0xd4>)
 8001650:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_UART_MspInit+0xd4>)
 8001656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_UART_MspInit+0xd4>)
 8001660:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_UART_MspInit+0xd4>)
 800166e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0xd4>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0xd4>)
 800167e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800168a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800168e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a4:	2307      	movs	r3, #7
 80016a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ae:	4619      	mov	r1, r3
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <HAL_UART_MspInit+0xd8>)
 80016b2:	f001 f90f 	bl	80028d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2027      	movs	r0, #39	; 0x27
 80016bc:	f000 fb63 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016c0:	2027      	movs	r0, #39	; 0x27
 80016c2:	f000 fb7a 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	37e0      	adds	r7, #224	; 0xe0
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004800 	.word	0x40004800
 80016d4:	58024400 	.word	0x58024400
 80016d8:	58020c00 	.word	0x58020c00

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 fa0e 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <USART3_IRQHandler+0x10>)
 8001736:	f005 feaf 	bl	8007498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	24000248 	.word	0x24000248

08001744 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <I2C4_EV_IRQHandler+0x10>)
 800174a:	f001 fc47 	bl	8002fdc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	240001fc 	.word	0x240001fc

08001758 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <I2C4_ER_IRQHandler+0x10>)
 800175e:	f001 fc57 	bl	8003010 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	240001fc 	.word	0x240001fc

0800176c <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX2_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <BDMA2_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA2 channel0 global interrupt.
  */
void BDMA2_Channel0_IRQHandler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE END BDMA2_Channel0_IRQn 0 */

  /* USER CODE BEGIN BDMA2_Channel0_IRQn 1 */

  /* USER CODE END BDMA2_Channel0_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <BDMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA2 channel1 global interrupt.
  */
void BDMA2_Channel1_IRQHandler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END BDMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN BDMA2_Channel1_IRQn 1 */

  /* USER CODE END BDMA2_Channel1_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
	return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_kill>:

int _kill(int pid, int sig)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017b0:	f007 fc38 	bl	8009024 <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2216      	movs	r2, #22
 80017b8:	601a      	str	r2, [r3, #0]
	return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_exit>:

void _exit (int status)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017ce:	f04f 31ff 	mov.w	r1, #4294967295
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffe7 	bl	80017a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d8:	e7fe      	b.n	80017d8 <_exit+0x12>

080017da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e00a      	b.n	8001802 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ec:	f3af 8000 	nop.w
 80017f0:	4601      	mov	r1, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	60ba      	str	r2, [r7, #8]
 80017f8:	b2ca      	uxtb	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	dbf0      	blt.n	80017ec <_read+0x12>
	}

return len;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e009      	b.n	800183a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	60ba      	str	r2, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf1      	blt.n	8001826 <_write+0x12>
	}
	return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_close>:

int _close(int file)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001874:	605a      	str	r2, [r3, #4]
	return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_isatty>:

int _isatty(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
	return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f007 fb9e 	bl	8009024 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	24100000 	.word	0x24100000
 8001914:	00000400 	.word	0x00000400
 8001918:	240002d8 	.word	0x240002d8
 800191c:	240002f0 	.word	0x240002f0

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <SystemInit+0xd0>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <SystemInit+0xd0>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <SystemInit+0xd4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	2b02      	cmp	r3, #2
 800193e:	d807      	bhi.n	8001950 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <SystemInit+0xd4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 030f 	bic.w	r3, r3, #15
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <SystemInit+0xd4>)
 800194a:	f043 0303 	orr.w	r3, r3, #3
 800194e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <SystemInit+0xd8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <SystemInit+0xd8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <SystemInit+0xd8>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <SystemInit+0xd8>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4924      	ldr	r1, [pc, #144]	; (80019f8 <SystemInit+0xd8>)
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <SystemInit+0xdc>)
 800196a:	4013      	ands	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <SystemInit+0xd4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <SystemInit+0xd4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 030f 	bic.w	r3, r3, #15
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <SystemInit+0xd4>)
 8001984:	f043 0303 	orr.w	r3, r3, #3
 8001988:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <SystemInit+0xd8>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <SystemInit+0xd8>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <SystemInit+0xd8>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <SystemInit+0xd8>)
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <SystemInit+0xe0>)
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <SystemInit+0xd8>)
 80019a4:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <SystemInit+0xe4>)
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <SystemInit+0xd8>)
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <SystemInit+0xe8>)
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <SystemInit+0xd8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <SystemInit+0xd8>)
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <SystemInit+0xe8>)
 80019b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <SystemInit+0xd8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <SystemInit+0xd8>)
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <SystemInit+0xe8>)
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <SystemInit+0xd8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <SystemInit+0xd8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <SystemInit+0xd8>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <SystemInit+0xd8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <SystemInit+0xec>)
 80019e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	52002000 	.word	0x52002000
 80019f8:	58024400 	.word	0x58024400
 80019fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a00:	02020200 	.word	0x02020200
 8001a04:	01ff0000 	.word	0x01ff0000
 8001a08:	01010280 	.word	0x01010280
 8001a0c:	52004000 	.word	0x52004000

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a14:	f7ff ff84 	bl	8001920 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1a:	490d      	ldr	r1, [pc, #52]	; (8001a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a30:	4c0a      	ldr	r4, [pc, #40]	; (8001a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f007 fb09 	bl	8009054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff fac1 	bl	8000fc8 <main>
  bx  lr
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001a4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a50:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001a54:	0800be58 	.word	0x0800be58
  ldr r2, =_sbss
 8001a58:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001a5c:	240002f0 	.word	0x240002f0

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f000 f980 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a70:	f003 ffbe 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_Init+0x68>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	4913      	ldr	r1, [pc, #76]	; (8001ad0 <HAL_Init+0x6c>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_Init+0x68>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_Init+0x6c>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_Init+0x70>)
 8001aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_Init+0x74>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f000 f814 	bl	8001adc <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e002      	b.n	8001ac4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001abe:	f7ff fd0f 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	0800ba34 	.word	0x0800ba34
 8001ad4:	24000004 	.word	0x24000004
 8001ad8:	24000000 	.word	0x24000000

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_InitTick+0x60>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e021      	b.n	8001b34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_InitTick+0x64>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_InitTick+0x60>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f965 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 f92f 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x68>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2400000c 	.word	0x2400000c
 8001b40:	24000000 	.word	0x24000000
 8001b44:	24000008 	.word	0x24000008

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2400000c 	.word	0x2400000c
 8001b6c:	240002dc 	.word	0x240002dc

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	240002dc 	.word	0x240002dc

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff ffee 	bl	8001b70 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2400000c 	.word	0x2400000c

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <__NVIC_SetPriorityGrouping+0x40>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x40>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	05fa0000 	.word	0x05fa0000

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	; (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff40 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff90 	bl	8001cc4 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5f 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff33 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffa4 	bl	8001d2c <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff feba 	bl	8001b70 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e2dc      	b.n	80023c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d008      	beq.n	8001e26 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e2cd      	b.n	80023c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a76      	ldr	r2, [pc, #472]	; (8002004 <HAL_DMA_Abort+0x214>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a74      	ldr	r2, [pc, #464]	; (8002008 <HAL_DMA_Abort+0x218>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a73      	ldr	r2, [pc, #460]	; (800200c <HAL_DMA_Abort+0x21c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a71      	ldr	r2, [pc, #452]	; (8002010 <HAL_DMA_Abort+0x220>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a70      	ldr	r2, [pc, #448]	; (8002014 <HAL_DMA_Abort+0x224>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6e      	ldr	r2, [pc, #440]	; (8002018 <HAL_DMA_Abort+0x228>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6d      	ldr	r2, [pc, #436]	; (800201c <HAL_DMA_Abort+0x22c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6b      	ldr	r2, [pc, #428]	; (8002020 <HAL_DMA_Abort+0x230>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6a      	ldr	r2, [pc, #424]	; (8002024 <HAL_DMA_Abort+0x234>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a68      	ldr	r2, [pc, #416]	; (8002028 <HAL_DMA_Abort+0x238>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a67      	ldr	r2, [pc, #412]	; (800202c <HAL_DMA_Abort+0x23c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a65      	ldr	r2, [pc, #404]	; (8002030 <HAL_DMA_Abort+0x240>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a64      	ldr	r2, [pc, #400]	; (8002034 <HAL_DMA_Abort+0x244>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a62      	ldr	r2, [pc, #392]	; (8002038 <HAL_DMA_Abort+0x248>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a61      	ldr	r2, [pc, #388]	; (800203c <HAL_DMA_Abort+0x24c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Abort+0xd6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <HAL_DMA_Abort+0x250>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_DMA_Abort+0xda>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_DMA_Abort+0xdc>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 021e 	bic.w	r2, r2, #30
 8001ede:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e00a      	b.n	8001f0e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 020e 	bic.w	r2, r2, #14
 8001f06:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a3c      	ldr	r2, [pc, #240]	; (8002004 <HAL_DMA_Abort+0x214>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d072      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_DMA_Abort+0x218>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d06d      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a39      	ldr	r2, [pc, #228]	; (800200c <HAL_DMA_Abort+0x21c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d068      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a37      	ldr	r2, [pc, #220]	; (8002010 <HAL_DMA_Abort+0x220>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d063      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a36      	ldr	r2, [pc, #216]	; (8002014 <HAL_DMA_Abort+0x224>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d05e      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a34      	ldr	r2, [pc, #208]	; (8002018 <HAL_DMA_Abort+0x228>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d059      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a33      	ldr	r2, [pc, #204]	; (800201c <HAL_DMA_Abort+0x22c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d054      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a31      	ldr	r2, [pc, #196]	; (8002020 <HAL_DMA_Abort+0x230>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d04f      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a30      	ldr	r2, [pc, #192]	; (8002024 <HAL_DMA_Abort+0x234>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d04a      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <HAL_DMA_Abort+0x238>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d045      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_DMA_Abort+0x23c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d040      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <HAL_DMA_Abort+0x240>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d03b      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2a      	ldr	r2, [pc, #168]	; (8002034 <HAL_DMA_Abort+0x244>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d036      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_DMA_Abort+0x248>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d031      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a27      	ldr	r2, [pc, #156]	; (800203c <HAL_DMA_Abort+0x24c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d02c      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a25      	ldr	r2, [pc, #148]	; (8002040 <HAL_DMA_Abort+0x250>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d027      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_DMA_Abort+0x254>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d022      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a22      	ldr	r2, [pc, #136]	; (8002048 <HAL_DMA_Abort+0x258>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01d      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_DMA_Abort+0x25c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d018      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <HAL_DMA_Abort+0x260>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <HAL_DMA_Abort+0x264>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00e      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_DMA_Abort+0x268>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1b      	ldr	r2, [pc, #108]	; (800205c <HAL_DMA_Abort+0x26c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_DMA_Abort+0x20e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_DMA_Abort+0x270>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d132      	bne.n	8002064 <HAL_DMA_Abort+0x274>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e031      	b.n	8002066 <HAL_DMA_Abort+0x276>
 8002002:	bf00      	nop
 8002004:	40020010 	.word	0x40020010
 8002008:	40020028 	.word	0x40020028
 800200c:	40020040 	.word	0x40020040
 8002010:	40020058 	.word	0x40020058
 8002014:	40020070 	.word	0x40020070
 8002018:	40020088 	.word	0x40020088
 800201c:	400200a0 	.word	0x400200a0
 8002020:	400200b8 	.word	0x400200b8
 8002024:	40020410 	.word	0x40020410
 8002028:	40020428 	.word	0x40020428
 800202c:	40020440 	.word	0x40020440
 8002030:	40020458 	.word	0x40020458
 8002034:	40020470 	.word	0x40020470
 8002038:	40020488 	.word	0x40020488
 800203c:	400204a0 	.word	0x400204a0
 8002040:	400204b8 	.word	0x400204b8
 8002044:	58025408 	.word	0x58025408
 8002048:	5802541c 	.word	0x5802541c
 800204c:	58025430 	.word	0x58025430
 8002050:	58025444 	.word	0x58025444
 8002054:	58025458 	.word	0x58025458
 8002058:	5802546c 	.word	0x5802546c
 800205c:	58025480 	.word	0x58025480
 8002060:	58025494 	.word	0x58025494
 8002064:	2300      	movs	r3, #0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002078:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6d      	ldr	r2, [pc, #436]	; (8002234 <HAL_DMA_Abort+0x444>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d04a      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6b      	ldr	r2, [pc, #428]	; (8002238 <HAL_DMA_Abort+0x448>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d045      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6a      	ldr	r2, [pc, #424]	; (800223c <HAL_DMA_Abort+0x44c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d040      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a68      	ldr	r2, [pc, #416]	; (8002240 <HAL_DMA_Abort+0x450>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d03b      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a67      	ldr	r2, [pc, #412]	; (8002244 <HAL_DMA_Abort+0x454>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d036      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_DMA_Abort+0x458>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d031      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a64      	ldr	r2, [pc, #400]	; (800224c <HAL_DMA_Abort+0x45c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d02c      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a62      	ldr	r2, [pc, #392]	; (8002250 <HAL_DMA_Abort+0x460>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d027      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a61      	ldr	r2, [pc, #388]	; (8002254 <HAL_DMA_Abort+0x464>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d022      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a5f      	ldr	r2, [pc, #380]	; (8002258 <HAL_DMA_Abort+0x468>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01d      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5e      	ldr	r2, [pc, #376]	; (800225c <HAL_DMA_Abort+0x46c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d018      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a5c      	ldr	r2, [pc, #368]	; (8002260 <HAL_DMA_Abort+0x470>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a5b      	ldr	r2, [pc, #364]	; (8002264 <HAL_DMA_Abort+0x474>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00e      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a59      	ldr	r2, [pc, #356]	; (8002268 <HAL_DMA_Abort+0x478>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_DMA_Abort+0x47c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_DMA_Abort+0x32a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a56      	ldr	r2, [pc, #344]	; (8002270 <HAL_DMA_Abort+0x480>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d108      	bne.n	800212c <HAL_DMA_Abort+0x33c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e007      	b.n	800213c <HAL_DMA_Abort+0x34c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800213c:	e013      	b.n	8002166 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800213e:	f7ff fd17 	bl	8001b70 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b05      	cmp	r3, #5
 800214a:	d90c      	bls.n	8002166 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2203      	movs	r2, #3
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e12d      	b.n	80023c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1e5      	bne.n	800213e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <HAL_DMA_Abort+0x444>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d04a      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2d      	ldr	r2, [pc, #180]	; (8002238 <HAL_DMA_Abort+0x448>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d045      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2c      	ldr	r2, [pc, #176]	; (800223c <HAL_DMA_Abort+0x44c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d040      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <HAL_DMA_Abort+0x450>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d03b      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a29      	ldr	r2, [pc, #164]	; (8002244 <HAL_DMA_Abort+0x454>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d036      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a27      	ldr	r2, [pc, #156]	; (8002248 <HAL_DMA_Abort+0x458>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a26      	ldr	r2, [pc, #152]	; (800224c <HAL_DMA_Abort+0x45c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d02c      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <HAL_DMA_Abort+0x460>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_DMA_Abort+0x464>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_DMA_Abort+0x468>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a20      	ldr	r2, [pc, #128]	; (800225c <HAL_DMA_Abort+0x46c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d018      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_DMA_Abort+0x470>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_DMA_Abort+0x474>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_DMA_Abort+0x478>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1a      	ldr	r2, [pc, #104]	; (800226c <HAL_DMA_Abort+0x47c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort+0x422>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a18      	ldr	r2, [pc, #96]	; (8002270 <HAL_DMA_Abort+0x480>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_DMA_Abort+0x426>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_DMA_Abort+0x428>
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02b      	beq.n	8002274 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	223f      	movs	r2, #63	; 0x3f
 800222c:	409a      	lsls	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	e02a      	b.n	800228a <HAL_DMA_Abort+0x49a>
 8002234:	40020010 	.word	0x40020010
 8002238:	40020028 	.word	0x40020028
 800223c:	40020040 	.word	0x40020040
 8002240:	40020058 	.word	0x40020058
 8002244:	40020070 	.word	0x40020070
 8002248:	40020088 	.word	0x40020088
 800224c:	400200a0 	.word	0x400200a0
 8002250:	400200b8 	.word	0x400200b8
 8002254:	40020410 	.word	0x40020410
 8002258:	40020428 	.word	0x40020428
 800225c:	40020440 	.word	0x40020440
 8002260:	40020458 	.word	0x40020458
 8002264:	40020470 	.word	0x40020470
 8002268:	40020488 	.word	0x40020488
 800226c:	400204a0 	.word	0x400204a0
 8002270:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2201      	movs	r2, #1
 8002284:	409a      	lsls	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a4f      	ldr	r2, [pc, #316]	; (80023cc <HAL_DMA_Abort+0x5dc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d072      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a4d      	ldr	r2, [pc, #308]	; (80023d0 <HAL_DMA_Abort+0x5e0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d06d      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a4c      	ldr	r2, [pc, #304]	; (80023d4 <HAL_DMA_Abort+0x5e4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d068      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a4a      	ldr	r2, [pc, #296]	; (80023d8 <HAL_DMA_Abort+0x5e8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d063      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a49      	ldr	r2, [pc, #292]	; (80023dc <HAL_DMA_Abort+0x5ec>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d05e      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a47      	ldr	r2, [pc, #284]	; (80023e0 <HAL_DMA_Abort+0x5f0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d059      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a46      	ldr	r2, [pc, #280]	; (80023e4 <HAL_DMA_Abort+0x5f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d054      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a44      	ldr	r2, [pc, #272]	; (80023e8 <HAL_DMA_Abort+0x5f8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d04f      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a43      	ldr	r2, [pc, #268]	; (80023ec <HAL_DMA_Abort+0x5fc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d04a      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a41      	ldr	r2, [pc, #260]	; (80023f0 <HAL_DMA_Abort+0x600>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d045      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a40      	ldr	r2, [pc, #256]	; (80023f4 <HAL_DMA_Abort+0x604>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d040      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a3e      	ldr	r2, [pc, #248]	; (80023f8 <HAL_DMA_Abort+0x608>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d03b      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <HAL_DMA_Abort+0x60c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d036      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a3b      	ldr	r2, [pc, #236]	; (8002400 <HAL_DMA_Abort+0x610>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d031      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a3a      	ldr	r2, [pc, #232]	; (8002404 <HAL_DMA_Abort+0x614>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d02c      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a38      	ldr	r2, [pc, #224]	; (8002408 <HAL_DMA_Abort+0x618>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d027      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a37      	ldr	r2, [pc, #220]	; (800240c <HAL_DMA_Abort+0x61c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d022      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a35      	ldr	r2, [pc, #212]	; (8002410 <HAL_DMA_Abort+0x620>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01d      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a34      	ldr	r2, [pc, #208]	; (8002414 <HAL_DMA_Abort+0x624>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d018      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a32      	ldr	r2, [pc, #200]	; (8002418 <HAL_DMA_Abort+0x628>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a31      	ldr	r2, [pc, #196]	; (800241c <HAL_DMA_Abort+0x62c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00e      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2f      	ldr	r2, [pc, #188]	; (8002420 <HAL_DMA_Abort+0x630>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a2e      	ldr	r2, [pc, #184]	; (8002424 <HAL_DMA_Abort+0x634>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d004      	beq.n	800237a <HAL_DMA_Abort+0x58a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2c      	ldr	r2, [pc, #176]	; (8002428 <HAL_DMA_Abort+0x638>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_DMA_Abort+0x58e>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_DMA_Abort+0x590>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800238c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40020010 	.word	0x40020010
 80023d0:	40020028 	.word	0x40020028
 80023d4:	40020040 	.word	0x40020040
 80023d8:	40020058 	.word	0x40020058
 80023dc:	40020070 	.word	0x40020070
 80023e0:	40020088 	.word	0x40020088
 80023e4:	400200a0 	.word	0x400200a0
 80023e8:	400200b8 	.word	0x400200b8
 80023ec:	40020410 	.word	0x40020410
 80023f0:	40020428 	.word	0x40020428
 80023f4:	40020440 	.word	0x40020440
 80023f8:	40020458 	.word	0x40020458
 80023fc:	40020470 	.word	0x40020470
 8002400:	40020488 	.word	0x40020488
 8002404:	400204a0 	.word	0x400204a0
 8002408:	400204b8 	.word	0x400204b8
 800240c:	58025408 	.word	0x58025408
 8002410:	5802541c 	.word	0x5802541c
 8002414:	58025430 	.word	0x58025430
 8002418:	58025444 	.word	0x58025444
 800241c:	58025458 	.word	0x58025458
 8002420:	5802546c 	.word	0x5802546c
 8002424:	58025480 	.word	0x58025480
 8002428:	58025494 	.word	0x58025494

0800242c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e237      	b.n	80028ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d004      	beq.n	8002454 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e22c      	b.n	80028ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a5c      	ldr	r2, [pc, #368]	; (80025cc <HAL_DMA_Abort_IT+0x1a0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d04a      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a5b      	ldr	r2, [pc, #364]	; (80025d0 <HAL_DMA_Abort_IT+0x1a4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d045      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a59      	ldr	r2, [pc, #356]	; (80025d4 <HAL_DMA_Abort_IT+0x1a8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d040      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_DMA_Abort_IT+0x1ac>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d03b      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a56      	ldr	r2, [pc, #344]	; (80025dc <HAL_DMA_Abort_IT+0x1b0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d036      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a55      	ldr	r2, [pc, #340]	; (80025e0 <HAL_DMA_Abort_IT+0x1b4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d031      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a53      	ldr	r2, [pc, #332]	; (80025e4 <HAL_DMA_Abort_IT+0x1b8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d02c      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_DMA_Abort_IT+0x1bc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d027      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a50      	ldr	r2, [pc, #320]	; (80025ec <HAL_DMA_Abort_IT+0x1c0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d022      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a4f      	ldr	r2, [pc, #316]	; (80025f0 <HAL_DMA_Abort_IT+0x1c4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01d      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a4d      	ldr	r2, [pc, #308]	; (80025f4 <HAL_DMA_Abort_IT+0x1c8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d018      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a4c      	ldr	r2, [pc, #304]	; (80025f8 <HAL_DMA_Abort_IT+0x1cc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a4a      	ldr	r2, [pc, #296]	; (80025fc <HAL_DMA_Abort_IT+0x1d0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00e      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a49      	ldr	r2, [pc, #292]	; (8002600 <HAL_DMA_Abort_IT+0x1d4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d009      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a47      	ldr	r2, [pc, #284]	; (8002604 <HAL_DMA_Abort_IT+0x1d8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a46      	ldr	r2, [pc, #280]	; (8002608 <HAL_DMA_Abort_IT+0x1dc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_DMA_Abort_IT+0xcc>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_DMA_Abort_IT+0xce>
 80024f8:	2300      	movs	r3, #0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8086 	beq.w	800260c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2204      	movs	r2, #4
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2f      	ldr	r2, [pc, #188]	; (80025cc <HAL_DMA_Abort_IT+0x1a0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04a      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2e      	ldr	r2, [pc, #184]	; (80025d0 <HAL_DMA_Abort_IT+0x1a4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d045      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <HAL_DMA_Abort_IT+0x1a8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d040      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2b      	ldr	r2, [pc, #172]	; (80025d8 <HAL_DMA_Abort_IT+0x1ac>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d03b      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a29      	ldr	r2, [pc, #164]	; (80025dc <HAL_DMA_Abort_IT+0x1b0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d036      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_DMA_Abort_IT+0x1b4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d031      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <HAL_DMA_Abort_IT+0x1b8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02c      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <HAL_DMA_Abort_IT+0x1bc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d027      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a23      	ldr	r2, [pc, #140]	; (80025ec <HAL_DMA_Abort_IT+0x1c0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d022      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_DMA_Abort_IT+0x1c4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01d      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <HAL_DMA_Abort_IT+0x1c8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d018      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <HAL_DMA_Abort_IT+0x1cc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <HAL_DMA_Abort_IT+0x1d0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00e      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <HAL_DMA_Abort_IT+0x1d4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <HAL_DMA_Abort_IT+0x1d8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x17c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a19      	ldr	r2, [pc, #100]	; (8002608 <HAL_DMA_Abort_IT+0x1dc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d108      	bne.n	80025ba <HAL_DMA_Abort_IT+0x18e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e178      	b.n	80028ac <HAL_DMA_Abort_IT+0x480>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e16f      	b.n	80028ac <HAL_DMA_Abort_IT+0x480>
 80025cc:	40020010 	.word	0x40020010
 80025d0:	40020028 	.word	0x40020028
 80025d4:	40020040 	.word	0x40020040
 80025d8:	40020058 	.word	0x40020058
 80025dc:	40020070 	.word	0x40020070
 80025e0:	40020088 	.word	0x40020088
 80025e4:	400200a0 	.word	0x400200a0
 80025e8:	400200b8 	.word	0x400200b8
 80025ec:	40020410 	.word	0x40020410
 80025f0:	40020428 	.word	0x40020428
 80025f4:	40020440 	.word	0x40020440
 80025f8:	40020458 	.word	0x40020458
 80025fc:	40020470 	.word	0x40020470
 8002600:	40020488 	.word	0x40020488
 8002604:	400204a0 	.word	0x400204a0
 8002608:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 020e 	bic.w	r2, r2, #14
 800261a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6c      	ldr	r2, [pc, #432]	; (80027d4 <HAL_DMA_Abort_IT+0x3a8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d04a      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6b      	ldr	r2, [pc, #428]	; (80027d8 <HAL_DMA_Abort_IT+0x3ac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d045      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a69      	ldr	r2, [pc, #420]	; (80027dc <HAL_DMA_Abort_IT+0x3b0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d040      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a68      	ldr	r2, [pc, #416]	; (80027e0 <HAL_DMA_Abort_IT+0x3b4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d03b      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a66      	ldr	r2, [pc, #408]	; (80027e4 <HAL_DMA_Abort_IT+0x3b8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d036      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_DMA_Abort_IT+0x3bc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d031      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a63      	ldr	r2, [pc, #396]	; (80027ec <HAL_DMA_Abort_IT+0x3c0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d02c      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a62      	ldr	r2, [pc, #392]	; (80027f0 <HAL_DMA_Abort_IT+0x3c4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d027      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a60      	ldr	r2, [pc, #384]	; (80027f4 <HAL_DMA_Abort_IT+0x3c8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d022      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a5f      	ldr	r2, [pc, #380]	; (80027f8 <HAL_DMA_Abort_IT+0x3cc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d01d      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a5d      	ldr	r2, [pc, #372]	; (80027fc <HAL_DMA_Abort_IT+0x3d0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d018      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a5c      	ldr	r2, [pc, #368]	; (8002800 <HAL_DMA_Abort_IT+0x3d4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a5a      	ldr	r2, [pc, #360]	; (8002804 <HAL_DMA_Abort_IT+0x3d8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a59      	ldr	r2, [pc, #356]	; (8002808 <HAL_DMA_Abort_IT+0x3dc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a57      	ldr	r2, [pc, #348]	; (800280c <HAL_DMA_Abort_IT+0x3e0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_Abort_IT+0x290>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a56      	ldr	r2, [pc, #344]	; (8002810 <HAL_DMA_Abort_IT+0x3e4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d108      	bne.n	80026ce <HAL_DMA_Abort_IT+0x2a2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e007      	b.n	80026de <HAL_DMA_Abort_IT+0x2b2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <HAL_DMA_Abort_IT+0x3a8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d072      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3a      	ldr	r2, [pc, #232]	; (80027d8 <HAL_DMA_Abort_IT+0x3ac>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d06d      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a39      	ldr	r2, [pc, #228]	; (80027dc <HAL_DMA_Abort_IT+0x3b0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d068      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a37      	ldr	r2, [pc, #220]	; (80027e0 <HAL_DMA_Abort_IT+0x3b4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d063      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a36      	ldr	r2, [pc, #216]	; (80027e4 <HAL_DMA_Abort_IT+0x3b8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d05e      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a34      	ldr	r2, [pc, #208]	; (80027e8 <HAL_DMA_Abort_IT+0x3bc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d059      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a33      	ldr	r2, [pc, #204]	; (80027ec <HAL_DMA_Abort_IT+0x3c0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d054      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a31      	ldr	r2, [pc, #196]	; (80027f0 <HAL_DMA_Abort_IT+0x3c4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d04f      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a30      	ldr	r2, [pc, #192]	; (80027f4 <HAL_DMA_Abort_IT+0x3c8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d04a      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2e      	ldr	r2, [pc, #184]	; (80027f8 <HAL_DMA_Abort_IT+0x3cc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d045      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2d      	ldr	r2, [pc, #180]	; (80027fc <HAL_DMA_Abort_IT+0x3d0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d040      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <HAL_DMA_Abort_IT+0x3d4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d03b      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_DMA_Abort_IT+0x3d8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d036      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a28      	ldr	r2, [pc, #160]	; (8002808 <HAL_DMA_Abort_IT+0x3dc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d031      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a27      	ldr	r2, [pc, #156]	; (800280c <HAL_DMA_Abort_IT+0x3e0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d02c      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a25      	ldr	r2, [pc, #148]	; (8002810 <HAL_DMA_Abort_IT+0x3e4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d027      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a24      	ldr	r2, [pc, #144]	; (8002814 <HAL_DMA_Abort_IT+0x3e8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d022      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a22      	ldr	r2, [pc, #136]	; (8002818 <HAL_DMA_Abort_IT+0x3ec>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01d      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a21      	ldr	r2, [pc, #132]	; (800281c <HAL_DMA_Abort_IT+0x3f0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d018      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <HAL_DMA_Abort_IT+0x3f4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <HAL_DMA_Abort_IT+0x3f8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1c      	ldr	r2, [pc, #112]	; (8002828 <HAL_DMA_Abort_IT+0x3fc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1b      	ldr	r2, [pc, #108]	; (800282c <HAL_DMA_Abort_IT+0x400>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_Abort_IT+0x3a2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a19      	ldr	r2, [pc, #100]	; (8002830 <HAL_DMA_Abort_IT+0x404>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d132      	bne.n	8002834 <HAL_DMA_Abort_IT+0x408>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e031      	b.n	8002836 <HAL_DMA_Abort_IT+0x40a>
 80027d2:	bf00      	nop
 80027d4:	40020010 	.word	0x40020010
 80027d8:	40020028 	.word	0x40020028
 80027dc:	40020040 	.word	0x40020040
 80027e0:	40020058 	.word	0x40020058
 80027e4:	40020070 	.word	0x40020070
 80027e8:	40020088 	.word	0x40020088
 80027ec:	400200a0 	.word	0x400200a0
 80027f0:	400200b8 	.word	0x400200b8
 80027f4:	40020410 	.word	0x40020410
 80027f8:	40020428 	.word	0x40020428
 80027fc:	40020440 	.word	0x40020440
 8002800:	40020458 	.word	0x40020458
 8002804:	40020470 	.word	0x40020470
 8002808:	40020488 	.word	0x40020488
 800280c:	400204a0 	.word	0x400204a0
 8002810:	400204b8 	.word	0x400204b8
 8002814:	58025408 	.word	0x58025408
 8002818:	5802541c 	.word	0x5802541c
 800281c:	58025430 	.word	0x58025430
 8002820:	58025444 	.word	0x58025444
 8002824:	58025458 	.word	0x58025458
 8002828:	5802546c 	.word	0x5802546c
 800282c:	58025480 	.word	0x58025480
 8002830:	58025494 	.word	0x58025494
 8002834:	2300      	movs	r3, #0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d028      	beq.n	800288c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002848:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2201      	movs	r2, #1
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002868:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00c      	beq.n	800288c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002880:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800288a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop

080028b8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c6:	b2db      	uxtb	r3, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028e2:	4b89      	ldr	r3, [pc, #548]	; (8002b08 <HAL_GPIO_Init+0x234>)
 80028e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028e6:	e194      	b.n	8002c12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8186 	beq.w	8002c0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d005      	beq.n	8002918 <HAL_GPIO_Init+0x44>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d130      	bne.n	800297a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800294e:	2201      	movs	r2, #1
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 0201 	and.w	r2, r3, #1
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b03      	cmp	r3, #3
 8002984:	d017      	beq.n	80029b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d123      	bne.n	8002a0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	69b9      	ldr	r1, [r7, #24]
 8002a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0203 	and.w	r2, r3, #3
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80e0 	beq.w	8002c0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_GPIO_Init+0x238>)
 8002a4e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002a52:	4a2e      	ldr	r2, [pc, #184]	; (8002b0c <HAL_GPIO_Init+0x238>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_GPIO_Init+0x238>)
 8002a5e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6a:	4a29      	ldr	r2, [pc, #164]	; (8002b10 <HAL_GPIO_Init+0x23c>)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <HAL_GPIO_Init+0x240>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d052      	beq.n	8002b3c <HAL_GPIO_Init+0x268>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_GPIO_Init+0x244>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d031      	beq.n	8002b02 <HAL_GPIO_Init+0x22e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <HAL_GPIO_Init+0x248>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02b      	beq.n	8002afe <HAL_GPIO_Init+0x22a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_GPIO_Init+0x24c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d025      	beq.n	8002afa <HAL_GPIO_Init+0x226>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <HAL_GPIO_Init+0x250>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <HAL_GPIO_Init+0x222>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <HAL_GPIO_Init+0x254>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0x21e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_GPIO_Init+0x258>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x21a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_GPIO_Init+0x25c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00d      	beq.n	8002aea <HAL_GPIO_Init+0x216>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_GPIO_Init+0x260>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_GPIO_Init+0x212>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_GPIO_Init+0x264>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_GPIO_Init+0x20e>
 8002ade:	2309      	movs	r3, #9
 8002ae0:	e02d      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	e02b      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	e029      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002aea:	2307      	movs	r3, #7
 8002aec:	e027      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002aee:	2306      	movs	r3, #6
 8002af0:	e025      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002af2:	2305      	movs	r3, #5
 8002af4:	e023      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e021      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e01f      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e01d      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e01b      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002b06:	bf00      	nop
 8002b08:	58000080 	.word	0x58000080
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	58000400 	.word	0x58000400
 8002b14:	58020000 	.word	0x58020000
 8002b18:	58020400 	.word	0x58020400
 8002b1c:	58020800 	.word	0x58020800
 8002b20:	58020c00 	.word	0x58020c00
 8002b24:	58021000 	.word	0x58021000
 8002b28:	58021400 	.word	0x58021400
 8002b2c:	58021800 	.word	0x58021800
 8002b30:	58021c00 	.word	0x58021c00
 8002b34:	58022000 	.word	0x58022000
 8002b38:	58022400 	.word	0x58022400
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	f002 0203 	and.w	r2, r2, #3
 8002b44:	0092      	lsls	r2, r2, #2
 8002b46:	4093      	lsls	r3, r2
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b4e:	4938      	ldr	r1, [pc, #224]	; (8002c30 <HAL_GPIO_Init+0x35c>)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	3302      	adds	r3, #2
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f ae63 	bne.w	80028e8 <HAL_GPIO_Init+0x14>
  }
}
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
 8002c26:	3724      	adds	r7, #36	; 0x24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	58000400 	.word	0x58000400

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fc40 	bl	8001514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	e006      	b.n	8002cf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d104      	bne.n	8002d02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_I2C_Init+0x11c>)
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69d9      	ldr	r1, [r3, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	02008000 	.word	0x02008000

08002d88 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d176      	bne.n	8002e9c <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_I2C_Mem_Write_IT+0x32>
 8002db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06b      	b.n	8002e9e <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e061      	b.n	8002e9e <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2C_Mem_Write_IT+0x60>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e05a      	b.n	8002e9e <HAL_I2C_Mem_Write_IT+0x116>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002df0:	f7fe febe 	bl	8001b70 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2221      	movs	r2, #33	; 0x21
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2240      	movs	r2, #64	; 0x40
 8002e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a3a      	ldr	r2, [r7, #32]
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <HAL_I2C_Mem_Write_IT+0x120>)
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a22      	ldr	r2, [pc, #136]	; (8002eac <HAL_I2C_Mem_Write_IT+0x124>)
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2bff      	cmp	r3, #255	; 0xff
 8002e2c:	d906      	bls.n	8002e3c <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	22ff      	movs	r2, #255	; 0xff
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e007      	b.n	8002e4c <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8002e4c:	88f8      	ldrh	r0, [r7, #6]
 8002e4e:	893a      	ldrh	r2, [r7, #8]
 8002e50:	8979      	ldrh	r1, [r7, #10]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2319      	movs	r3, #25
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fea1 	bl	8003ba4 <I2C_RequestMemoryWrite>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_I2C_Mem_Write_IT+0xec>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e014      	b.n	8002e9e <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	8979      	ldrh	r1, [r7, #10]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f001 fe14 	bl	8004ab0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e90:	2101      	movs	r1, #1
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f001 fe3e 	bl	8004b14 <I2C_Enable_IRQ>

    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	ffff0000 	.word	0xffff0000
 8002eac:	080031a3 	.word	0x080031a3

08002eb0 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	4608      	mov	r0, r1
 8002eba:	4611      	mov	r1, r2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	817b      	strh	r3, [r7, #10]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	813b      	strh	r3, [r7, #8]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d176      	bne.n	8002fc4 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_I2C_Mem_Read_IT+0x32>
 8002edc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e06b      	b.n	8002fc6 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efc:	d101      	bne.n	8002f02 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	e061      	b.n	8002fc6 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_Mem_Read_IT+0x60>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e05a      	b.n	8002fc6 <HAL_I2C_Mem_Read_IT+0x116>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe fe2a 	bl	8001b70 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2222      	movs	r2, #34	; 0x22
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2240      	movs	r2, #64	; 0x40
 8002f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a3a      	ldr	r2, [r7, #32]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <HAL_I2C_Mem_Read_IT+0x120>)
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <HAL_I2C_Mem_Read_IT+0x124>)
 8002f4a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2bff      	cmp	r3, #255	; 0xff
 8002f54:	d906      	bls.n	8002f64 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	22ff      	movs	r2, #255	; 0xff
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e007      	b.n	8002f74 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f72:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002f74:	88f8      	ldrh	r0, [r7, #6]
 8002f76:	893a      	ldrh	r2, [r7, #8]
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	2319      	movs	r3, #25
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	4603      	mov	r3, r0
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fe61 	bl	8003c4c <I2C_RequestMemoryRead>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e014      	b.n	8002fc6 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	8979      	ldrh	r1, [r7, #10]
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_I2C_Mem_Read_IT+0x128>)
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f001 fd80 	bl	8004ab0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fb8:	2102      	movs	r1, #2
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f001 fdaa 	bl	8004b14 <I2C_Enable_IRQ>

    return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e000      	b.n	8002fc6 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	ffff0000 	.word	0xffff0000
 8002fd4:	080031a3 	.word	0x080031a3
 8002fd8:	80002400 	.word	0x80002400

08002fdc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	68f9      	ldr	r1, [r7, #12]
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
  }
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d010      	beq.n	8003056 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	09db      	lsrs	r3, r3, #7
 8003038:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003054:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	0a9b      	lsrs	r3, r3, #10
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d010      	beq.n	8003084 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	09db      	lsrs	r3, r3, #7
 8003066:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f043 0208 	orr.w	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003082:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	0a5b      	lsrs	r3, r3, #9
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d010      	beq.n	80030b2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	09db      	lsrs	r3, r3, #7
 8003094:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	f043 0202 	orr.w	r2, r3, #2
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 030b 	and.w	r3, r3, #11
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80030c2:	68f9      	ldr	r1, [r7, #12]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f001 fa4d 	bl	8004564 <I2C_ITError>
  }
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	70fb      	strb	r3, [r7, #3]
 800312e:	4613      	mov	r3, r2
 8003130:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b088      	sub	sp, #32
 80031a6:	af02      	add	r7, sp, #8
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <I2C_Master_ISR_IT+0x1e>
 80031bc:	2302      	movs	r3, #2
 80031be:	e114      	b.n	80033ea <I2C_Master_ISR_IT+0x248>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2210      	movs	r2, #16
 80031e6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ec:	f043 0204 	orr.w	r2, r3, #4
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f001 faac 	bl	8004752 <I2C_Flush_TXDR>
 80031fa:	e0e1      	b.n	80033c0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01d      	beq.n	8003250 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f023 0304 	bic.w	r3, r3, #4
 800321a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800324e:	e0b7      	b.n	80033c0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01e      	beq.n	800329a <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003264:	2b00      	cmp	r3, #0
 8003266:	d018      	beq.n	800329a <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003298:	e092      	b.n	80033c0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	09db      	lsrs	r3, r3, #7
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d05d      	beq.n	8003362 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d057      	beq.n	8003362 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d040      	beq.n	800333e <I2C_Master_ISR_IT+0x19c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d13c      	bne.n	800333e <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2bff      	cmp	r3, #255	; 0xff
 80032da:	d90e      	bls.n	80032fa <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	22ff      	movs	r2, #255	; 0xff
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	8a79      	ldrh	r1, [r7, #18]
 80032ea:	2300      	movs	r3, #0
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f001 fbdc 	bl	8004ab0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f8:	e032      	b.n	8003360 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800330c:	d00b      	beq.n	8003326 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	b2da      	uxtb	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	8a79      	ldrh	r1, [r7, #18]
 800331a:	2000      	movs	r0, #0
 800331c:	9000      	str	r0, [sp, #0]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f001 fbc6 	bl	8004ab0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003324:	e01c      	b.n	8003360 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	b2da      	uxtb	r2, r3
 800332c:	8a79      	ldrh	r1, [r7, #18]
 800332e:	2300      	movs	r3, #0
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f001 fbba 	bl	8004ab0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800333c:	e010      	b.n	8003360 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800334c:	d003      	beq.n	8003356 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fd54 	bl	8003dfc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003354:	e034      	b.n	80033c0 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003356:	2140      	movs	r1, #64	; 0x40
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f001 f903 	bl	8004564 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800335e:	e02f      	b.n	80033c0 <I2C_Master_ISR_IT+0x21e>
 8003360:	e02e      	b.n	80033c0 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	099b      	lsrs	r3, r3, #6
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d028      	beq.n	80033c0 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003376:	2b00      	cmp	r3, #0
 8003378:	d022      	beq.n	80033c0 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d119      	bne.n	80033b8 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003392:	d015      	beq.n	80033c0 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800339c:	d108      	bne.n	80033b0 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	e007      	b.n	80033c0 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fd23 	bl	8003dfc <I2C_ITMasterSeqCplt>
 80033b6:	e003      	b.n	80033c0 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80033b8:	2140      	movs	r1, #64	; 0x40
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f001 f8d2 	bl	8004564 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d009      	beq.n	80033e0 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80033d8:	6979      	ldr	r1, [r7, #20]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fdaa 	bl	8003f34 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <I2C_Slave_ISR_IT+0x24>
 8003412:	2302      	movs	r3, #2
 8003414:	e0ec      	b.n	80035f0 <I2C_Slave_ISR_IT+0x1fe>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003436:	6939      	ldr	r1, [r7, #16]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fe45 	bl	80040c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d04d      	beq.n	80034e6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003452:	2b00      	cmp	r3, #0
 8003454:	d047      	beq.n	80034e6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d128      	bne.n	80034b2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b28      	cmp	r3, #40	; 0x28
 800346a:	d108      	bne.n	800347e <I2C_Slave_ISR_IT+0x8c>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003472:	d104      	bne.n	800347e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003474:	6939      	ldr	r1, [r7, #16]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f001 f81e 	bl	80044b8 <I2C_ITListenCplt>
 800347c:	e032      	b.n	80034e4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b29      	cmp	r3, #41	; 0x29
 8003488:	d10e      	bne.n	80034a8 <I2C_Slave_ISR_IT+0xb6>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003490:	d00a      	beq.n	80034a8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2210      	movs	r2, #16
 8003498:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f001 f959 	bl	8004752 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fce8 	bl	8003e76 <I2C_ITSlaveSeqCplt>
 80034a6:	e01d      	b.n	80034e4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2210      	movs	r2, #16
 80034ae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80034b0:	e096      	b.n	80035e0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2210      	movs	r2, #16
 80034b8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f043 0204 	orr.w	r2, r3, #4
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <I2C_Slave_ISR_IT+0xe4>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d2:	f040 8085 	bne.w	80035e0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	4619      	mov	r1, r3
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f001 f841 	bl	8004564 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80034e2:	e07d      	b.n	80035e0 <I2C_Slave_ISR_IT+0x1ee>
 80034e4:	e07c      	b.n	80035e0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d030      	beq.n	8003554 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d02a      	beq.n	8003554 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d018      	beq.n	800353a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d14f      	bne.n	80035e4 <I2C_Slave_ISR_IT+0x1f2>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800354a:	d04b      	beq.n	80035e4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fc92 	bl	8003e76 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003552:	e047      	b.n	80035e4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	08db      	lsrs	r3, r3, #3
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	08db      	lsrs	r3, r3, #3
 8003564:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003568:	2b00      	cmp	r3, #0
 800356a:	d004      	beq.n	8003576 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800356c:	6939      	ldr	r1, [r7, #16]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fbc0 	bl	8003cf4 <I2C_ITAddrCplt>
 8003574:	e037      	b.n	80035e6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d031      	beq.n	80035e6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800358a:	2b00      	cmp	r3, #0
 800358c:	d02b      	beq.n	80035e6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d018      	beq.n	80035ca <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	851a      	strh	r2, [r3, #40]	; 0x28
 80035c8:	e00d      	b.n	80035e6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d0:	d002      	beq.n	80035d8 <I2C_Slave_ISR_IT+0x1e6>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fc4c 	bl	8003e76 <I2C_ITSlaveSeqCplt>
 80035de:	e002      	b.n	80035e6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80035e0:	bf00      	nop
 80035e2:	e000      	b.n	80035e6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80035e4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <I2C_Master_ISR_DMA+0x1a>
 800360e:	2302      	movs	r3, #2
 8003610:	e0e1      	b.n	80037d6 <I2C_Master_ISR_DMA+0x1de>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d017      	beq.n	8003656 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800362e:	2b00      	cmp	r3, #0
 8003630:	d011      	beq.n	8003656 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2210      	movs	r2, #16
 8003638:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f043 0204 	orr.w	r2, r3, #4
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003646:	2120      	movs	r1, #32
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f001 fa63 	bl	8004b14 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f001 f87f 	bl	8004752 <I2C_Flush_TXDR>
 8003654:	e0ba      	b.n	80037cc <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	09db      	lsrs	r3, r3, #7
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d072      	beq.n	8003748 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800366a:	2b00      	cmp	r3, #0
 800366c:	d06c      	beq.n	8003748 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800367c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d04e      	beq.n	8003726 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	b29b      	uxth	r3, r3
 8003690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003694:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2bff      	cmp	r3, #255	; 0xff
 800369e:	d906      	bls.n	80036ae <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80036a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e010      	b.n	80036d0 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c0:	d003      	beq.n	80036ca <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	e002      	b.n	80036d0 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80036ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ce:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	8a79      	ldrh	r1, [r7, #18]
 80036d8:	2300      	movs	r3, #0
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f001 f9e6 	bl	8004ab0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b22      	cmp	r3, #34	; 0x22
 8003700:	d108      	bne.n	8003714 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003710:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003712:	e05b      	b.n	80037cc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003722:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003724:	e052      	b.n	80037cc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003734:	d003      	beq.n	800373e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fb60 	bl	8003dfc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800373c:	e046      	b.n	80037cc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800373e:	2140      	movs	r1, #64	; 0x40
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 ff0f 	bl	8004564 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003746:	e041      	b.n	80037cc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d029      	beq.n	80037a8 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800375c:	2b00      	cmp	r3, #0
 800375e:	d023      	beq.n	80037a8 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d119      	bne.n	800379e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003778:	d027      	beq.n	80037ca <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003782:	d108      	bne.n	8003796 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003792:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003794:	e019      	b.n	80037ca <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fb30 	bl	8003dfc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800379c:	e015      	b.n	80037ca <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800379e:	2140      	movs	r1, #64	; 0x40
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fedf 	bl	8004564 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80037a6:	e010      	b.n	80037ca <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fbb6 	bl	8003f34 <I2C_ITMasterCplt>
 80037c8:	e000      	b.n	80037cc <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80037ca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <I2C_Slave_ISR_DMA+0x24>
 8003800:	2302      	movs	r3, #2
 8003802:	e1ca      	b.n	8003b9a <I2C_Slave_ISR_DMA+0x3ba>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d009      	beq.n	800382c <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fc4e 	bl	80040c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 819b 	beq.w	8003b70 <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8194 	beq.w	8003b70 <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	0b9b      	lsrs	r3, r3, #14
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0bdb      	lsrs	r3, r3, #15
 8003858:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8180 	beq.w	8003b62 <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d07c      	beq.n	8003964 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0bdb      	lsrs	r3, r3, #15
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d076      	beq.n	8003964 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a74      	ldr	r2, [pc, #464]	; (8003a50 <I2C_Slave_ISR_DMA+0x270>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d059      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a72      	ldr	r2, [pc, #456]	; (8003a54 <I2C_Slave_ISR_DMA+0x274>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d053      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a70      	ldr	r2, [pc, #448]	; (8003a58 <I2C_Slave_ISR_DMA+0x278>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04d      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a6e      	ldr	r2, [pc, #440]	; (8003a5c <I2C_Slave_ISR_DMA+0x27c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d047      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6c      	ldr	r2, [pc, #432]	; (8003a60 <I2C_Slave_ISR_DMA+0x280>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d041      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6a      	ldr	r2, [pc, #424]	; (8003a64 <I2C_Slave_ISR_DMA+0x284>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d03b      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a68      	ldr	r2, [pc, #416]	; (8003a68 <I2C_Slave_ISR_DMA+0x288>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d035      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a66      	ldr	r2, [pc, #408]	; (8003a6c <I2C_Slave_ISR_DMA+0x28c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02f      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a64      	ldr	r2, [pc, #400]	; (8003a70 <I2C_Slave_ISR_DMA+0x290>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d029      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a62      	ldr	r2, [pc, #392]	; (8003a74 <I2C_Slave_ISR_DMA+0x294>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d023      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a60      	ldr	r2, [pc, #384]	; (8003a78 <I2C_Slave_ISR_DMA+0x298>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01d      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5e      	ldr	r2, [pc, #376]	; (8003a7c <I2C_Slave_ISR_DMA+0x29c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d017      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a5c      	ldr	r2, [pc, #368]	; (8003a80 <I2C_Slave_ISR_DMA+0x2a0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d011      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5a      	ldr	r2, [pc, #360]	; (8003a84 <I2C_Slave_ISR_DMA+0x2a4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00b      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a58      	ldr	r2, [pc, #352]	; (8003a88 <I2C_Slave_ISR_DMA+0x2a8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d005      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x156>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a56      	ldr	r2, [pc, #344]	; (8003a8c <I2C_Slave_ISR_DMA+0x2ac>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d109      	bne.n	800394a <I2C_Slave_ISR_DMA+0x16a>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	bf0c      	ite	eq
 8003942:	2301      	moveq	r3, #1
 8003944:	2300      	movne	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	e008      	b.n	800395c <I2C_Slave_ISR_DMA+0x17c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8003960:	2301      	movs	r3, #1
 8003962:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 809e 	beq.w	8003aaa <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0b9b      	lsrs	r3, r3, #14
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8097 	beq.w	8003aaa <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a33      	ldr	r2, [pc, #204]	; (8003a50 <I2C_Slave_ISR_DMA+0x270>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d059      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <I2C_Slave_ISR_DMA+0x274>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d053      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <I2C_Slave_ISR_DMA+0x278>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d04d      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2d      	ldr	r2, [pc, #180]	; (8003a5c <I2C_Slave_ISR_DMA+0x27c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d047      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <I2C_Slave_ISR_DMA+0x280>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d041      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <I2C_Slave_ISR_DMA+0x284>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d03b      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <I2C_Slave_ISR_DMA+0x288>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d035      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a25      	ldr	r2, [pc, #148]	; (8003a6c <I2C_Slave_ISR_DMA+0x28c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d02f      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <I2C_Slave_ISR_DMA+0x290>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d029      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a21      	ldr	r2, [pc, #132]	; (8003a74 <I2C_Slave_ISR_DMA+0x294>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d023      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <I2C_Slave_ISR_DMA+0x298>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01d      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <I2C_Slave_ISR_DMA+0x29c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d017      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <I2C_Slave_ISR_DMA+0x2a0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d011      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <I2C_Slave_ISR_DMA+0x2a4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <I2C_Slave_ISR_DMA+0x2a8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d005      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x25c>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <I2C_Slave_ISR_DMA+0x2ac>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d129      	bne.n	8003a90 <I2C_Slave_ISR_DMA+0x2b0>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e028      	b.n	8003aa2 <I2C_Slave_ISR_DMA+0x2c2>
 8003a50:	40020010 	.word	0x40020010
 8003a54:	40020028 	.word	0x40020028
 8003a58:	40020040 	.word	0x40020040
 8003a5c:	40020058 	.word	0x40020058
 8003a60:	40020070 	.word	0x40020070
 8003a64:	40020088 	.word	0x40020088
 8003a68:	400200a0 	.word	0x400200a0
 8003a6c:	400200b8 	.word	0x400200b8
 8003a70:	40020410 	.word	0x40020410
 8003a74:	40020428 	.word	0x40020428
 8003a78:	40020440 	.word	0x40020440
 8003a7c:	40020458 	.word	0x40020458
 8003a80:	40020470 	.word	0x40020470
 8003a84:	40020488 	.word	0x40020488
 8003a88:	400204a0 	.word	0x400204a0
 8003a8c:	400204b8 	.word	0x400204b8
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d128      	bne.n	8003b02 <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b28      	cmp	r3, #40	; 0x28
 8003aba:	d108      	bne.n	8003ace <I2C_Slave_ISR_DMA+0x2ee>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac2:	d104      	bne.n	8003ace <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fcf6 	bl	80044b8 <I2C_ITListenCplt>
 8003acc:	e048      	b.n	8003b60 <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b29      	cmp	r3, #41	; 0x29
 8003ad8:	d10e      	bne.n	8003af8 <I2C_Slave_ISR_DMA+0x318>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ae0:	d00a      	beq.n	8003af8 <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fe31 	bl	8004752 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f9c0 	bl	8003e76 <I2C_ITSlaveSeqCplt>
 8003af6:	e033      	b.n	8003b60 <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2210      	movs	r2, #16
 8003afe:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003b00:	e034      	b.n	8003b6c <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2210      	movs	r2, #16
 8003b08:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <I2C_Slave_ISR_DMA+0x34c>
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b2a:	d11f      	bne.n	8003b6c <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b21      	cmp	r3, #33	; 0x21
 8003b30:	d002      	beq.n	8003b38 <I2C_Slave_ISR_DMA+0x358>
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b29      	cmp	r3, #41	; 0x29
 8003b36:	d103      	bne.n	8003b40 <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2221      	movs	r2, #33	; 0x21
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b3e:	e008      	b.n	8003b52 <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b22      	cmp	r3, #34	; 0x22
 8003b44:	d002      	beq.n	8003b4c <I2C_Slave_ISR_DMA+0x36c>
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b2a      	cmp	r3, #42	; 0x2a
 8003b4a:	d102      	bne.n	8003b52 <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2222      	movs	r2, #34	; 0x22
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	4619      	mov	r1, r3
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fd03 	bl	8004564 <I2C_ITError>
      if (treatdmanack == 1U)
 8003b5e:	e005      	b.n	8003b6c <I2C_Slave_ISR_DMA+0x38c>
 8003b60:	e004      	b.n	8003b6c <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2210      	movs	r2, #16
 8003b68:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b6a:	e011      	b.n	8003b90 <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
 8003b6c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b6e:	e00f      	b.n	8003b90 <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	08db      	lsrs	r3, r3, #3
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	08db      	lsrs	r3, r3, #3
 8003b80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f8b2 	bl	8003cf4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop

08003ba4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	8979      	ldrh	r1, [r7, #10]
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <I2C_RequestMemoryWrite+0xa4>)
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 ff6f 	bl	8004ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fe3d 	bl	8004856 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e02c      	b.n	8003c40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bec:	893b      	ldrh	r3, [r7, #8]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf6:	e015      	b.n	8003c24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	69b9      	ldr	r1, [r7, #24]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fe23 	bl	8004856 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e012      	b.n	8003c40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fdd1 	bl	80047d6 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	80002000 	.word	0x80002000

08003c4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	817b      	strh	r3, [r7, #10]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	813b      	strh	r3, [r7, #8]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	8979      	ldrh	r1, [r7, #10]
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <I2C_RequestMemoryRead+0xa4>)
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 ff1c 	bl	8004ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	69b9      	ldr	r1, [r7, #24]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fdea 	bl	8004856 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e02c      	b.n	8003ce6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c92:	893b      	ldrh	r3, [r7, #8]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c9c:	e015      	b.n	8003cca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c9e:	893b      	ldrh	r3, [r7, #8]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	69b9      	ldr	r1, [r7, #24]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fdd0 	bl	8004856 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e012      	b.n	8003ce6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc0:	893b      	ldrh	r3, [r7, #8]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2140      	movs	r1, #64	; 0x40
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fd7e 	bl	80047d6 <I2C_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	80002000 	.word	0x80002000

08003cf4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d0a:	2b28      	cmp	r3, #40	; 0x28
 8003d0c:	d16a      	bne.n	8003de4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d2c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d3a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d48:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d138      	bne.n	8003dc4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003d52:	897b      	ldrh	r3, [r7, #10]
 8003d54:	09db      	lsrs	r3, r3, #7
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	89bb      	ldrh	r3, [r7, #12]
 8003d5a:	4053      	eors	r3, r2
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f003 0306 	and.w	r3, r3, #6
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11c      	bne.n	8003da0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003d66:	897b      	ldrh	r3, [r7, #10]
 8003d68:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d13b      	bne.n	8003df4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2208      	movs	r2, #8
 8003d88:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d92:	89ba      	ldrh	r2, [r7, #12]
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff f9c2 	bl	8003122 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d9e:	e029      	b.n	8003df4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003da0:	893b      	ldrh	r3, [r7, #8]
 8003da2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 ff17 	bl	8004bdc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003db6:	89ba      	ldrh	r2, [r7, #12]
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff f9b0 	bl	8003122 <HAL_I2C_AddrCallback>
}
 8003dc2:	e017      	b.n	8003df4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 ff07 	bl	8004bdc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dd6:	89ba      	ldrh	r2, [r7, #12]
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff f9a0 	bl	8003122 <HAL_I2C_AddrCallback>
}
 8003de2:	e007      	b.n	8003df4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2208      	movs	r2, #8
 8003dea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b21      	cmp	r3, #33	; 0x21
 8003e16:	d115      	bne.n	8003e44 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2211      	movs	r2, #17
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fed4 	bl	8004bdc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff f948 	bl	80030d2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e42:	e014      	b.n	8003e6e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2212      	movs	r2, #18
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e58:	2102      	movs	r1, #2
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 febe 	bl	8004bdc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff f93c 	bl	80030e6 <HAL_I2C_MasterRxCpltCallback>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	0b9b      	lsrs	r3, r3, #14
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e00d      	b.n	8003ec8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	0bdb      	lsrs	r3, r3, #15
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d007      	beq.n	8003ec8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b29      	cmp	r3, #41	; 0x29
 8003ed2:	d112      	bne.n	8003efa <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2228      	movs	r2, #40	; 0x28
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2221      	movs	r2, #33	; 0x21
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fe79 	bl	8004bdc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff f901 	bl	80030fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ef8:	e017      	b.n	8003f2a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b2a      	cmp	r3, #42	; 0x2a
 8003f04:	d111      	bne.n	8003f2a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2228      	movs	r2, #40	; 0x28
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2222      	movs	r2, #34	; 0x22
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f14:	2102      	movs	r1, #2
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fe60 	bl	8004bdc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff f8f2 	bl	800310e <HAL_I2C_SlaveRxCpltCallback>
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2220      	movs	r2, #32
 8003f48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b21      	cmp	r3, #33	; 0x21
 8003f54:	d107      	bne.n	8003f66 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f56:	2101      	movs	r1, #1
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fe3f 	bl	8004bdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2211      	movs	r2, #17
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
 8003f64:	e00c      	b.n	8003f80 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b22      	cmp	r3, #34	; 0x22
 8003f70:	d106      	bne.n	8003f80 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f72:	2102      	movs	r1, #2
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fe31 	bl	8004bdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2212      	movs	r2, #18
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <I2C_ITMasterCplt+0x18c>)
 8003f8c:	400b      	ands	r3, r1
 8003f8e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <I2C_ITMasterCplt+0x190>)
 8003f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2210      	movs	r2, #16
 8003fae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	f043 0204 	orr.w	r2, r3, #4
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b60      	cmp	r3, #96	; 0x60
 8003fc6:	d10b      	bne.n	8003fe0 <I2C_ITMasterCplt+0xac>
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	089b      	lsrs	r3, r3, #2
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003fde:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fbb6 	bl	8004752 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b60      	cmp	r3, #96	; 0x60
 8003ff6:	d002      	beq.n	8003ffe <I2C_ITMasterCplt+0xca>
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	4619      	mov	r1, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 faad 	bl	8004564 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800400a:	e054      	b.n	80040b6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b21      	cmp	r3, #33	; 0x21
 8004016:	d124      	bne.n	8004062 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d10b      	bne.n	800404a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff f885 	bl	8003152 <HAL_I2C_MemTxCpltCallback>
}
 8004048:	e035      	b.n	80040b6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff f839 	bl	80030d2 <HAL_I2C_MasterTxCpltCallback>
}
 8004060:	e029      	b.n	80040b6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b22      	cmp	r3, #34	; 0x22
 800406c:	d123      	bne.n	80040b6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d10b      	bne.n	80040a0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff f864 	bl	8003166 <HAL_I2C_MemRxCpltCallback>
}
 800409e:	e00a      	b.n	80040b6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff f818 	bl	80030e6 <HAL_I2C_MasterRxCpltCallback>
}
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	fe00e800 	.word	0xfe00e800
 80040c4:	ffff0000 	.word	0xffff0000

080040c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2220      	movs	r2, #32
 80040ec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	2b21      	cmp	r3, #33	; 0x21
 80040f2:	d002      	beq.n	80040fa <I2C_ITSlaveCplt+0x32>
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b29      	cmp	r3, #41	; 0x29
 80040f8:	d108      	bne.n	800410c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80040fa:	f248 0101 	movw	r1, #32769	; 0x8001
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fd6c 	bl	8004bdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2221      	movs	r2, #33	; 0x21
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
 800410a:	e00d      	b.n	8004128 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b22      	cmp	r3, #34	; 0x22
 8004110:	d002      	beq.n	8004118 <I2C_ITSlaveCplt+0x50>
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b2a      	cmp	r3, #42	; 0x2a
 8004116:	d107      	bne.n	8004128 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004118:	f248 0102 	movw	r1, #32770	; 0x8002
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fd5d 	bl	8004bdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2222      	movs	r2, #34	; 0x22
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004136:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b80      	ldr	r3, [pc, #512]	; (8004344 <I2C_ITSlaveCplt+0x27c>)
 8004144:	400b      	ands	r3, r1
 8004146:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fb02 	bl	8004752 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	0b9b      	lsrs	r3, r3, #14
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d07a      	beq.n	8004250 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004168:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8111 	beq.w	8004396 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a73      	ldr	r2, [pc, #460]	; (8004348 <I2C_ITSlaveCplt+0x280>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d059      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a71      	ldr	r2, [pc, #452]	; (800434c <I2C_ITSlaveCplt+0x284>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d053      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6f      	ldr	r2, [pc, #444]	; (8004350 <I2C_ITSlaveCplt+0x288>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d04d      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a6d      	ldr	r2, [pc, #436]	; (8004354 <I2C_ITSlaveCplt+0x28c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d047      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6b      	ldr	r2, [pc, #428]	; (8004358 <I2C_ITSlaveCplt+0x290>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d041      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a69      	ldr	r2, [pc, #420]	; (800435c <I2C_ITSlaveCplt+0x294>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d03b      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a67      	ldr	r2, [pc, #412]	; (8004360 <I2C_ITSlaveCplt+0x298>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d035      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a65      	ldr	r2, [pc, #404]	; (8004364 <I2C_ITSlaveCplt+0x29c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d02f      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a63      	ldr	r2, [pc, #396]	; (8004368 <I2C_ITSlaveCplt+0x2a0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d029      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a61      	ldr	r2, [pc, #388]	; (800436c <I2C_ITSlaveCplt+0x2a4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d023      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a5f      	ldr	r2, [pc, #380]	; (8004370 <I2C_ITSlaveCplt+0x2a8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a5d      	ldr	r2, [pc, #372]	; (8004374 <I2C_ITSlaveCplt+0x2ac>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d017      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a5b      	ldr	r2, [pc, #364]	; (8004378 <I2C_ITSlaveCplt+0x2b0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d011      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a59      	ldr	r2, [pc, #356]	; (800437c <I2C_ITSlaveCplt+0x2b4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00b      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a57      	ldr	r2, [pc, #348]	; (8004380 <I2C_ITSlaveCplt+0x2b8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d005      	beq.n	8004234 <I2C_ITSlaveCplt+0x16c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a55      	ldr	r2, [pc, #340]	; (8004384 <I2C_ITSlaveCplt+0x2bc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d105      	bne.n	8004240 <I2C_ITSlaveCplt+0x178>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	b29b      	uxth	r3, r3
 800423e:	e004      	b.n	800424a <I2C_ITSlaveCplt+0x182>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	b29b      	uxth	r3, r3
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	8553      	strh	r3, [r2, #42]	; 0x2a
 800424e:	e0a2      	b.n	8004396 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	0bdb      	lsrs	r3, r3, #15
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 809c 	beq.w	8004396 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800426c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 808f 	beq.w	8004396 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a32      	ldr	r2, [pc, #200]	; (8004348 <I2C_ITSlaveCplt+0x280>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d059      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a30      	ldr	r2, [pc, #192]	; (800434c <I2C_ITSlaveCplt+0x284>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d053      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2e      	ldr	r2, [pc, #184]	; (8004350 <I2C_ITSlaveCplt+0x288>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d04d      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <I2C_ITSlaveCplt+0x28c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d047      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <I2C_ITSlaveCplt+0x290>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d041      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a28      	ldr	r2, [pc, #160]	; (800435c <I2C_ITSlaveCplt+0x294>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d03b      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a26      	ldr	r2, [pc, #152]	; (8004360 <I2C_ITSlaveCplt+0x298>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d035      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a24      	ldr	r2, [pc, #144]	; (8004364 <I2C_ITSlaveCplt+0x29c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d02f      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a22      	ldr	r2, [pc, #136]	; (8004368 <I2C_ITSlaveCplt+0x2a0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d029      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a20      	ldr	r2, [pc, #128]	; (800436c <I2C_ITSlaveCplt+0x2a4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d023      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <I2C_ITSlaveCplt+0x2a8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d01d      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <I2C_ITSlaveCplt+0x2ac>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d017      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <I2C_ITSlaveCplt+0x2b0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d011      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a18      	ldr	r2, [pc, #96]	; (800437c <I2C_ITSlaveCplt+0x2b4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00b      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <I2C_ITSlaveCplt+0x2b8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d005      	beq.n	8004338 <I2C_ITSlaveCplt+0x270>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a14      	ldr	r2, [pc, #80]	; (8004384 <I2C_ITSlaveCplt+0x2bc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d127      	bne.n	8004388 <I2C_ITSlaveCplt+0x2c0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	b29b      	uxth	r3, r3
 8004342:	e026      	b.n	8004392 <I2C_ITSlaveCplt+0x2ca>
 8004344:	fe00e800 	.word	0xfe00e800
 8004348:	40020010 	.word	0x40020010
 800434c:	40020028 	.word	0x40020028
 8004350:	40020040 	.word	0x40020040
 8004354:	40020058 	.word	0x40020058
 8004358:	40020070 	.word	0x40020070
 800435c:	40020088 	.word	0x40020088
 8004360:	400200a0 	.word	0x400200a0
 8004364:	400200b8 	.word	0x400200b8
 8004368:	40020410 	.word	0x40020410
 800436c:	40020428 	.word	0x40020428
 8004370:	40020440 	.word	0x40020440
 8004374:	40020458 	.word	0x40020458
 8004378:	40020470 	.word	0x40020470
 800437c:	40020488 	.word	0x40020488
 8004380:	400204a0 	.word	0x400204a0
 8004384:	400204b8 	.word	0x400204b8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	b29b      	uxth	r3, r3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d020      	beq.n	80043e4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f023 0304 	bic.w	r3, r3, #4
 80043a8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00c      	beq.n	80043e4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f043 0204 	orr.w	r2, r3, #4
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8a4 	bl	8004564 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b28      	cmp	r3, #40	; 0x28
 8004426:	d141      	bne.n	80044ac <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004428:	6979      	ldr	r1, [r7, #20]
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f844 	bl	80044b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004430:	e03c      	b.n	80044ac <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800443a:	d014      	beq.n	8004466 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fd1a 	bl	8003e76 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <I2C_ITSlaveCplt+0x3ec>)
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fe fe6d 	bl	800313e <HAL_I2C_ListenCpltCallback>
}
 8004464:	e022      	b.n	80044ac <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b22      	cmp	r3, #34	; 0x22
 8004470:	d10e      	bne.n	8004490 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fe fe40 	bl	800310e <HAL_I2C_SlaveRxCpltCallback>
}
 800448e:	e00d      	b.n	80044ac <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fe fe27 	bl	80030fa <HAL_I2C_SlaveTxCpltCallback>
}
 80044ac:	bf00      	nop
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	ffff0000 	.word	0xffff0000

080044b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a26      	ldr	r2, [pc, #152]	; (8004560 <I2C_ITListenCplt+0xa8>)
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d022      	beq.n	8004536 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	d012      	beq.n	8004536 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f043 0204 	orr.w	r2, r3, #4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004536:	f248 0103 	movw	r1, #32771	; 0x8003
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fb4e 	bl	8004bdc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2210      	movs	r2, #16
 8004546:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7fe fdf4 	bl	800313e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	ffff0000 	.word	0xffff0000

08004564 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a5d      	ldr	r2, [pc, #372]	; (80046f8 <I2C_ITError+0x194>)
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b28      	cmp	r3, #40	; 0x28
 800459a:	d005      	beq.n	80045a8 <I2C_ITError+0x44>
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b29      	cmp	r3, #41	; 0x29
 80045a0:	d002      	beq.n	80045a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b2a      	cmp	r3, #42	; 0x2a
 80045a6:	d10b      	bne.n	80045c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045a8:	2103      	movs	r1, #3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fb16 	bl	8004bdc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2228      	movs	r2, #40	; 0x28
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a50      	ldr	r2, [pc, #320]	; (80046fc <I2C_ITError+0x198>)
 80045bc:	635a      	str	r2, [r3, #52]	; 0x34
 80045be:	e011      	b.n	80045e4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045c0:	f248 0103 	movw	r1, #32771	; 0x8003
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fb09 	bl	8004bdc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b60      	cmp	r3, #96	; 0x60
 80045d4:	d003      	beq.n	80045de <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d039      	beq.n	8004666 <I2C_ITError+0x102>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b11      	cmp	r3, #17
 80045f6:	d002      	beq.n	80045fe <I2C_ITError+0x9a>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b21      	cmp	r3, #33	; 0x21
 80045fc:	d133      	bne.n	8004666 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800460c:	d107      	bne.n	800461e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800461c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe f948 	bl	80028b8 <HAL_DMA_GetState>
 8004628:	4603      	mov	r3, r0
 800462a:	2b01      	cmp	r3, #1
 800462c:	d017      	beq.n	800465e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	4a33      	ldr	r2, [pc, #204]	; (8004700 <I2C_ITError+0x19c>)
 8004634:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	4618      	mov	r0, r3
 8004644:	f7fd fef2 	bl	800242c <HAL_DMA_Abort_IT>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d04d      	beq.n	80046ea <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004658:	4610      	mov	r0, r2
 800465a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800465c:	e045      	b.n	80046ea <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f850 	bl	8004704 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004664:	e041      	b.n	80046ea <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d039      	beq.n	80046e2 <I2C_ITError+0x17e>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b12      	cmp	r3, #18
 8004672:	d002      	beq.n	800467a <I2C_ITError+0x116>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b22      	cmp	r3, #34	; 0x22
 8004678:	d133      	bne.n	80046e2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004688:	d107      	bne.n	800469a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004698:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe f90a 	bl	80028b8 <HAL_DMA_GetState>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d017      	beq.n	80046da <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	4a14      	ldr	r2, [pc, #80]	; (8004700 <I2C_ITError+0x19c>)
 80046b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fd feb4 	bl	800242c <HAL_DMA_Abort_IT>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d011      	beq.n	80046ee <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046d4:	4610      	mov	r0, r2
 80046d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046d8:	e009      	b.n	80046ee <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f812 	bl	8004704 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046e0:	e005      	b.n	80046ee <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f80e 	bl	8004704 <I2C_TreatErrorCallback>
  }
}
 80046e8:	e002      	b.n	80046f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ee:	bf00      	nop
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	ffff0000 	.word	0xffff0000
 80046fc:	080033f3 	.word	0x080033f3
 8004700:	0800479b 	.word	0x0800479b

08004704 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b60      	cmp	r3, #96	; 0x60
 8004716:	d10e      	bne.n	8004736 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe fd2d 	bl	800318e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004734:	e009      	b.n	800474a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fe fd18 	bl	800317a <HAL_I2C_ErrorCallback>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b02      	cmp	r3, #2
 8004766:	d103      	bne.n	8004770 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2200      	movs	r2, #0
 800476e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b01      	cmp	r3, #1
 800477c:	d007      	beq.n	800478e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	619a      	str	r2, [r3, #24]
  }
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	2200      	movs	r2, #0
 80047b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	2200      	movs	r2, #0
 80047c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff ff9b 	bl	8004704 <I2C_TreatErrorCallback>
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e6:	e022      	b.n	800482e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d01e      	beq.n	800482e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f0:	f7fd f9be 	bl	8001b70 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d302      	bcc.n	8004806 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d113      	bne.n	800482e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e00f      	b.n	800484e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	bf0c      	ite	eq
 800483e:	2301      	moveq	r3, #1
 8004840:	2300      	movne	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	429a      	cmp	r2, r3
 800484a:	d0cd      	beq.n	80047e8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004862:	e02c      	b.n	80048be <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f835 	bl	80048d8 <I2C_IsErrorOccurred>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e02a      	b.n	80048ce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d01e      	beq.n	80048be <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fd f976 	bl	8001b70 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d113      	bne.n	80048be <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e007      	b.n	80048ce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d1cb      	bne.n	8004864 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b00      	cmp	r3, #0
 8004902:	d075      	beq.n	80049f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2210      	movs	r2, #16
 800490a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800490c:	e056      	b.n	80049bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d052      	beq.n	80049bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fd f92b 	bl	8001b70 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_IsErrorOccurred+0x54>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d147      	bne.n	80049bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004936:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800493e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494e:	d12e      	bne.n	80049ae <I2C_IsErrorOccurred+0xd6>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004956:	d02a      	beq.n	80049ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	2b20      	cmp	r3, #32
 800495c:	d027      	beq.n	80049ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800496c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800496e:	f7fd f8ff 	bl	8001b70 <HAL_GetTick>
 8004972:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004974:	e01b      	b.n	80049ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004976:	f7fd f8fb 	bl	8001b70 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b19      	cmp	r3, #25
 8004982:	d914      	bls.n	80049ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004988:	f043 0220 	orr.w	r2, r3, #32
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d1dc      	bne.n	8004976 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d003      	beq.n	80049d2 <I2C_IsErrorOccurred+0xfa>
 80049ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d09d      	beq.n	800490e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2220      	movs	r2, #32
 80049e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	f043 0308 	orr.w	r3, r3, #8
 8004a2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	f043 0302 	orr.w	r3, r3, #2
 8004a4c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01c      	beq.n	8004aa0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff fe73 	bl	8004752 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <I2C_IsErrorOccurred+0x1d4>)
 8004a78:	400b      	ands	r3, r1
 8004a7a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3728      	adds	r7, #40	; 0x28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	fe00e800 	.word	0xfe00e800

08004ab0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	817b      	strh	r3, [r7, #10]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ac2:	897b      	ldrh	r3, [r7, #10]
 8004ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ac8:	7a7b      	ldrb	r3, [r7, #9]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ad0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ade:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	0d5b      	lsrs	r3, r3, #21
 8004aea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <I2C_TransferConfig+0x60>)
 8004af0:	430b      	orrs	r3, r1
 8004af2:	43db      	mvns	r3, r3
 8004af4:	ea02 0103 	and.w	r1, r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	03ff63ff 	.word	0x03ff63ff

08004b14 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <I2C_Enable_IRQ+0xc0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b32:	4a29      	ldr	r2, [pc, #164]	; (8004bd8 <I2C_Enable_IRQ+0xc4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d11d      	bne.n	8004b74 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da03      	bge.n	8004b48 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b48:	887b      	ldrh	r3, [r7, #2]
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d103      	bne.n	8004b56 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b56:	887b      	ldrh	r3, [r7, #2]
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d103      	bne.n	8004b64 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d125      	bne.n	8004bb6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b70:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b72:	e020      	b.n	8004bb6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	da03      	bge.n	8004b84 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b82:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b84:	887b      	ldrh	r3, [r7, #2]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004b94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004ba6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ba8:	887b      	ldrh	r3, [r7, #2]
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d103      	bne.n	8004bb6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6819      	ldr	r1, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	080035f9 	.word	0x080035f9
 8004bd8:	080037e1 	.word	0x080037e1

08004bdc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004bec:	887b      	ldrh	r3, [r7, #2]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00f      	beq.n	8004c16 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004bfc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c0a:	2b28      	cmp	r3, #40	; 0x28
 8004c0c:	d003      	beq.n	8004c16 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c16:	887b      	ldrh	r3, [r7, #2]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00f      	beq.n	8004c40 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004c26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c34:	2b28      	cmp	r3, #40	; 0x28
 8004c36:	d003      	beq.n	8004c40 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c3e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da03      	bge.n	8004c50 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004c4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c50:	887b      	ldrh	r3, [r7, #2]
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d103      	bne.n	8004c5e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c5e:	887b      	ldrh	r3, [r7, #2]
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d103      	bne.n	8004c6c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f043 0320 	orr.w	r3, r3, #32
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d103      	bne.n	8004c7a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	43da      	mvns	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	400a      	ands	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d138      	bne.n	8004d20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e032      	b.n	8004d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	; 0x24
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6819      	ldr	r1, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e000      	b.n	8004d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
  }
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d139      	bne.n	8004db8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e033      	b.n	8004dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2224      	movs	r2, #36	; 0x24
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004dd0:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	d00a      	beq.n	8004df2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ddc:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d001      	beq.n	8004dee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e040      	b.n	8004e70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e03e      	b.n	8004e70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004df2:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004dfa:	491f      	ldr	r1, [pc, #124]	; (8004e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e02:	f7fc feb5 	bl	8001b70 <HAL_GetTick>
 8004e06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e08:	e009      	b.n	8004e1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e0a:	f7fc feb1 	bl	8001b70 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e18:	d901      	bls.n	8004e1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e028      	b.n	8004e70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e1e:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2a:	d1ee      	bne.n	8004e0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b1e      	cmp	r3, #30
 8004e30:	d008      	beq.n	8004e44 <HAL_PWREx_ConfigSupply+0x7c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b2e      	cmp	r3, #46	; 0x2e
 8004e36:	d005      	beq.n	8004e44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b1d      	cmp	r3, #29
 8004e3c:	d002      	beq.n	8004e44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b2d      	cmp	r3, #45	; 0x2d
 8004e42:	d114      	bne.n	8004e6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004e44:	f7fc fe94 	bl	8001b70 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e4a:	e009      	b.n	8004e60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e4c:	f7fc fe90 	bl	8001b70 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e5a:	d901      	bls.n	8004e60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e007      	b.n	8004e70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d1ee      	bne.n	8004e4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	58024800 	.word	0x58024800

08004e7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	; 0x30
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e3f4      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80b3 	beq.w	8005002 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9c:	4b95      	ldr	r3, [pc, #596]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ea6:	4b93      	ldr	r3, [pc, #588]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	2b10      	cmp	r3, #16
 8004eb0:	d007      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x46>
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2b18      	cmp	r3, #24
 8004eb6:	d112      	bne.n	8004ede <HAL_RCC_OscConfig+0x62>
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d10d      	bne.n	8004ede <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec2:	4b8c      	ldr	r3, [pc, #560]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8098 	beq.w	8005000 <HAL_RCC_OscConfig+0x184>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 8093 	bne.w	8005000 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e3cc      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x7a>
 8004ee8:	4b82      	ldr	r3, [pc, #520]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a81      	ldr	r2, [pc, #516]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	e058      	b.n	8004fa8 <HAL_RCC_OscConfig+0x12c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d112      	bne.n	8004f24 <HAL_RCC_OscConfig+0xa8>
 8004efe:	4b7d      	ldr	r3, [pc, #500]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7c      	ldr	r2, [pc, #496]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b7a      	ldr	r3, [pc, #488]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a79      	ldr	r2, [pc, #484]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	4b77      	ldr	r3, [pc, #476]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a76      	ldr	r2, [pc, #472]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e041      	b.n	8004fa8 <HAL_RCC_OscConfig+0x12c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f2c:	d112      	bne.n	8004f54 <HAL_RCC_OscConfig+0xd8>
 8004f2e:	4b71      	ldr	r3, [pc, #452]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a70      	ldr	r2, [pc, #448]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4b6e      	ldr	r3, [pc, #440]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a6d      	ldr	r2, [pc, #436]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b6b      	ldr	r3, [pc, #428]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a6a      	ldr	r2, [pc, #424]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e029      	b.n	8004fa8 <HAL_RCC_OscConfig+0x12c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004f5c:	d112      	bne.n	8004f84 <HAL_RCC_OscConfig+0x108>
 8004f5e:	4b65      	ldr	r3, [pc, #404]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a64      	ldr	r2, [pc, #400]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	4b62      	ldr	r3, [pc, #392]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a61      	ldr	r2, [pc, #388]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	4b5f      	ldr	r3, [pc, #380]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a5e      	ldr	r2, [pc, #376]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e011      	b.n	8004fa8 <HAL_RCC_OscConfig+0x12c>
 8004f84:	4b5b      	ldr	r3, [pc, #364]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a5a      	ldr	r2, [pc, #360]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	4b58      	ldr	r3, [pc, #352]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a57      	ldr	r2, [pc, #348]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	4b55      	ldr	r3, [pc, #340]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a54      	ldr	r2, [pc, #336]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004fa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d013      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fc fdde 	bl	8001b70 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb8:	f7fc fdda 	bl	8001b70 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	; 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e356      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fca:	4b4a      	ldr	r3, [pc, #296]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x13c>
 8004fd6:	e014      	b.n	8005002 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fc fdca 	bl	8001b70 <HAL_GetTick>
 8004fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fc fdc6 	bl	8001b70 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e342      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ff2:	4b40      	ldr	r3, [pc, #256]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x164>
 8004ffe:	e000      	b.n	8005002 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 808d 	beq.w	800512a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005010:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005018:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800501a:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <HAL_RCC_OscConfig+0x1ba>
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	2b18      	cmp	r3, #24
 800502a:	d137      	bne.n	800509c <HAL_RCC_OscConfig+0x220>
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d132      	bne.n	800509c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005036:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <HAL_RCC_OscConfig+0x1d2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e314      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800504e:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 0219 	bic.w	r2, r3, #25
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	4926      	ldr	r1, [pc, #152]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005060:	f7fc fd86 	bl	8001b70 <HAL_GetTick>
 8005064:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005068:	f7fc fd82 	bl	8001b70 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e2fe      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800507a:	4b1e      	ldr	r3, [pc, #120]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f0      	beq.n	8005068 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005086:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	4917      	ldr	r1, [pc, #92]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 8005096:	4313      	orrs	r3, r2
 8005098:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800509a:	e046      	b.n	800512a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d029      	beq.n	80050f8 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050a4:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f023 0219 	bic.w	r2, r3, #25
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4910      	ldr	r1, [pc, #64]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7fc fd5b 	bl	8001b70 <HAL_GetTick>
 80050ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050be:	f7fc fd57 	bl	8001b70 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e2d3      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050d0:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	061b      	lsls	r3, r3, #24
 80050ea:	4902      	ldr	r1, [pc, #8]	; (80050f4 <HAL_RCC_OscConfig+0x278>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
 80050f0:	e01b      	b.n	800512a <HAL_RCC_OscConfig+0x2ae>
 80050f2:	bf00      	nop
 80050f4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f8:	4b97      	ldr	r3, [pc, #604]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a96      	ldr	r2, [pc, #600]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fc fd34 	bl	8001b70 <HAL_GetTick>
 8005108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510c:	f7fc fd30 	bl	8001b70 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e2ac      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800511e:	4b8e      	ldr	r3, [pc, #568]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d06a      	beq.n	800520c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005136:	4b88      	ldr	r3, [pc, #544]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800513e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005140:	4b85      	ldr	r3, [pc, #532]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d007      	beq.n	800515c <HAL_RCC_OscConfig+0x2e0>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b18      	cmp	r3, #24
 8005150:	d11b      	bne.n	800518a <HAL_RCC_OscConfig+0x30e>
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d116      	bne.n	800518a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800515c:	4b7e      	ldr	r3, [pc, #504]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_OscConfig+0x2f8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	2b80      	cmp	r3, #128	; 0x80
 800516e:	d001      	beq.n	8005174 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e281      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005174:	4b78      	ldr	r3, [pc, #480]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	4975      	ldr	r1, [pc, #468]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005184:	4313      	orrs	r3, r2
 8005186:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005188:	e040      	b.n	800520c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d023      	beq.n	80051da <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005192:	4b71      	ldr	r3, [pc, #452]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a70      	ldr	r2, [pc, #448]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7fc fce7 	bl	8001b70 <HAL_GetTick>
 80051a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80051a6:	f7fc fce3 	bl	8001b70 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e25f      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051b8:	4b67      	ldr	r3, [pc, #412]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051c4:	4b64      	ldr	r3, [pc, #400]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	4961      	ldr	r1, [pc, #388]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60cb      	str	r3, [r1, #12]
 80051d8:	e018      	b.n	800520c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80051da:	4b5f      	ldr	r3, [pc, #380]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a5e      	ldr	r2, [pc, #376]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80051e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e6:	f7fc fcc3 	bl	8001b70 <HAL_GetTick>
 80051ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80051ee:	f7fc fcbf 	bl	8001b70 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e23b      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005200:	4b55      	ldr	r3, [pc, #340]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d036      	beq.n	8005286 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d019      	beq.n	8005254 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005220:	4b4d      	ldr	r3, [pc, #308]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005224:	4a4c      	ldr	r2, [pc, #304]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522c:	f7fc fca0 	bl	8001b70 <HAL_GetTick>
 8005230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005234:	f7fc fc9c 	bl	8001b70 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e218      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005246:	4b44      	ldr	r3, [pc, #272]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0x3b8>
 8005252:	e018      	b.n	8005286 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005254:	4b40      	ldr	r3, [pc, #256]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 8005256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005258:	4a3f      	ldr	r2, [pc, #252]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 800525a:	f023 0301 	bic.w	r3, r3, #1
 800525e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fc fc86 	bl	8001b70 <HAL_GetTick>
 8005264:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005268:	f7fc fc82 	bl	8001b70 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e1fe      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800527a:	4b37      	ldr	r3, [pc, #220]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 800527c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d036      	beq.n	8005300 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d019      	beq.n	80052ce <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800529a:	4b2f      	ldr	r3, [pc, #188]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2e      	ldr	r2, [pc, #184]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80052a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052a6:	f7fc fc63 	bl	8001b70 <HAL_GetTick>
 80052aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80052ae:	f7fc fc5f 	bl	8001b70 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e1db      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052c0:	4b25      	ldr	r3, [pc, #148]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x432>
 80052cc:	e018      	b.n	8005300 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052ce:	4b22      	ldr	r3, [pc, #136]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a21      	ldr	r2, [pc, #132]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80052d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052da:	f7fc fc49 	bl	8001b70 <HAL_GetTick>
 80052de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80052e2:	f7fc fc45 	bl	8001b70 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e1c1      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052f4:	4b18      	ldr	r3, [pc, #96]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f0      	bne.n	80052e2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80af 	beq.w	800546c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <HAL_RCC_OscConfig+0x4e0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a12      	ldr	r2, [pc, #72]	; (800535c <HAL_RCC_OscConfig+0x4e0>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800531a:	f7fc fc29 	bl	8001b70 <HAL_GetTick>
 800531e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005322:	f7fc fc25 	bl	8001b70 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b64      	cmp	r3, #100	; 0x64
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e1a1      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005334:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_OscConfig+0x4e0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d10b      	bne.n	8005360 <HAL_RCC_OscConfig+0x4e4>
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	4a02      	ldr	r2, [pc, #8]	; (8005358 <HAL_RCC_OscConfig+0x4dc>)
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	6713      	str	r3, [r2, #112]	; 0x70
 8005354:	e05b      	b.n	800540e <HAL_RCC_OscConfig+0x592>
 8005356:	bf00      	nop
 8005358:	58024400 	.word	0x58024400
 800535c:	58024800 	.word	0x58024800
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d112      	bne.n	800538e <HAL_RCC_OscConfig+0x512>
 8005368:	4b9d      	ldr	r3, [pc, #628]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	4a9c      	ldr	r2, [pc, #624]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	6713      	str	r3, [r2, #112]	; 0x70
 8005374:	4b9a      	ldr	r3, [pc, #616]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	4a99      	ldr	r2, [pc, #612]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800537a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800537e:	6713      	str	r3, [r2, #112]	; 0x70
 8005380:	4b97      	ldr	r3, [pc, #604]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005384:	4a96      	ldr	r2, [pc, #600]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005386:	f023 0304 	bic.w	r3, r3, #4
 800538a:	6713      	str	r3, [r2, #112]	; 0x70
 800538c:	e03f      	b.n	800540e <HAL_RCC_OscConfig+0x592>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b05      	cmp	r3, #5
 8005394:	d112      	bne.n	80053bc <HAL_RCC_OscConfig+0x540>
 8005396:	4b92      	ldr	r3, [pc, #584]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	4a91      	ldr	r2, [pc, #580]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70
 80053a2:	4b8f      	ldr	r3, [pc, #572]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	4a8e      	ldr	r2, [pc, #568]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ac:	6713      	str	r3, [r2, #112]	; 0x70
 80053ae:	4b8c      	ldr	r3, [pc, #560]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	4a8b      	ldr	r2, [pc, #556]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ba:	e028      	b.n	800540e <HAL_RCC_OscConfig+0x592>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b85      	cmp	r3, #133	; 0x85
 80053c2:	d112      	bne.n	80053ea <HAL_RCC_OscConfig+0x56e>
 80053c4:	4b86      	ldr	r3, [pc, #536]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	4a85      	ldr	r2, [pc, #532]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053ca:	f043 0304 	orr.w	r3, r3, #4
 80053ce:	6713      	str	r3, [r2, #112]	; 0x70
 80053d0:	4b83      	ldr	r3, [pc, #524]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	4a82      	ldr	r2, [pc, #520]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053da:	6713      	str	r3, [r2, #112]	; 0x70
 80053dc:	4b80      	ldr	r3, [pc, #512]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e0:	4a7f      	ldr	r2, [pc, #508]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	6713      	str	r3, [r2, #112]	; 0x70
 80053e8:	e011      	b.n	800540e <HAL_RCC_OscConfig+0x592>
 80053ea:	4b7d      	ldr	r3, [pc, #500]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	4a7c      	ldr	r2, [pc, #496]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	6713      	str	r3, [r2, #112]	; 0x70
 80053f6:	4b7a      	ldr	r3, [pc, #488]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fa:	4a79      	ldr	r2, [pc, #484]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80053fc:	f023 0304 	bic.w	r3, r3, #4
 8005400:	6713      	str	r3, [r2, #112]	; 0x70
 8005402:	4b77      	ldr	r3, [pc, #476]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	4a76      	ldr	r2, [pc, #472]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800540c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d015      	beq.n	8005442 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005416:	f7fc fbab 	bl	8001b70 <HAL_GetTick>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800541c:	e00a      	b.n	8005434 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800541e:	f7fc fba7 	bl	8001b70 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	f241 3288 	movw	r2, #5000	; 0x1388
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e121      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005434:	4b6a      	ldr	r3, [pc, #424]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0ee      	beq.n	800541e <HAL_RCC_OscConfig+0x5a2>
 8005440:	e014      	b.n	800546c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005442:	f7fc fb95 	bl	8001b70 <HAL_GetTick>
 8005446:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005448:	e00a      	b.n	8005460 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fc fb91 	bl	8001b70 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e10b      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005460:	4b5f      	ldr	r3, [pc, #380]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ee      	bne.n	800544a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8100 	beq.w	8005676 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005476:	4b5a      	ldr	r3, [pc, #360]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800547e:	2b18      	cmp	r3, #24
 8005480:	f000 80bb 	beq.w	80055fa <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b02      	cmp	r3, #2
 800548a:	f040 8095 	bne.w	80055b8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548e:	4b54      	ldr	r3, [pc, #336]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a53      	ldr	r2, [pc, #332]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549a:	f7fc fb69 	bl	8001b70 <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a2:	f7fc fb65 	bl	8001b70 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e0e1      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054b4:	4b4a      	ldr	r3, [pc, #296]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f0      	bne.n	80054a2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c0:	4b47      	ldr	r3, [pc, #284]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80054c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054c4:	4b47      	ldr	r3, [pc, #284]	; (80055e4 <HAL_RCC_OscConfig+0x768>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054d0:	0112      	lsls	r2, r2, #4
 80054d2:	430a      	orrs	r2, r1
 80054d4:	4942      	ldr	r1, [pc, #264]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	628b      	str	r3, [r1, #40]	; 0x28
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	3b01      	subs	r3, #1
 80054e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e8:	3b01      	subs	r3, #1
 80054ea:	025b      	lsls	r3, r3, #9
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	3b01      	subs	r3, #1
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005502:	3b01      	subs	r3, #1
 8005504:	061b      	lsls	r3, r3, #24
 8005506:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800550a:	4935      	ldr	r1, [pc, #212]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800550c:	4313      	orrs	r3, r2
 800550e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005510:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	4a32      	ldr	r2, [pc, #200]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800551c:	4b30      	ldr	r3, [pc, #192]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800551e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005520:	4b31      	ldr	r3, [pc, #196]	; (80055e8 <HAL_RCC_OscConfig+0x76c>)
 8005522:	4013      	ands	r3, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005528:	00d2      	lsls	r2, r2, #3
 800552a:	492d      	ldr	r1, [pc, #180]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800552c:	4313      	orrs	r3, r2
 800552e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005530:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	f023 020c 	bic.w	r2, r3, #12
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	4928      	ldr	r1, [pc, #160]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800553e:	4313      	orrs	r3, r2
 8005540:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005542:	4b27      	ldr	r3, [pc, #156]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f023 0202 	bic.w	r2, r3, #2
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	4924      	ldr	r1, [pc, #144]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005550:	4313      	orrs	r3, r2
 8005552:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005554:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800555a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b1f      	ldr	r3, [pc, #124]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4a1e      	ldr	r2, [pc, #120]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800556c:	4b1c      	ldr	r3, [pc, #112]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005578:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005584:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 800558a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800558e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fc faee 	bl	8001b70 <HAL_GetTick>
 8005594:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005598:	f7fc faea 	bl	8001b70 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e066      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055aa:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0x71c>
 80055b6:	e05e      	b.n	8005676 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <HAL_RCC_OscConfig+0x764>)
 80055be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fc fad4 	bl	8001b70 <HAL_GetTick>
 80055c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ca:	e00f      	b.n	80055ec <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055cc:	f7fc fad0 	bl	8001b70 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d908      	bls.n	80055ec <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e04c      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
 80055de:	bf00      	nop
 80055e0:	58024400 	.word	0x58024400
 80055e4:	fffffc0c 	.word	0xfffffc0c
 80055e8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ec:	4b24      	ldr	r3, [pc, #144]	; (8005680 <HAL_RCC_OscConfig+0x804>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e9      	bne.n	80055cc <HAL_RCC_OscConfig+0x750>
 80055f8:	e03d      	b.n	8005676 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055fa:	4b21      	ldr	r3, [pc, #132]	; (8005680 <HAL_RCC_OscConfig+0x804>)
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005600:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <HAL_RCC_OscConfig+0x804>)
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b01      	cmp	r3, #1
 800560c:	d031      	beq.n	8005672 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f003 0203 	and.w	r2, r3, #3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005618:	429a      	cmp	r2, r3
 800561a:	d12a      	bne.n	8005672 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	091b      	lsrs	r3, r3, #4
 8005620:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005628:	429a      	cmp	r2, r3
 800562a:	d122      	bne.n	8005672 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d11a      	bne.n	8005672 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	0a5b      	lsrs	r3, r3, #9
 8005640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d111      	bne.n	8005672 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d108      	bne.n	8005672 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	0e1b      	lsrs	r3, r3, #24
 8005664:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800566e:	429a      	cmp	r2, r3
 8005670:	d001      	beq.n	8005676 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3730      	adds	r7, #48	; 0x30
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	58024400 	.word	0x58024400

08005684 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e19c      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005698:	4b8a      	ldr	r3, [pc, #552]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d910      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a6:	4b87      	ldr	r3, [pc, #540]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 020f 	bic.w	r2, r3, #15
 80056ae:	4985      	ldr	r1, [pc, #532]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b83      	ldr	r3, [pc, #524]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e184      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	4b7b      	ldr	r3, [pc, #492]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d908      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056e4:	4b78      	ldr	r3, [pc, #480]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	4975      	ldr	r1, [pc, #468]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d010      	beq.n	8005724 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	4b70      	ldr	r3, [pc, #448]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800570e:	429a      	cmp	r2, r3
 8005710:	d908      	bls.n	8005724 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005712:	4b6d      	ldr	r3, [pc, #436]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	496a      	ldr	r1, [pc, #424]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b00      	cmp	r3, #0
 800572e:	d010      	beq.n	8005752 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	4b64      	ldr	r3, [pc, #400]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800573c:	429a      	cmp	r2, r3
 800573e:	d908      	bls.n	8005752 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005740:	4b61      	ldr	r3, [pc, #388]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	495e      	ldr	r1, [pc, #376]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 800574e:	4313      	orrs	r3, r2
 8005750:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	4b59      	ldr	r3, [pc, #356]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800576a:	429a      	cmp	r2, r3
 800576c:	d908      	bls.n	8005780 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800576e:	4b56      	ldr	r3, [pc, #344]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	4953      	ldr	r1, [pc, #332]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 800577c:	4313      	orrs	r3, r2
 800577e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d010      	beq.n	80057ae <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	4b4d      	ldr	r3, [pc, #308]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	429a      	cmp	r2, r3
 800579a:	d908      	bls.n	80057ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800579c:	4b4a      	ldr	r3, [pc, #296]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f023 020f 	bic.w	r2, r3, #15
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4947      	ldr	r1, [pc, #284]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d055      	beq.n	8005866 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80057ba:	4b43      	ldr	r3, [pc, #268]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	4940      	ldr	r1, [pc, #256]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d107      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057d4:	4b3c      	ldr	r3, [pc, #240]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d121      	bne.n	8005824 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0f6      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057ec:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d115      	bne.n	8005824 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0ea      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d107      	bne.n	8005814 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005804:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0de      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005814:	4b2c      	ldr	r3, [pc, #176]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0d6      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005824:	4b28      	ldr	r3, [pc, #160]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f023 0207 	bic.w	r2, r3, #7
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4925      	ldr	r1, [pc, #148]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005832:	4313      	orrs	r3, r2
 8005834:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005836:	f7fc f99b 	bl	8001b70 <HAL_GetTick>
 800583a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583c:	e00a      	b.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800583e:	f7fc f997 	bl	8001b70 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f241 3288 	movw	r2, #5000	; 0x1388
 800584c:	4293      	cmp	r3, r2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e0be      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005854:	4b1c      	ldr	r3, [pc, #112]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	429a      	cmp	r2, r3
 8005864:	d1eb      	bne.n	800583e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d010      	beq.n	8005894 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	429a      	cmp	r2, r3
 8005880:	d208      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f023 020f 	bic.w	r2, r3, #15
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	490e      	ldr	r1, [pc, #56]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005890:	4313      	orrs	r3, r2
 8005892:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d214      	bcs.n	80058cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 020f 	bic.w	r2, r3, #15
 80058aa:	4906      	ldr	r1, [pc, #24]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d005      	beq.n	80058cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e086      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
 80058c4:	52002000 	.word	0x52002000
 80058c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	4b3f      	ldr	r3, [pc, #252]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d208      	bcs.n	80058fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058e8:	4b3c      	ldr	r3, [pc, #240]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	4939      	ldr	r1, [pc, #228]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d010      	beq.n	8005928 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	4b34      	ldr	r3, [pc, #208]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005912:	429a      	cmp	r2, r3
 8005914:	d208      	bcs.n	8005928 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005916:	4b31      	ldr	r3, [pc, #196]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	492e      	ldr	r1, [pc, #184]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005924:	4313      	orrs	r3, r2
 8005926:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	4b28      	ldr	r3, [pc, #160]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005940:	429a      	cmp	r2, r3
 8005942:	d208      	bcs.n	8005956 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005944:	4b25      	ldr	r3, [pc, #148]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	4922      	ldr	r1, [pc, #136]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005952:	4313      	orrs	r3, r2
 8005954:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d010      	beq.n	8005984 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800596e:	429a      	cmp	r2, r3
 8005970:	d208      	bcs.n	8005984 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005972:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	4917      	ldr	r1, [pc, #92]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005980:	4313      	orrs	r3, r2
 8005982:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005984:	f000 f834 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8005988:	4602      	mov	r2, r0
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	4912      	ldr	r1, [pc, #72]	; (80059e0 <HAL_RCC_ClockConfig+0x35c>)
 8005996:	5ccb      	ldrb	r3, [r1, r3]
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80059a2:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	4a0d      	ldr	r2, [pc, #52]	; (80059e0 <HAL_RCC_ClockConfig+0x35c>)
 80059ac:	5cd3      	ldrb	r3, [r2, r3]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
 80059b8:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <HAL_RCC_ClockConfig+0x360>)
 80059ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059bc:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <HAL_RCC_ClockConfig+0x364>)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <HAL_RCC_ClockConfig+0x368>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fc f888 	bl	8001adc <HAL_InitTick>
 80059cc:	4603      	mov	r3, r0
 80059ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	58024400 	.word	0x58024400
 80059e0:	0800ba34 	.word	0x0800ba34
 80059e4:	24000004 	.word	0x24000004
 80059e8:	24000000 	.word	0x24000000
 80059ec:	24000008 	.word	0x24000008

080059f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b089      	sub	sp, #36	; 0x24
 80059f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f6:	4bb3      	ldr	r3, [pc, #716]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059fe:	2b18      	cmp	r3, #24
 8005a00:	f200 8155 	bhi.w	8005cae <HAL_RCC_GetSysClockFreq+0x2be>
 8005a04:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a71 	.word	0x08005a71
 8005a10:	08005caf 	.word	0x08005caf
 8005a14:	08005caf 	.word	0x08005caf
 8005a18:	08005caf 	.word	0x08005caf
 8005a1c:	08005caf 	.word	0x08005caf
 8005a20:	08005caf 	.word	0x08005caf
 8005a24:	08005caf 	.word	0x08005caf
 8005a28:	08005caf 	.word	0x08005caf
 8005a2c:	08005a97 	.word	0x08005a97
 8005a30:	08005caf 	.word	0x08005caf
 8005a34:	08005caf 	.word	0x08005caf
 8005a38:	08005caf 	.word	0x08005caf
 8005a3c:	08005caf 	.word	0x08005caf
 8005a40:	08005caf 	.word	0x08005caf
 8005a44:	08005caf 	.word	0x08005caf
 8005a48:	08005caf 	.word	0x08005caf
 8005a4c:	08005a9d 	.word	0x08005a9d
 8005a50:	08005caf 	.word	0x08005caf
 8005a54:	08005caf 	.word	0x08005caf
 8005a58:	08005caf 	.word	0x08005caf
 8005a5c:	08005caf 	.word	0x08005caf
 8005a60:	08005caf 	.word	0x08005caf
 8005a64:	08005caf 	.word	0x08005caf
 8005a68:	08005caf 	.word	0x08005caf
 8005a6c:	08005aa3 	.word	0x08005aa3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a70:	4b94      	ldr	r3, [pc, #592]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a7c:	4b91      	ldr	r3, [pc, #580]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	08db      	lsrs	r3, r3, #3
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	4a90      	ldr	r2, [pc, #576]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005a8e:	e111      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a90:	4b8d      	ldr	r3, [pc, #564]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a92:	61bb      	str	r3, [r7, #24]
    break;
 8005a94:	e10e      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005a96:	4b8d      	ldr	r3, [pc, #564]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a98:	61bb      	str	r3, [r7, #24]
    break;
 8005a9a:	e10b      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005a9c:	4b8c      	ldr	r3, [pc, #560]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a9e:	61bb      	str	r3, [r7, #24]
    break;
 8005aa0:	e108      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aa2:	4b88      	ldr	r3, [pc, #544]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005aac:	4b85      	ldr	r3, [pc, #532]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ab8:	4b82      	ldr	r3, [pc, #520]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ac2:	4b80      	ldr	r3, [pc, #512]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	08db      	lsrs	r3, r3, #3
 8005ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80e1 	beq.w	8005ca8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	f000 8083 	beq.w	8005bf4 <HAL_RCC_GetSysClockFreq+0x204>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f200 80a1 	bhi.w	8005c38 <HAL_RCC_GetSysClockFreq+0x248>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x114>
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d056      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b02:	e099      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b04:	4b6f      	ldr	r3, [pc, #444]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d02d      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b10:	4b6c      	ldr	r3, [pc, #432]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	4a6b      	ldr	r2, [pc, #428]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3a:	4b62      	ldr	r3, [pc, #392]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005b6a:	e087      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005cd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7e:	4b51      	ldr	r3, [pc, #324]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bae:	e065      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc2:	4b40      	ldr	r3, [pc, #256]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bd6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bf2:	e043      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005ce0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c06:	4b2f      	ldr	r3, [pc, #188]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c36:	e021      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005c7c:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	0a5b      	lsrs	r3, r3, #9
 8005c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c86:	3301      	adds	r3, #1
 8005c88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca0:	ee17 3a90 	vmov	r3, s15
 8005ca4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005ca6:	e005      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61bb      	str	r3, [r7, #24]
    break;
 8005cac:	e002      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cb0:	61bb      	str	r3, [r7, #24]
    break;
 8005cb2:	bf00      	nop
  }

  return sysclockfreq;
 8005cb4:	69bb      	ldr	r3, [r7, #24]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3724      	adds	r7, #36	; 0x24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	03d09000 	.word	0x03d09000
 8005ccc:	003d0900 	.word	0x003d0900
 8005cd0:	007a1200 	.word	0x007a1200
 8005cd4:	46000000 	.word	0x46000000
 8005cd8:	4c742400 	.word	0x4c742400
 8005cdc:	4a742400 	.word	0x4a742400
 8005ce0:	4af42400 	.word	0x4af42400

08005ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005cea:	f7ff fe81 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	490f      	ldr	r1, [pc, #60]	; (8005d38 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cfc:	5ccb      	ldrb	r3, [r1, r3]
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	fa22 f303 	lsr.w	r3, r2, r3
 8005d06:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1e:	4a07      	ldr	r2, [pc, #28]	; (8005d3c <HAL_RCC_GetHCLKFreq+0x58>)
 8005d20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d28:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <HAL_RCC_GetHCLKFreq+0x58>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	58024400 	.word	0x58024400
 8005d38:	0800ba34 	.word	0x0800ba34
 8005d3c:	24000004 	.word	0x24000004
 8005d40:	24000000 	.word	0x24000000

08005d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005d48:	f7ff ffcc 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4904      	ldr	r1, [pc, #16]	; (8005d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	0800ba34 	.word	0x0800ba34

08005d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005d74:	f7ff ffb6 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4904      	ldr	r1, [pc, #16]	; (8005d98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	58024400 	.word	0x58024400
 8005d98:	0800ba34 	.word	0x0800ba34

08005d9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005da4:	2300      	movs	r3, #0
 8005da6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005da8:	2300      	movs	r3, #0
 8005daa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d03f      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dc0:	d02a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005dc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dc6:	d824      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dcc:	d018      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd2:	d81e      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ddc:	d007      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005dde:	e018      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de0:	4b9f      	ldr	r3, [pc, #636]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	4a9e      	ldr	r2, [pc, #632]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005dec:	e015      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3304      	adds	r3, #4
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 f99b 	bl	8007130 <RCCEx_PLL2_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005dfe:	e00c      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3324      	adds	r3, #36	; 0x24
 8005e04:	2102      	movs	r1, #2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 fa44 	bl	8007294 <RCCEx_PLL3_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005e10:	e003      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	75fb      	strb	r3, [r7, #23]
      break;
 8005e16:	e000      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e20:	4b8f      	ldr	r3, [pc, #572]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e2c:	498c      	ldr	r1, [pc, #560]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	650b      	str	r3, [r1, #80]	; 0x50
 8005e32:	e001      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d03d      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d826      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e69 	.word	0x08005e69
 8005e58:	08005e77 	.word	0x08005e77
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	08005ea1 	.word	0x08005ea1
 8005e64:	08005ea1 	.word	0x08005ea1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e68:	4b7d      	ldr	r3, [pc, #500]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	4a7c      	ldr	r2, [pc, #496]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e74:	e015      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 f957 	bl	8007130 <RCCEx_PLL2_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e86:	e00c      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3324      	adds	r3, #36	; 0x24
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fa00 	bl	8007294 <RCCEx_PLL3_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e98:	e003      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d109      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ea8:	4b6d      	ldr	r3, [pc, #436]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eac:	f023 0207 	bic.w	r2, r3, #7
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb4:	496a      	ldr	r1, [pc, #424]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8005eba:	e001      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
 8005ebe:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d04a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ed4:	d031      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005ed6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005eda:	d82b      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee0:	d02d      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee6:	d825      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ee8:	2bc0      	cmp	r3, #192	; 0xc0
 8005eea:	d02a      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005eec:	2bc0      	cmp	r3, #192	; 0xc0
 8005eee:	d821      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d016      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d81d      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d007      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005f00:	e018      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f02:	4b57      	ldr	r3, [pc, #348]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	4a56      	ldr	r2, [pc, #344]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005f0e:	e019      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3304      	adds	r3, #4
 8005f14:	2100      	movs	r1, #0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 f90a 	bl	8007130 <RCCEx_PLL2_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005f20:	e010      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3324      	adds	r3, #36	; 0x24
 8005f26:	2100      	movs	r1, #0
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 f9b3 	bl	8007294 <RCCEx_PLL3_Config>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005f32:	e007      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
      break;
 8005f38:	e004      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e002      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005f3e:	bf00      	nop
 8005f40:	e000      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005f4a:	4b45      	ldr	r3, [pc, #276]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f56:	4942      	ldr	r1, [pc, #264]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	650b      	str	r3, [r1, #80]	; 0x50
 8005f5c:	e001      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d04f      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f72:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f76:	d036      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005f78:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f7c:	d830      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f82:	d032      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f88:	d82a      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005f8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f8e:	d02e      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x252>
 8005f90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f94:	d824      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9a:	d018      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa0:	d81e      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005faa:	d007      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005fac:	e018      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fae:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	4a2b      	ldr	r2, [pc, #172]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005fba:	e019      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 f8b4 	bl	8007130 <RCCEx_PLL2_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005fcc:	e010      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3324      	adds	r3, #36	; 0x24
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 f95d 	bl	8007294 <RCCEx_PLL3_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005fde:	e007      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe4:	e004      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e002      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005fea:	bf00      	nop
 8005fec:	e000      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005ff6:	4b1a      	ldr	r3, [pc, #104]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffa:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006002:	4917      	ldr	r1, [pc, #92]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006004:	4313      	orrs	r3, r2
 8006006:	650b      	str	r3, [r1, #80]	; 0x50
 8006008:	e001      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600a:	7dfb      	ldrb	r3, [r7, #23]
 800600c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d034      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601e:	2b30      	cmp	r3, #48	; 0x30
 8006020:	d01c      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006022:	2b30      	cmp	r3, #48	; 0x30
 8006024:	d817      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006026:	2b20      	cmp	r3, #32
 8006028:	d00c      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800602a:	2b20      	cmp	r3, #32
 800602c:	d813      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d018      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8006032:	2b10      	cmp	r3, #16
 8006034:	d10f      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006036:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	4a09      	ldr	r2, [pc, #36]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800603c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006042:	e010      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	2102      	movs	r1, #2
 800604a:	4618      	mov	r0, r3
 800604c:	f001 f870 	bl	8007130 <RCCEx_PLL2_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006054:	e007      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	75fb      	strb	r3, [r7, #23]
      break;
 800605a:	e004      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 800605c:	bf00      	nop
 800605e:	e002      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006060:	58024400 	.word	0x58024400
      break;
 8006064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800606c:	4b9b      	ldr	r3, [pc, #620]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800606e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006070:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006078:	4998      	ldr	r1, [pc, #608]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800607a:	4313      	orrs	r3, r2
 800607c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800607e:	e001      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d047      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006098:	d030      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800609a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800609e:	d82a      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80060a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060a4:	d02c      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80060a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060aa:	d824      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80060ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b0:	d018      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80060b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b6:	d81e      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80060bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c0:	d007      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80060c2:	e018      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c4:	4b85      	ldr	r3, [pc, #532]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	4a84      	ldr	r2, [pc, #528]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80060ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80060d0:	e017      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3304      	adds	r3, #4
 80060d6:	2100      	movs	r1, #0
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 f829 	bl	8007130 <RCCEx_PLL2_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80060e2:	e00e      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3324      	adds	r3, #36	; 0x24
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 f8d2 	bl	8007294 <RCCEx_PLL3_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80060f4:	e005      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
      break;
 80060fa:	e002      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80060fc:	bf00      	nop
 80060fe:	e000      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8006100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006102:	7dfb      	ldrb	r3, [r7, #23]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006108:	4b74      	ldr	r3, [pc, #464]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800610a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006114:	4971      	ldr	r1, [pc, #452]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006116:	4313      	orrs	r3, r2
 8006118:	650b      	str	r3, [r1, #80]	; 0x50
 800611a:	e001      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d049      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006134:	d02e      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006136:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800613a:	d828      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800613c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006140:	d02a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006146:	d822      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800614c:	d026      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800614e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006152:	d81c      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006158:	d010      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800615a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800615e:	d816      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01d      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006168:	d111      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	2101      	movs	r1, #1
 8006170:	4618      	mov	r0, r3
 8006172:	f000 ffdd 	bl	8007130 <RCCEx_PLL2_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800617a:	e012      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3324      	adds	r3, #36	; 0x24
 8006180:	2101      	movs	r1, #1
 8006182:	4618      	mov	r0, r3
 8006184:	f001 f886 	bl	8007294 <RCCEx_PLL3_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800618c:	e009      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
      break;
 8006192:	e006      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006194:	bf00      	nop
 8006196:	e004      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006198:	bf00      	nop
 800619a:	e002      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800619c:	bf00      	nop
 800619e:	e000      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80061a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061a8:	4b4c      	ldr	r3, [pc, #304]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80061aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b4:	4949      	ldr	r1, [pc, #292]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	650b      	str	r3, [r1, #80]	; 0x50
 80061ba:	e001      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d053      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80061d6:	d034      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80061d8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80061dc:	d82e      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80061de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061e2:	d030      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80061e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061e8:	d828      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ee:	d02c      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f4:	d822      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80061f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061fa:	d028      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80061fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006200:	d81c      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006206:	d010      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8006208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800620c:	d816      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01f      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006216:	d111      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	2101      	movs	r1, #1
 800621e:	4618      	mov	r0, r3
 8006220:	f000 ff86 	bl	8007130 <RCCEx_PLL2_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006228:	e014      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3324      	adds	r3, #36	; 0x24
 800622e:	2101      	movs	r1, #1
 8006230:	4618      	mov	r0, r3
 8006232:	f001 f82f 	bl	8007294 <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800623a:	e00b      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	75fb      	strb	r3, [r7, #23]
      break;
 8006240:	e008      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006242:	bf00      	nop
 8006244:	e006      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800625a:	4b20      	ldr	r3, [pc, #128]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800625c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006268:	491c      	ldr	r1, [pc, #112]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800626a:	4313      	orrs	r3, r2
 800626c:	658b      	str	r3, [r1, #88]	; 0x58
 800626e:	e001      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d031      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006288:	d00e      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800628a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800628e:	d814      	bhi.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d015      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006298:	d10f      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629a:	4b10      	ldr	r3, [pc, #64]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	4a0f      	ldr	r2, [pc, #60]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80062a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80062a6:	e00c      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	2101      	movs	r1, #1
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 ff3e 	bl	8007130 <RCCEx_PLL2_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80062b8:	e003      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	75fb      	strb	r3, [r7, #23]
      break;
 80062be:	e000      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80062c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10b      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062c8:	4b04      	ldr	r3, [pc, #16]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80062ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d4:	4901      	ldr	r1, [pc, #4]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	650b      	str	r3, [r1, #80]	; 0x50
 80062da:	e003      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80062dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
 80062e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d032      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d81b      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006337 	.word	0x08006337
 8006304:	08006311 	.word	0x08006311
 8006308:	0800631f 	.word	0x0800631f
 800630c:	08006337 	.word	0x08006337
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4bb2      	ldr	r3, [pc, #712]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	4ab1      	ldr	r2, [pc, #708]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800631c:	e00c      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	2102      	movs	r1, #2
 8006324:	4618      	mov	r0, r3
 8006326:	f000 ff03 	bl	8007130 <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800632e:	e003      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	75fb      	strb	r3, [r7, #23]
      break;
 8006334:	e000      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800633e:	4ba7      	ldr	r3, [pc, #668]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006342:	f023 0203 	bic.w	r2, r3, #3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634a:	49a4      	ldr	r1, [pc, #656]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800634c:	4313      	orrs	r3, r2
 800634e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006350:	e001      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8086 	beq.w	8006470 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006364:	4b9e      	ldr	r3, [pc, #632]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a9d      	ldr	r2, [pc, #628]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800636a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006370:	f7fb fbfe 	bl	8001b70 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006376:	e009      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006378:	f7fb fbfa 	bl	8001b70 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b64      	cmp	r3, #100	; 0x64
 8006384:	d902      	bls.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	75fb      	strb	r3, [r7, #23]
        break;
 800638a:	e005      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800638c:	4b94      	ldr	r3, [pc, #592]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0ef      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d166      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800639e:	4b8f      	ldr	r3, [pc, #572]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063a8:	4053      	eors	r3, r2
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063b2:	4b8a      	ldr	r3, [pc, #552]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063bc:	4b87      	ldr	r3, [pc, #540]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c0:	4a86      	ldr	r2, [pc, #536]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063c8:	4b84      	ldr	r3, [pc, #528]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	4a83      	ldr	r2, [pc, #524]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063d4:	4a81      	ldr	r2, [pc, #516]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e4:	d115      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e6:	f7fb fbc3 	bl	8001b70 <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ec:	e00b      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ee:	f7fb fbbf 	bl	8001b70 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d902      	bls.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	75fb      	strb	r3, [r7, #23]
            break;
 8006404:	e005      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006406:	4b75      	ldr	r3, [pc, #468]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ed      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d126      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800641e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006426:	d10d      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8006428:	4b6c      	ldr	r3, [pc, #432]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006436:	0919      	lsrs	r1, r3, #4
 8006438:	4b6a      	ldr	r3, [pc, #424]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800643a:	400b      	ands	r3, r1
 800643c:	4967      	ldr	r1, [pc, #412]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800643e:	4313      	orrs	r3, r2
 8006440:	610b      	str	r3, [r1, #16]
 8006442:	e005      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8006444:	4b65      	ldr	r3, [pc, #404]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	4a64      	ldr	r2, [pc, #400]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800644a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800644e:	6113      	str	r3, [r2, #16]
 8006450:	4b62      	ldr	r3, [pc, #392]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800645a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800645e:	495f      	ldr	r1, [pc, #380]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006460:	4313      	orrs	r3, r2
 8006462:	670b      	str	r3, [r1, #112]	; 0x70
 8006464:	e004      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	75bb      	strb	r3, [r7, #22]
 800646a:	e001      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d07f      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006482:	2b28      	cmp	r3, #40	; 0x28
 8006484:	d866      	bhi.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	0800655b 	.word	0x0800655b
 8006490:	08006555 	.word	0x08006555
 8006494:	08006555 	.word	0x08006555
 8006498:	08006555 	.word	0x08006555
 800649c:	08006555 	.word	0x08006555
 80064a0:	08006555 	.word	0x08006555
 80064a4:	08006555 	.word	0x08006555
 80064a8:	08006555 	.word	0x08006555
 80064ac:	08006531 	.word	0x08006531
 80064b0:	08006555 	.word	0x08006555
 80064b4:	08006555 	.word	0x08006555
 80064b8:	08006555 	.word	0x08006555
 80064bc:	08006555 	.word	0x08006555
 80064c0:	08006555 	.word	0x08006555
 80064c4:	08006555 	.word	0x08006555
 80064c8:	08006555 	.word	0x08006555
 80064cc:	08006543 	.word	0x08006543
 80064d0:	08006555 	.word	0x08006555
 80064d4:	08006555 	.word	0x08006555
 80064d8:	08006555 	.word	0x08006555
 80064dc:	08006555 	.word	0x08006555
 80064e0:	08006555 	.word	0x08006555
 80064e4:	08006555 	.word	0x08006555
 80064e8:	08006555 	.word	0x08006555
 80064ec:	0800655b 	.word	0x0800655b
 80064f0:	08006555 	.word	0x08006555
 80064f4:	08006555 	.word	0x08006555
 80064f8:	08006555 	.word	0x08006555
 80064fc:	08006555 	.word	0x08006555
 8006500:	08006555 	.word	0x08006555
 8006504:	08006555 	.word	0x08006555
 8006508:	08006555 	.word	0x08006555
 800650c:	0800655b 	.word	0x0800655b
 8006510:	08006555 	.word	0x08006555
 8006514:	08006555 	.word	0x08006555
 8006518:	08006555 	.word	0x08006555
 800651c:	08006555 	.word	0x08006555
 8006520:	08006555 	.word	0x08006555
 8006524:	08006555 	.word	0x08006555
 8006528:	08006555 	.word	0x08006555
 800652c:	0800655b 	.word	0x0800655b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	2101      	movs	r1, #1
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fdfa 	bl	8007130 <RCCEx_PLL2_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006540:	e00c      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3324      	adds	r3, #36	; 0x24
 8006546:	2101      	movs	r1, #1
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fea3 	bl	8007294 <RCCEx_PLL3_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006552:	e003      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
      break;
 8006558:	e000      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 800655a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006562:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006570:	491a      	ldr	r1, [pc, #104]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006572:	4313      	orrs	r3, r2
 8006574:	654b      	str	r3, [r1, #84]	; 0x54
 8006576:	e001      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006578:	7dfb      	ldrb	r3, [r7, #23]
 800657a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d03f      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800658c:	2b05      	cmp	r3, #5
 800658e:	d821      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065e9 	.word	0x080065e9
 800659c:	080065b1 	.word	0x080065b1
 80065a0:	080065c3 	.word	0x080065c3
 80065a4:	080065e9 	.word	0x080065e9
 80065a8:	080065e9 	.word	0x080065e9
 80065ac:	080065e9 	.word	0x080065e9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3304      	adds	r3, #4
 80065b4:	2101      	movs	r1, #1
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fdba 	bl	8007130 <RCCEx_PLL2_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80065c0:	e013      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3324      	adds	r3, #36	; 0x24
 80065c6:	2101      	movs	r1, #1
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fe63 	bl	8007294 <RCCEx_PLL3_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80065d2:	e00a      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	e007      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80065da:	bf00      	nop
 80065dc:	58024400 	.word	0x58024400
 80065e0:	58024800 	.word	0x58024800
 80065e4:	00ffffcf 	.word	0x00ffffcf
      break;
 80065e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80065f0:	4b9f      	ldr	r3, [pc, #636]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f023 0207 	bic.w	r2, r3, #7
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065fc:	499c      	ldr	r1, [pc, #624]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	654b      	str	r3, [r1, #84]	; 0x54
 8006602:	e001      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d039      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800661a:	2b05      	cmp	r3, #5
 800661c:	d820      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006667 	.word	0x08006667
 8006628:	0800663d 	.word	0x0800663d
 800662c:	0800664f 	.word	0x0800664f
 8006630:	08006667 	.word	0x08006667
 8006634:	08006667 	.word	0x08006667
 8006638:	08006667 	.word	0x08006667
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	2101      	movs	r1, #1
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fd74 	bl	8007130 <RCCEx_PLL2_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800664c:	e00c      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3324      	adds	r3, #36	; 0x24
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fe1d 	bl	8007294 <RCCEx_PLL3_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800665e:	e003      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	75fb      	strb	r3, [r7, #23]
      break;
 8006664:	e000      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8006666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800666e:	4b80      	ldr	r3, [pc, #512]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006672:	f023 0207 	bic.w	r2, r3, #7
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800667c:	497c      	ldr	r1, [pc, #496]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800667e:	4313      	orrs	r3, r2
 8006680:	658b      	str	r3, [r1, #88]	; 0x58
 8006682:	e001      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d04b      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800669a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800669e:	d02e      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x962>
 80066a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066a4:	d828      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066aa:	d02a      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d822      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80066b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066b6:	d026      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80066b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066bc:	d81c      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80066be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c2:	d010      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80066c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c8:	d816      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01d      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80066ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d2:	d111      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3304      	adds	r3, #4
 80066d8:	2100      	movs	r1, #0
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fd28 	bl	8007130 <RCCEx_PLL2_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80066e4:	e012      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3324      	adds	r3, #36	; 0x24
 80066ea:	2102      	movs	r1, #2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fdd1 	bl	8007294 <RCCEx_PLL3_Config>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80066f6:	e009      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	75fb      	strb	r3, [r7, #23]
      break;
 80066fc:	e006      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80066fe:	bf00      	nop
 8006700:	e004      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800670a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006712:	4b57      	ldr	r3, [pc, #348]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006720:	4953      	ldr	r1, [pc, #332]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006722:	4313      	orrs	r3, r2
 8006724:	654b      	str	r3, [r1, #84]	; 0x54
 8006726:	e001      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006728:	7dfb      	ldrb	r3, [r7, #23]
 800672a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d04b      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800673e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006742:	d02e      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006744:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006748:	d828      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800674a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674e:	d02a      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006754:	d822      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800675a:	d026      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800675c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006760:	d81c      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006766:	d010      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676c:	d816      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01d      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006776:	d111      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3304      	adds	r3, #4
 800677c:	2100      	movs	r1, #0
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fcd6 	bl	8007130 <RCCEx_PLL2_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006788:	e012      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3324      	adds	r3, #36	; 0x24
 800678e:	2102      	movs	r1, #2
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fd7f 	bl	8007294 <RCCEx_PLL3_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800679a:	e009      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	75fb      	strb	r3, [r7, #23]
      break;
 80067a0:	e006      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80067a2:	bf00      	nop
 80067a4:	e004      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80067a6:	bf00      	nop
 80067a8:	e002      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80067aa:	bf00      	nop
 80067ac:	e000      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80067ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10a      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067b6:	4b2e      	ldr	r3, [pc, #184]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067c4:	492a      	ldr	r1, [pc, #168]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	658b      	str	r3, [r1, #88]	; 0x58
 80067ca:	e001      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d04d      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067e6:	d02e      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80067e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067ec:	d828      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80067ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f2:	d02a      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80067f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f8:	d822      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80067fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067fe:	d026      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006800:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006804:	d81c      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800680a:	d010      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800680c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006810:	d816      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01d      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800681a:	d111      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fc84 	bl	8007130 <RCCEx_PLL2_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800682c:	e012      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3324      	adds	r3, #36	; 0x24
 8006832:	2102      	movs	r1, #2
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fd2d 	bl	8007294 <RCCEx_PLL3_Config>
 800683a:	4603      	mov	r3, r0
 800683c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800683e:	e009      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	e006      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006846:	bf00      	nop
 8006848:	e004      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800684a:	bf00      	nop
 800684c:	e002      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10c      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006868:	4901      	ldr	r1, [pc, #4]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800686a:	4313      	orrs	r3, r2
 800686c:	658b      	str	r3, [r1, #88]	; 0x58
 800686e:	e003      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01a      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688e:	d10a      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3324      	adds	r3, #36	; 0x24
 8006894:	2102      	movs	r1, #2
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fcfc 	bl	8007294 <RCCEx_PLL3_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80068a6:	4b8c      	ldr	r3, [pc, #560]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b4:	4988      	ldr	r1, [pc, #544]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0310 	and.w	r3, r3, #16
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01a      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d0:	d10a      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3324      	adds	r3, #36	; 0x24
 80068d6:	2102      	movs	r1, #2
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fcdb 	bl	8007294 <RCCEx_PLL3_Config>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068e8:	4b7b      	ldr	r3, [pc, #492]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068f6:	4978      	ldr	r1, [pc, #480]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d034      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800690e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006912:	d01d      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8006914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006918:	d817      	bhi.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800691e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006922:	d009      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006924:	e011      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3304      	adds	r3, #4
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fbff 	bl	8007130 <RCCEx_PLL2_Config>
 8006932:	4603      	mov	r3, r0
 8006934:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006936:	e00c      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3324      	adds	r3, #36	; 0x24
 800693c:	2102      	movs	r1, #2
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fca8 	bl	8007294 <RCCEx_PLL3_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006948:	e003      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	75fb      	strb	r3, [r7, #23]
      break;
 800694e:	e000      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006958:	4b5f      	ldr	r3, [pc, #380]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800695a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006966:	495c      	ldr	r1, [pc, #368]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	658b      	str	r3, [r1, #88]	; 0x58
 800696c:	e001      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d033      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006984:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006988:	d01c      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800698a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800698e:	d816      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006994:	d003      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800699a:	d007      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800699c:	e00f      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800699e:	4b4e      	ldr	r3, [pc, #312]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	4a4d      	ldr	r2, [pc, #308]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80069a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80069aa:	e00c      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3324      	adds	r3, #36	; 0x24
 80069b0:	2101      	movs	r1, #1
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fc6e 	bl	8007294 <RCCEx_PLL3_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80069bc:	e003      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
      break;
 80069c2:	e000      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80069c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069cc:	4b42      	ldr	r3, [pc, #264]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80069ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069da:	493f      	ldr	r1, [pc, #252]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	654b      	str	r3, [r1, #84]	; 0x54
 80069e0:	e001      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d029      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80069fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fe:	d007      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006a00:	e00f      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a02:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	4a34      	ldr	r2, [pc, #208]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006a0e:	e00b      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	2102      	movs	r1, #2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fb8a 	bl	8007130 <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006a20:	e002      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
      break;
 8006a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d109      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a2e:	4b2a      	ldr	r3, [pc, #168]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3a:	4927      	ldr	r1, [pc, #156]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a40:	e001      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3324      	adds	r3, #36	; 0x24
 8006a56:	2102      	movs	r1, #2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fc1b 	bl	8007294 <RCCEx_PLL3_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d035      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7e:	d017      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a84:	d811      	bhi.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8a:	d013      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a90:	d80b      	bhi.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d010      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9a:	d106      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	4a0d      	ldr	r2, [pc, #52]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006aa8:	e007      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	75fb      	strb	r3, [r7, #23]
      break;
 8006aae:	e004      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006ab0:	bf00      	nop
 8006ab2:	e002      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006ab4:	bf00      	nop
 8006ab6:	e000      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10d      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ace:	4902      	ldr	r1, [pc, #8]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	654b      	str	r3, [r1, #84]	; 0x54
 8006ad4:	e004      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006ad6:	bf00      	nop
 8006ad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006aec:	4b30      	ldr	r3, [pc, #192]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006af8:	492d      	ldr	r1, [pc, #180]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b0a:	4b29      	ldr	r3, [pc, #164]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b16:	4926      	ldr	r1, [pc, #152]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006b28:	4b21      	ldr	r3, [pc, #132]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b34:	491e      	ldr	r1, [pc, #120]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b46:	4b1a      	ldr	r3, [pc, #104]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	4a19      	ldr	r2, [pc, #100]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b50:	6113      	str	r3, [r2, #16]
 8006b52:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b5c:	4914      	ldr	r1, [pc, #80]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	da08      	bge.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b6a:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b76:	490e      	ldr	r1, [pc, #56]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b88:	4b09      	ldr	r3, [pc, #36]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	4906      	ldr	r1, [pc, #24]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006b9c:	7dbb      	ldrb	r3, [r7, #22]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	58024400 	.word	0x58024400

08006bb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006bb8:	f7ff f894 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	091b      	lsrs	r3, r3, #4
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	4904      	ldr	r1, [pc, #16]	; (8006bdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006bca:	5ccb      	ldrb	r3, [r1, r3]
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	58024400 	.word	0x58024400
 8006bdc:	0800ba34 	.word	0x0800ba34

08006be0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b089      	sub	sp, #36	; 0x24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006be8:	4ba1      	ldr	r3, [pc, #644]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bec:	f003 0303 	and.w	r3, r3, #3
 8006bf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006bf2:	4b9f      	ldr	r3, [pc, #636]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	0b1b      	lsrs	r3, r3, #12
 8006bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bfe:	4b9c      	ldr	r3, [pc, #624]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	091b      	lsrs	r3, r3, #4
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006c0a:	4b99      	ldr	r3, [pc, #612]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	08db      	lsrs	r3, r3, #3
 8006c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	fb02 f303 	mul.w	r3, r2, r3
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8111 	beq.w	8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	f000 8083 	beq.w	8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	f200 80a1 	bhi.w	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d056      	beq.n	8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c4a:	e099      	b.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c4c:	4b88      	ldr	r3, [pc, #544]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d02d      	beq.n	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c58:	4b85      	ldr	r3, [pc, #532]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	08db      	lsrs	r3, r3, #3
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	4a84      	ldr	r2, [pc, #528]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	ee07 3a90 	vmov	s15, r3
 8006c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b7b      	ldr	r3, [pc, #492]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006cb2:	e087      	b.n	8006dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc6:	4b6a      	ldr	r3, [pc, #424]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cf6:	e065      	b.n	8006dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0a:	4b59      	ldr	r3, [pc, #356]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d3a:	e043      	b.n	8006dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4e:	4b48      	ldr	r3, [pc, #288]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d7e:	e021      	b.n	8006dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d92:	4b37      	ldr	r3, [pc, #220]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006da6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006dc4:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	0a5b      	lsrs	r3, r3, #9
 8006dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dea:	ee17 2a90 	vmov	r2, s15
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006df2:	4b1f      	ldr	r3, [pc, #124]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	0c1b      	lsrs	r3, r3, #16
 8006df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e18:	ee17 2a90 	vmov	r2, s15
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006e20:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	0e1b      	lsrs	r3, r3, #24
 8006e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e46:	ee17 2a90 	vmov	r2, s15
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e4e:	e008      	b.n	8006e62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	609a      	str	r2, [r3, #8]
}
 8006e62:	bf00      	nop
 8006e64:	3724      	adds	r7, #36	; 0x24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	58024400 	.word	0x58024400
 8006e74:	03d09000 	.word	0x03d09000
 8006e78:	46000000 	.word	0x46000000
 8006e7c:	4c742400 	.word	0x4c742400
 8006e80:	4a742400 	.word	0x4a742400
 8006e84:	4af42400 	.word	0x4af42400

08006e88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b089      	sub	sp, #36	; 0x24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e90:	4ba1      	ldr	r3, [pc, #644]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006e9a:	4b9f      	ldr	r3, [pc, #636]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	0d1b      	lsrs	r3, r3, #20
 8006ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ea4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006ea6:	4b9c      	ldr	r3, [pc, #624]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006eb2:	4b99      	ldr	r3, [pc, #612]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8111 	beq.w	80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	f000 8083 	beq.w	8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	f200 80a1 	bhi.w	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d056      	beq.n	8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ef2:	e099      	b.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef4:	4b88      	ldr	r3, [pc, #544]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d02d      	beq.n	8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f00:	4b85      	ldr	r3, [pc, #532]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	08db      	lsrs	r3, r3, #3
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	4a84      	ldr	r2, [pc, #528]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f10:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2a:	4b7b      	ldr	r3, [pc, #492]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f5a:	e087      	b.n	800706c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6e:	4b6a      	ldr	r3, [pc, #424]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f9e:	e065      	b.n	800706c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb2:	4b59      	ldr	r3, [pc, #356]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fe2:	e043      	b.n	800706c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff6:	4b48      	ldr	r3, [pc, #288]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007006:	ed97 6a03 	vldr	s12, [r7, #12]
 800700a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800700e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800701a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007026:	e021      	b.n	800706c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007032:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703a:	4b37      	ldr	r3, [pc, #220]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704a:	ed97 6a03 	vldr	s12, [r7, #12]
 800704e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800705e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800706a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800706c:	4b2a      	ldr	r3, [pc, #168]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	0a5b      	lsrs	r3, r3, #9
 8007072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007086:	edd7 6a07 	vldr	s13, [r7, #28]
 800708a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007092:	ee17 2a90 	vmov	r2, s15
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800709a:	4b1f      	ldr	r3, [pc, #124]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	0c1b      	lsrs	r3, r3, #16
 80070a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a4:	ee07 3a90 	vmov	s15, r3
 80070a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c0:	ee17 2a90 	vmov	r2, s15
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80070c8:	4b13      	ldr	r3, [pc, #76]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	0e1b      	lsrs	r3, r3, #24
 80070ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ee:	ee17 2a90 	vmov	r2, s15
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070f6:	e008      	b.n	800710a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	609a      	str	r2, [r3, #8]
}
 800710a:	bf00      	nop
 800710c:	3724      	adds	r7, #36	; 0x24
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	58024400 	.word	0x58024400
 800711c:	03d09000 	.word	0x03d09000
 8007120:	46000000 	.word	0x46000000
 8007124:	4c742400 	.word	0x4c742400
 8007128:	4a742400 	.word	0x4a742400
 800712c:	4af42400 	.word	0x4af42400

08007130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800713e:	4b53      	ldr	r3, [pc, #332]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	2b03      	cmp	r3, #3
 8007148:	d101      	bne.n	800714e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e099      	b.n	8007282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800714e:	4b4f      	ldr	r3, [pc, #316]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a4e      	ldr	r2, [pc, #312]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007154:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800715a:	f7fa fd09 	bl	8001b70 <HAL_GetTick>
 800715e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007160:	e008      	b.n	8007174 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007162:	f7fa fd05 	bl	8001b70 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e086      	b.n	8007282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007174:	4b45      	ldr	r3, [pc, #276]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1f0      	bne.n	8007162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007180:	4b42      	ldr	r3, [pc, #264]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	031b      	lsls	r3, r3, #12
 800718e:	493f      	ldr	r1, [pc, #252]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007190:	4313      	orrs	r3, r2
 8007192:	628b      	str	r3, [r1, #40]	; 0x28
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	3b01      	subs	r3, #1
 800719a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	025b      	lsls	r3, r3, #9
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	041b      	lsls	r3, r3, #16
 80071b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	3b01      	subs	r3, #1
 80071be:	061b      	lsls	r3, r3, #24
 80071c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071c4:	4931      	ldr	r1, [pc, #196]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80071ca:	4b30      	ldr	r3, [pc, #192]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	492d      	ldr	r1, [pc, #180]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80071dc:	4b2b      	ldr	r3, [pc, #172]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	f023 0220 	bic.w	r2, r3, #32
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	4928      	ldr	r1, [pc, #160]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80071ee:	4b27      	ldr	r3, [pc, #156]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	4a26      	ldr	r2, [pc, #152]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 80071f4:	f023 0310 	bic.w	r3, r3, #16
 80071f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071fa:	4b24      	ldr	r3, [pc, #144]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 80071fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071fe:	4b24      	ldr	r3, [pc, #144]	; (8007290 <RCCEx_PLL2_Config+0x160>)
 8007200:	4013      	ands	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	69d2      	ldr	r2, [r2, #28]
 8007206:	00d2      	lsls	r2, r2, #3
 8007208:	4920      	ldr	r1, [pc, #128]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 800720a:	4313      	orrs	r3, r2
 800720c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800720e:	4b1f      	ldr	r3, [pc, #124]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	4a1e      	ldr	r2, [pc, #120]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007214:	f043 0310 	orr.w	r3, r3, #16
 8007218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d106      	bne.n	800722e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007220:	4b1a      	ldr	r3, [pc, #104]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	4a19      	ldr	r2, [pc, #100]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800722a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800722c:	e00f      	b.n	800724e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d106      	bne.n	8007242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007234:	4b15      	ldr	r3, [pc, #84]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	4a14      	ldr	r2, [pc, #80]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 800723a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800723e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007240:	e005      	b.n	800724e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	4a11      	ldr	r2, [pc, #68]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800724c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800724e:	4b0f      	ldr	r3, [pc, #60]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a0e      	ldr	r2, [pc, #56]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800725a:	f7fa fc89 	bl	8001b70 <HAL_GetTick>
 800725e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007260:	e008      	b.n	8007274 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007262:	f7fa fc85 	bl	8001b70 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e006      	b.n	8007282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <RCCEx_PLL2_Config+0x15c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	58024400 	.word	0x58024400
 8007290:	ffff0007 	.word	0xffff0007

08007294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072a2:	4b53      	ldr	r3, [pc, #332]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80072a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d101      	bne.n	80072b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e099      	b.n	80073e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80072b2:	4b4f      	ldr	r3, [pc, #316]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a4e      	ldr	r2, [pc, #312]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80072b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072be:	f7fa fc57 	bl	8001b70 <HAL_GetTick>
 80072c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072c4:	e008      	b.n	80072d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80072c6:	f7fa fc53 	bl	8001b70 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e086      	b.n	80073e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072d8:	4b45      	ldr	r3, [pc, #276]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1f0      	bne.n	80072c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80072e4:	4b42      	ldr	r3, [pc, #264]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	051b      	lsls	r3, r3, #20
 80072f2:	493f      	ldr	r1, [pc, #252]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	628b      	str	r3, [r1, #40]	; 0x28
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	3b01      	subs	r3, #1
 8007308:	025b      	lsls	r3, r3, #9
 800730a:	b29b      	uxth	r3, r3
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	3b01      	subs	r3, #1
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	3b01      	subs	r3, #1
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007328:	4931      	ldr	r1, [pc, #196]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 800732a:	4313      	orrs	r3, r2
 800732c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800732e:	4b30      	ldr	r3, [pc, #192]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	492d      	ldr	r1, [pc, #180]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 800733c:	4313      	orrs	r3, r2
 800733e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	4928      	ldr	r1, [pc, #160]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 800734e:	4313      	orrs	r3, r2
 8007350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007352:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4a26      	ldr	r2, [pc, #152]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 8007358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800735c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 8007360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <RCCEx_PLL3_Config+0x160>)
 8007364:	4013      	ands	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	69d2      	ldr	r2, [r2, #28]
 800736a:	00d2      	lsls	r2, r2, #3
 800736c:	4920      	ldr	r1, [pc, #128]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 800736e:	4313      	orrs	r3, r2
 8007370:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007372:	4b1f      	ldr	r3, [pc, #124]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 8007378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800737c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007384:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	4a19      	ldr	r2, [pc, #100]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 800738a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800738e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007390:	e00f      	b.n	80073b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d106      	bne.n	80073a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 800739e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073a4:	e005      	b.n	80073b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80073ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a0e      	ldr	r2, [pc, #56]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80073b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073be:	f7fa fbd7 	bl	8001b70 <HAL_GetTick>
 80073c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073c4:	e008      	b.n	80073d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80073c6:	f7fa fbd3 	bl	8001b70 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e006      	b.n	80073e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <RCCEx_PLL3_Config+0x15c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	58024400 	.word	0x58024400
 80073f4:	ffff0007 	.word	0xffff0007

080073f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e042      	b.n	8007490 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7fa f8ef 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2224      	movs	r2, #36	; 0x24
 8007426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0201 	bic.w	r2, r2, #1
 8007438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fbea 	bl	8007c14 <UART_SetConfig>
 8007440:	4603      	mov	r3, r0
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e022      	b.n	8007490 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 fa4a 	bl	80088ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0201 	orr.w	r2, r2, #1
 8007486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 fad1 	bl	8008a30 <UART_CheckIdleState>
 800748e:	4603      	mov	r3, r0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b0ba      	sub	sp, #232	; 0xe8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80074c6:	4013      	ands	r3, r2
 80074c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d11b      	bne.n	800750c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d015      	beq.n	800750c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d009      	beq.n	800750c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 835a 	beq.w	8007bb6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
      }
      return;
 800750a:	e354      	b.n	8007bb6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800750c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 811f 	beq.w	8007754 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007516:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800751a:	4b8b      	ldr	r3, [pc, #556]	; (8007748 <HAL_UART_IRQHandler+0x2b0>)
 800751c:	4013      	ands	r3, r2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007522:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007526:	4b89      	ldr	r3, [pc, #548]	; (800774c <HAL_UART_IRQHandler+0x2b4>)
 8007528:	4013      	ands	r3, r2
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 8112 	beq.w	8007754 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d011      	beq.n	8007560 <HAL_UART_IRQHandler+0xc8>
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2201      	movs	r2, #1
 800754e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007556:	f043 0201 	orr.w	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d011      	beq.n	8007590 <HAL_UART_IRQHandler+0xf8>
 800756c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00b      	beq.n	8007590 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2202      	movs	r2, #2
 800757e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007586:	f043 0204 	orr.w	r2, r3, #4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d011      	beq.n	80075c0 <HAL_UART_IRQHandler+0x128>
 800759c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2204      	movs	r2, #4
 80075ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b6:	f043 0202 	orr.w	r2, r3, #2
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d017      	beq.n	80075fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80075dc:	4b5a      	ldr	r3, [pc, #360]	; (8007748 <HAL_UART_IRQHandler+0x2b0>)
 80075de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2208      	movs	r2, #8
 80075ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075f2:	f043 0208 	orr.w	r2, r3, #8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007604:	2b00      	cmp	r3, #0
 8007606:	d012      	beq.n	800762e <HAL_UART_IRQHandler+0x196>
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00c      	beq.n	800762e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800761c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007624:	f043 0220 	orr.w	r2, r3, #32
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 82c0 	beq.w	8007bba <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800763a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d013      	beq.n	800766e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	d105      	bne.n	800765e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d005      	beq.n	8007692 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800768a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800768e:	2b00      	cmp	r3, #0
 8007690:	d04f      	beq.n	8007732 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fae0 	bl	8008c58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d141      	bne.n	800772a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1d9      	bne.n	80076a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d013      	beq.n	8007722 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076fe:	4a14      	ldr	r2, [pc, #80]	; (8007750 <HAL_UART_IRQHandler+0x2b8>)
 8007700:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007706:	4618      	mov	r0, r3
 8007708:	f7fa fe90 	bl	800242c <HAL_DMA_Abort_IT>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d017      	beq.n	8007742 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007720:	e00f      	b.n	8007742 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa60 	bl	8007be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	e00b      	b.n	8007742 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa5c 	bl	8007be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007730:	e007      	b.n	8007742 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa58 	bl	8007be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007740:	e23b      	b.n	8007bba <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007742:	bf00      	nop
    return;
 8007744:	e239      	b.n	8007bba <HAL_UART_IRQHandler+0x722>
 8007746:	bf00      	nop
 8007748:	10000001 	.word	0x10000001
 800774c:	04000120 	.word	0x04000120
 8007750:	08008d25 	.word	0x08008d25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007758:	2b01      	cmp	r3, #1
 800775a:	f040 81ce 	bne.w	8007afa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800775e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 81c7 	beq.w	8007afa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800776c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 81c0 	beq.w	8007afa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2210      	movs	r2, #16
 8007780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778c:	2b40      	cmp	r3, #64	; 0x40
 800778e:	f040 813b 	bne.w	8007a08 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a8b      	ldr	r2, [pc, #556]	; (80079c8 <HAL_UART_IRQHandler+0x530>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d059      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a89      	ldr	r2, [pc, #548]	; (80079cc <HAL_UART_IRQHandler+0x534>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d053      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a87      	ldr	r2, [pc, #540]	; (80079d0 <HAL_UART_IRQHandler+0x538>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d04d      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a85      	ldr	r2, [pc, #532]	; (80079d4 <HAL_UART_IRQHandler+0x53c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d047      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a83      	ldr	r2, [pc, #524]	; (80079d8 <HAL_UART_IRQHandler+0x540>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d041      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a81      	ldr	r2, [pc, #516]	; (80079dc <HAL_UART_IRQHandler+0x544>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d03b      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a7f      	ldr	r2, [pc, #508]	; (80079e0 <HAL_UART_IRQHandler+0x548>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d035      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a7d      	ldr	r2, [pc, #500]	; (80079e4 <HAL_UART_IRQHandler+0x54c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d02f      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a7b      	ldr	r2, [pc, #492]	; (80079e8 <HAL_UART_IRQHandler+0x550>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d029      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a79      	ldr	r2, [pc, #484]	; (80079ec <HAL_UART_IRQHandler+0x554>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d023      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a77      	ldr	r2, [pc, #476]	; (80079f0 <HAL_UART_IRQHandler+0x558>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d01d      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a75      	ldr	r2, [pc, #468]	; (80079f4 <HAL_UART_IRQHandler+0x55c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d017      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a73      	ldr	r2, [pc, #460]	; (80079f8 <HAL_UART_IRQHandler+0x560>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d011      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a71      	ldr	r2, [pc, #452]	; (80079fc <HAL_UART_IRQHandler+0x564>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00b      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a6f      	ldr	r2, [pc, #444]	; (8007a00 <HAL_UART_IRQHandler+0x568>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d005      	beq.n	8007852 <HAL_UART_IRQHandler+0x3ba>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a6d      	ldr	r2, [pc, #436]	; (8007a04 <HAL_UART_IRQHandler+0x56c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d105      	bne.n	800785e <HAL_UART_IRQHandler+0x3c6>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	b29b      	uxth	r3, r3
 800785c:	e004      	b.n	8007868 <HAL_UART_IRQHandler+0x3d0>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	b29b      	uxth	r3, r3
 8007868:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800786c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 81a4 	beq.w	8007bbe <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800787c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007880:	429a      	cmp	r2, r3
 8007882:	f080 819c 	bcs.w	8007bbe <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800788c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789a:	f000 8086 	beq.w	80079aa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1da      	bne.n	800789e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3308      	adds	r3, #8
 80078ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078fa:	f023 0301 	bic.w	r3, r3, #1
 80078fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3308      	adds	r3, #8
 8007908:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800790c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007910:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007914:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800791e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e1      	bne.n	80078e8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3308      	adds	r3, #8
 800792a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007948:	66fa      	str	r2, [r7, #108]	; 0x6c
 800794a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800794e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e3      	bne.n	8007924 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800797a:	f023 0310 	bic.w	r3, r3, #16
 800797e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800798c:	65bb      	str	r3, [r7, #88]	; 0x58
 800798e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007992:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800799a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e4      	bne.n	800796a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fa fa23 	bl	8001df0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f91c 	bl	8007bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079c4:	e0fb      	b.n	8007bbe <HAL_UART_IRQHandler+0x726>
 80079c6:	bf00      	nop
 80079c8:	40020010 	.word	0x40020010
 80079cc:	40020028 	.word	0x40020028
 80079d0:	40020040 	.word	0x40020040
 80079d4:	40020058 	.word	0x40020058
 80079d8:	40020070 	.word	0x40020070
 80079dc:	40020088 	.word	0x40020088
 80079e0:	400200a0 	.word	0x400200a0
 80079e4:	400200b8 	.word	0x400200b8
 80079e8:	40020410 	.word	0x40020410
 80079ec:	40020428 	.word	0x40020428
 80079f0:	40020440 	.word	0x40020440
 80079f4:	40020458 	.word	0x40020458
 80079f8:	40020470 	.word	0x40020470
 80079fc:	40020488 	.word	0x40020488
 8007a00:	400204a0 	.word	0x400204a0
 8007a04:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80cc 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 80c7 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	461a      	mov	r2, r3
 8007a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a56:	647b      	str	r3, [r7, #68]	; 0x44
 8007a58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e4      	bne.n	8007a34 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	623b      	str	r3, [r7, #32]
   return(result);
 8007a7a:	6a3a      	ldr	r2, [r7, #32]
 8007a7c:	4b54      	ldr	r3, [pc, #336]	; (8007bd0 <HAL_UART_IRQHandler+0x738>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e3      	bne.n	8007a6a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0310 	bic.w	r3, r3, #16
 8007aca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	69b9      	ldr	r1, [r7, #24]
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e4      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f882 	bl	8007bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007af8:	e063      	b.n	8007bc2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00e      	beq.n	8007b24 <HAL_UART_IRQHandler+0x68c>
 8007b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d008      	beq.n	8007b24 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 f942 	bl	8008da6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b22:	e051      	b.n	8007bc8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d014      	beq.n	8007b5a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d105      	bne.n	8007b48 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d03a      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
    }
    return;
 8007b58:	e035      	b.n	8007bc6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <HAL_UART_IRQHandler+0x6e2>
 8007b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 f8ec 	bl	8008d50 <UART_EndTransmit_IT>
    return;
 8007b78:	e026      	b.n	8007bc8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_UART_IRQHandler+0x702>
 8007b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 f91b 	bl	8008dce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b98:	e016      	b.n	8007bc8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d010      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x730>
 8007ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da0c      	bge.n	8007bc8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 f903 	bl	8008dba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bb4:	e008      	b.n	8007bc8 <HAL_UART_IRQHandler+0x730>
      return;
 8007bb6:	bf00      	nop
 8007bb8:	e006      	b.n	8007bc8 <HAL_UART_IRQHandler+0x730>
    return;
 8007bba:	bf00      	nop
 8007bbc:	e004      	b.n	8007bc8 <HAL_UART_IRQHandler+0x730>
      return;
 8007bbe:	bf00      	nop
 8007bc0:	e002      	b.n	8007bc8 <HAL_UART_IRQHandler+0x730>
      return;
 8007bc2:	bf00      	nop
 8007bc4:	e000      	b.n	8007bc8 <HAL_UART_IRQHandler+0x730>
    return;
 8007bc6:	bf00      	nop
  }
}
 8007bc8:	37e8      	adds	r7, #232	; 0xe8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	effffffe 	.word	0xeffffffe

08007bd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c18:	b092      	sub	sp, #72	; 0x48
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4bbe      	ldr	r3, [pc, #760]	; (8007f3c <UART_SetConfig+0x328>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	6812      	ldr	r2, [r2, #0]
 8007c4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4ab3      	ldr	r2, [pc, #716]	; (8007f40 <UART_SetConfig+0x32c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d004      	beq.n	8007c80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	4baf      	ldr	r3, [pc, #700]	; (8007f44 <UART_SetConfig+0x330>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c90:	430b      	orrs	r3, r1
 8007c92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	f023 010f 	bic.w	r1, r3, #15
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4aa6      	ldr	r2, [pc, #664]	; (8007f48 <UART_SetConfig+0x334>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d177      	bne.n	8007da4 <UART_SetConfig+0x190>
 8007cb4:	4ba5      	ldr	r3, [pc, #660]	; (8007f4c <UART_SetConfig+0x338>)
 8007cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cbc:	2b28      	cmp	r3, #40	; 0x28
 8007cbe:	d86d      	bhi.n	8007d9c <UART_SetConfig+0x188>
 8007cc0:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <UART_SetConfig+0xb4>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007d6d 	.word	0x08007d6d
 8007ccc:	08007d9d 	.word	0x08007d9d
 8007cd0:	08007d9d 	.word	0x08007d9d
 8007cd4:	08007d9d 	.word	0x08007d9d
 8007cd8:	08007d9d 	.word	0x08007d9d
 8007cdc:	08007d9d 	.word	0x08007d9d
 8007ce0:	08007d9d 	.word	0x08007d9d
 8007ce4:	08007d9d 	.word	0x08007d9d
 8007ce8:	08007d75 	.word	0x08007d75
 8007cec:	08007d9d 	.word	0x08007d9d
 8007cf0:	08007d9d 	.word	0x08007d9d
 8007cf4:	08007d9d 	.word	0x08007d9d
 8007cf8:	08007d9d 	.word	0x08007d9d
 8007cfc:	08007d9d 	.word	0x08007d9d
 8007d00:	08007d9d 	.word	0x08007d9d
 8007d04:	08007d9d 	.word	0x08007d9d
 8007d08:	08007d7d 	.word	0x08007d7d
 8007d0c:	08007d9d 	.word	0x08007d9d
 8007d10:	08007d9d 	.word	0x08007d9d
 8007d14:	08007d9d 	.word	0x08007d9d
 8007d18:	08007d9d 	.word	0x08007d9d
 8007d1c:	08007d9d 	.word	0x08007d9d
 8007d20:	08007d9d 	.word	0x08007d9d
 8007d24:	08007d9d 	.word	0x08007d9d
 8007d28:	08007d85 	.word	0x08007d85
 8007d2c:	08007d9d 	.word	0x08007d9d
 8007d30:	08007d9d 	.word	0x08007d9d
 8007d34:	08007d9d 	.word	0x08007d9d
 8007d38:	08007d9d 	.word	0x08007d9d
 8007d3c:	08007d9d 	.word	0x08007d9d
 8007d40:	08007d9d 	.word	0x08007d9d
 8007d44:	08007d9d 	.word	0x08007d9d
 8007d48:	08007d8d 	.word	0x08007d8d
 8007d4c:	08007d9d 	.word	0x08007d9d
 8007d50:	08007d9d 	.word	0x08007d9d
 8007d54:	08007d9d 	.word	0x08007d9d
 8007d58:	08007d9d 	.word	0x08007d9d
 8007d5c:	08007d9d 	.word	0x08007d9d
 8007d60:	08007d9d 	.word	0x08007d9d
 8007d64:	08007d9d 	.word	0x08007d9d
 8007d68:	08007d95 	.word	0x08007d95
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d72:	e326      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007d74:	2304      	movs	r3, #4
 8007d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7a:	e322      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007d7c:	2308      	movs	r3, #8
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d82:	e31e      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007d84:	2310      	movs	r3, #16
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8a:	e31a      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e316      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e312      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007d9c:	2380      	movs	r3, #128	; 0x80
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e30e      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a69      	ldr	r2, [pc, #420]	; (8007f50 <UART_SetConfig+0x33c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d130      	bne.n	8007e10 <UART_SetConfig+0x1fc>
 8007dae:	4b67      	ldr	r3, [pc, #412]	; (8007f4c <UART_SetConfig+0x338>)
 8007db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	d826      	bhi.n	8007e08 <UART_SetConfig+0x1f4>
 8007dba:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <UART_SetConfig+0x1ac>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007dd9 	.word	0x08007dd9
 8007dc4:	08007de1 	.word	0x08007de1
 8007dc8:	08007de9 	.word	0x08007de9
 8007dcc:	08007df1 	.word	0x08007df1
 8007dd0:	08007df9 	.word	0x08007df9
 8007dd4:	08007e01 	.word	0x08007e01
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dde:	e2f0      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007de0:	2304      	movs	r3, #4
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de6:	e2ec      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007de8:	2308      	movs	r3, #8
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dee:	e2e8      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e2e4      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007df8:	2320      	movs	r3, #32
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e2e0      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e00:	2340      	movs	r3, #64	; 0x40
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e2dc      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e08:	2380      	movs	r3, #128	; 0x80
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e2d8      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a4f      	ldr	r2, [pc, #316]	; (8007f54 <UART_SetConfig+0x340>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d130      	bne.n	8007e7c <UART_SetConfig+0x268>
 8007e1a:	4b4c      	ldr	r3, [pc, #304]	; (8007f4c <UART_SetConfig+0x338>)
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1e:	f003 0307 	and.w	r3, r3, #7
 8007e22:	2b05      	cmp	r3, #5
 8007e24:	d826      	bhi.n	8007e74 <UART_SetConfig+0x260>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <UART_SetConfig+0x218>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e45 	.word	0x08007e45
 8007e30:	08007e4d 	.word	0x08007e4d
 8007e34:	08007e55 	.word	0x08007e55
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e65 	.word	0x08007e65
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	2300      	movs	r3, #0
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4a:	e2ba      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e52:	e2b6      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e54:	2308      	movs	r3, #8
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e5a:	e2b2      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e62:	e2ae      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e64:	2320      	movs	r3, #32
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e2aa      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e6c:	2340      	movs	r3, #64	; 0x40
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e2a6      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e74:	2380      	movs	r3, #128	; 0x80
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e2a2      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a35      	ldr	r2, [pc, #212]	; (8007f58 <UART_SetConfig+0x344>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d130      	bne.n	8007ee8 <UART_SetConfig+0x2d4>
 8007e86:	4b31      	ldr	r3, [pc, #196]	; (8007f4c <UART_SetConfig+0x338>)
 8007e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	d826      	bhi.n	8007ee0 <UART_SetConfig+0x2cc>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <UART_SetConfig+0x284>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007eb9 	.word	0x08007eb9
 8007ea0:	08007ec1 	.word	0x08007ec1
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ed1 	.word	0x08007ed1
 8007eac:	08007ed9 	.word	0x08007ed9
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e284      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007eb8:	2304      	movs	r3, #4
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ebe:	e280      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007ec0:	2308      	movs	r3, #8
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec6:	e27c      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007ec8:	2310      	movs	r3, #16
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e278      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007ed0:	2320      	movs	r3, #32
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e274      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007ed8:	2340      	movs	r3, #64	; 0x40
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e270      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007ee0:	2380      	movs	r3, #128	; 0x80
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee6:	e26c      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a1b      	ldr	r2, [pc, #108]	; (8007f5c <UART_SetConfig+0x348>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d142      	bne.n	8007f78 <UART_SetConfig+0x364>
 8007ef2:	4b16      	ldr	r3, [pc, #88]	; (8007f4c <UART_SetConfig+0x338>)
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	d838      	bhi.n	8007f70 <UART_SetConfig+0x35c>
 8007efe:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <UART_SetConfig+0x2f0>)
 8007f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f04:	08007f1d 	.word	0x08007f1d
 8007f08:	08007f25 	.word	0x08007f25
 8007f0c:	08007f2d 	.word	0x08007f2d
 8007f10:	08007f35 	.word	0x08007f35
 8007f14:	08007f61 	.word	0x08007f61
 8007f18:	08007f69 	.word	0x08007f69
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e24e      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007f24:	2304      	movs	r3, #4
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2a:	e24a      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007f2c:	2308      	movs	r3, #8
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f32:	e246      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007f34:	2310      	movs	r3, #16
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e242      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007f3c:	cfff69f3 	.word	0xcfff69f3
 8007f40:	58000c00 	.word	0x58000c00
 8007f44:	11fff4ff 	.word	0x11fff4ff
 8007f48:	40011000 	.word	0x40011000
 8007f4c:	58024400 	.word	0x58024400
 8007f50:	40004400 	.word	0x40004400
 8007f54:	40004800 	.word	0x40004800
 8007f58:	40004c00 	.word	0x40004c00
 8007f5c:	40005000 	.word	0x40005000
 8007f60:	2320      	movs	r3, #32
 8007f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f66:	e22c      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007f68:	2340      	movs	r3, #64	; 0x40
 8007f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6e:	e228      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007f70:	2380      	movs	r3, #128	; 0x80
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f76:	e224      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4ab1      	ldr	r2, [pc, #708]	; (8008244 <UART_SetConfig+0x630>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d176      	bne.n	8008070 <UART_SetConfig+0x45c>
 8007f82:	4bb1      	ldr	r3, [pc, #708]	; (8008248 <UART_SetConfig+0x634>)
 8007f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f8a:	2b28      	cmp	r3, #40	; 0x28
 8007f8c:	d86c      	bhi.n	8008068 <UART_SetConfig+0x454>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <UART_SetConfig+0x380>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08008039 	.word	0x08008039
 8007f98:	08008069 	.word	0x08008069
 8007f9c:	08008069 	.word	0x08008069
 8007fa0:	08008069 	.word	0x08008069
 8007fa4:	08008069 	.word	0x08008069
 8007fa8:	08008069 	.word	0x08008069
 8007fac:	08008069 	.word	0x08008069
 8007fb0:	08008069 	.word	0x08008069
 8007fb4:	08008041 	.word	0x08008041
 8007fb8:	08008069 	.word	0x08008069
 8007fbc:	08008069 	.word	0x08008069
 8007fc0:	08008069 	.word	0x08008069
 8007fc4:	08008069 	.word	0x08008069
 8007fc8:	08008069 	.word	0x08008069
 8007fcc:	08008069 	.word	0x08008069
 8007fd0:	08008069 	.word	0x08008069
 8007fd4:	08008049 	.word	0x08008049
 8007fd8:	08008069 	.word	0x08008069
 8007fdc:	08008069 	.word	0x08008069
 8007fe0:	08008069 	.word	0x08008069
 8007fe4:	08008069 	.word	0x08008069
 8007fe8:	08008069 	.word	0x08008069
 8007fec:	08008069 	.word	0x08008069
 8007ff0:	08008069 	.word	0x08008069
 8007ff4:	08008051 	.word	0x08008051
 8007ff8:	08008069 	.word	0x08008069
 8007ffc:	08008069 	.word	0x08008069
 8008000:	08008069 	.word	0x08008069
 8008004:	08008069 	.word	0x08008069
 8008008:	08008069 	.word	0x08008069
 800800c:	08008069 	.word	0x08008069
 8008010:	08008069 	.word	0x08008069
 8008014:	08008059 	.word	0x08008059
 8008018:	08008069 	.word	0x08008069
 800801c:	08008069 	.word	0x08008069
 8008020:	08008069 	.word	0x08008069
 8008024:	08008069 	.word	0x08008069
 8008028:	08008069 	.word	0x08008069
 800802c:	08008069 	.word	0x08008069
 8008030:	08008069 	.word	0x08008069
 8008034:	08008061 	.word	0x08008061
 8008038:	2301      	movs	r3, #1
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803e:	e1c0      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008040:	2304      	movs	r3, #4
 8008042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008046:	e1bc      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008048:	2308      	movs	r3, #8
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804e:	e1b8      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008050:	2310      	movs	r3, #16
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008056:	e1b4      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008058:	2320      	movs	r3, #32
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805e:	e1b0      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008060:	2340      	movs	r3, #64	; 0x40
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e1ac      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008068:	2380      	movs	r3, #128	; 0x80
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e1a8      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a75      	ldr	r2, [pc, #468]	; (800824c <UART_SetConfig+0x638>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d130      	bne.n	80080dc <UART_SetConfig+0x4c8>
 800807a:	4b73      	ldr	r3, [pc, #460]	; (8008248 <UART_SetConfig+0x634>)
 800807c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	2b05      	cmp	r3, #5
 8008084:	d826      	bhi.n	80080d4 <UART_SetConfig+0x4c0>
 8008086:	a201      	add	r2, pc, #4	; (adr r2, 800808c <UART_SetConfig+0x478>)
 8008088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808c:	080080a5 	.word	0x080080a5
 8008090:	080080ad 	.word	0x080080ad
 8008094:	080080b5 	.word	0x080080b5
 8008098:	080080bd 	.word	0x080080bd
 800809c:	080080c5 	.word	0x080080c5
 80080a0:	080080cd 	.word	0x080080cd
 80080a4:	2300      	movs	r3, #0
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e18a      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80080ac:	2304      	movs	r3, #4
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b2:	e186      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80080b4:	2308      	movs	r3, #8
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ba:	e182      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80080bc:	2310      	movs	r3, #16
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c2:	e17e      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80080c4:	2320      	movs	r3, #32
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ca:	e17a      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80080cc:	2340      	movs	r3, #64	; 0x40
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e176      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80080d4:	2380      	movs	r3, #128	; 0x80
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e172      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a5b      	ldr	r2, [pc, #364]	; (8008250 <UART_SetConfig+0x63c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d130      	bne.n	8008148 <UART_SetConfig+0x534>
 80080e6:	4b58      	ldr	r3, [pc, #352]	; (8008248 <UART_SetConfig+0x634>)
 80080e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	2b05      	cmp	r3, #5
 80080f0:	d826      	bhi.n	8008140 <UART_SetConfig+0x52c>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <UART_SetConfig+0x4e4>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008111 	.word	0x08008111
 80080fc:	08008119 	.word	0x08008119
 8008100:	08008121 	.word	0x08008121
 8008104:	08008129 	.word	0x08008129
 8008108:	08008131 	.word	0x08008131
 800810c:	08008139 	.word	0x08008139
 8008110:	2300      	movs	r3, #0
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e154      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800811e:	e150      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008126:	e14c      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812e:	e148      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008130:	2320      	movs	r3, #32
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008136:	e144      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008138:	2340      	movs	r3, #64	; 0x40
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813e:	e140      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008140:	2380      	movs	r3, #128	; 0x80
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e13c      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a41      	ldr	r2, [pc, #260]	; (8008254 <UART_SetConfig+0x640>)
 800814e:	4293      	cmp	r3, r2
 8008150:	f040 8082 	bne.w	8008258 <UART_SetConfig+0x644>
 8008154:	4b3c      	ldr	r3, [pc, #240]	; (8008248 <UART_SetConfig+0x634>)
 8008156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800815c:	2b28      	cmp	r3, #40	; 0x28
 800815e:	d86d      	bhi.n	800823c <UART_SetConfig+0x628>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <UART_SetConfig+0x554>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	0800820d 	.word	0x0800820d
 800816c:	0800823d 	.word	0x0800823d
 8008170:	0800823d 	.word	0x0800823d
 8008174:	0800823d 	.word	0x0800823d
 8008178:	0800823d 	.word	0x0800823d
 800817c:	0800823d 	.word	0x0800823d
 8008180:	0800823d 	.word	0x0800823d
 8008184:	0800823d 	.word	0x0800823d
 8008188:	08008215 	.word	0x08008215
 800818c:	0800823d 	.word	0x0800823d
 8008190:	0800823d 	.word	0x0800823d
 8008194:	0800823d 	.word	0x0800823d
 8008198:	0800823d 	.word	0x0800823d
 800819c:	0800823d 	.word	0x0800823d
 80081a0:	0800823d 	.word	0x0800823d
 80081a4:	0800823d 	.word	0x0800823d
 80081a8:	0800821d 	.word	0x0800821d
 80081ac:	0800823d 	.word	0x0800823d
 80081b0:	0800823d 	.word	0x0800823d
 80081b4:	0800823d 	.word	0x0800823d
 80081b8:	0800823d 	.word	0x0800823d
 80081bc:	0800823d 	.word	0x0800823d
 80081c0:	0800823d 	.word	0x0800823d
 80081c4:	0800823d 	.word	0x0800823d
 80081c8:	08008225 	.word	0x08008225
 80081cc:	0800823d 	.word	0x0800823d
 80081d0:	0800823d 	.word	0x0800823d
 80081d4:	0800823d 	.word	0x0800823d
 80081d8:	0800823d 	.word	0x0800823d
 80081dc:	0800823d 	.word	0x0800823d
 80081e0:	0800823d 	.word	0x0800823d
 80081e4:	0800823d 	.word	0x0800823d
 80081e8:	0800822d 	.word	0x0800822d
 80081ec:	0800823d 	.word	0x0800823d
 80081f0:	0800823d 	.word	0x0800823d
 80081f4:	0800823d 	.word	0x0800823d
 80081f8:	0800823d 	.word	0x0800823d
 80081fc:	0800823d 	.word	0x0800823d
 8008200:	0800823d 	.word	0x0800823d
 8008204:	0800823d 	.word	0x0800823d
 8008208:	08008235 	.word	0x08008235
 800820c:	2301      	movs	r3, #1
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e0d6      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008214:	2304      	movs	r3, #4
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e0d2      	b.n	80083c2 <UART_SetConfig+0x7ae>
 800821c:	2308      	movs	r3, #8
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e0ce      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008224:	2310      	movs	r3, #16
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e0ca      	b.n	80083c2 <UART_SetConfig+0x7ae>
 800822c:	2320      	movs	r3, #32
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008232:	e0c6      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823a:	e0c2      	b.n	80083c2 <UART_SetConfig+0x7ae>
 800823c:	2380      	movs	r3, #128	; 0x80
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008242:	e0be      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008244:	40011400 	.word	0x40011400
 8008248:	58024400 	.word	0x58024400
 800824c:	40007800 	.word	0x40007800
 8008250:	40007c00 	.word	0x40007c00
 8008254:	40011800 	.word	0x40011800
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4aad      	ldr	r2, [pc, #692]	; (8008514 <UART_SetConfig+0x900>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d176      	bne.n	8008350 <UART_SetConfig+0x73c>
 8008262:	4bad      	ldr	r3, [pc, #692]	; (8008518 <UART_SetConfig+0x904>)
 8008264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800826a:	2b28      	cmp	r3, #40	; 0x28
 800826c:	d86c      	bhi.n	8008348 <UART_SetConfig+0x734>
 800826e:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <UART_SetConfig+0x660>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	08008319 	.word	0x08008319
 8008278:	08008349 	.word	0x08008349
 800827c:	08008349 	.word	0x08008349
 8008280:	08008349 	.word	0x08008349
 8008284:	08008349 	.word	0x08008349
 8008288:	08008349 	.word	0x08008349
 800828c:	08008349 	.word	0x08008349
 8008290:	08008349 	.word	0x08008349
 8008294:	08008321 	.word	0x08008321
 8008298:	08008349 	.word	0x08008349
 800829c:	08008349 	.word	0x08008349
 80082a0:	08008349 	.word	0x08008349
 80082a4:	08008349 	.word	0x08008349
 80082a8:	08008349 	.word	0x08008349
 80082ac:	08008349 	.word	0x08008349
 80082b0:	08008349 	.word	0x08008349
 80082b4:	08008329 	.word	0x08008329
 80082b8:	08008349 	.word	0x08008349
 80082bc:	08008349 	.word	0x08008349
 80082c0:	08008349 	.word	0x08008349
 80082c4:	08008349 	.word	0x08008349
 80082c8:	08008349 	.word	0x08008349
 80082cc:	08008349 	.word	0x08008349
 80082d0:	08008349 	.word	0x08008349
 80082d4:	08008331 	.word	0x08008331
 80082d8:	08008349 	.word	0x08008349
 80082dc:	08008349 	.word	0x08008349
 80082e0:	08008349 	.word	0x08008349
 80082e4:	08008349 	.word	0x08008349
 80082e8:	08008349 	.word	0x08008349
 80082ec:	08008349 	.word	0x08008349
 80082f0:	08008349 	.word	0x08008349
 80082f4:	08008339 	.word	0x08008339
 80082f8:	08008349 	.word	0x08008349
 80082fc:	08008349 	.word	0x08008349
 8008300:	08008349 	.word	0x08008349
 8008304:	08008349 	.word	0x08008349
 8008308:	08008349 	.word	0x08008349
 800830c:	08008349 	.word	0x08008349
 8008310:	08008349 	.word	0x08008349
 8008314:	08008341 	.word	0x08008341
 8008318:	2301      	movs	r3, #1
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e050      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008320:	2304      	movs	r3, #4
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008326:	e04c      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008328:	2308      	movs	r3, #8
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832e:	e048      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008330:	2310      	movs	r3, #16
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008336:	e044      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008338:	2320      	movs	r3, #32
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e040      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e03c      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008348:	2380      	movs	r3, #128	; 0x80
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e038      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a71      	ldr	r2, [pc, #452]	; (800851c <UART_SetConfig+0x908>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d130      	bne.n	80083bc <UART_SetConfig+0x7a8>
 800835a:	4b6f      	ldr	r3, [pc, #444]	; (8008518 <UART_SetConfig+0x904>)
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	2b05      	cmp	r3, #5
 8008364:	d826      	bhi.n	80083b4 <UART_SetConfig+0x7a0>
 8008366:	a201      	add	r2, pc, #4	; (adr r2, 800836c <UART_SetConfig+0x758>)
 8008368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836c:	08008385 	.word	0x08008385
 8008370:	0800838d 	.word	0x0800838d
 8008374:	08008395 	.word	0x08008395
 8008378:	0800839d 	.word	0x0800839d
 800837c:	080083a5 	.word	0x080083a5
 8008380:	080083ad 	.word	0x080083ad
 8008384:	2302      	movs	r3, #2
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838a:	e01a      	b.n	80083c2 <UART_SetConfig+0x7ae>
 800838c:	2304      	movs	r3, #4
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008392:	e016      	b.n	80083c2 <UART_SetConfig+0x7ae>
 8008394:	2308      	movs	r3, #8
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e012      	b.n	80083c2 <UART_SetConfig+0x7ae>
 800839c:	2310      	movs	r3, #16
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a2:	e00e      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80083a4:	2320      	movs	r3, #32
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e00a      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80083ac:	2340      	movs	r3, #64	; 0x40
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e006      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80083b4:	2380      	movs	r3, #128	; 0x80
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e002      	b.n	80083c2 <UART_SetConfig+0x7ae>
 80083bc:	2380      	movs	r3, #128	; 0x80
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a55      	ldr	r2, [pc, #340]	; (800851c <UART_SetConfig+0x908>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	f040 80f8 	bne.w	80085be <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	dc46      	bgt.n	8008464 <UART_SetConfig+0x850>
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	db75      	blt.n	80084c6 <UART_SetConfig+0x8b2>
 80083da:	3b02      	subs	r3, #2
 80083dc:	2b1e      	cmp	r3, #30
 80083de:	d872      	bhi.n	80084c6 <UART_SetConfig+0x8b2>
 80083e0:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <UART_SetConfig+0x7d4>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	0800846b 	.word	0x0800846b
 80083ec:	080084c7 	.word	0x080084c7
 80083f0:	08008473 	.word	0x08008473
 80083f4:	080084c7 	.word	0x080084c7
 80083f8:	080084c7 	.word	0x080084c7
 80083fc:	080084c7 	.word	0x080084c7
 8008400:	08008483 	.word	0x08008483
 8008404:	080084c7 	.word	0x080084c7
 8008408:	080084c7 	.word	0x080084c7
 800840c:	080084c7 	.word	0x080084c7
 8008410:	080084c7 	.word	0x080084c7
 8008414:	080084c7 	.word	0x080084c7
 8008418:	080084c7 	.word	0x080084c7
 800841c:	080084c7 	.word	0x080084c7
 8008420:	08008493 	.word	0x08008493
 8008424:	080084c7 	.word	0x080084c7
 8008428:	080084c7 	.word	0x080084c7
 800842c:	080084c7 	.word	0x080084c7
 8008430:	080084c7 	.word	0x080084c7
 8008434:	080084c7 	.word	0x080084c7
 8008438:	080084c7 	.word	0x080084c7
 800843c:	080084c7 	.word	0x080084c7
 8008440:	080084c7 	.word	0x080084c7
 8008444:	080084c7 	.word	0x080084c7
 8008448:	080084c7 	.word	0x080084c7
 800844c:	080084c7 	.word	0x080084c7
 8008450:	080084c7 	.word	0x080084c7
 8008454:	080084c7 	.word	0x080084c7
 8008458:	080084c7 	.word	0x080084c7
 800845c:	080084c7 	.word	0x080084c7
 8008460:	080084b9 	.word	0x080084b9
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d02a      	beq.n	80084be <UART_SetConfig+0x8aa>
 8008468:	e02d      	b.n	80084c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800846a:	f7fe fba3 	bl	8006bb4 <HAL_RCCEx_GetD3PCLK1Freq>
 800846e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008470:	e02f      	b.n	80084d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fbb2 	bl	8006be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008480:	e027      	b.n	80084d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008482:	f107 0318 	add.w	r3, r7, #24
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fcfe 	bl	8006e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008490:	e01f      	b.n	80084d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008492:	4b21      	ldr	r3, [pc, #132]	; (8008518 <UART_SetConfig+0x904>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0320 	and.w	r3, r3, #32
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800849e:	4b1e      	ldr	r3, [pc, #120]	; (8008518 <UART_SetConfig+0x904>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	08db      	lsrs	r3, r3, #3
 80084a4:	f003 0303 	and.w	r3, r3, #3
 80084a8:	4a1d      	ldr	r2, [pc, #116]	; (8008520 <UART_SetConfig+0x90c>)
 80084aa:	fa22 f303 	lsr.w	r3, r2, r3
 80084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084b0:	e00f      	b.n	80084d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80084b2:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <UART_SetConfig+0x90c>)
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b6:	e00c      	b.n	80084d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <UART_SetConfig+0x910>)
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084bc:	e009      	b.n	80084d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084c4:	e005      	b.n	80084d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80084d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 81ee 	beq.w	80088b6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	4a12      	ldr	r2, [pc, #72]	; (8008528 <UART_SetConfig+0x914>)
 80084e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084e4:	461a      	mov	r2, r3
 80084e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ec:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	4613      	mov	r3, r2
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	4413      	add	r3, r2
 80084f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d305      	bcc.n	800850a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008506:	429a      	cmp	r2, r3
 8008508:	d910      	bls.n	800852c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008510:	e1d1      	b.n	80088b6 <UART_SetConfig+0xca2>
 8008512:	bf00      	nop
 8008514:	40011c00 	.word	0x40011c00
 8008518:	58024400 	.word	0x58024400
 800851c:	58000c00 	.word	0x58000c00
 8008520:	03d09000 	.word	0x03d09000
 8008524:	003d0900 	.word	0x003d0900
 8008528:	0800ba44 	.word	0x0800ba44
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2200      	movs	r2, #0
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	60fa      	str	r2, [r7, #12]
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	4ac0      	ldr	r2, [pc, #768]	; (800883c <UART_SetConfig+0xc28>)
 800853a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800853e:	b29b      	uxth	r3, r3
 8008540:	2200      	movs	r2, #0
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	607a      	str	r2, [r7, #4]
 8008546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800854a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800854e:	f7f7 ff27 	bl	80003a0 <__aeabi_uldivmod>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4610      	mov	r0, r2
 8008558:	4619      	mov	r1, r3
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	020b      	lsls	r3, r1, #8
 8008564:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008568:	0202      	lsls	r2, r0, #8
 800856a:	6979      	ldr	r1, [r7, #20]
 800856c:	6849      	ldr	r1, [r1, #4]
 800856e:	0849      	lsrs	r1, r1, #1
 8008570:	2000      	movs	r0, #0
 8008572:	460c      	mov	r4, r1
 8008574:	4605      	mov	r5, r0
 8008576:	eb12 0804 	adds.w	r8, r2, r4
 800857a:	eb43 0905 	adc.w	r9, r3, r5
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	469a      	mov	sl, r3
 8008586:	4693      	mov	fp, r2
 8008588:	4652      	mov	r2, sl
 800858a:	465b      	mov	r3, fp
 800858c:	4640      	mov	r0, r8
 800858e:	4649      	mov	r1, r9
 8008590:	f7f7 ff06 	bl	80003a0 <__aeabi_uldivmod>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4613      	mov	r3, r2
 800859a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085a2:	d308      	bcc.n	80085b6 <UART_SetConfig+0x9a2>
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085aa:	d204      	bcs.n	80085b6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b2:	60da      	str	r2, [r3, #12]
 80085b4:	e17f      	b.n	80088b6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80085bc:	e17b      	b.n	80088b6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085c6:	f040 80bd 	bne.w	8008744 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80085ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	dc48      	bgt.n	8008664 <UART_SetConfig+0xa50>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	db7b      	blt.n	80086ce <UART_SetConfig+0xaba>
 80085d6:	2b20      	cmp	r3, #32
 80085d8:	d879      	bhi.n	80086ce <UART_SetConfig+0xaba>
 80085da:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <UART_SetConfig+0x9cc>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	0800866b 	.word	0x0800866b
 80085e4:	08008673 	.word	0x08008673
 80085e8:	080086cf 	.word	0x080086cf
 80085ec:	080086cf 	.word	0x080086cf
 80085f0:	0800867b 	.word	0x0800867b
 80085f4:	080086cf 	.word	0x080086cf
 80085f8:	080086cf 	.word	0x080086cf
 80085fc:	080086cf 	.word	0x080086cf
 8008600:	0800868b 	.word	0x0800868b
 8008604:	080086cf 	.word	0x080086cf
 8008608:	080086cf 	.word	0x080086cf
 800860c:	080086cf 	.word	0x080086cf
 8008610:	080086cf 	.word	0x080086cf
 8008614:	080086cf 	.word	0x080086cf
 8008618:	080086cf 	.word	0x080086cf
 800861c:	080086cf 	.word	0x080086cf
 8008620:	0800869b 	.word	0x0800869b
 8008624:	080086cf 	.word	0x080086cf
 8008628:	080086cf 	.word	0x080086cf
 800862c:	080086cf 	.word	0x080086cf
 8008630:	080086cf 	.word	0x080086cf
 8008634:	080086cf 	.word	0x080086cf
 8008638:	080086cf 	.word	0x080086cf
 800863c:	080086cf 	.word	0x080086cf
 8008640:	080086cf 	.word	0x080086cf
 8008644:	080086cf 	.word	0x080086cf
 8008648:	080086cf 	.word	0x080086cf
 800864c:	080086cf 	.word	0x080086cf
 8008650:	080086cf 	.word	0x080086cf
 8008654:	080086cf 	.word	0x080086cf
 8008658:	080086cf 	.word	0x080086cf
 800865c:	080086cf 	.word	0x080086cf
 8008660:	080086c1 	.word	0x080086c1
 8008664:	2b40      	cmp	r3, #64	; 0x40
 8008666:	d02e      	beq.n	80086c6 <UART_SetConfig+0xab2>
 8008668:	e031      	b.n	80086ce <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800866a:	f7fd fb6b 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 800866e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008670:	e033      	b.n	80086da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008672:	f7fd fb7d 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8008676:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008678:	e02f      	b.n	80086da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe faae 	bl	8006be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008688:	e027      	b.n	80086da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868a:	f107 0318 	add.w	r3, r7, #24
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fbfa 	bl	8006e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008698:	e01f      	b.n	80086da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800869a:	4b69      	ldr	r3, [pc, #420]	; (8008840 <UART_SetConfig+0xc2c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d009      	beq.n	80086ba <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086a6:	4b66      	ldr	r3, [pc, #408]	; (8008840 <UART_SetConfig+0xc2c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	08db      	lsrs	r3, r3, #3
 80086ac:	f003 0303 	and.w	r3, r3, #3
 80086b0:	4a64      	ldr	r2, [pc, #400]	; (8008844 <UART_SetConfig+0xc30>)
 80086b2:	fa22 f303 	lsr.w	r3, r2, r3
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086b8:	e00f      	b.n	80086da <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80086ba:	4b62      	ldr	r3, [pc, #392]	; (8008844 <UART_SetConfig+0xc30>)
 80086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086be:	e00c      	b.n	80086da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086c0:	4b61      	ldr	r3, [pc, #388]	; (8008848 <UART_SetConfig+0xc34>)
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086c4:	e009      	b.n	80086da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086cc:	e005      	b.n	80086da <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80086d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80ea 	beq.w	80088b6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	4a55      	ldr	r2, [pc, #340]	; (800883c <UART_SetConfig+0xc28>)
 80086e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f4:	005a      	lsls	r2, r3, #1
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	085b      	lsrs	r3, r3, #1
 80086fc:	441a      	add	r2, r3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	fbb2 f3f3 	udiv	r3, r2, r3
 8008706:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	2b0f      	cmp	r3, #15
 800870c:	d916      	bls.n	800873c <UART_SetConfig+0xb28>
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008714:	d212      	bcs.n	800873c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	b29b      	uxth	r3, r3
 800871a:	f023 030f 	bic.w	r3, r3, #15
 800871e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	b29b      	uxth	r3, r3
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	b29a      	uxth	r2, r3
 800872c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800872e:	4313      	orrs	r3, r2
 8008730:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	e0bc      	b.n	80088b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008742:	e0b8      	b.n	80088b6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008744:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008748:	2b20      	cmp	r3, #32
 800874a:	dc4b      	bgt.n	80087e4 <UART_SetConfig+0xbd0>
 800874c:	2b00      	cmp	r3, #0
 800874e:	f2c0 8087 	blt.w	8008860 <UART_SetConfig+0xc4c>
 8008752:	2b20      	cmp	r3, #32
 8008754:	f200 8084 	bhi.w	8008860 <UART_SetConfig+0xc4c>
 8008758:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <UART_SetConfig+0xb4c>)
 800875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875e:	bf00      	nop
 8008760:	080087eb 	.word	0x080087eb
 8008764:	080087f3 	.word	0x080087f3
 8008768:	08008861 	.word	0x08008861
 800876c:	08008861 	.word	0x08008861
 8008770:	080087fb 	.word	0x080087fb
 8008774:	08008861 	.word	0x08008861
 8008778:	08008861 	.word	0x08008861
 800877c:	08008861 	.word	0x08008861
 8008780:	0800880b 	.word	0x0800880b
 8008784:	08008861 	.word	0x08008861
 8008788:	08008861 	.word	0x08008861
 800878c:	08008861 	.word	0x08008861
 8008790:	08008861 	.word	0x08008861
 8008794:	08008861 	.word	0x08008861
 8008798:	08008861 	.word	0x08008861
 800879c:	08008861 	.word	0x08008861
 80087a0:	0800881b 	.word	0x0800881b
 80087a4:	08008861 	.word	0x08008861
 80087a8:	08008861 	.word	0x08008861
 80087ac:	08008861 	.word	0x08008861
 80087b0:	08008861 	.word	0x08008861
 80087b4:	08008861 	.word	0x08008861
 80087b8:	08008861 	.word	0x08008861
 80087bc:	08008861 	.word	0x08008861
 80087c0:	08008861 	.word	0x08008861
 80087c4:	08008861 	.word	0x08008861
 80087c8:	08008861 	.word	0x08008861
 80087cc:	08008861 	.word	0x08008861
 80087d0:	08008861 	.word	0x08008861
 80087d4:	08008861 	.word	0x08008861
 80087d8:	08008861 	.word	0x08008861
 80087dc:	08008861 	.word	0x08008861
 80087e0:	08008853 	.word	0x08008853
 80087e4:	2b40      	cmp	r3, #64	; 0x40
 80087e6:	d037      	beq.n	8008858 <UART_SetConfig+0xc44>
 80087e8:	e03a      	b.n	8008860 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087ea:	f7fd faab 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 80087ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087f0:	e03c      	b.n	800886c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087f2:	f7fd fabd 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 80087f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087f8:	e038      	b.n	800886c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe f9ee 	bl	8006be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008808:	e030      	b.n	800886c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800880a:	f107 0318 	add.w	r3, r7, #24
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe fb3a 	bl	8006e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008818:	e028      	b.n	800886c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800881a:	4b09      	ldr	r3, [pc, #36]	; (8008840 <UART_SetConfig+0xc2c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0320 	and.w	r3, r3, #32
 8008822:	2b00      	cmp	r3, #0
 8008824:	d012      	beq.n	800884c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008826:	4b06      	ldr	r3, [pc, #24]	; (8008840 <UART_SetConfig+0xc2c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	08db      	lsrs	r3, r3, #3
 800882c:	f003 0303 	and.w	r3, r3, #3
 8008830:	4a04      	ldr	r2, [pc, #16]	; (8008844 <UART_SetConfig+0xc30>)
 8008832:	fa22 f303 	lsr.w	r3, r2, r3
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008838:	e018      	b.n	800886c <UART_SetConfig+0xc58>
 800883a:	bf00      	nop
 800883c:	0800ba44 	.word	0x0800ba44
 8008840:	58024400 	.word	0x58024400
 8008844:	03d09000 	.word	0x03d09000
 8008848:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800884c:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <UART_SetConfig+0xccc>)
 800884e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008850:	e00c      	b.n	800886c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008852:	4b24      	ldr	r3, [pc, #144]	; (80088e4 <UART_SetConfig+0xcd0>)
 8008854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008856:	e009      	b.n	800886c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800885e:	e005      	b.n	800886c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800886a:	bf00      	nop
    }

    if (pclk != 0U)
 800886c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886e:	2b00      	cmp	r3, #0
 8008870:	d021      	beq.n	80088b6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	4a1c      	ldr	r2, [pc, #112]	; (80088e8 <UART_SetConfig+0xcd4>)
 8008878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800887c:	461a      	mov	r2, r3
 800887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008880:	fbb3 f2f2 	udiv	r2, r3, r2
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	085b      	lsrs	r3, r3, #1
 800888a:	441a      	add	r2, r3
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	fbb2 f3f3 	udiv	r3, r2, r3
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	2b0f      	cmp	r3, #15
 800889a:	d909      	bls.n	80088b0 <UART_SetConfig+0xc9c>
 800889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a2:	d205      	bcs.n	80088b0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60da      	str	r2, [r3, #12]
 80088ae:	e002      	b.n	80088b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2200      	movs	r2, #0
 80088d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088d2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3748      	adds	r7, #72	; 0x48
 80088da:	46bd      	mov	sp, r7
 80088dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088e0:	03d09000 	.word	0x03d09000
 80088e4:	003d0900 	.word	0x003d0900
 80088e8:	0800ba44 	.word	0x0800ba44

080088ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	f003 0310 	and.w	r3, r3, #16
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01a      	beq.n	8008a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ea:	d10a      	bne.n	8008a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	605a      	str	r2, [r3, #4]
  }
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a40:	f7f9 f896 	bl	8001b70 <HAL_GetTick>
 8008a44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d10e      	bne.n	8008a72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f82f 	bl	8008ac6 <UART_WaitOnFlagUntilTimeout>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e025      	b.n	8008abe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d10e      	bne.n	8008a9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f819 	bl	8008ac6 <UART_WaitOnFlagUntilTimeout>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e00f      	b.n	8008abe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b09c      	sub	sp, #112	; 0x70
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	603b      	str	r3, [r7, #0]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad6:	e0a9      	b.n	8008c2c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ade:	f000 80a5 	beq.w	8008c2c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae2:	f7f9 f845 	bl	8001b70 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d302      	bcc.n	8008af8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d140      	bne.n	8008b7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e6      	bne.n	8008af8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	f023 0301 	bic.w	r3, r3, #1
 8008b40:	663b      	str	r3, [r7, #96]	; 0x60
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e5      	bne.n	8008b2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e069      	b.n	8008c4e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d051      	beq.n	8008c2c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b96:	d149      	bne.n	8008c2c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ba0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bc8:	e841 2300 	strex	r3, r2, [r1]
 8008bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e6      	bne.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	613b      	str	r3, [r7, #16]
   return(result);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f023 0301 	bic.w	r3, r3, #1
 8008bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bf4:	623a      	str	r2, [r7, #32]
 8008bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	69f9      	ldr	r1, [r7, #28]
 8008bfa:	6a3a      	ldr	r2, [r7, #32]
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e5      	bne.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2220      	movs	r2, #32
 8008c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e010      	b.n	8008c4e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69da      	ldr	r2, [r3, #28]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	4013      	ands	r3, r2
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2301      	moveq	r3, #1
 8008c3e:	2300      	movne	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	461a      	mov	r2, r3
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	f43f af46 	beq.w	8008ad8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3770      	adds	r7, #112	; 0x70
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b095      	sub	sp, #84	; 0x54
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8008c80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e6      	bne.n	8008c60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	4b1e      	ldr	r3, [pc, #120]	; (8008d20 <UART_EndRxTransfer+0xc8>)
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e5      	bne.n	8008c92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d118      	bne.n	8008d00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f023 0310 	bic.w	r3, r3, #16
 8008ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cec:	61bb      	str	r3, [r7, #24]
 8008cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6979      	ldr	r1, [r7, #20]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e6      	bne.n	8008cce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008d14:	bf00      	nop
 8008d16:	3754      	adds	r7, #84	; 0x54
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	effffffe 	.word	0xeffffffe

08008d24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7fe ff50 	bl	8007be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	61bb      	str	r3, [r7, #24]
 8008d78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7a:	6979      	ldr	r1, [r7, #20]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	e841 2300 	strex	r3, r2, [r1]
 8008d82:	613b      	str	r3, [r7, #16]
   return(result);
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e6      	bne.n	8008d58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7fe ff1b 	bl	8007bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d9e:	bf00      	nop
 8008da0:	3720      	adds	r7, #32
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b085      	sub	sp, #20
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008df4:	2302      	movs	r3, #2
 8008df6:	e027      	b.n	8008e48 <HAL_UARTEx_DisableFifoMode+0x66>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2224      	movs	r2, #36	; 0x24
 8008e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0201 	bic.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e02d      	b.n	8008ec8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2224      	movs	r2, #36	; 0x24
 8008e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0201 	bic.w	r2, r2, #1
 8008e92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f84f 	bl	8008f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d101      	bne.n	8008ee8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	e02d      	b.n	8008f44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2224      	movs	r2, #36	; 0x24
 8008ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f811 	bl	8008f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2220      	movs	r2, #32
 8008f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d108      	bne.n	8008f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f6c:	e031      	b.n	8008fd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f6e:	2310      	movs	r3, #16
 8008f70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f72:	2310      	movs	r3, #16
 8008f74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	0e5b      	lsrs	r3, r3, #25
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f003 0307 	and.w	r3, r3, #7
 8008f84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	0f5b      	lsrs	r3, r3, #29
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	f003 0307 	and.w	r3, r3, #7
 8008f94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	7b3a      	ldrb	r2, [r7, #12]
 8008f9a:	4911      	ldr	r1, [pc, #68]	; (8008fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8008f9c:	5c8a      	ldrb	r2, [r1, r2]
 8008f9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fa2:	7b3a      	ldrb	r2, [r7, #12]
 8008fa4:	490f      	ldr	r1, [pc, #60]	; (8008fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8008fa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	7b7a      	ldrb	r2, [r7, #13]
 8008fb8:	4909      	ldr	r1, [pc, #36]	; (8008fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8008fba:	5c8a      	ldrb	r2, [r1, r2]
 8008fbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fc0:	7b7a      	ldrb	r2, [r7, #13]
 8008fc2:	4908      	ldr	r1, [pc, #32]	; (8008fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8008fc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008fd2:	bf00      	nop
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	0800ba5c 	.word	0x0800ba5c
 8008fe4:	0800ba64 	.word	0x0800ba64

08008fe8 <__assert_func>:
 8008fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fea:	4614      	mov	r4, r2
 8008fec:	461a      	mov	r2, r3
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <__assert_func+0x2c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	68d8      	ldr	r0, [r3, #12]
 8008ff6:	b14c      	cbz	r4, 800900c <__assert_func+0x24>
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <__assert_func+0x30>)
 8008ffa:	9100      	str	r1, [sp, #0]
 8008ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009000:	4906      	ldr	r1, [pc, #24]	; (800901c <__assert_func+0x34>)
 8009002:	462b      	mov	r3, r5
 8009004:	f000 f814 	bl	8009030 <fiprintf>
 8009008:	f000 feac 	bl	8009d64 <abort>
 800900c:	4b04      	ldr	r3, [pc, #16]	; (8009020 <__assert_func+0x38>)
 800900e:	461c      	mov	r4, r3
 8009010:	e7f3      	b.n	8008ffa <__assert_func+0x12>
 8009012:	bf00      	nop
 8009014:	24000010 	.word	0x24000010
 8009018:	0800ba6c 	.word	0x0800ba6c
 800901c:	0800ba79 	.word	0x0800ba79
 8009020:	0800baa7 	.word	0x0800baa7

08009024 <__errno>:
 8009024:	4b01      	ldr	r3, [pc, #4]	; (800902c <__errno+0x8>)
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	24000010 	.word	0x24000010

08009030 <fiprintf>:
 8009030:	b40e      	push	{r1, r2, r3}
 8009032:	b503      	push	{r0, r1, lr}
 8009034:	4601      	mov	r1, r0
 8009036:	ab03      	add	r3, sp, #12
 8009038:	4805      	ldr	r0, [pc, #20]	; (8009050 <fiprintf+0x20>)
 800903a:	f853 2b04 	ldr.w	r2, [r3], #4
 800903e:	6800      	ldr	r0, [r0, #0]
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	f000 f85d 	bl	8009100 <_vfiprintf_r>
 8009046:	b002      	add	sp, #8
 8009048:	f85d eb04 	ldr.w	lr, [sp], #4
 800904c:	b003      	add	sp, #12
 800904e:	4770      	bx	lr
 8009050:	24000010 	.word	0x24000010

08009054 <__libc_init_array>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4d0d      	ldr	r5, [pc, #52]	; (800908c <__libc_init_array+0x38>)
 8009058:	4c0d      	ldr	r4, [pc, #52]	; (8009090 <__libc_init_array+0x3c>)
 800905a:	1b64      	subs	r4, r4, r5
 800905c:	10a4      	asrs	r4, r4, #2
 800905e:	2600      	movs	r6, #0
 8009060:	42a6      	cmp	r6, r4
 8009062:	d109      	bne.n	8009078 <__libc_init_array+0x24>
 8009064:	4d0b      	ldr	r5, [pc, #44]	; (8009094 <__libc_init_array+0x40>)
 8009066:	4c0c      	ldr	r4, [pc, #48]	; (8009098 <__libc_init_array+0x44>)
 8009068:	f002 fc5c 	bl	800b924 <_init>
 800906c:	1b64      	subs	r4, r4, r5
 800906e:	10a4      	asrs	r4, r4, #2
 8009070:	2600      	movs	r6, #0
 8009072:	42a6      	cmp	r6, r4
 8009074:	d105      	bne.n	8009082 <__libc_init_array+0x2e>
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	f855 3b04 	ldr.w	r3, [r5], #4
 800907c:	4798      	blx	r3
 800907e:	3601      	adds	r6, #1
 8009080:	e7ee      	b.n	8009060 <__libc_init_array+0xc>
 8009082:	f855 3b04 	ldr.w	r3, [r5], #4
 8009086:	4798      	blx	r3
 8009088:	3601      	adds	r6, #1
 800908a:	e7f2      	b.n	8009072 <__libc_init_array+0x1e>
 800908c:	0800be50 	.word	0x0800be50
 8009090:	0800be50 	.word	0x0800be50
 8009094:	0800be50 	.word	0x0800be50
 8009098:	0800be54 	.word	0x0800be54

0800909c <memset>:
 800909c:	4402      	add	r2, r0
 800909e:	4603      	mov	r3, r0
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d100      	bne.n	80090a6 <memset+0xa>
 80090a4:	4770      	bx	lr
 80090a6:	f803 1b01 	strb.w	r1, [r3], #1
 80090aa:	e7f9      	b.n	80090a0 <memset+0x4>

080090ac <__sfputc_r>:
 80090ac:	6893      	ldr	r3, [r2, #8]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	b410      	push	{r4}
 80090b4:	6093      	str	r3, [r2, #8]
 80090b6:	da08      	bge.n	80090ca <__sfputc_r+0x1e>
 80090b8:	6994      	ldr	r4, [r2, #24]
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	db01      	blt.n	80090c2 <__sfputc_r+0x16>
 80090be:	290a      	cmp	r1, #10
 80090c0:	d103      	bne.n	80090ca <__sfputc_r+0x1e>
 80090c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090c6:	f000 bd8d 	b.w	8009be4 <__swbuf_r>
 80090ca:	6813      	ldr	r3, [r2, #0]
 80090cc:	1c58      	adds	r0, r3, #1
 80090ce:	6010      	str	r0, [r2, #0]
 80090d0:	7019      	strb	r1, [r3, #0]
 80090d2:	4608      	mov	r0, r1
 80090d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090d8:	4770      	bx	lr

080090da <__sfputs_r>:
 80090da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090dc:	4606      	mov	r6, r0
 80090de:	460f      	mov	r7, r1
 80090e0:	4614      	mov	r4, r2
 80090e2:	18d5      	adds	r5, r2, r3
 80090e4:	42ac      	cmp	r4, r5
 80090e6:	d101      	bne.n	80090ec <__sfputs_r+0x12>
 80090e8:	2000      	movs	r0, #0
 80090ea:	e007      	b.n	80090fc <__sfputs_r+0x22>
 80090ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f0:	463a      	mov	r2, r7
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7ff ffda 	bl	80090ac <__sfputc_r>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d1f3      	bne.n	80090e4 <__sfputs_r+0xa>
 80090fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009100 <_vfiprintf_r>:
 8009100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	460d      	mov	r5, r1
 8009106:	b09d      	sub	sp, #116	; 0x74
 8009108:	4614      	mov	r4, r2
 800910a:	4698      	mov	r8, r3
 800910c:	4606      	mov	r6, r0
 800910e:	b118      	cbz	r0, 8009118 <_vfiprintf_r+0x18>
 8009110:	6983      	ldr	r3, [r0, #24]
 8009112:	b90b      	cbnz	r3, 8009118 <_vfiprintf_r+0x18>
 8009114:	f001 fd40 	bl	800ab98 <__sinit>
 8009118:	4b89      	ldr	r3, [pc, #548]	; (8009340 <_vfiprintf_r+0x240>)
 800911a:	429d      	cmp	r5, r3
 800911c:	d11b      	bne.n	8009156 <_vfiprintf_r+0x56>
 800911e:	6875      	ldr	r5, [r6, #4]
 8009120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009122:	07d9      	lsls	r1, r3, #31
 8009124:	d405      	bmi.n	8009132 <_vfiprintf_r+0x32>
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	059a      	lsls	r2, r3, #22
 800912a:	d402      	bmi.n	8009132 <_vfiprintf_r+0x32>
 800912c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800912e:	f001 fdd6 	bl	800acde <__retarget_lock_acquire_recursive>
 8009132:	89ab      	ldrh	r3, [r5, #12]
 8009134:	071b      	lsls	r3, r3, #28
 8009136:	d501      	bpl.n	800913c <_vfiprintf_r+0x3c>
 8009138:	692b      	ldr	r3, [r5, #16]
 800913a:	b9eb      	cbnz	r3, 8009178 <_vfiprintf_r+0x78>
 800913c:	4629      	mov	r1, r5
 800913e:	4630      	mov	r0, r6
 8009140:	f000 fda2 	bl	8009c88 <__swsetup_r>
 8009144:	b1c0      	cbz	r0, 8009178 <_vfiprintf_r+0x78>
 8009146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009148:	07dc      	lsls	r4, r3, #31
 800914a:	d50e      	bpl.n	800916a <_vfiprintf_r+0x6a>
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	b01d      	add	sp, #116	; 0x74
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	4b7b      	ldr	r3, [pc, #492]	; (8009344 <_vfiprintf_r+0x244>)
 8009158:	429d      	cmp	r5, r3
 800915a:	d101      	bne.n	8009160 <_vfiprintf_r+0x60>
 800915c:	68b5      	ldr	r5, [r6, #8]
 800915e:	e7df      	b.n	8009120 <_vfiprintf_r+0x20>
 8009160:	4b79      	ldr	r3, [pc, #484]	; (8009348 <_vfiprintf_r+0x248>)
 8009162:	429d      	cmp	r5, r3
 8009164:	bf08      	it	eq
 8009166:	68f5      	ldreq	r5, [r6, #12]
 8009168:	e7da      	b.n	8009120 <_vfiprintf_r+0x20>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	0598      	lsls	r0, r3, #22
 800916e:	d4ed      	bmi.n	800914c <_vfiprintf_r+0x4c>
 8009170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009172:	f001 fdb5 	bl	800ace0 <__retarget_lock_release_recursive>
 8009176:	e7e9      	b.n	800914c <_vfiprintf_r+0x4c>
 8009178:	2300      	movs	r3, #0
 800917a:	9309      	str	r3, [sp, #36]	; 0x24
 800917c:	2320      	movs	r3, #32
 800917e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009182:	f8cd 800c 	str.w	r8, [sp, #12]
 8009186:	2330      	movs	r3, #48	; 0x30
 8009188:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800934c <_vfiprintf_r+0x24c>
 800918c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009190:	f04f 0901 	mov.w	r9, #1
 8009194:	4623      	mov	r3, r4
 8009196:	469a      	mov	sl, r3
 8009198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800919c:	b10a      	cbz	r2, 80091a2 <_vfiprintf_r+0xa2>
 800919e:	2a25      	cmp	r2, #37	; 0x25
 80091a0:	d1f9      	bne.n	8009196 <_vfiprintf_r+0x96>
 80091a2:	ebba 0b04 	subs.w	fp, sl, r4
 80091a6:	d00b      	beq.n	80091c0 <_vfiprintf_r+0xc0>
 80091a8:	465b      	mov	r3, fp
 80091aa:	4622      	mov	r2, r4
 80091ac:	4629      	mov	r1, r5
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7ff ff93 	bl	80090da <__sfputs_r>
 80091b4:	3001      	adds	r0, #1
 80091b6:	f000 80aa 	beq.w	800930e <_vfiprintf_r+0x20e>
 80091ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091bc:	445a      	add	r2, fp
 80091be:	9209      	str	r2, [sp, #36]	; 0x24
 80091c0:	f89a 3000 	ldrb.w	r3, [sl]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80a2 	beq.w	800930e <_vfiprintf_r+0x20e>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295
 80091d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d4:	f10a 0a01 	add.w	sl, sl, #1
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	9307      	str	r3, [sp, #28]
 80091dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091e0:	931a      	str	r3, [sp, #104]	; 0x68
 80091e2:	4654      	mov	r4, sl
 80091e4:	2205      	movs	r2, #5
 80091e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ea:	4858      	ldr	r0, [pc, #352]	; (800934c <_vfiprintf_r+0x24c>)
 80091ec:	f7f7 f888 	bl	8000300 <memchr>
 80091f0:	9a04      	ldr	r2, [sp, #16]
 80091f2:	b9d8      	cbnz	r0, 800922c <_vfiprintf_r+0x12c>
 80091f4:	06d1      	lsls	r1, r2, #27
 80091f6:	bf44      	itt	mi
 80091f8:	2320      	movmi	r3, #32
 80091fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091fe:	0713      	lsls	r3, r2, #28
 8009200:	bf44      	itt	mi
 8009202:	232b      	movmi	r3, #43	; 0x2b
 8009204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009208:	f89a 3000 	ldrb.w	r3, [sl]
 800920c:	2b2a      	cmp	r3, #42	; 0x2a
 800920e:	d015      	beq.n	800923c <_vfiprintf_r+0x13c>
 8009210:	9a07      	ldr	r2, [sp, #28]
 8009212:	4654      	mov	r4, sl
 8009214:	2000      	movs	r0, #0
 8009216:	f04f 0c0a 	mov.w	ip, #10
 800921a:	4621      	mov	r1, r4
 800921c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009220:	3b30      	subs	r3, #48	; 0x30
 8009222:	2b09      	cmp	r3, #9
 8009224:	d94e      	bls.n	80092c4 <_vfiprintf_r+0x1c4>
 8009226:	b1b0      	cbz	r0, 8009256 <_vfiprintf_r+0x156>
 8009228:	9207      	str	r2, [sp, #28]
 800922a:	e014      	b.n	8009256 <_vfiprintf_r+0x156>
 800922c:	eba0 0308 	sub.w	r3, r0, r8
 8009230:	fa09 f303 	lsl.w	r3, r9, r3
 8009234:	4313      	orrs	r3, r2
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	46a2      	mov	sl, r4
 800923a:	e7d2      	b.n	80091e2 <_vfiprintf_r+0xe2>
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	1d19      	adds	r1, r3, #4
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	9103      	str	r1, [sp, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	bfbb      	ittet	lt
 8009248:	425b      	neglt	r3, r3
 800924a:	f042 0202 	orrlt.w	r2, r2, #2
 800924e:	9307      	strge	r3, [sp, #28]
 8009250:	9307      	strlt	r3, [sp, #28]
 8009252:	bfb8      	it	lt
 8009254:	9204      	strlt	r2, [sp, #16]
 8009256:	7823      	ldrb	r3, [r4, #0]
 8009258:	2b2e      	cmp	r3, #46	; 0x2e
 800925a:	d10c      	bne.n	8009276 <_vfiprintf_r+0x176>
 800925c:	7863      	ldrb	r3, [r4, #1]
 800925e:	2b2a      	cmp	r3, #42	; 0x2a
 8009260:	d135      	bne.n	80092ce <_vfiprintf_r+0x1ce>
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	1d1a      	adds	r2, r3, #4
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	9203      	str	r2, [sp, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	bfb8      	it	lt
 800926e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009272:	3402      	adds	r4, #2
 8009274:	9305      	str	r3, [sp, #20]
 8009276:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800935c <_vfiprintf_r+0x25c>
 800927a:	7821      	ldrb	r1, [r4, #0]
 800927c:	2203      	movs	r2, #3
 800927e:	4650      	mov	r0, sl
 8009280:	f7f7 f83e 	bl	8000300 <memchr>
 8009284:	b140      	cbz	r0, 8009298 <_vfiprintf_r+0x198>
 8009286:	2340      	movs	r3, #64	; 0x40
 8009288:	eba0 000a 	sub.w	r0, r0, sl
 800928c:	fa03 f000 	lsl.w	r0, r3, r0
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	4303      	orrs	r3, r0
 8009294:	3401      	adds	r4, #1
 8009296:	9304      	str	r3, [sp, #16]
 8009298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929c:	482c      	ldr	r0, [pc, #176]	; (8009350 <_vfiprintf_r+0x250>)
 800929e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092a2:	2206      	movs	r2, #6
 80092a4:	f7f7 f82c 	bl	8000300 <memchr>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d03f      	beq.n	800932c <_vfiprintf_r+0x22c>
 80092ac:	4b29      	ldr	r3, [pc, #164]	; (8009354 <_vfiprintf_r+0x254>)
 80092ae:	bb1b      	cbnz	r3, 80092f8 <_vfiprintf_r+0x1f8>
 80092b0:	9b03      	ldr	r3, [sp, #12]
 80092b2:	3307      	adds	r3, #7
 80092b4:	f023 0307 	bic.w	r3, r3, #7
 80092b8:	3308      	adds	r3, #8
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092be:	443b      	add	r3, r7
 80092c0:	9309      	str	r3, [sp, #36]	; 0x24
 80092c2:	e767      	b.n	8009194 <_vfiprintf_r+0x94>
 80092c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c8:	460c      	mov	r4, r1
 80092ca:	2001      	movs	r0, #1
 80092cc:	e7a5      	b.n	800921a <_vfiprintf_r+0x11a>
 80092ce:	2300      	movs	r3, #0
 80092d0:	3401      	adds	r4, #1
 80092d2:	9305      	str	r3, [sp, #20]
 80092d4:	4619      	mov	r1, r3
 80092d6:	f04f 0c0a 	mov.w	ip, #10
 80092da:	4620      	mov	r0, r4
 80092dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e0:	3a30      	subs	r2, #48	; 0x30
 80092e2:	2a09      	cmp	r2, #9
 80092e4:	d903      	bls.n	80092ee <_vfiprintf_r+0x1ee>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0c5      	beq.n	8009276 <_vfiprintf_r+0x176>
 80092ea:	9105      	str	r1, [sp, #20]
 80092ec:	e7c3      	b.n	8009276 <_vfiprintf_r+0x176>
 80092ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80092f2:	4604      	mov	r4, r0
 80092f4:	2301      	movs	r3, #1
 80092f6:	e7f0      	b.n	80092da <_vfiprintf_r+0x1da>
 80092f8:	ab03      	add	r3, sp, #12
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	462a      	mov	r2, r5
 80092fe:	4b16      	ldr	r3, [pc, #88]	; (8009358 <_vfiprintf_r+0x258>)
 8009300:	a904      	add	r1, sp, #16
 8009302:	4630      	mov	r0, r6
 8009304:	f000 f8bc 	bl	8009480 <_printf_float>
 8009308:	4607      	mov	r7, r0
 800930a:	1c78      	adds	r0, r7, #1
 800930c:	d1d6      	bne.n	80092bc <_vfiprintf_r+0x1bc>
 800930e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009310:	07d9      	lsls	r1, r3, #31
 8009312:	d405      	bmi.n	8009320 <_vfiprintf_r+0x220>
 8009314:	89ab      	ldrh	r3, [r5, #12]
 8009316:	059a      	lsls	r2, r3, #22
 8009318:	d402      	bmi.n	8009320 <_vfiprintf_r+0x220>
 800931a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800931c:	f001 fce0 	bl	800ace0 <__retarget_lock_release_recursive>
 8009320:	89ab      	ldrh	r3, [r5, #12]
 8009322:	065b      	lsls	r3, r3, #25
 8009324:	f53f af12 	bmi.w	800914c <_vfiprintf_r+0x4c>
 8009328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800932a:	e711      	b.n	8009150 <_vfiprintf_r+0x50>
 800932c:	ab03      	add	r3, sp, #12
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	462a      	mov	r2, r5
 8009332:	4b09      	ldr	r3, [pc, #36]	; (8009358 <_vfiprintf_r+0x258>)
 8009334:	a904      	add	r1, sp, #16
 8009336:	4630      	mov	r0, r6
 8009338:	f000 fb2e 	bl	8009998 <_printf_i>
 800933c:	e7e4      	b.n	8009308 <_vfiprintf_r+0x208>
 800933e:	bf00      	nop
 8009340:	0800bba4 	.word	0x0800bba4
 8009344:	0800bbc4 	.word	0x0800bbc4
 8009348:	0800bb84 	.word	0x0800bb84
 800934c:	0800baac 	.word	0x0800baac
 8009350:	0800bab6 	.word	0x0800bab6
 8009354:	08009481 	.word	0x08009481
 8009358:	080090db 	.word	0x080090db
 800935c:	0800bab2 	.word	0x0800bab2

08009360 <__cvt>:
 8009360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009362:	ed2d 8b02 	vpush	{d8}
 8009366:	eeb0 8b40 	vmov.f64	d8, d0
 800936a:	b085      	sub	sp, #20
 800936c:	4617      	mov	r7, r2
 800936e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009370:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009372:	ee18 2a90 	vmov	r2, s17
 8009376:	f025 0520 	bic.w	r5, r5, #32
 800937a:	2a00      	cmp	r2, #0
 800937c:	bfb6      	itet	lt
 800937e:	222d      	movlt	r2, #45	; 0x2d
 8009380:	2200      	movge	r2, #0
 8009382:	eeb1 8b40 	vneglt.f64	d8, d0
 8009386:	2d46      	cmp	r5, #70	; 0x46
 8009388:	460c      	mov	r4, r1
 800938a:	701a      	strb	r2, [r3, #0]
 800938c:	d004      	beq.n	8009398 <__cvt+0x38>
 800938e:	2d45      	cmp	r5, #69	; 0x45
 8009390:	d100      	bne.n	8009394 <__cvt+0x34>
 8009392:	3401      	adds	r4, #1
 8009394:	2102      	movs	r1, #2
 8009396:	e000      	b.n	800939a <__cvt+0x3a>
 8009398:	2103      	movs	r1, #3
 800939a:	ab03      	add	r3, sp, #12
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	ab02      	add	r3, sp, #8
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	4622      	mov	r2, r4
 80093a4:	4633      	mov	r3, r6
 80093a6:	eeb0 0b48 	vmov.f64	d0, d8
 80093aa:	f000 fd6d 	bl	8009e88 <_dtoa_r>
 80093ae:	2d47      	cmp	r5, #71	; 0x47
 80093b0:	d101      	bne.n	80093b6 <__cvt+0x56>
 80093b2:	07fb      	lsls	r3, r7, #31
 80093b4:	d51a      	bpl.n	80093ec <__cvt+0x8c>
 80093b6:	2d46      	cmp	r5, #70	; 0x46
 80093b8:	eb00 0204 	add.w	r2, r0, r4
 80093bc:	d10c      	bne.n	80093d8 <__cvt+0x78>
 80093be:	7803      	ldrb	r3, [r0, #0]
 80093c0:	2b30      	cmp	r3, #48	; 0x30
 80093c2:	d107      	bne.n	80093d4 <__cvt+0x74>
 80093c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093cc:	bf1c      	itt	ne
 80093ce:	f1c4 0401 	rsbne	r4, r4, #1
 80093d2:	6034      	strne	r4, [r6, #0]
 80093d4:	6833      	ldr	r3, [r6, #0]
 80093d6:	441a      	add	r2, r3
 80093d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e0:	bf08      	it	eq
 80093e2:	9203      	streq	r2, [sp, #12]
 80093e4:	2130      	movs	r1, #48	; 0x30
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d307      	bcc.n	80093fc <__cvt+0x9c>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f0:	1a1b      	subs	r3, r3, r0
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	b005      	add	sp, #20
 80093f6:	ecbd 8b02 	vpop	{d8}
 80093fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093fc:	1c5c      	adds	r4, r3, #1
 80093fe:	9403      	str	r4, [sp, #12]
 8009400:	7019      	strb	r1, [r3, #0]
 8009402:	e7f0      	b.n	80093e6 <__cvt+0x86>

08009404 <__exponent>:
 8009404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009406:	4603      	mov	r3, r0
 8009408:	2900      	cmp	r1, #0
 800940a:	bfb8      	it	lt
 800940c:	4249      	neglt	r1, r1
 800940e:	f803 2b02 	strb.w	r2, [r3], #2
 8009412:	bfb4      	ite	lt
 8009414:	222d      	movlt	r2, #45	; 0x2d
 8009416:	222b      	movge	r2, #43	; 0x2b
 8009418:	2909      	cmp	r1, #9
 800941a:	7042      	strb	r2, [r0, #1]
 800941c:	dd2a      	ble.n	8009474 <__exponent+0x70>
 800941e:	f10d 0407 	add.w	r4, sp, #7
 8009422:	46a4      	mov	ip, r4
 8009424:	270a      	movs	r7, #10
 8009426:	46a6      	mov	lr, r4
 8009428:	460a      	mov	r2, r1
 800942a:	fb91 f6f7 	sdiv	r6, r1, r7
 800942e:	fb07 1516 	mls	r5, r7, r6, r1
 8009432:	3530      	adds	r5, #48	; 0x30
 8009434:	2a63      	cmp	r2, #99	; 0x63
 8009436:	f104 34ff 	add.w	r4, r4, #4294967295
 800943a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800943e:	4631      	mov	r1, r6
 8009440:	dcf1      	bgt.n	8009426 <__exponent+0x22>
 8009442:	3130      	adds	r1, #48	; 0x30
 8009444:	f1ae 0502 	sub.w	r5, lr, #2
 8009448:	f804 1c01 	strb.w	r1, [r4, #-1]
 800944c:	1c44      	adds	r4, r0, #1
 800944e:	4629      	mov	r1, r5
 8009450:	4561      	cmp	r1, ip
 8009452:	d30a      	bcc.n	800946a <__exponent+0x66>
 8009454:	f10d 0209 	add.w	r2, sp, #9
 8009458:	eba2 020e 	sub.w	r2, r2, lr
 800945c:	4565      	cmp	r5, ip
 800945e:	bf88      	it	hi
 8009460:	2200      	movhi	r2, #0
 8009462:	4413      	add	r3, r2
 8009464:	1a18      	subs	r0, r3, r0
 8009466:	b003      	add	sp, #12
 8009468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800946a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800946e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009472:	e7ed      	b.n	8009450 <__exponent+0x4c>
 8009474:	2330      	movs	r3, #48	; 0x30
 8009476:	3130      	adds	r1, #48	; 0x30
 8009478:	7083      	strb	r3, [r0, #2]
 800947a:	70c1      	strb	r1, [r0, #3]
 800947c:	1d03      	adds	r3, r0, #4
 800947e:	e7f1      	b.n	8009464 <__exponent+0x60>

08009480 <_printf_float>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	b08b      	sub	sp, #44	; 0x2c
 8009486:	460c      	mov	r4, r1
 8009488:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800948c:	4616      	mov	r6, r2
 800948e:	461f      	mov	r7, r3
 8009490:	4605      	mov	r5, r0
 8009492:	f001 fc1f 	bl	800acd4 <_localeconv_r>
 8009496:	f8d0 b000 	ldr.w	fp, [r0]
 800949a:	4658      	mov	r0, fp
 800949c:	f7f6 ff28 	bl	80002f0 <strlen>
 80094a0:	2300      	movs	r3, #0
 80094a2:	9308      	str	r3, [sp, #32]
 80094a4:	f8d8 3000 	ldr.w	r3, [r8]
 80094a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80094ac:	6822      	ldr	r2, [r4, #0]
 80094ae:	3307      	adds	r3, #7
 80094b0:	f023 0307 	bic.w	r3, r3, #7
 80094b4:	f103 0108 	add.w	r1, r3, #8
 80094b8:	f8c8 1000 	str.w	r1, [r8]
 80094bc:	4682      	mov	sl, r0
 80094be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80094c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009728 <_printf_float+0x2a8>
 80094ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80094ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80094d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80094d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094da:	dd24      	ble.n	8009526 <_printf_float+0xa6>
 80094dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80094e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e4:	d502      	bpl.n	80094ec <_printf_float+0x6c>
 80094e6:	232d      	movs	r3, #45	; 0x2d
 80094e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ec:	4b90      	ldr	r3, [pc, #576]	; (8009730 <_printf_float+0x2b0>)
 80094ee:	4891      	ldr	r0, [pc, #580]	; (8009734 <_printf_float+0x2b4>)
 80094f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80094f4:	bf94      	ite	ls
 80094f6:	4698      	movls	r8, r3
 80094f8:	4680      	movhi	r8, r0
 80094fa:	2303      	movs	r3, #3
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	f022 0204 	bic.w	r2, r2, #4
 8009502:	2300      	movs	r3, #0
 8009504:	6022      	str	r2, [r4, #0]
 8009506:	9304      	str	r3, [sp, #16]
 8009508:	9700      	str	r7, [sp, #0]
 800950a:	4633      	mov	r3, r6
 800950c:	aa09      	add	r2, sp, #36	; 0x24
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 f9d3 	bl	80098bc <_printf_common>
 8009516:	3001      	adds	r0, #1
 8009518:	f040 808a 	bne.w	8009630 <_printf_float+0x1b0>
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	b00b      	add	sp, #44	; 0x2c
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	eeb4 0b40 	vcmp.f64	d0, d0
 800952a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952e:	d709      	bvc.n	8009544 <_printf_float+0xc4>
 8009530:	ee10 3a90 	vmov	r3, s1
 8009534:	2b00      	cmp	r3, #0
 8009536:	bfbc      	itt	lt
 8009538:	232d      	movlt	r3, #45	; 0x2d
 800953a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800953e:	487e      	ldr	r0, [pc, #504]	; (8009738 <_printf_float+0x2b8>)
 8009540:	4b7e      	ldr	r3, [pc, #504]	; (800973c <_printf_float+0x2bc>)
 8009542:	e7d5      	b.n	80094f0 <_printf_float+0x70>
 8009544:	6863      	ldr	r3, [r4, #4]
 8009546:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800954a:	9104      	str	r1, [sp, #16]
 800954c:	1c59      	adds	r1, r3, #1
 800954e:	d13c      	bne.n	80095ca <_printf_float+0x14a>
 8009550:	2306      	movs	r3, #6
 8009552:	6063      	str	r3, [r4, #4]
 8009554:	2300      	movs	r3, #0
 8009556:	9303      	str	r3, [sp, #12]
 8009558:	ab08      	add	r3, sp, #32
 800955a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800955e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009562:	ab07      	add	r3, sp, #28
 8009564:	6861      	ldr	r1, [r4, #4]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	f10d 031b 	add.w	r3, sp, #27
 800956e:	4628      	mov	r0, r5
 8009570:	f7ff fef6 	bl	8009360 <__cvt>
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	9907      	ldr	r1, [sp, #28]
 8009578:	2b47      	cmp	r3, #71	; 0x47
 800957a:	4680      	mov	r8, r0
 800957c:	d108      	bne.n	8009590 <_printf_float+0x110>
 800957e:	1cc8      	adds	r0, r1, #3
 8009580:	db02      	blt.n	8009588 <_printf_float+0x108>
 8009582:	6863      	ldr	r3, [r4, #4]
 8009584:	4299      	cmp	r1, r3
 8009586:	dd41      	ble.n	800960c <_printf_float+0x18c>
 8009588:	f1a9 0902 	sub.w	r9, r9, #2
 800958c:	fa5f f989 	uxtb.w	r9, r9
 8009590:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009594:	d820      	bhi.n	80095d8 <_printf_float+0x158>
 8009596:	3901      	subs	r1, #1
 8009598:	464a      	mov	r2, r9
 800959a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800959e:	9107      	str	r1, [sp, #28]
 80095a0:	f7ff ff30 	bl	8009404 <__exponent>
 80095a4:	9a08      	ldr	r2, [sp, #32]
 80095a6:	9004      	str	r0, [sp, #16]
 80095a8:	1813      	adds	r3, r2, r0
 80095aa:	2a01      	cmp	r2, #1
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	dc02      	bgt.n	80095b6 <_printf_float+0x136>
 80095b0:	6822      	ldr	r2, [r4, #0]
 80095b2:	07d2      	lsls	r2, r2, #31
 80095b4:	d501      	bpl.n	80095ba <_printf_float+0x13a>
 80095b6:	3301      	adds	r3, #1
 80095b8:	6123      	str	r3, [r4, #16]
 80095ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0a2      	beq.n	8009508 <_printf_float+0x88>
 80095c2:	232d      	movs	r3, #45	; 0x2d
 80095c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c8:	e79e      	b.n	8009508 <_printf_float+0x88>
 80095ca:	9904      	ldr	r1, [sp, #16]
 80095cc:	2947      	cmp	r1, #71	; 0x47
 80095ce:	d1c1      	bne.n	8009554 <_printf_float+0xd4>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1bf      	bne.n	8009554 <_printf_float+0xd4>
 80095d4:	2301      	movs	r3, #1
 80095d6:	e7bc      	b.n	8009552 <_printf_float+0xd2>
 80095d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80095dc:	d118      	bne.n	8009610 <_printf_float+0x190>
 80095de:	2900      	cmp	r1, #0
 80095e0:	6863      	ldr	r3, [r4, #4]
 80095e2:	dd0b      	ble.n	80095fc <_printf_float+0x17c>
 80095e4:	6121      	str	r1, [r4, #16]
 80095e6:	b913      	cbnz	r3, 80095ee <_printf_float+0x16e>
 80095e8:	6822      	ldr	r2, [r4, #0]
 80095ea:	07d0      	lsls	r0, r2, #31
 80095ec:	d502      	bpl.n	80095f4 <_printf_float+0x174>
 80095ee:	3301      	adds	r3, #1
 80095f0:	440b      	add	r3, r1
 80095f2:	6123      	str	r3, [r4, #16]
 80095f4:	2300      	movs	r3, #0
 80095f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	e7de      	b.n	80095ba <_printf_float+0x13a>
 80095fc:	b913      	cbnz	r3, 8009604 <_printf_float+0x184>
 80095fe:	6822      	ldr	r2, [r4, #0]
 8009600:	07d2      	lsls	r2, r2, #31
 8009602:	d501      	bpl.n	8009608 <_printf_float+0x188>
 8009604:	3302      	adds	r3, #2
 8009606:	e7f4      	b.n	80095f2 <_printf_float+0x172>
 8009608:	2301      	movs	r3, #1
 800960a:	e7f2      	b.n	80095f2 <_printf_float+0x172>
 800960c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009610:	9b08      	ldr	r3, [sp, #32]
 8009612:	4299      	cmp	r1, r3
 8009614:	db05      	blt.n	8009622 <_printf_float+0x1a2>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	6121      	str	r1, [r4, #16]
 800961a:	07d8      	lsls	r0, r3, #31
 800961c:	d5ea      	bpl.n	80095f4 <_printf_float+0x174>
 800961e:	1c4b      	adds	r3, r1, #1
 8009620:	e7e7      	b.n	80095f2 <_printf_float+0x172>
 8009622:	2900      	cmp	r1, #0
 8009624:	bfd4      	ite	le
 8009626:	f1c1 0202 	rsble	r2, r1, #2
 800962a:	2201      	movgt	r2, #1
 800962c:	4413      	add	r3, r2
 800962e:	e7e0      	b.n	80095f2 <_printf_float+0x172>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	055a      	lsls	r2, r3, #21
 8009634:	d407      	bmi.n	8009646 <_printf_float+0x1c6>
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	4642      	mov	r2, r8
 800963a:	4631      	mov	r1, r6
 800963c:	4628      	mov	r0, r5
 800963e:	47b8      	blx	r7
 8009640:	3001      	adds	r0, #1
 8009642:	d12a      	bne.n	800969a <_printf_float+0x21a>
 8009644:	e76a      	b.n	800951c <_printf_float+0x9c>
 8009646:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800964a:	f240 80e2 	bls.w	8009812 <_printf_float+0x392>
 800964e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009652:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800965a:	d133      	bne.n	80096c4 <_printf_float+0x244>
 800965c:	4a38      	ldr	r2, [pc, #224]	; (8009740 <_printf_float+0x2c0>)
 800965e:	2301      	movs	r3, #1
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f af58 	beq.w	800951c <_printf_float+0x9c>
 800966c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009670:	429a      	cmp	r2, r3
 8009672:	db02      	blt.n	800967a <_printf_float+0x1fa>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	07d8      	lsls	r0, r3, #31
 8009678:	d50f      	bpl.n	800969a <_printf_float+0x21a>
 800967a:	4653      	mov	r3, sl
 800967c:	465a      	mov	r2, fp
 800967e:	4631      	mov	r1, r6
 8009680:	4628      	mov	r0, r5
 8009682:	47b8      	blx	r7
 8009684:	3001      	adds	r0, #1
 8009686:	f43f af49 	beq.w	800951c <_printf_float+0x9c>
 800968a:	f04f 0800 	mov.w	r8, #0
 800968e:	f104 091a 	add.w	r9, r4, #26
 8009692:	9b08      	ldr	r3, [sp, #32]
 8009694:	3b01      	subs	r3, #1
 8009696:	4543      	cmp	r3, r8
 8009698:	dc09      	bgt.n	80096ae <_printf_float+0x22e>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	079b      	lsls	r3, r3, #30
 800969e:	f100 8108 	bmi.w	80098b2 <_printf_float+0x432>
 80096a2:	68e0      	ldr	r0, [r4, #12]
 80096a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a6:	4298      	cmp	r0, r3
 80096a8:	bfb8      	it	lt
 80096aa:	4618      	movlt	r0, r3
 80096ac:	e738      	b.n	8009520 <_printf_float+0xa0>
 80096ae:	2301      	movs	r3, #1
 80096b0:	464a      	mov	r2, r9
 80096b2:	4631      	mov	r1, r6
 80096b4:	4628      	mov	r0, r5
 80096b6:	47b8      	blx	r7
 80096b8:	3001      	adds	r0, #1
 80096ba:	f43f af2f 	beq.w	800951c <_printf_float+0x9c>
 80096be:	f108 0801 	add.w	r8, r8, #1
 80096c2:	e7e6      	b.n	8009692 <_printf_float+0x212>
 80096c4:	9b07      	ldr	r3, [sp, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	dc3c      	bgt.n	8009744 <_printf_float+0x2c4>
 80096ca:	4a1d      	ldr	r2, [pc, #116]	; (8009740 <_printf_float+0x2c0>)
 80096cc:	2301      	movs	r3, #1
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	f43f af21 	beq.w	800951c <_printf_float+0x9c>
 80096da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80096de:	4313      	orrs	r3, r2
 80096e0:	d102      	bne.n	80096e8 <_printf_float+0x268>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	07d9      	lsls	r1, r3, #31
 80096e6:	d5d8      	bpl.n	800969a <_printf_float+0x21a>
 80096e8:	4653      	mov	r3, sl
 80096ea:	465a      	mov	r2, fp
 80096ec:	4631      	mov	r1, r6
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b8      	blx	r7
 80096f2:	3001      	adds	r0, #1
 80096f4:	f43f af12 	beq.w	800951c <_printf_float+0x9c>
 80096f8:	f04f 0900 	mov.w	r9, #0
 80096fc:	f104 0a1a 	add.w	sl, r4, #26
 8009700:	9b07      	ldr	r3, [sp, #28]
 8009702:	425b      	negs	r3, r3
 8009704:	454b      	cmp	r3, r9
 8009706:	dc01      	bgt.n	800970c <_printf_float+0x28c>
 8009708:	9b08      	ldr	r3, [sp, #32]
 800970a:	e795      	b.n	8009638 <_printf_float+0x1b8>
 800970c:	2301      	movs	r3, #1
 800970e:	4652      	mov	r2, sl
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f af00 	beq.w	800951c <_printf_float+0x9c>
 800971c:	f109 0901 	add.w	r9, r9, #1
 8009720:	e7ee      	b.n	8009700 <_printf_float+0x280>
 8009722:	bf00      	nop
 8009724:	f3af 8000 	nop.w
 8009728:	ffffffff 	.word	0xffffffff
 800972c:	7fefffff 	.word	0x7fefffff
 8009730:	0800babd 	.word	0x0800babd
 8009734:	0800bac1 	.word	0x0800bac1
 8009738:	0800bac9 	.word	0x0800bac9
 800973c:	0800bac5 	.word	0x0800bac5
 8009740:	0800bacd 	.word	0x0800bacd
 8009744:	9a08      	ldr	r2, [sp, #32]
 8009746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009748:	429a      	cmp	r2, r3
 800974a:	bfa8      	it	ge
 800974c:	461a      	movge	r2, r3
 800974e:	2a00      	cmp	r2, #0
 8009750:	4691      	mov	r9, r2
 8009752:	dc38      	bgt.n	80097c6 <_printf_float+0x346>
 8009754:	2300      	movs	r3, #0
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800975c:	f104 021a 	add.w	r2, r4, #26
 8009760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009762:	9905      	ldr	r1, [sp, #20]
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	eba3 0309 	sub.w	r3, r3, r9
 800976a:	428b      	cmp	r3, r1
 800976c:	dc33      	bgt.n	80097d6 <_printf_float+0x356>
 800976e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009772:	429a      	cmp	r2, r3
 8009774:	db3c      	blt.n	80097f0 <_printf_float+0x370>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	07da      	lsls	r2, r3, #31
 800977a:	d439      	bmi.n	80097f0 <_printf_float+0x370>
 800977c:	9b08      	ldr	r3, [sp, #32]
 800977e:	9a04      	ldr	r2, [sp, #16]
 8009780:	9907      	ldr	r1, [sp, #28]
 8009782:	1a9a      	subs	r2, r3, r2
 8009784:	eba3 0901 	sub.w	r9, r3, r1
 8009788:	4591      	cmp	r9, r2
 800978a:	bfa8      	it	ge
 800978c:	4691      	movge	r9, r2
 800978e:	f1b9 0f00 	cmp.w	r9, #0
 8009792:	dc35      	bgt.n	8009800 <_printf_float+0x380>
 8009794:	f04f 0800 	mov.w	r8, #0
 8009798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800979c:	f104 0a1a 	add.w	sl, r4, #26
 80097a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80097a4:	1a9b      	subs	r3, r3, r2
 80097a6:	eba3 0309 	sub.w	r3, r3, r9
 80097aa:	4543      	cmp	r3, r8
 80097ac:	f77f af75 	ble.w	800969a <_printf_float+0x21a>
 80097b0:	2301      	movs	r3, #1
 80097b2:	4652      	mov	r2, sl
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	f43f aeae 	beq.w	800951c <_printf_float+0x9c>
 80097c0:	f108 0801 	add.w	r8, r8, #1
 80097c4:	e7ec      	b.n	80097a0 <_printf_float+0x320>
 80097c6:	4613      	mov	r3, r2
 80097c8:	4631      	mov	r1, r6
 80097ca:	4642      	mov	r2, r8
 80097cc:	4628      	mov	r0, r5
 80097ce:	47b8      	blx	r7
 80097d0:	3001      	adds	r0, #1
 80097d2:	d1bf      	bne.n	8009754 <_printf_float+0x2d4>
 80097d4:	e6a2      	b.n	800951c <_printf_float+0x9c>
 80097d6:	2301      	movs	r3, #1
 80097d8:	4631      	mov	r1, r6
 80097da:	4628      	mov	r0, r5
 80097dc:	9204      	str	r2, [sp, #16]
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	f43f ae9b 	beq.w	800951c <_printf_float+0x9c>
 80097e6:	9b05      	ldr	r3, [sp, #20]
 80097e8:	9a04      	ldr	r2, [sp, #16]
 80097ea:	3301      	adds	r3, #1
 80097ec:	9305      	str	r3, [sp, #20]
 80097ee:	e7b7      	b.n	8009760 <_printf_float+0x2e0>
 80097f0:	4653      	mov	r3, sl
 80097f2:	465a      	mov	r2, fp
 80097f4:	4631      	mov	r1, r6
 80097f6:	4628      	mov	r0, r5
 80097f8:	47b8      	blx	r7
 80097fa:	3001      	adds	r0, #1
 80097fc:	d1be      	bne.n	800977c <_printf_float+0x2fc>
 80097fe:	e68d      	b.n	800951c <_printf_float+0x9c>
 8009800:	9a04      	ldr	r2, [sp, #16]
 8009802:	464b      	mov	r3, r9
 8009804:	4442      	add	r2, r8
 8009806:	4631      	mov	r1, r6
 8009808:	4628      	mov	r0, r5
 800980a:	47b8      	blx	r7
 800980c:	3001      	adds	r0, #1
 800980e:	d1c1      	bne.n	8009794 <_printf_float+0x314>
 8009810:	e684      	b.n	800951c <_printf_float+0x9c>
 8009812:	9a08      	ldr	r2, [sp, #32]
 8009814:	2a01      	cmp	r2, #1
 8009816:	dc01      	bgt.n	800981c <_printf_float+0x39c>
 8009818:	07db      	lsls	r3, r3, #31
 800981a:	d537      	bpl.n	800988c <_printf_float+0x40c>
 800981c:	2301      	movs	r3, #1
 800981e:	4642      	mov	r2, r8
 8009820:	4631      	mov	r1, r6
 8009822:	4628      	mov	r0, r5
 8009824:	47b8      	blx	r7
 8009826:	3001      	adds	r0, #1
 8009828:	f43f ae78 	beq.w	800951c <_printf_float+0x9c>
 800982c:	4653      	mov	r3, sl
 800982e:	465a      	mov	r2, fp
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	f43f ae70 	beq.w	800951c <_printf_float+0x9c>
 800983c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009840:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009848:	d01b      	beq.n	8009882 <_printf_float+0x402>
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	f108 0201 	add.w	r2, r8, #1
 8009850:	3b01      	subs	r3, #1
 8009852:	4631      	mov	r1, r6
 8009854:	4628      	mov	r0, r5
 8009856:	47b8      	blx	r7
 8009858:	3001      	adds	r0, #1
 800985a:	d10e      	bne.n	800987a <_printf_float+0x3fa>
 800985c:	e65e      	b.n	800951c <_printf_float+0x9c>
 800985e:	2301      	movs	r3, #1
 8009860:	464a      	mov	r2, r9
 8009862:	4631      	mov	r1, r6
 8009864:	4628      	mov	r0, r5
 8009866:	47b8      	blx	r7
 8009868:	3001      	adds	r0, #1
 800986a:	f43f ae57 	beq.w	800951c <_printf_float+0x9c>
 800986e:	f108 0801 	add.w	r8, r8, #1
 8009872:	9b08      	ldr	r3, [sp, #32]
 8009874:	3b01      	subs	r3, #1
 8009876:	4543      	cmp	r3, r8
 8009878:	dcf1      	bgt.n	800985e <_printf_float+0x3de>
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009880:	e6db      	b.n	800963a <_printf_float+0x1ba>
 8009882:	f04f 0800 	mov.w	r8, #0
 8009886:	f104 091a 	add.w	r9, r4, #26
 800988a:	e7f2      	b.n	8009872 <_printf_float+0x3f2>
 800988c:	2301      	movs	r3, #1
 800988e:	4642      	mov	r2, r8
 8009890:	e7df      	b.n	8009852 <_printf_float+0x3d2>
 8009892:	2301      	movs	r3, #1
 8009894:	464a      	mov	r2, r9
 8009896:	4631      	mov	r1, r6
 8009898:	4628      	mov	r0, r5
 800989a:	47b8      	blx	r7
 800989c:	3001      	adds	r0, #1
 800989e:	f43f ae3d 	beq.w	800951c <_printf_float+0x9c>
 80098a2:	f108 0801 	add.w	r8, r8, #1
 80098a6:	68e3      	ldr	r3, [r4, #12]
 80098a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098aa:	1a5b      	subs	r3, r3, r1
 80098ac:	4543      	cmp	r3, r8
 80098ae:	dcf0      	bgt.n	8009892 <_printf_float+0x412>
 80098b0:	e6f7      	b.n	80096a2 <_printf_float+0x222>
 80098b2:	f04f 0800 	mov.w	r8, #0
 80098b6:	f104 0919 	add.w	r9, r4, #25
 80098ba:	e7f4      	b.n	80098a6 <_printf_float+0x426>

080098bc <_printf_common>:
 80098bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	4616      	mov	r6, r2
 80098c2:	4699      	mov	r9, r3
 80098c4:	688a      	ldr	r2, [r1, #8]
 80098c6:	690b      	ldr	r3, [r1, #16]
 80098c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	bfb8      	it	lt
 80098d0:	4613      	movlt	r3, r2
 80098d2:	6033      	str	r3, [r6, #0]
 80098d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098d8:	4607      	mov	r7, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	b10a      	cbz	r2, 80098e2 <_printf_common+0x26>
 80098de:	3301      	adds	r3, #1
 80098e0:	6033      	str	r3, [r6, #0]
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	0699      	lsls	r1, r3, #26
 80098e6:	bf42      	ittt	mi
 80098e8:	6833      	ldrmi	r3, [r6, #0]
 80098ea:	3302      	addmi	r3, #2
 80098ec:	6033      	strmi	r3, [r6, #0]
 80098ee:	6825      	ldr	r5, [r4, #0]
 80098f0:	f015 0506 	ands.w	r5, r5, #6
 80098f4:	d106      	bne.n	8009904 <_printf_common+0x48>
 80098f6:	f104 0a19 	add.w	sl, r4, #25
 80098fa:	68e3      	ldr	r3, [r4, #12]
 80098fc:	6832      	ldr	r2, [r6, #0]
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	42ab      	cmp	r3, r5
 8009902:	dc26      	bgt.n	8009952 <_printf_common+0x96>
 8009904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009908:	1e13      	subs	r3, r2, #0
 800990a:	6822      	ldr	r2, [r4, #0]
 800990c:	bf18      	it	ne
 800990e:	2301      	movne	r3, #1
 8009910:	0692      	lsls	r2, r2, #26
 8009912:	d42b      	bmi.n	800996c <_printf_common+0xb0>
 8009914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009918:	4649      	mov	r1, r9
 800991a:	4638      	mov	r0, r7
 800991c:	47c0      	blx	r8
 800991e:	3001      	adds	r0, #1
 8009920:	d01e      	beq.n	8009960 <_printf_common+0xa4>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	68e5      	ldr	r5, [r4, #12]
 8009926:	6832      	ldr	r2, [r6, #0]
 8009928:	f003 0306 	and.w	r3, r3, #6
 800992c:	2b04      	cmp	r3, #4
 800992e:	bf08      	it	eq
 8009930:	1aad      	subeq	r5, r5, r2
 8009932:	68a3      	ldr	r3, [r4, #8]
 8009934:	6922      	ldr	r2, [r4, #16]
 8009936:	bf0c      	ite	eq
 8009938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800993c:	2500      	movne	r5, #0
 800993e:	4293      	cmp	r3, r2
 8009940:	bfc4      	itt	gt
 8009942:	1a9b      	subgt	r3, r3, r2
 8009944:	18ed      	addgt	r5, r5, r3
 8009946:	2600      	movs	r6, #0
 8009948:	341a      	adds	r4, #26
 800994a:	42b5      	cmp	r5, r6
 800994c:	d11a      	bne.n	8009984 <_printf_common+0xc8>
 800994e:	2000      	movs	r0, #0
 8009950:	e008      	b.n	8009964 <_printf_common+0xa8>
 8009952:	2301      	movs	r3, #1
 8009954:	4652      	mov	r2, sl
 8009956:	4649      	mov	r1, r9
 8009958:	4638      	mov	r0, r7
 800995a:	47c0      	blx	r8
 800995c:	3001      	adds	r0, #1
 800995e:	d103      	bne.n	8009968 <_printf_common+0xac>
 8009960:	f04f 30ff 	mov.w	r0, #4294967295
 8009964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009968:	3501      	adds	r5, #1
 800996a:	e7c6      	b.n	80098fa <_printf_common+0x3e>
 800996c:	18e1      	adds	r1, r4, r3
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	2030      	movs	r0, #48	; 0x30
 8009972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009976:	4422      	add	r2, r4
 8009978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800997c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009980:	3302      	adds	r3, #2
 8009982:	e7c7      	b.n	8009914 <_printf_common+0x58>
 8009984:	2301      	movs	r3, #1
 8009986:	4622      	mov	r2, r4
 8009988:	4649      	mov	r1, r9
 800998a:	4638      	mov	r0, r7
 800998c:	47c0      	blx	r8
 800998e:	3001      	adds	r0, #1
 8009990:	d0e6      	beq.n	8009960 <_printf_common+0xa4>
 8009992:	3601      	adds	r6, #1
 8009994:	e7d9      	b.n	800994a <_printf_common+0x8e>
	...

08009998 <_printf_i>:
 8009998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	7e0f      	ldrb	r7, [r1, #24]
 800999e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099a0:	2f78      	cmp	r7, #120	; 0x78
 80099a2:	4691      	mov	r9, r2
 80099a4:	4680      	mov	r8, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	469a      	mov	sl, r3
 80099aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ae:	d807      	bhi.n	80099c0 <_printf_i+0x28>
 80099b0:	2f62      	cmp	r7, #98	; 0x62
 80099b2:	d80a      	bhi.n	80099ca <_printf_i+0x32>
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	f000 80d8 	beq.w	8009b6a <_printf_i+0x1d2>
 80099ba:	2f58      	cmp	r7, #88	; 0x58
 80099bc:	f000 80a3 	beq.w	8009b06 <_printf_i+0x16e>
 80099c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099c8:	e03a      	b.n	8009a40 <_printf_i+0xa8>
 80099ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ce:	2b15      	cmp	r3, #21
 80099d0:	d8f6      	bhi.n	80099c0 <_printf_i+0x28>
 80099d2:	a101      	add	r1, pc, #4	; (adr r1, 80099d8 <_printf_i+0x40>)
 80099d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099d8:	08009a31 	.word	0x08009a31
 80099dc:	08009a45 	.word	0x08009a45
 80099e0:	080099c1 	.word	0x080099c1
 80099e4:	080099c1 	.word	0x080099c1
 80099e8:	080099c1 	.word	0x080099c1
 80099ec:	080099c1 	.word	0x080099c1
 80099f0:	08009a45 	.word	0x08009a45
 80099f4:	080099c1 	.word	0x080099c1
 80099f8:	080099c1 	.word	0x080099c1
 80099fc:	080099c1 	.word	0x080099c1
 8009a00:	080099c1 	.word	0x080099c1
 8009a04:	08009b51 	.word	0x08009b51
 8009a08:	08009a75 	.word	0x08009a75
 8009a0c:	08009b33 	.word	0x08009b33
 8009a10:	080099c1 	.word	0x080099c1
 8009a14:	080099c1 	.word	0x080099c1
 8009a18:	08009b73 	.word	0x08009b73
 8009a1c:	080099c1 	.word	0x080099c1
 8009a20:	08009a75 	.word	0x08009a75
 8009a24:	080099c1 	.word	0x080099c1
 8009a28:	080099c1 	.word	0x080099c1
 8009a2c:	08009b3b 	.word	0x08009b3b
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	1d1a      	adds	r2, r3, #4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	602a      	str	r2, [r5, #0]
 8009a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a40:	2301      	movs	r3, #1
 8009a42:	e0a3      	b.n	8009b8c <_printf_i+0x1f4>
 8009a44:	6820      	ldr	r0, [r4, #0]
 8009a46:	6829      	ldr	r1, [r5, #0]
 8009a48:	0606      	lsls	r6, r0, #24
 8009a4a:	f101 0304 	add.w	r3, r1, #4
 8009a4e:	d50a      	bpl.n	8009a66 <_printf_i+0xce>
 8009a50:	680e      	ldr	r6, [r1, #0]
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	2e00      	cmp	r6, #0
 8009a56:	da03      	bge.n	8009a60 <_printf_i+0xc8>
 8009a58:	232d      	movs	r3, #45	; 0x2d
 8009a5a:	4276      	negs	r6, r6
 8009a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a60:	485e      	ldr	r0, [pc, #376]	; (8009bdc <_printf_i+0x244>)
 8009a62:	230a      	movs	r3, #10
 8009a64:	e019      	b.n	8009a9a <_printf_i+0x102>
 8009a66:	680e      	ldr	r6, [r1, #0]
 8009a68:	602b      	str	r3, [r5, #0]
 8009a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a6e:	bf18      	it	ne
 8009a70:	b236      	sxthne	r6, r6
 8009a72:	e7ef      	b.n	8009a54 <_printf_i+0xbc>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	1d19      	adds	r1, r3, #4
 8009a7a:	6029      	str	r1, [r5, #0]
 8009a7c:	0601      	lsls	r1, r0, #24
 8009a7e:	d501      	bpl.n	8009a84 <_printf_i+0xec>
 8009a80:	681e      	ldr	r6, [r3, #0]
 8009a82:	e002      	b.n	8009a8a <_printf_i+0xf2>
 8009a84:	0646      	lsls	r6, r0, #25
 8009a86:	d5fb      	bpl.n	8009a80 <_printf_i+0xe8>
 8009a88:	881e      	ldrh	r6, [r3, #0]
 8009a8a:	4854      	ldr	r0, [pc, #336]	; (8009bdc <_printf_i+0x244>)
 8009a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a8e:	bf0c      	ite	eq
 8009a90:	2308      	moveq	r3, #8
 8009a92:	230a      	movne	r3, #10
 8009a94:	2100      	movs	r1, #0
 8009a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a9a:	6865      	ldr	r5, [r4, #4]
 8009a9c:	60a5      	str	r5, [r4, #8]
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	bfa2      	ittt	ge
 8009aa2:	6821      	ldrge	r1, [r4, #0]
 8009aa4:	f021 0104 	bicge.w	r1, r1, #4
 8009aa8:	6021      	strge	r1, [r4, #0]
 8009aaa:	b90e      	cbnz	r6, 8009ab0 <_printf_i+0x118>
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	d04d      	beq.n	8009b4c <_printf_i+0x1b4>
 8009ab0:	4615      	mov	r5, r2
 8009ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8009aba:	5dc7      	ldrb	r7, [r0, r7]
 8009abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ac0:	4637      	mov	r7, r6
 8009ac2:	42bb      	cmp	r3, r7
 8009ac4:	460e      	mov	r6, r1
 8009ac6:	d9f4      	bls.n	8009ab2 <_printf_i+0x11a>
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d10b      	bne.n	8009ae4 <_printf_i+0x14c>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	07de      	lsls	r6, r3, #31
 8009ad0:	d508      	bpl.n	8009ae4 <_printf_i+0x14c>
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	bfde      	ittt	le
 8009ada:	2330      	movle	r3, #48	; 0x30
 8009adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ae4:	1b52      	subs	r2, r2, r5
 8009ae6:	6122      	str	r2, [r4, #16]
 8009ae8:	f8cd a000 	str.w	sl, [sp]
 8009aec:	464b      	mov	r3, r9
 8009aee:	aa03      	add	r2, sp, #12
 8009af0:	4621      	mov	r1, r4
 8009af2:	4640      	mov	r0, r8
 8009af4:	f7ff fee2 	bl	80098bc <_printf_common>
 8009af8:	3001      	adds	r0, #1
 8009afa:	d14c      	bne.n	8009b96 <_printf_i+0x1fe>
 8009afc:	f04f 30ff 	mov.w	r0, #4294967295
 8009b00:	b004      	add	sp, #16
 8009b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b06:	4835      	ldr	r0, [pc, #212]	; (8009bdc <_printf_i+0x244>)
 8009b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b0c:	6829      	ldr	r1, [r5, #0]
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b14:	6029      	str	r1, [r5, #0]
 8009b16:	061d      	lsls	r5, r3, #24
 8009b18:	d514      	bpl.n	8009b44 <_printf_i+0x1ac>
 8009b1a:	07df      	lsls	r7, r3, #31
 8009b1c:	bf44      	itt	mi
 8009b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b22:	6023      	strmi	r3, [r4, #0]
 8009b24:	b91e      	cbnz	r6, 8009b2e <_printf_i+0x196>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	f023 0320 	bic.w	r3, r3, #32
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	2310      	movs	r3, #16
 8009b30:	e7b0      	b.n	8009a94 <_printf_i+0xfc>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	f043 0320 	orr.w	r3, r3, #32
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	2378      	movs	r3, #120	; 0x78
 8009b3c:	4828      	ldr	r0, [pc, #160]	; (8009be0 <_printf_i+0x248>)
 8009b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b42:	e7e3      	b.n	8009b0c <_printf_i+0x174>
 8009b44:	0659      	lsls	r1, r3, #25
 8009b46:	bf48      	it	mi
 8009b48:	b2b6      	uxthmi	r6, r6
 8009b4a:	e7e6      	b.n	8009b1a <_printf_i+0x182>
 8009b4c:	4615      	mov	r5, r2
 8009b4e:	e7bb      	b.n	8009ac8 <_printf_i+0x130>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	6826      	ldr	r6, [r4, #0]
 8009b54:	6961      	ldr	r1, [r4, #20]
 8009b56:	1d18      	adds	r0, r3, #4
 8009b58:	6028      	str	r0, [r5, #0]
 8009b5a:	0635      	lsls	r5, r6, #24
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	d501      	bpl.n	8009b64 <_printf_i+0x1cc>
 8009b60:	6019      	str	r1, [r3, #0]
 8009b62:	e002      	b.n	8009b6a <_printf_i+0x1d2>
 8009b64:	0670      	lsls	r0, r6, #25
 8009b66:	d5fb      	bpl.n	8009b60 <_printf_i+0x1c8>
 8009b68:	8019      	strh	r1, [r3, #0]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	4615      	mov	r5, r2
 8009b70:	e7ba      	b.n	8009ae8 <_printf_i+0x150>
 8009b72:	682b      	ldr	r3, [r5, #0]
 8009b74:	1d1a      	adds	r2, r3, #4
 8009b76:	602a      	str	r2, [r5, #0]
 8009b78:	681d      	ldr	r5, [r3, #0]
 8009b7a:	6862      	ldr	r2, [r4, #4]
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4628      	mov	r0, r5
 8009b80:	f7f6 fbbe 	bl	8000300 <memchr>
 8009b84:	b108      	cbz	r0, 8009b8a <_printf_i+0x1f2>
 8009b86:	1b40      	subs	r0, r0, r5
 8009b88:	6060      	str	r0, [r4, #4]
 8009b8a:	6863      	ldr	r3, [r4, #4]
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b94:	e7a8      	b.n	8009ae8 <_printf_i+0x150>
 8009b96:	6923      	ldr	r3, [r4, #16]
 8009b98:	462a      	mov	r2, r5
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	47d0      	blx	sl
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d0ab      	beq.n	8009afc <_printf_i+0x164>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	079b      	lsls	r3, r3, #30
 8009ba8:	d413      	bmi.n	8009bd2 <_printf_i+0x23a>
 8009baa:	68e0      	ldr	r0, [r4, #12]
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	4298      	cmp	r0, r3
 8009bb0:	bfb8      	it	lt
 8009bb2:	4618      	movlt	r0, r3
 8009bb4:	e7a4      	b.n	8009b00 <_printf_i+0x168>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4632      	mov	r2, r6
 8009bba:	4649      	mov	r1, r9
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	47d0      	blx	sl
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d09b      	beq.n	8009afc <_printf_i+0x164>
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	68e3      	ldr	r3, [r4, #12]
 8009bc8:	9903      	ldr	r1, [sp, #12]
 8009bca:	1a5b      	subs	r3, r3, r1
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	dcf2      	bgt.n	8009bb6 <_printf_i+0x21e>
 8009bd0:	e7eb      	b.n	8009baa <_printf_i+0x212>
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	f104 0619 	add.w	r6, r4, #25
 8009bd8:	e7f5      	b.n	8009bc6 <_printf_i+0x22e>
 8009bda:	bf00      	nop
 8009bdc:	0800bacf 	.word	0x0800bacf
 8009be0:	0800bae0 	.word	0x0800bae0

08009be4 <__swbuf_r>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	460e      	mov	r6, r1
 8009be8:	4614      	mov	r4, r2
 8009bea:	4605      	mov	r5, r0
 8009bec:	b118      	cbz	r0, 8009bf6 <__swbuf_r+0x12>
 8009bee:	6983      	ldr	r3, [r0, #24]
 8009bf0:	b90b      	cbnz	r3, 8009bf6 <__swbuf_r+0x12>
 8009bf2:	f000 ffd1 	bl	800ab98 <__sinit>
 8009bf6:	4b21      	ldr	r3, [pc, #132]	; (8009c7c <__swbuf_r+0x98>)
 8009bf8:	429c      	cmp	r4, r3
 8009bfa:	d12b      	bne.n	8009c54 <__swbuf_r+0x70>
 8009bfc:	686c      	ldr	r4, [r5, #4]
 8009bfe:	69a3      	ldr	r3, [r4, #24]
 8009c00:	60a3      	str	r3, [r4, #8]
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	071a      	lsls	r2, r3, #28
 8009c06:	d52f      	bpl.n	8009c68 <__swbuf_r+0x84>
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	b36b      	cbz	r3, 8009c68 <__swbuf_r+0x84>
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	6820      	ldr	r0, [r4, #0]
 8009c10:	1ac0      	subs	r0, r0, r3
 8009c12:	6963      	ldr	r3, [r4, #20]
 8009c14:	b2f6      	uxtb	r6, r6
 8009c16:	4283      	cmp	r3, r0
 8009c18:	4637      	mov	r7, r6
 8009c1a:	dc04      	bgt.n	8009c26 <__swbuf_r+0x42>
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f000 ff26 	bl	800aa70 <_fflush_r>
 8009c24:	bb30      	cbnz	r0, 8009c74 <__swbuf_r+0x90>
 8009c26:	68a3      	ldr	r3, [r4, #8]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	60a3      	str	r3, [r4, #8]
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	6022      	str	r2, [r4, #0]
 8009c32:	701e      	strb	r6, [r3, #0]
 8009c34:	6963      	ldr	r3, [r4, #20]
 8009c36:	3001      	adds	r0, #1
 8009c38:	4283      	cmp	r3, r0
 8009c3a:	d004      	beq.n	8009c46 <__swbuf_r+0x62>
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	07db      	lsls	r3, r3, #31
 8009c40:	d506      	bpl.n	8009c50 <__swbuf_r+0x6c>
 8009c42:	2e0a      	cmp	r6, #10
 8009c44:	d104      	bne.n	8009c50 <__swbuf_r+0x6c>
 8009c46:	4621      	mov	r1, r4
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f000 ff11 	bl	800aa70 <_fflush_r>
 8009c4e:	b988      	cbnz	r0, 8009c74 <__swbuf_r+0x90>
 8009c50:	4638      	mov	r0, r7
 8009c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c54:	4b0a      	ldr	r3, [pc, #40]	; (8009c80 <__swbuf_r+0x9c>)
 8009c56:	429c      	cmp	r4, r3
 8009c58:	d101      	bne.n	8009c5e <__swbuf_r+0x7a>
 8009c5a:	68ac      	ldr	r4, [r5, #8]
 8009c5c:	e7cf      	b.n	8009bfe <__swbuf_r+0x1a>
 8009c5e:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <__swbuf_r+0xa0>)
 8009c60:	429c      	cmp	r4, r3
 8009c62:	bf08      	it	eq
 8009c64:	68ec      	ldreq	r4, [r5, #12]
 8009c66:	e7ca      	b.n	8009bfe <__swbuf_r+0x1a>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 f80c 	bl	8009c88 <__swsetup_r>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d0cb      	beq.n	8009c0c <__swbuf_r+0x28>
 8009c74:	f04f 37ff 	mov.w	r7, #4294967295
 8009c78:	e7ea      	b.n	8009c50 <__swbuf_r+0x6c>
 8009c7a:	bf00      	nop
 8009c7c:	0800bba4 	.word	0x0800bba4
 8009c80:	0800bbc4 	.word	0x0800bbc4
 8009c84:	0800bb84 	.word	0x0800bb84

08009c88 <__swsetup_r>:
 8009c88:	4b32      	ldr	r3, [pc, #200]	; (8009d54 <__swsetup_r+0xcc>)
 8009c8a:	b570      	push	{r4, r5, r6, lr}
 8009c8c:	681d      	ldr	r5, [r3, #0]
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	b125      	cbz	r5, 8009c9e <__swsetup_r+0x16>
 8009c94:	69ab      	ldr	r3, [r5, #24]
 8009c96:	b913      	cbnz	r3, 8009c9e <__swsetup_r+0x16>
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f000 ff7d 	bl	800ab98 <__sinit>
 8009c9e:	4b2e      	ldr	r3, [pc, #184]	; (8009d58 <__swsetup_r+0xd0>)
 8009ca0:	429c      	cmp	r4, r3
 8009ca2:	d10f      	bne.n	8009cc4 <__swsetup_r+0x3c>
 8009ca4:	686c      	ldr	r4, [r5, #4]
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cac:	0719      	lsls	r1, r3, #28
 8009cae:	d42c      	bmi.n	8009d0a <__swsetup_r+0x82>
 8009cb0:	06dd      	lsls	r5, r3, #27
 8009cb2:	d411      	bmi.n	8009cd8 <__swsetup_r+0x50>
 8009cb4:	2309      	movs	r3, #9
 8009cb6:	6033      	str	r3, [r6, #0]
 8009cb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc2:	e03e      	b.n	8009d42 <__swsetup_r+0xba>
 8009cc4:	4b25      	ldr	r3, [pc, #148]	; (8009d5c <__swsetup_r+0xd4>)
 8009cc6:	429c      	cmp	r4, r3
 8009cc8:	d101      	bne.n	8009cce <__swsetup_r+0x46>
 8009cca:	68ac      	ldr	r4, [r5, #8]
 8009ccc:	e7eb      	b.n	8009ca6 <__swsetup_r+0x1e>
 8009cce:	4b24      	ldr	r3, [pc, #144]	; (8009d60 <__swsetup_r+0xd8>)
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	bf08      	it	eq
 8009cd4:	68ec      	ldreq	r4, [r5, #12]
 8009cd6:	e7e6      	b.n	8009ca6 <__swsetup_r+0x1e>
 8009cd8:	0758      	lsls	r0, r3, #29
 8009cda:	d512      	bpl.n	8009d02 <__swsetup_r+0x7a>
 8009cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cde:	b141      	cbz	r1, 8009cf2 <__swsetup_r+0x6a>
 8009ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	d002      	beq.n	8009cee <__swsetup_r+0x66>
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f001 fc0f 	bl	800b50c <_free_r>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	6063      	str	r3, [r4, #4]
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	f043 0308 	orr.w	r3, r3, #8
 8009d08:	81a3      	strh	r3, [r4, #12]
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	b94b      	cbnz	r3, 8009d22 <__swsetup_r+0x9a>
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d18:	d003      	beq.n	8009d22 <__swsetup_r+0x9a>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f001 f805 	bl	800ad2c <__smakebuf_r>
 8009d22:	89a0      	ldrh	r0, [r4, #12]
 8009d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d28:	f010 0301 	ands.w	r3, r0, #1
 8009d2c:	d00a      	beq.n	8009d44 <__swsetup_r+0xbc>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60a3      	str	r3, [r4, #8]
 8009d32:	6963      	ldr	r3, [r4, #20]
 8009d34:	425b      	negs	r3, r3
 8009d36:	61a3      	str	r3, [r4, #24]
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	b943      	cbnz	r3, 8009d4e <__swsetup_r+0xc6>
 8009d3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d40:	d1ba      	bne.n	8009cb8 <__swsetup_r+0x30>
 8009d42:	bd70      	pop	{r4, r5, r6, pc}
 8009d44:	0781      	lsls	r1, r0, #30
 8009d46:	bf58      	it	pl
 8009d48:	6963      	ldrpl	r3, [r4, #20]
 8009d4a:	60a3      	str	r3, [r4, #8]
 8009d4c:	e7f4      	b.n	8009d38 <__swsetup_r+0xb0>
 8009d4e:	2000      	movs	r0, #0
 8009d50:	e7f7      	b.n	8009d42 <__swsetup_r+0xba>
 8009d52:	bf00      	nop
 8009d54:	24000010 	.word	0x24000010
 8009d58:	0800bba4 	.word	0x0800bba4
 8009d5c:	0800bbc4 	.word	0x0800bbc4
 8009d60:	0800bb84 	.word	0x0800bb84

08009d64 <abort>:
 8009d64:	b508      	push	{r3, lr}
 8009d66:	2006      	movs	r0, #6
 8009d68:	f001 fce8 	bl	800b73c <raise>
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	f7f7 fd2a 	bl	80017c6 <_exit>

08009d72 <quorem>:
 8009d72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d76:	6903      	ldr	r3, [r0, #16]
 8009d78:	690c      	ldr	r4, [r1, #16]
 8009d7a:	42a3      	cmp	r3, r4
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	f2c0 8081 	blt.w	8009e84 <quorem+0x112>
 8009d82:	3c01      	subs	r4, #1
 8009d84:	f101 0814 	add.w	r8, r1, #20
 8009d88:	f100 0514 	add.w	r5, r0, #20
 8009d8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009da2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009da6:	fbb2 f6f3 	udiv	r6, r2, r3
 8009daa:	d331      	bcc.n	8009e10 <quorem+0x9e>
 8009dac:	f04f 0e00 	mov.w	lr, #0
 8009db0:	4640      	mov	r0, r8
 8009db2:	46ac      	mov	ip, r5
 8009db4:	46f2      	mov	sl, lr
 8009db6:	f850 2b04 	ldr.w	r2, [r0], #4
 8009dba:	b293      	uxth	r3, r2
 8009dbc:	fb06 e303 	mla	r3, r6, r3, lr
 8009dc0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	ebaa 0303 	sub.w	r3, sl, r3
 8009dca:	f8dc a000 	ldr.w	sl, [ip]
 8009dce:	0c12      	lsrs	r2, r2, #16
 8009dd0:	fa13 f38a 	uxtah	r3, r3, sl
 8009dd4:	fb06 e202 	mla	r2, r6, r2, lr
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	9b00      	ldr	r3, [sp, #0]
 8009ddc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009de0:	b292      	uxth	r2, r2
 8009de2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009de6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dea:	f8bd 3000 	ldrh.w	r3, [sp]
 8009dee:	4581      	cmp	r9, r0
 8009df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df4:	f84c 3b04 	str.w	r3, [ip], #4
 8009df8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dfc:	d2db      	bcs.n	8009db6 <quorem+0x44>
 8009dfe:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e02:	b92b      	cbnz	r3, 8009e10 <quorem+0x9e>
 8009e04:	9b01      	ldr	r3, [sp, #4]
 8009e06:	3b04      	subs	r3, #4
 8009e08:	429d      	cmp	r5, r3
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	d32e      	bcc.n	8009e6c <quorem+0xfa>
 8009e0e:	613c      	str	r4, [r7, #16]
 8009e10:	4638      	mov	r0, r7
 8009e12:	f001 fa63 	bl	800b2dc <__mcmp>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	db24      	blt.n	8009e64 <quorem+0xf2>
 8009e1a:	3601      	adds	r6, #1
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f04f 0c00 	mov.w	ip, #0
 8009e22:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e26:	f8d0 e000 	ldr.w	lr, [r0]
 8009e2a:	b293      	uxth	r3, r2
 8009e2c:	ebac 0303 	sub.w	r3, ip, r3
 8009e30:	0c12      	lsrs	r2, r2, #16
 8009e32:	fa13 f38e 	uxtah	r3, r3, lr
 8009e36:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e44:	45c1      	cmp	r9, r8
 8009e46:	f840 3b04 	str.w	r3, [r0], #4
 8009e4a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e4e:	d2e8      	bcs.n	8009e22 <quorem+0xb0>
 8009e50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e58:	b922      	cbnz	r2, 8009e64 <quorem+0xf2>
 8009e5a:	3b04      	subs	r3, #4
 8009e5c:	429d      	cmp	r5, r3
 8009e5e:	461a      	mov	r2, r3
 8009e60:	d30a      	bcc.n	8009e78 <quorem+0x106>
 8009e62:	613c      	str	r4, [r7, #16]
 8009e64:	4630      	mov	r0, r6
 8009e66:	b003      	add	sp, #12
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	6812      	ldr	r2, [r2, #0]
 8009e6e:	3b04      	subs	r3, #4
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	d1cc      	bne.n	8009e0e <quorem+0x9c>
 8009e74:	3c01      	subs	r4, #1
 8009e76:	e7c7      	b.n	8009e08 <quorem+0x96>
 8009e78:	6812      	ldr	r2, [r2, #0]
 8009e7a:	3b04      	subs	r3, #4
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	d1f0      	bne.n	8009e62 <quorem+0xf0>
 8009e80:	3c01      	subs	r4, #1
 8009e82:	e7eb      	b.n	8009e5c <quorem+0xea>
 8009e84:	2000      	movs	r0, #0
 8009e86:	e7ee      	b.n	8009e66 <quorem+0xf4>

08009e88 <_dtoa_r>:
 8009e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8c:	ed2d 8b02 	vpush	{d8}
 8009e90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e92:	b091      	sub	sp, #68	; 0x44
 8009e94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e98:	ec59 8b10 	vmov	r8, r9, d0
 8009e9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009e9e:	9106      	str	r1, [sp, #24]
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	9208      	str	r2, [sp, #32]
 8009ea4:	930c      	str	r3, [sp, #48]	; 0x30
 8009ea6:	b975      	cbnz	r5, 8009ec6 <_dtoa_r+0x3e>
 8009ea8:	2010      	movs	r0, #16
 8009eaa:	f000 ff7f 	bl	800adac <malloc>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6270      	str	r0, [r6, #36]	; 0x24
 8009eb2:	b920      	cbnz	r0, 8009ebe <_dtoa_r+0x36>
 8009eb4:	4baa      	ldr	r3, [pc, #680]	; (800a160 <_dtoa_r+0x2d8>)
 8009eb6:	21ea      	movs	r1, #234	; 0xea
 8009eb8:	48aa      	ldr	r0, [pc, #680]	; (800a164 <_dtoa_r+0x2dc>)
 8009eba:	f7ff f895 	bl	8008fe8 <__assert_func>
 8009ebe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ec2:	6005      	str	r5, [r0, #0]
 8009ec4:	60c5      	str	r5, [r0, #12]
 8009ec6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ec8:	6819      	ldr	r1, [r3, #0]
 8009eca:	b151      	cbz	r1, 8009ee2 <_dtoa_r+0x5a>
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	604a      	str	r2, [r1, #4]
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	4093      	lsls	r3, r2
 8009ed4:	608b      	str	r3, [r1, #8]
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f000 ffbe 	bl	800ae58 <_Bfree>
 8009edc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	f1b9 0300 	subs.w	r3, r9, #0
 8009ee6:	bfbb      	ittet	lt
 8009ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009eec:	9303      	strlt	r3, [sp, #12]
 8009eee:	2300      	movge	r3, #0
 8009ef0:	2201      	movlt	r2, #1
 8009ef2:	bfac      	ite	ge
 8009ef4:	6023      	strge	r3, [r4, #0]
 8009ef6:	6022      	strlt	r2, [r4, #0]
 8009ef8:	4b9b      	ldr	r3, [pc, #620]	; (800a168 <_dtoa_r+0x2e0>)
 8009efa:	9c03      	ldr	r4, [sp, #12]
 8009efc:	43a3      	bics	r3, r4
 8009efe:	d11c      	bne.n	8009f3a <_dtoa_r+0xb2>
 8009f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f02:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009f0c:	ea53 0308 	orrs.w	r3, r3, r8
 8009f10:	f000 84fd 	beq.w	800a90e <_dtoa_r+0xa86>
 8009f14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f16:	b963      	cbnz	r3, 8009f32 <_dtoa_r+0xaa>
 8009f18:	4b94      	ldr	r3, [pc, #592]	; (800a16c <_dtoa_r+0x2e4>)
 8009f1a:	e01f      	b.n	8009f5c <_dtoa_r+0xd4>
 8009f1c:	4b94      	ldr	r3, [pc, #592]	; (800a170 <_dtoa_r+0x2e8>)
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	3308      	adds	r3, #8
 8009f22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	9801      	ldr	r0, [sp, #4]
 8009f28:	b011      	add	sp, #68	; 0x44
 8009f2a:	ecbd 8b02 	vpop	{d8}
 8009f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f32:	4b8e      	ldr	r3, [pc, #568]	; (800a16c <_dtoa_r+0x2e4>)
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	3303      	adds	r3, #3
 8009f38:	e7f3      	b.n	8009f22 <_dtoa_r+0x9a>
 8009f3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009f3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f46:	d10b      	bne.n	8009f60 <_dtoa_r+0xd8>
 8009f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	6013      	str	r3, [r2, #0]
 8009f4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 84d9 	beq.w	800a908 <_dtoa_r+0xa80>
 8009f56:	4887      	ldr	r0, [pc, #540]	; (800a174 <_dtoa_r+0x2ec>)
 8009f58:	6018      	str	r0, [r3, #0]
 8009f5a:	1e43      	subs	r3, r0, #1
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	e7e2      	b.n	8009f26 <_dtoa_r+0x9e>
 8009f60:	a90f      	add	r1, sp, #60	; 0x3c
 8009f62:	aa0e      	add	r2, sp, #56	; 0x38
 8009f64:	4630      	mov	r0, r6
 8009f66:	eeb0 0b48 	vmov.f64	d0, d8
 8009f6a:	f001 fa5d 	bl	800b428 <__d2b>
 8009f6e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009f72:	4605      	mov	r5, r0
 8009f74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009f76:	2900      	cmp	r1, #0
 8009f78:	d046      	beq.n	800a008 <_dtoa_r+0x180>
 8009f7a:	ee18 4a90 	vmov	r4, s17
 8009f7e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009f82:	ec53 2b18 	vmov	r2, r3, d8
 8009f86:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009f8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009f8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009f92:	2400      	movs	r4, #0
 8009f94:	ec43 2b16 	vmov	d6, r2, r3
 8009f98:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009f9c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a148 <_dtoa_r+0x2c0>
 8009fa0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009fa4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a150 <_dtoa_r+0x2c8>
 8009fa8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009fac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a158 <_dtoa_r+0x2d0>
 8009fb0:	ee07 1a90 	vmov	s15, r1
 8009fb4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009fb8:	eeb0 7b46 	vmov.f64	d7, d6
 8009fbc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009fc0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009fc4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fcc:	ee16 ba90 	vmov	fp, s13
 8009fd0:	940a      	str	r4, [sp, #40]	; 0x28
 8009fd2:	d508      	bpl.n	8009fe6 <_dtoa_r+0x15e>
 8009fd4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009fd8:	eeb4 6b47 	vcmp.f64	d6, d7
 8009fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe0:	bf18      	it	ne
 8009fe2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009fe6:	f1bb 0f16 	cmp.w	fp, #22
 8009fea:	d82f      	bhi.n	800a04c <_dtoa_r+0x1c4>
 8009fec:	4b62      	ldr	r3, [pc, #392]	; (800a178 <_dtoa_r+0x2f0>)
 8009fee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ff2:	ed93 7b00 	vldr	d7, [r3]
 8009ff6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffe:	d501      	bpl.n	800a004 <_dtoa_r+0x17c>
 800a000:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a004:	2300      	movs	r3, #0
 800a006:	e022      	b.n	800a04e <_dtoa_r+0x1c6>
 800a008:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a00a:	4401      	add	r1, r0
 800a00c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a010:	2b20      	cmp	r3, #32
 800a012:	bfc1      	itttt	gt
 800a014:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a018:	fa04 f303 	lslgt.w	r3, r4, r3
 800a01c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a020:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a024:	bfd6      	itet	le
 800a026:	f1c3 0320 	rsble	r3, r3, #32
 800a02a:	ea43 0808 	orrgt.w	r8, r3, r8
 800a02e:	fa08 f803 	lslle.w	r8, r8, r3
 800a032:	ee07 8a90 	vmov	s15, r8
 800a036:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a03a:	3901      	subs	r1, #1
 800a03c:	ee17 4a90 	vmov	r4, s15
 800a040:	ec53 2b17 	vmov	r2, r3, d7
 800a044:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a048:	2401      	movs	r4, #1
 800a04a:	e7a3      	b.n	8009f94 <_dtoa_r+0x10c>
 800a04c:	2301      	movs	r3, #1
 800a04e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a050:	1a43      	subs	r3, r0, r1
 800a052:	1e5a      	subs	r2, r3, #1
 800a054:	bf45      	ittet	mi
 800a056:	f1c3 0301 	rsbmi	r3, r3, #1
 800a05a:	9304      	strmi	r3, [sp, #16]
 800a05c:	2300      	movpl	r3, #0
 800a05e:	2300      	movmi	r3, #0
 800a060:	9205      	str	r2, [sp, #20]
 800a062:	bf54      	ite	pl
 800a064:	9304      	strpl	r3, [sp, #16]
 800a066:	9305      	strmi	r3, [sp, #20]
 800a068:	f1bb 0f00 	cmp.w	fp, #0
 800a06c:	db18      	blt.n	800a0a0 <_dtoa_r+0x218>
 800a06e:	9b05      	ldr	r3, [sp, #20]
 800a070:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a074:	445b      	add	r3, fp
 800a076:	9305      	str	r3, [sp, #20]
 800a078:	2300      	movs	r3, #0
 800a07a:	9a06      	ldr	r2, [sp, #24]
 800a07c:	2a09      	cmp	r2, #9
 800a07e:	d849      	bhi.n	800a114 <_dtoa_r+0x28c>
 800a080:	2a05      	cmp	r2, #5
 800a082:	bfc4      	itt	gt
 800a084:	3a04      	subgt	r2, #4
 800a086:	9206      	strgt	r2, [sp, #24]
 800a088:	9a06      	ldr	r2, [sp, #24]
 800a08a:	f1a2 0202 	sub.w	r2, r2, #2
 800a08e:	bfcc      	ite	gt
 800a090:	2400      	movgt	r4, #0
 800a092:	2401      	movle	r4, #1
 800a094:	2a03      	cmp	r2, #3
 800a096:	d848      	bhi.n	800a12a <_dtoa_r+0x2a2>
 800a098:	e8df f002 	tbb	[pc, r2]
 800a09c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	eba3 030b 	sub.w	r3, r3, fp
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ac:	f1cb 0300 	rsb	r3, fp, #0
 800a0b0:	e7e3      	b.n	800a07a <_dtoa_r+0x1f2>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	9207      	str	r2, [sp, #28]
 800a0b6:	9a08      	ldr	r2, [sp, #32]
 800a0b8:	2a00      	cmp	r2, #0
 800a0ba:	dc39      	bgt.n	800a130 <_dtoa_r+0x2a8>
 800a0bc:	f04f 0a01 	mov.w	sl, #1
 800a0c0:	46d1      	mov	r9, sl
 800a0c2:	4652      	mov	r2, sl
 800a0c4:	f8cd a020 	str.w	sl, [sp, #32]
 800a0c8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	6079      	str	r1, [r7, #4]
 800a0ce:	2004      	movs	r0, #4
 800a0d0:	f100 0c14 	add.w	ip, r0, #20
 800a0d4:	4594      	cmp	ip, r2
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	d92f      	bls.n	800a13a <_dtoa_r+0x2b2>
 800a0da:	4630      	mov	r0, r6
 800a0dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a0de:	f000 fe7b 	bl	800add8 <_Balloc>
 800a0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0e4:	9001      	str	r0, [sp, #4]
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d149      	bne.n	800a180 <_dtoa_r+0x2f8>
 800a0ec:	4b23      	ldr	r3, [pc, #140]	; (800a17c <_dtoa_r+0x2f4>)
 800a0ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a0f2:	e6e1      	b.n	8009eb8 <_dtoa_r+0x30>
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	e7dd      	b.n	800a0b4 <_dtoa_r+0x22c>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	9207      	str	r2, [sp, #28]
 800a0fc:	9a08      	ldr	r2, [sp, #32]
 800a0fe:	eb0b 0a02 	add.w	sl, fp, r2
 800a102:	f10a 0901 	add.w	r9, sl, #1
 800a106:	464a      	mov	r2, r9
 800a108:	2a01      	cmp	r2, #1
 800a10a:	bfb8      	it	lt
 800a10c:	2201      	movlt	r2, #1
 800a10e:	e7db      	b.n	800a0c8 <_dtoa_r+0x240>
 800a110:	2201      	movs	r2, #1
 800a112:	e7f2      	b.n	800a0fa <_dtoa_r+0x272>
 800a114:	2401      	movs	r4, #1
 800a116:	2200      	movs	r2, #0
 800a118:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a11c:	f04f 3aff 	mov.w	sl, #4294967295
 800a120:	2100      	movs	r1, #0
 800a122:	46d1      	mov	r9, sl
 800a124:	2212      	movs	r2, #18
 800a126:	9108      	str	r1, [sp, #32]
 800a128:	e7ce      	b.n	800a0c8 <_dtoa_r+0x240>
 800a12a:	2201      	movs	r2, #1
 800a12c:	9207      	str	r2, [sp, #28]
 800a12e:	e7f5      	b.n	800a11c <_dtoa_r+0x294>
 800a130:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a134:	46d1      	mov	r9, sl
 800a136:	4652      	mov	r2, sl
 800a138:	e7c6      	b.n	800a0c8 <_dtoa_r+0x240>
 800a13a:	3101      	adds	r1, #1
 800a13c:	6079      	str	r1, [r7, #4]
 800a13e:	0040      	lsls	r0, r0, #1
 800a140:	e7c6      	b.n	800a0d0 <_dtoa_r+0x248>
 800a142:	bf00      	nop
 800a144:	f3af 8000 	nop.w
 800a148:	636f4361 	.word	0x636f4361
 800a14c:	3fd287a7 	.word	0x3fd287a7
 800a150:	8b60c8b3 	.word	0x8b60c8b3
 800a154:	3fc68a28 	.word	0x3fc68a28
 800a158:	509f79fb 	.word	0x509f79fb
 800a15c:	3fd34413 	.word	0x3fd34413
 800a160:	0800bafe 	.word	0x0800bafe
 800a164:	0800bb15 	.word	0x0800bb15
 800a168:	7ff00000 	.word	0x7ff00000
 800a16c:	0800bafa 	.word	0x0800bafa
 800a170:	0800baf1 	.word	0x0800baf1
 800a174:	0800bace 	.word	0x0800bace
 800a178:	0800bc68 	.word	0x0800bc68
 800a17c:	0800bb70 	.word	0x0800bb70
 800a180:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a182:	9901      	ldr	r1, [sp, #4]
 800a184:	6011      	str	r1, [r2, #0]
 800a186:	f1b9 0f0e 	cmp.w	r9, #14
 800a18a:	d86c      	bhi.n	800a266 <_dtoa_r+0x3de>
 800a18c:	2c00      	cmp	r4, #0
 800a18e:	d06a      	beq.n	800a266 <_dtoa_r+0x3de>
 800a190:	f1bb 0f00 	cmp.w	fp, #0
 800a194:	f340 80a0 	ble.w	800a2d8 <_dtoa_r+0x450>
 800a198:	49c1      	ldr	r1, [pc, #772]	; (800a4a0 <_dtoa_r+0x618>)
 800a19a:	f00b 020f 	and.w	r2, fp, #15
 800a19e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a1a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1a6:	ed92 7b00 	vldr	d7, [r2]
 800a1aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a1ae:	f000 8087 	beq.w	800a2c0 <_dtoa_r+0x438>
 800a1b2:	4abc      	ldr	r2, [pc, #752]	; (800a4a4 <_dtoa_r+0x61c>)
 800a1b4:	ed92 6b08 	vldr	d6, [r2, #32]
 800a1b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a1bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a1c0:	f001 010f 	and.w	r1, r1, #15
 800a1c4:	2203      	movs	r2, #3
 800a1c6:	48b7      	ldr	r0, [pc, #732]	; (800a4a4 <_dtoa_r+0x61c>)
 800a1c8:	2900      	cmp	r1, #0
 800a1ca:	d17b      	bne.n	800a2c4 <_dtoa_r+0x43c>
 800a1cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a1d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a1d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1da:	2900      	cmp	r1, #0
 800a1dc:	f000 80a2 	beq.w	800a324 <_dtoa_r+0x49c>
 800a1e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a1e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f0:	f140 8098 	bpl.w	800a324 <_dtoa_r+0x49c>
 800a1f4:	f1b9 0f00 	cmp.w	r9, #0
 800a1f8:	f000 8094 	beq.w	800a324 <_dtoa_r+0x49c>
 800a1fc:	f1ba 0f00 	cmp.w	sl, #0
 800a200:	dd2f      	ble.n	800a262 <_dtoa_r+0x3da>
 800a202:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a206:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a20a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a20e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a212:	3201      	adds	r2, #1
 800a214:	4650      	mov	r0, sl
 800a216:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a21a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a21e:	ee07 2a90 	vmov	s15, r2
 800a222:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a226:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a22a:	ee15 4a90 	vmov	r4, s11
 800a22e:	ec52 1b15 	vmov	r1, r2, d5
 800a232:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a236:	2800      	cmp	r0, #0
 800a238:	d177      	bne.n	800a32a <_dtoa_r+0x4a2>
 800a23a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a23e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a242:	ec42 1b17 	vmov	d7, r1, r2
 800a246:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a24e:	f300 8263 	bgt.w	800a718 <_dtoa_r+0x890>
 800a252:	eeb1 7b47 	vneg.f64	d7, d7
 800a256:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25e:	f100 8258 	bmi.w	800a712 <_dtoa_r+0x88a>
 800a262:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a268:	2a00      	cmp	r2, #0
 800a26a:	f2c0 811d 	blt.w	800a4a8 <_dtoa_r+0x620>
 800a26e:	f1bb 0f0e 	cmp.w	fp, #14
 800a272:	f300 8119 	bgt.w	800a4a8 <_dtoa_r+0x620>
 800a276:	4b8a      	ldr	r3, [pc, #552]	; (800a4a0 <_dtoa_r+0x618>)
 800a278:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a27c:	ed93 6b00 	vldr	d6, [r3]
 800a280:	9b08      	ldr	r3, [sp, #32]
 800a282:	2b00      	cmp	r3, #0
 800a284:	f280 80b7 	bge.w	800a3f6 <_dtoa_r+0x56e>
 800a288:	f1b9 0f00 	cmp.w	r9, #0
 800a28c:	f300 80b3 	bgt.w	800a3f6 <_dtoa_r+0x56e>
 800a290:	f040 823f 	bne.w	800a712 <_dtoa_r+0x88a>
 800a294:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a298:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a29c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a8:	464c      	mov	r4, r9
 800a2aa:	464f      	mov	r7, r9
 800a2ac:	f280 8215 	bge.w	800a6da <_dtoa_r+0x852>
 800a2b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a2b4:	2331      	movs	r3, #49	; 0x31
 800a2b6:	f808 3b01 	strb.w	r3, [r8], #1
 800a2ba:	f10b 0b01 	add.w	fp, fp, #1
 800a2be:	e211      	b.n	800a6e4 <_dtoa_r+0x85c>
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	e780      	b.n	800a1c6 <_dtoa_r+0x33e>
 800a2c4:	07cc      	lsls	r4, r1, #31
 800a2c6:	d504      	bpl.n	800a2d2 <_dtoa_r+0x44a>
 800a2c8:	ed90 6b00 	vldr	d6, [r0]
 800a2cc:	3201      	adds	r2, #1
 800a2ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a2d2:	1049      	asrs	r1, r1, #1
 800a2d4:	3008      	adds	r0, #8
 800a2d6:	e777      	b.n	800a1c8 <_dtoa_r+0x340>
 800a2d8:	d022      	beq.n	800a320 <_dtoa_r+0x498>
 800a2da:	f1cb 0100 	rsb	r1, fp, #0
 800a2de:	4a70      	ldr	r2, [pc, #448]	; (800a4a0 <_dtoa_r+0x618>)
 800a2e0:	f001 000f 	and.w	r0, r1, #15
 800a2e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a2e8:	ed92 7b00 	vldr	d7, [r2]
 800a2ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a2f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a2f4:	486b      	ldr	r0, [pc, #428]	; (800a4a4 <_dtoa_r+0x61c>)
 800a2f6:	1109      	asrs	r1, r1, #4
 800a2f8:	2400      	movs	r4, #0
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	b929      	cbnz	r1, 800a30a <_dtoa_r+0x482>
 800a2fe:	2c00      	cmp	r4, #0
 800a300:	f43f af6a 	beq.w	800a1d8 <_dtoa_r+0x350>
 800a304:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a308:	e766      	b.n	800a1d8 <_dtoa_r+0x350>
 800a30a:	07cf      	lsls	r7, r1, #31
 800a30c:	d505      	bpl.n	800a31a <_dtoa_r+0x492>
 800a30e:	ed90 6b00 	vldr	d6, [r0]
 800a312:	3201      	adds	r2, #1
 800a314:	2401      	movs	r4, #1
 800a316:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a31a:	1049      	asrs	r1, r1, #1
 800a31c:	3008      	adds	r0, #8
 800a31e:	e7ed      	b.n	800a2fc <_dtoa_r+0x474>
 800a320:	2202      	movs	r2, #2
 800a322:	e759      	b.n	800a1d8 <_dtoa_r+0x350>
 800a324:	465f      	mov	r7, fp
 800a326:	4648      	mov	r0, r9
 800a328:	e775      	b.n	800a216 <_dtoa_r+0x38e>
 800a32a:	ec42 1b17 	vmov	d7, r1, r2
 800a32e:	4a5c      	ldr	r2, [pc, #368]	; (800a4a0 <_dtoa_r+0x618>)
 800a330:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a334:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a338:	9a01      	ldr	r2, [sp, #4]
 800a33a:	1814      	adds	r4, r2, r0
 800a33c:	9a07      	ldr	r2, [sp, #28]
 800a33e:	b352      	cbz	r2, 800a396 <_dtoa_r+0x50e>
 800a340:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a344:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a348:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a34c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a350:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a354:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a358:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a35c:	ee14 2a90 	vmov	r2, s9
 800a360:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a364:	3230      	adds	r2, #48	; 0x30
 800a366:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a36a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a372:	f808 2b01 	strb.w	r2, [r8], #1
 800a376:	d439      	bmi.n	800a3ec <_dtoa_r+0x564>
 800a378:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a37c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a384:	d472      	bmi.n	800a46c <_dtoa_r+0x5e4>
 800a386:	45a0      	cmp	r8, r4
 800a388:	f43f af6b 	beq.w	800a262 <_dtoa_r+0x3da>
 800a38c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a390:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a394:	e7e0      	b.n	800a358 <_dtoa_r+0x4d0>
 800a396:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a39a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a39e:	4621      	mov	r1, r4
 800a3a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a3a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a3a8:	ee14 2a90 	vmov	r2, s9
 800a3ac:	3230      	adds	r2, #48	; 0x30
 800a3ae:	f808 2b01 	strb.w	r2, [r8], #1
 800a3b2:	45a0      	cmp	r8, r4
 800a3b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a3b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a3bc:	d118      	bne.n	800a3f0 <_dtoa_r+0x568>
 800a3be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a3c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a3c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ce:	dc4d      	bgt.n	800a46c <_dtoa_r+0x5e4>
 800a3d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a3d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3dc:	f57f af41 	bpl.w	800a262 <_dtoa_r+0x3da>
 800a3e0:	4688      	mov	r8, r1
 800a3e2:	3901      	subs	r1, #1
 800a3e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a3e8:	2b30      	cmp	r3, #48	; 0x30
 800a3ea:	d0f9      	beq.n	800a3e0 <_dtoa_r+0x558>
 800a3ec:	46bb      	mov	fp, r7
 800a3ee:	e02a      	b.n	800a446 <_dtoa_r+0x5be>
 800a3f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a3f4:	e7d6      	b.n	800a3a4 <_dtoa_r+0x51c>
 800a3f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a3fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a402:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a406:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a40a:	ee15 3a10 	vmov	r3, s10
 800a40e:	3330      	adds	r3, #48	; 0x30
 800a410:	f808 3b01 	strb.w	r3, [r8], #1
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	eba8 0303 	sub.w	r3, r8, r3
 800a41a:	4599      	cmp	r9, r3
 800a41c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a420:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a424:	d133      	bne.n	800a48e <_dtoa_r+0x606>
 800a426:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a42a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a432:	dc1a      	bgt.n	800a46a <_dtoa_r+0x5e2>
 800a434:	eeb4 7b46 	vcmp.f64	d7, d6
 800a438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43c:	d103      	bne.n	800a446 <_dtoa_r+0x5be>
 800a43e:	ee15 3a10 	vmov	r3, s10
 800a442:	07d9      	lsls	r1, r3, #31
 800a444:	d411      	bmi.n	800a46a <_dtoa_r+0x5e2>
 800a446:	4629      	mov	r1, r5
 800a448:	4630      	mov	r0, r6
 800a44a:	f000 fd05 	bl	800ae58 <_Bfree>
 800a44e:	2300      	movs	r3, #0
 800a450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a452:	f888 3000 	strb.w	r3, [r8]
 800a456:	f10b 0301 	add.w	r3, fp, #1
 800a45a:	6013      	str	r3, [r2, #0]
 800a45c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f43f ad61 	beq.w	8009f26 <_dtoa_r+0x9e>
 800a464:	f8c3 8000 	str.w	r8, [r3]
 800a468:	e55d      	b.n	8009f26 <_dtoa_r+0x9e>
 800a46a:	465f      	mov	r7, fp
 800a46c:	4643      	mov	r3, r8
 800a46e:	4698      	mov	r8, r3
 800a470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a474:	2a39      	cmp	r2, #57	; 0x39
 800a476:	d106      	bne.n	800a486 <_dtoa_r+0x5fe>
 800a478:	9a01      	ldr	r2, [sp, #4]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d1f7      	bne.n	800a46e <_dtoa_r+0x5e6>
 800a47e:	9901      	ldr	r1, [sp, #4]
 800a480:	2230      	movs	r2, #48	; 0x30
 800a482:	3701      	adds	r7, #1
 800a484:	700a      	strb	r2, [r1, #0]
 800a486:	781a      	ldrb	r2, [r3, #0]
 800a488:	3201      	adds	r2, #1
 800a48a:	701a      	strb	r2, [r3, #0]
 800a48c:	e7ae      	b.n	800a3ec <_dtoa_r+0x564>
 800a48e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a492:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a49a:	d1b2      	bne.n	800a402 <_dtoa_r+0x57a>
 800a49c:	e7d3      	b.n	800a446 <_dtoa_r+0x5be>
 800a49e:	bf00      	nop
 800a4a0:	0800bc68 	.word	0x0800bc68
 800a4a4:	0800bc40 	.word	0x0800bc40
 800a4a8:	9907      	ldr	r1, [sp, #28]
 800a4aa:	2900      	cmp	r1, #0
 800a4ac:	f000 80d0 	beq.w	800a650 <_dtoa_r+0x7c8>
 800a4b0:	9906      	ldr	r1, [sp, #24]
 800a4b2:	2901      	cmp	r1, #1
 800a4b4:	f300 80b4 	bgt.w	800a620 <_dtoa_r+0x798>
 800a4b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a4ba:	2900      	cmp	r1, #0
 800a4bc:	f000 80ac 	beq.w	800a618 <_dtoa_r+0x790>
 800a4c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a4c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a4c8:	461c      	mov	r4, r3
 800a4ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a4cc:	9b04      	ldr	r3, [sp, #16]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	9304      	str	r3, [sp, #16]
 800a4d2:	9b05      	ldr	r3, [sp, #20]
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	4413      	add	r3, r2
 800a4d8:	4630      	mov	r0, r6
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	f000 fd74 	bl	800afc8 <__i2b>
 800a4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e2:	4607      	mov	r7, r0
 800a4e4:	f1b8 0f00 	cmp.w	r8, #0
 800a4e8:	dd0d      	ble.n	800a506 <_dtoa_r+0x67e>
 800a4ea:	9a05      	ldr	r2, [sp, #20]
 800a4ec:	2a00      	cmp	r2, #0
 800a4ee:	dd0a      	ble.n	800a506 <_dtoa_r+0x67e>
 800a4f0:	4542      	cmp	r2, r8
 800a4f2:	9904      	ldr	r1, [sp, #16]
 800a4f4:	bfa8      	it	ge
 800a4f6:	4642      	movge	r2, r8
 800a4f8:	1a89      	subs	r1, r1, r2
 800a4fa:	9104      	str	r1, [sp, #16]
 800a4fc:	9905      	ldr	r1, [sp, #20]
 800a4fe:	eba8 0802 	sub.w	r8, r8, r2
 800a502:	1a8a      	subs	r2, r1, r2
 800a504:	9205      	str	r2, [sp, #20]
 800a506:	b303      	cbz	r3, 800a54a <_dtoa_r+0x6c2>
 800a508:	9a07      	ldr	r2, [sp, #28]
 800a50a:	2a00      	cmp	r2, #0
 800a50c:	f000 80a5 	beq.w	800a65a <_dtoa_r+0x7d2>
 800a510:	2c00      	cmp	r4, #0
 800a512:	dd13      	ble.n	800a53c <_dtoa_r+0x6b4>
 800a514:	4639      	mov	r1, r7
 800a516:	4622      	mov	r2, r4
 800a518:	4630      	mov	r0, r6
 800a51a:	930d      	str	r3, [sp, #52]	; 0x34
 800a51c:	f000 fe14 	bl	800b148 <__pow5mult>
 800a520:	462a      	mov	r2, r5
 800a522:	4601      	mov	r1, r0
 800a524:	4607      	mov	r7, r0
 800a526:	4630      	mov	r0, r6
 800a528:	f000 fd64 	bl	800aff4 <__multiply>
 800a52c:	4629      	mov	r1, r5
 800a52e:	900a      	str	r0, [sp, #40]	; 0x28
 800a530:	4630      	mov	r0, r6
 800a532:	f000 fc91 	bl	800ae58 <_Bfree>
 800a536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a53a:	4615      	mov	r5, r2
 800a53c:	1b1a      	subs	r2, r3, r4
 800a53e:	d004      	beq.n	800a54a <_dtoa_r+0x6c2>
 800a540:	4629      	mov	r1, r5
 800a542:	4630      	mov	r0, r6
 800a544:	f000 fe00 	bl	800b148 <__pow5mult>
 800a548:	4605      	mov	r5, r0
 800a54a:	2101      	movs	r1, #1
 800a54c:	4630      	mov	r0, r6
 800a54e:	f000 fd3b 	bl	800afc8 <__i2b>
 800a552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a554:	2b00      	cmp	r3, #0
 800a556:	4604      	mov	r4, r0
 800a558:	f340 8081 	ble.w	800a65e <_dtoa_r+0x7d6>
 800a55c:	461a      	mov	r2, r3
 800a55e:	4601      	mov	r1, r0
 800a560:	4630      	mov	r0, r6
 800a562:	f000 fdf1 	bl	800b148 <__pow5mult>
 800a566:	9b06      	ldr	r3, [sp, #24]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	4604      	mov	r4, r0
 800a56c:	dd7a      	ble.n	800a664 <_dtoa_r+0x7dc>
 800a56e:	2300      	movs	r3, #0
 800a570:	930a      	str	r3, [sp, #40]	; 0x28
 800a572:	6922      	ldr	r2, [r4, #16]
 800a574:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a578:	6910      	ldr	r0, [r2, #16]
 800a57a:	f000 fcd5 	bl	800af28 <__hi0bits>
 800a57e:	f1c0 0020 	rsb	r0, r0, #32
 800a582:	9b05      	ldr	r3, [sp, #20]
 800a584:	4418      	add	r0, r3
 800a586:	f010 001f 	ands.w	r0, r0, #31
 800a58a:	f000 808c 	beq.w	800a6a6 <_dtoa_r+0x81e>
 800a58e:	f1c0 0220 	rsb	r2, r0, #32
 800a592:	2a04      	cmp	r2, #4
 800a594:	f340 8085 	ble.w	800a6a2 <_dtoa_r+0x81a>
 800a598:	f1c0 001c 	rsb	r0, r0, #28
 800a59c:	9b04      	ldr	r3, [sp, #16]
 800a59e:	4403      	add	r3, r0
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	9b05      	ldr	r3, [sp, #20]
 800a5a4:	4403      	add	r3, r0
 800a5a6:	4480      	add	r8, r0
 800a5a8:	9305      	str	r3, [sp, #20]
 800a5aa:	9b04      	ldr	r3, [sp, #16]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	dd05      	ble.n	800a5bc <_dtoa_r+0x734>
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f000 fe21 	bl	800b1fc <__lshift>
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	9b05      	ldr	r3, [sp, #20]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	dd05      	ble.n	800a5ce <_dtoa_r+0x746>
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f000 fe18 	bl	800b1fc <__lshift>
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d06a      	beq.n	800a6aa <_dtoa_r+0x822>
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f000 fe80 	bl	800b2dc <__mcmp>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	da64      	bge.n	800a6aa <_dtoa_r+0x822>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	220a      	movs	r2, #10
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f000 fc58 	bl	800ae9c <__multadd>
 800a5ec:	9b07      	ldr	r3, [sp, #28]
 800a5ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 8191 	beq.w	800a91c <_dtoa_r+0xa94>
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	220a      	movs	r2, #10
 800a600:	4630      	mov	r0, r6
 800a602:	f000 fc4b 	bl	800ae9c <__multadd>
 800a606:	f1ba 0f00 	cmp.w	sl, #0
 800a60a:	4607      	mov	r7, r0
 800a60c:	f300 808d 	bgt.w	800a72a <_dtoa_r+0x8a2>
 800a610:	9b06      	ldr	r3, [sp, #24]
 800a612:	2b02      	cmp	r3, #2
 800a614:	dc50      	bgt.n	800a6b8 <_dtoa_r+0x830>
 800a616:	e088      	b.n	800a72a <_dtoa_r+0x8a2>
 800a618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a61a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a61e:	e751      	b.n	800a4c4 <_dtoa_r+0x63c>
 800a620:	f109 34ff 	add.w	r4, r9, #4294967295
 800a624:	42a3      	cmp	r3, r4
 800a626:	bfbf      	itttt	lt
 800a628:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a62a:	1ae3      	sublt	r3, r4, r3
 800a62c:	18d2      	addlt	r2, r2, r3
 800a62e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a630:	bfb6      	itet	lt
 800a632:	4623      	movlt	r3, r4
 800a634:	1b1c      	subge	r4, r3, r4
 800a636:	2400      	movlt	r4, #0
 800a638:	f1b9 0f00 	cmp.w	r9, #0
 800a63c:	bfb5      	itete	lt
 800a63e:	9a04      	ldrlt	r2, [sp, #16]
 800a640:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a644:	eba2 0809 	sublt.w	r8, r2, r9
 800a648:	464a      	movge	r2, r9
 800a64a:	bfb8      	it	lt
 800a64c:	2200      	movlt	r2, #0
 800a64e:	e73c      	b.n	800a4ca <_dtoa_r+0x642>
 800a650:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a654:	9f07      	ldr	r7, [sp, #28]
 800a656:	461c      	mov	r4, r3
 800a658:	e744      	b.n	800a4e4 <_dtoa_r+0x65c>
 800a65a:	461a      	mov	r2, r3
 800a65c:	e770      	b.n	800a540 <_dtoa_r+0x6b8>
 800a65e:	9b06      	ldr	r3, [sp, #24]
 800a660:	2b01      	cmp	r3, #1
 800a662:	dc18      	bgt.n	800a696 <_dtoa_r+0x80e>
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	b9b3      	cbnz	r3, 800a696 <_dtoa_r+0x80e>
 800a668:	9b03      	ldr	r3, [sp, #12]
 800a66a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a66e:	b9a2      	cbnz	r2, 800a69a <_dtoa_r+0x812>
 800a670:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a674:	0d12      	lsrs	r2, r2, #20
 800a676:	0512      	lsls	r2, r2, #20
 800a678:	b18a      	cbz	r2, 800a69e <_dtoa_r+0x816>
 800a67a:	9b04      	ldr	r3, [sp, #16]
 800a67c:	3301      	adds	r3, #1
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	9b05      	ldr	r3, [sp, #20]
 800a682:	3301      	adds	r3, #1
 800a684:	9305      	str	r3, [sp, #20]
 800a686:	2301      	movs	r3, #1
 800a688:	930a      	str	r3, [sp, #40]	; 0x28
 800a68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f47f af70 	bne.w	800a572 <_dtoa_r+0x6ea>
 800a692:	2001      	movs	r0, #1
 800a694:	e775      	b.n	800a582 <_dtoa_r+0x6fa>
 800a696:	2300      	movs	r3, #0
 800a698:	e7f6      	b.n	800a688 <_dtoa_r+0x800>
 800a69a:	9b02      	ldr	r3, [sp, #8]
 800a69c:	e7f4      	b.n	800a688 <_dtoa_r+0x800>
 800a69e:	920a      	str	r2, [sp, #40]	; 0x28
 800a6a0:	e7f3      	b.n	800a68a <_dtoa_r+0x802>
 800a6a2:	d082      	beq.n	800a5aa <_dtoa_r+0x722>
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	301c      	adds	r0, #28
 800a6a8:	e778      	b.n	800a59c <_dtoa_r+0x714>
 800a6aa:	f1b9 0f00 	cmp.w	r9, #0
 800a6ae:	dc37      	bgt.n	800a720 <_dtoa_r+0x898>
 800a6b0:	9b06      	ldr	r3, [sp, #24]
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	dd34      	ble.n	800a720 <_dtoa_r+0x898>
 800a6b6:	46ca      	mov	sl, r9
 800a6b8:	f1ba 0f00 	cmp.w	sl, #0
 800a6bc:	d10d      	bne.n	800a6da <_dtoa_r+0x852>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4653      	mov	r3, sl
 800a6c2:	2205      	movs	r2, #5
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f000 fbe9 	bl	800ae9c <__multadd>
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 fe04 	bl	800b2dc <__mcmp>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	f73f adeb 	bgt.w	800a2b0 <_dtoa_r+0x428>
 800a6da:	9b08      	ldr	r3, [sp, #32]
 800a6dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a6e0:	ea6f 0b03 	mvn.w	fp, r3
 800a6e4:	f04f 0900 	mov.w	r9, #0
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f000 fbb4 	bl	800ae58 <_Bfree>
 800a6f0:	2f00      	cmp	r7, #0
 800a6f2:	f43f aea8 	beq.w	800a446 <_dtoa_r+0x5be>
 800a6f6:	f1b9 0f00 	cmp.w	r9, #0
 800a6fa:	d005      	beq.n	800a708 <_dtoa_r+0x880>
 800a6fc:	45b9      	cmp	r9, r7
 800a6fe:	d003      	beq.n	800a708 <_dtoa_r+0x880>
 800a700:	4649      	mov	r1, r9
 800a702:	4630      	mov	r0, r6
 800a704:	f000 fba8 	bl	800ae58 <_Bfree>
 800a708:	4639      	mov	r1, r7
 800a70a:	4630      	mov	r0, r6
 800a70c:	f000 fba4 	bl	800ae58 <_Bfree>
 800a710:	e699      	b.n	800a446 <_dtoa_r+0x5be>
 800a712:	2400      	movs	r4, #0
 800a714:	4627      	mov	r7, r4
 800a716:	e7e0      	b.n	800a6da <_dtoa_r+0x852>
 800a718:	46bb      	mov	fp, r7
 800a71a:	4604      	mov	r4, r0
 800a71c:	4607      	mov	r7, r0
 800a71e:	e5c7      	b.n	800a2b0 <_dtoa_r+0x428>
 800a720:	9b07      	ldr	r3, [sp, #28]
 800a722:	46ca      	mov	sl, r9
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 8100 	beq.w	800a92a <_dtoa_r+0xaa2>
 800a72a:	f1b8 0f00 	cmp.w	r8, #0
 800a72e:	dd05      	ble.n	800a73c <_dtoa_r+0x8b4>
 800a730:	4639      	mov	r1, r7
 800a732:	4642      	mov	r2, r8
 800a734:	4630      	mov	r0, r6
 800a736:	f000 fd61 	bl	800b1fc <__lshift>
 800a73a:	4607      	mov	r7, r0
 800a73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d05d      	beq.n	800a7fe <_dtoa_r+0x976>
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	4630      	mov	r0, r6
 800a746:	f000 fb47 	bl	800add8 <_Balloc>
 800a74a:	4680      	mov	r8, r0
 800a74c:	b928      	cbnz	r0, 800a75a <_dtoa_r+0x8d2>
 800a74e:	4b82      	ldr	r3, [pc, #520]	; (800a958 <_dtoa_r+0xad0>)
 800a750:	4602      	mov	r2, r0
 800a752:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a756:	f7ff bbaf 	b.w	8009eb8 <_dtoa_r+0x30>
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	3202      	adds	r2, #2
 800a75e:	0092      	lsls	r2, r2, #2
 800a760:	f107 010c 	add.w	r1, r7, #12
 800a764:	300c      	adds	r0, #12
 800a766:	f000 fb29 	bl	800adbc <memcpy>
 800a76a:	2201      	movs	r2, #1
 800a76c:	4641      	mov	r1, r8
 800a76e:	4630      	mov	r0, r6
 800a770:	f000 fd44 	bl	800b1fc <__lshift>
 800a774:	9b01      	ldr	r3, [sp, #4]
 800a776:	3301      	adds	r3, #1
 800a778:	9304      	str	r3, [sp, #16]
 800a77a:	9b01      	ldr	r3, [sp, #4]
 800a77c:	4453      	add	r3, sl
 800a77e:	9308      	str	r3, [sp, #32]
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	46b9      	mov	r9, r7
 800a788:	9307      	str	r3, [sp, #28]
 800a78a:	4607      	mov	r7, r0
 800a78c:	9b04      	ldr	r3, [sp, #16]
 800a78e:	4621      	mov	r1, r4
 800a790:	3b01      	subs	r3, #1
 800a792:	4628      	mov	r0, r5
 800a794:	9302      	str	r3, [sp, #8]
 800a796:	f7ff faec 	bl	8009d72 <quorem>
 800a79a:	4603      	mov	r3, r0
 800a79c:	3330      	adds	r3, #48	; 0x30
 800a79e:	9005      	str	r0, [sp, #20]
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a6:	f000 fd99 	bl	800b2dc <__mcmp>
 800a7aa:	463a      	mov	r2, r7
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 fdaf 	bl	800b314 <__mdiff>
 800a7b6:	68c2      	ldr	r2, [r0, #12]
 800a7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ba:	4680      	mov	r8, r0
 800a7bc:	bb0a      	cbnz	r2, 800a802 <_dtoa_r+0x97a>
 800a7be:	4601      	mov	r1, r0
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f000 fd8b 	bl	800b2dc <__mcmp>
 800a7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	4641      	mov	r1, r8
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a7d2:	f000 fb41 	bl	800ae58 <_Bfree>
 800a7d6:	9b06      	ldr	r3, [sp, #24]
 800a7d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a7de:	ea43 0102 	orr.w	r1, r3, r2
 800a7e2:	9b07      	ldr	r3, [sp, #28]
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e8:	d10d      	bne.n	800a806 <_dtoa_r+0x97e>
 800a7ea:	2b39      	cmp	r3, #57	; 0x39
 800a7ec:	d029      	beq.n	800a842 <_dtoa_r+0x9ba>
 800a7ee:	f1ba 0f00 	cmp.w	sl, #0
 800a7f2:	dd01      	ble.n	800a7f8 <_dtoa_r+0x970>
 800a7f4:	9b05      	ldr	r3, [sp, #20]
 800a7f6:	3331      	adds	r3, #49	; 0x31
 800a7f8:	9a02      	ldr	r2, [sp, #8]
 800a7fa:	7013      	strb	r3, [r2, #0]
 800a7fc:	e774      	b.n	800a6e8 <_dtoa_r+0x860>
 800a7fe:	4638      	mov	r0, r7
 800a800:	e7b8      	b.n	800a774 <_dtoa_r+0x8ec>
 800a802:	2201      	movs	r2, #1
 800a804:	e7e1      	b.n	800a7ca <_dtoa_r+0x942>
 800a806:	f1ba 0f00 	cmp.w	sl, #0
 800a80a:	db06      	blt.n	800a81a <_dtoa_r+0x992>
 800a80c:	9906      	ldr	r1, [sp, #24]
 800a80e:	ea41 0a0a 	orr.w	sl, r1, sl
 800a812:	9907      	ldr	r1, [sp, #28]
 800a814:	ea5a 0101 	orrs.w	r1, sl, r1
 800a818:	d120      	bne.n	800a85c <_dtoa_r+0x9d4>
 800a81a:	2a00      	cmp	r2, #0
 800a81c:	ddec      	ble.n	800a7f8 <_dtoa_r+0x970>
 800a81e:	4629      	mov	r1, r5
 800a820:	2201      	movs	r2, #1
 800a822:	4630      	mov	r0, r6
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	f000 fce9 	bl	800b1fc <__lshift>
 800a82a:	4621      	mov	r1, r4
 800a82c:	4605      	mov	r5, r0
 800a82e:	f000 fd55 	bl	800b2dc <__mcmp>
 800a832:	2800      	cmp	r0, #0
 800a834:	9b04      	ldr	r3, [sp, #16]
 800a836:	dc02      	bgt.n	800a83e <_dtoa_r+0x9b6>
 800a838:	d1de      	bne.n	800a7f8 <_dtoa_r+0x970>
 800a83a:	07da      	lsls	r2, r3, #31
 800a83c:	d5dc      	bpl.n	800a7f8 <_dtoa_r+0x970>
 800a83e:	2b39      	cmp	r3, #57	; 0x39
 800a840:	d1d8      	bne.n	800a7f4 <_dtoa_r+0x96c>
 800a842:	9a02      	ldr	r2, [sp, #8]
 800a844:	2339      	movs	r3, #57	; 0x39
 800a846:	7013      	strb	r3, [r2, #0]
 800a848:	4643      	mov	r3, r8
 800a84a:	4698      	mov	r8, r3
 800a84c:	3b01      	subs	r3, #1
 800a84e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a852:	2a39      	cmp	r2, #57	; 0x39
 800a854:	d051      	beq.n	800a8fa <_dtoa_r+0xa72>
 800a856:	3201      	adds	r2, #1
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	e745      	b.n	800a6e8 <_dtoa_r+0x860>
 800a85c:	2a00      	cmp	r2, #0
 800a85e:	dd03      	ble.n	800a868 <_dtoa_r+0x9e0>
 800a860:	2b39      	cmp	r3, #57	; 0x39
 800a862:	d0ee      	beq.n	800a842 <_dtoa_r+0x9ba>
 800a864:	3301      	adds	r3, #1
 800a866:	e7c7      	b.n	800a7f8 <_dtoa_r+0x970>
 800a868:	9a04      	ldr	r2, [sp, #16]
 800a86a:	9908      	ldr	r1, [sp, #32]
 800a86c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a870:	428a      	cmp	r2, r1
 800a872:	d02b      	beq.n	800a8cc <_dtoa_r+0xa44>
 800a874:	4629      	mov	r1, r5
 800a876:	2300      	movs	r3, #0
 800a878:	220a      	movs	r2, #10
 800a87a:	4630      	mov	r0, r6
 800a87c:	f000 fb0e 	bl	800ae9c <__multadd>
 800a880:	45b9      	cmp	r9, r7
 800a882:	4605      	mov	r5, r0
 800a884:	f04f 0300 	mov.w	r3, #0
 800a888:	f04f 020a 	mov.w	r2, #10
 800a88c:	4649      	mov	r1, r9
 800a88e:	4630      	mov	r0, r6
 800a890:	d107      	bne.n	800a8a2 <_dtoa_r+0xa1a>
 800a892:	f000 fb03 	bl	800ae9c <__multadd>
 800a896:	4681      	mov	r9, r0
 800a898:	4607      	mov	r7, r0
 800a89a:	9b04      	ldr	r3, [sp, #16]
 800a89c:	3301      	adds	r3, #1
 800a89e:	9304      	str	r3, [sp, #16]
 800a8a0:	e774      	b.n	800a78c <_dtoa_r+0x904>
 800a8a2:	f000 fafb 	bl	800ae9c <__multadd>
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	4681      	mov	r9, r0
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	220a      	movs	r2, #10
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f000 faf4 	bl	800ae9c <__multadd>
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	e7f0      	b.n	800a89a <_dtoa_r+0xa12>
 800a8b8:	f1ba 0f00 	cmp.w	sl, #0
 800a8bc:	9a01      	ldr	r2, [sp, #4]
 800a8be:	bfcc      	ite	gt
 800a8c0:	46d0      	movgt	r8, sl
 800a8c2:	f04f 0801 	movle.w	r8, #1
 800a8c6:	4490      	add	r8, r2
 800a8c8:	f04f 0900 	mov.w	r9, #0
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	9302      	str	r3, [sp, #8]
 800a8d4:	f000 fc92 	bl	800b1fc <__lshift>
 800a8d8:	4621      	mov	r1, r4
 800a8da:	4605      	mov	r5, r0
 800a8dc:	f000 fcfe 	bl	800b2dc <__mcmp>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	dcb1      	bgt.n	800a848 <_dtoa_r+0x9c0>
 800a8e4:	d102      	bne.n	800a8ec <_dtoa_r+0xa64>
 800a8e6:	9b02      	ldr	r3, [sp, #8]
 800a8e8:	07db      	lsls	r3, r3, #31
 800a8ea:	d4ad      	bmi.n	800a848 <_dtoa_r+0x9c0>
 800a8ec:	4643      	mov	r3, r8
 800a8ee:	4698      	mov	r8, r3
 800a8f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8f4:	2a30      	cmp	r2, #48	; 0x30
 800a8f6:	d0fa      	beq.n	800a8ee <_dtoa_r+0xa66>
 800a8f8:	e6f6      	b.n	800a6e8 <_dtoa_r+0x860>
 800a8fa:	9a01      	ldr	r2, [sp, #4]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d1a4      	bne.n	800a84a <_dtoa_r+0x9c2>
 800a900:	f10b 0b01 	add.w	fp, fp, #1
 800a904:	2331      	movs	r3, #49	; 0x31
 800a906:	e778      	b.n	800a7fa <_dtoa_r+0x972>
 800a908:	4b14      	ldr	r3, [pc, #80]	; (800a95c <_dtoa_r+0xad4>)
 800a90a:	f7ff bb27 	b.w	8009f5c <_dtoa_r+0xd4>
 800a90e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a910:	2b00      	cmp	r3, #0
 800a912:	f47f ab03 	bne.w	8009f1c <_dtoa_r+0x94>
 800a916:	4b12      	ldr	r3, [pc, #72]	; (800a960 <_dtoa_r+0xad8>)
 800a918:	f7ff bb20 	b.w	8009f5c <_dtoa_r+0xd4>
 800a91c:	f1ba 0f00 	cmp.w	sl, #0
 800a920:	dc03      	bgt.n	800a92a <_dtoa_r+0xaa2>
 800a922:	9b06      	ldr	r3, [sp, #24]
 800a924:	2b02      	cmp	r3, #2
 800a926:	f73f aec7 	bgt.w	800a6b8 <_dtoa_r+0x830>
 800a92a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a92e:	4621      	mov	r1, r4
 800a930:	4628      	mov	r0, r5
 800a932:	f7ff fa1e 	bl	8009d72 <quorem>
 800a936:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a93a:	f808 3b01 	strb.w	r3, [r8], #1
 800a93e:	9a01      	ldr	r2, [sp, #4]
 800a940:	eba8 0202 	sub.w	r2, r8, r2
 800a944:	4592      	cmp	sl, r2
 800a946:	ddb7      	ble.n	800a8b8 <_dtoa_r+0xa30>
 800a948:	4629      	mov	r1, r5
 800a94a:	2300      	movs	r3, #0
 800a94c:	220a      	movs	r2, #10
 800a94e:	4630      	mov	r0, r6
 800a950:	f000 faa4 	bl	800ae9c <__multadd>
 800a954:	4605      	mov	r5, r0
 800a956:	e7ea      	b.n	800a92e <_dtoa_r+0xaa6>
 800a958:	0800bb70 	.word	0x0800bb70
 800a95c:	0800bacd 	.word	0x0800bacd
 800a960:	0800baf1 	.word	0x0800baf1

0800a964 <__sflush_r>:
 800a964:	898a      	ldrh	r2, [r1, #12]
 800a966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96a:	4605      	mov	r5, r0
 800a96c:	0710      	lsls	r0, r2, #28
 800a96e:	460c      	mov	r4, r1
 800a970:	d458      	bmi.n	800aa24 <__sflush_r+0xc0>
 800a972:	684b      	ldr	r3, [r1, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	dc05      	bgt.n	800a984 <__sflush_r+0x20>
 800a978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	dc02      	bgt.n	800a984 <__sflush_r+0x20>
 800a97e:	2000      	movs	r0, #0
 800a980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a986:	2e00      	cmp	r6, #0
 800a988:	d0f9      	beq.n	800a97e <__sflush_r+0x1a>
 800a98a:	2300      	movs	r3, #0
 800a98c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a990:	682f      	ldr	r7, [r5, #0]
 800a992:	602b      	str	r3, [r5, #0]
 800a994:	d032      	beq.n	800a9fc <__sflush_r+0x98>
 800a996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	075a      	lsls	r2, r3, #29
 800a99c:	d505      	bpl.n	800a9aa <__sflush_r+0x46>
 800a99e:	6863      	ldr	r3, [r4, #4]
 800a9a0:	1ac0      	subs	r0, r0, r3
 800a9a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9a4:	b10b      	cbz	r3, 800a9aa <__sflush_r+0x46>
 800a9a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9a8:	1ac0      	subs	r0, r0, r3
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9b0:	6a21      	ldr	r1, [r4, #32]
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	47b0      	blx	r6
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	d106      	bne.n	800a9ca <__sflush_r+0x66>
 800a9bc:	6829      	ldr	r1, [r5, #0]
 800a9be:	291d      	cmp	r1, #29
 800a9c0:	d82c      	bhi.n	800aa1c <__sflush_r+0xb8>
 800a9c2:	4a2a      	ldr	r2, [pc, #168]	; (800aa6c <__sflush_r+0x108>)
 800a9c4:	40ca      	lsrs	r2, r1
 800a9c6:	07d6      	lsls	r6, r2, #31
 800a9c8:	d528      	bpl.n	800aa1c <__sflush_r+0xb8>
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	6062      	str	r2, [r4, #4]
 800a9ce:	04d9      	lsls	r1, r3, #19
 800a9d0:	6922      	ldr	r2, [r4, #16]
 800a9d2:	6022      	str	r2, [r4, #0]
 800a9d4:	d504      	bpl.n	800a9e0 <__sflush_r+0x7c>
 800a9d6:	1c42      	adds	r2, r0, #1
 800a9d8:	d101      	bne.n	800a9de <__sflush_r+0x7a>
 800a9da:	682b      	ldr	r3, [r5, #0]
 800a9dc:	b903      	cbnz	r3, 800a9e0 <__sflush_r+0x7c>
 800a9de:	6560      	str	r0, [r4, #84]	; 0x54
 800a9e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9e2:	602f      	str	r7, [r5, #0]
 800a9e4:	2900      	cmp	r1, #0
 800a9e6:	d0ca      	beq.n	800a97e <__sflush_r+0x1a>
 800a9e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9ec:	4299      	cmp	r1, r3
 800a9ee:	d002      	beq.n	800a9f6 <__sflush_r+0x92>
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f000 fd8b 	bl	800b50c <_free_r>
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	6360      	str	r0, [r4, #52]	; 0x34
 800a9fa:	e7c1      	b.n	800a980 <__sflush_r+0x1c>
 800a9fc:	6a21      	ldr	r1, [r4, #32]
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b0      	blx	r6
 800aa04:	1c41      	adds	r1, r0, #1
 800aa06:	d1c7      	bne.n	800a998 <__sflush_r+0x34>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0c4      	beq.n	800a998 <__sflush_r+0x34>
 800aa0e:	2b1d      	cmp	r3, #29
 800aa10:	d001      	beq.n	800aa16 <__sflush_r+0xb2>
 800aa12:	2b16      	cmp	r3, #22
 800aa14:	d101      	bne.n	800aa1a <__sflush_r+0xb6>
 800aa16:	602f      	str	r7, [r5, #0]
 800aa18:	e7b1      	b.n	800a97e <__sflush_r+0x1a>
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	e7ad      	b.n	800a980 <__sflush_r+0x1c>
 800aa24:	690f      	ldr	r7, [r1, #16]
 800aa26:	2f00      	cmp	r7, #0
 800aa28:	d0a9      	beq.n	800a97e <__sflush_r+0x1a>
 800aa2a:	0793      	lsls	r3, r2, #30
 800aa2c:	680e      	ldr	r6, [r1, #0]
 800aa2e:	bf08      	it	eq
 800aa30:	694b      	ldreq	r3, [r1, #20]
 800aa32:	600f      	str	r7, [r1, #0]
 800aa34:	bf18      	it	ne
 800aa36:	2300      	movne	r3, #0
 800aa38:	eba6 0807 	sub.w	r8, r6, r7
 800aa3c:	608b      	str	r3, [r1, #8]
 800aa3e:	f1b8 0f00 	cmp.w	r8, #0
 800aa42:	dd9c      	ble.n	800a97e <__sflush_r+0x1a>
 800aa44:	6a21      	ldr	r1, [r4, #32]
 800aa46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa48:	4643      	mov	r3, r8
 800aa4a:	463a      	mov	r2, r7
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b0      	blx	r6
 800aa50:	2800      	cmp	r0, #0
 800aa52:	dc06      	bgt.n	800aa62 <__sflush_r+0xfe>
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa60:	e78e      	b.n	800a980 <__sflush_r+0x1c>
 800aa62:	4407      	add	r7, r0
 800aa64:	eba8 0800 	sub.w	r8, r8, r0
 800aa68:	e7e9      	b.n	800aa3e <__sflush_r+0xda>
 800aa6a:	bf00      	nop
 800aa6c:	20400001 	.word	0x20400001

0800aa70 <_fflush_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	690b      	ldr	r3, [r1, #16]
 800aa74:	4605      	mov	r5, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	b913      	cbnz	r3, 800aa80 <_fflush_r+0x10>
 800aa7a:	2500      	movs	r5, #0
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	b118      	cbz	r0, 800aa8a <_fflush_r+0x1a>
 800aa82:	6983      	ldr	r3, [r0, #24]
 800aa84:	b90b      	cbnz	r3, 800aa8a <_fflush_r+0x1a>
 800aa86:	f000 f887 	bl	800ab98 <__sinit>
 800aa8a:	4b14      	ldr	r3, [pc, #80]	; (800aadc <_fflush_r+0x6c>)
 800aa8c:	429c      	cmp	r4, r3
 800aa8e:	d11b      	bne.n	800aac8 <_fflush_r+0x58>
 800aa90:	686c      	ldr	r4, [r5, #4]
 800aa92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0ef      	beq.n	800aa7a <_fflush_r+0xa>
 800aa9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa9c:	07d0      	lsls	r0, r2, #31
 800aa9e:	d404      	bmi.n	800aaaa <_fflush_r+0x3a>
 800aaa0:	0599      	lsls	r1, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <_fflush_r+0x3a>
 800aaa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaa6:	f000 f91a 	bl	800acde <__retarget_lock_acquire_recursive>
 800aaaa:	4628      	mov	r0, r5
 800aaac:	4621      	mov	r1, r4
 800aaae:	f7ff ff59 	bl	800a964 <__sflush_r>
 800aab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aab4:	07da      	lsls	r2, r3, #31
 800aab6:	4605      	mov	r5, r0
 800aab8:	d4e0      	bmi.n	800aa7c <_fflush_r+0xc>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	059b      	lsls	r3, r3, #22
 800aabe:	d4dd      	bmi.n	800aa7c <_fflush_r+0xc>
 800aac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aac2:	f000 f90d 	bl	800ace0 <__retarget_lock_release_recursive>
 800aac6:	e7d9      	b.n	800aa7c <_fflush_r+0xc>
 800aac8:	4b05      	ldr	r3, [pc, #20]	; (800aae0 <_fflush_r+0x70>)
 800aaca:	429c      	cmp	r4, r3
 800aacc:	d101      	bne.n	800aad2 <_fflush_r+0x62>
 800aace:	68ac      	ldr	r4, [r5, #8]
 800aad0:	e7df      	b.n	800aa92 <_fflush_r+0x22>
 800aad2:	4b04      	ldr	r3, [pc, #16]	; (800aae4 <_fflush_r+0x74>)
 800aad4:	429c      	cmp	r4, r3
 800aad6:	bf08      	it	eq
 800aad8:	68ec      	ldreq	r4, [r5, #12]
 800aada:	e7da      	b.n	800aa92 <_fflush_r+0x22>
 800aadc:	0800bba4 	.word	0x0800bba4
 800aae0:	0800bbc4 	.word	0x0800bbc4
 800aae4:	0800bb84 	.word	0x0800bb84

0800aae8 <std>:
 800aae8:	2300      	movs	r3, #0
 800aaea:	b510      	push	{r4, lr}
 800aaec:	4604      	mov	r4, r0
 800aaee:	e9c0 3300 	strd	r3, r3, [r0]
 800aaf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaf6:	6083      	str	r3, [r0, #8]
 800aaf8:	8181      	strh	r1, [r0, #12]
 800aafa:	6643      	str	r3, [r0, #100]	; 0x64
 800aafc:	81c2      	strh	r2, [r0, #14]
 800aafe:	6183      	str	r3, [r0, #24]
 800ab00:	4619      	mov	r1, r3
 800ab02:	2208      	movs	r2, #8
 800ab04:	305c      	adds	r0, #92	; 0x5c
 800ab06:	f7fe fac9 	bl	800909c <memset>
 800ab0a:	4b05      	ldr	r3, [pc, #20]	; (800ab20 <std+0x38>)
 800ab0c:	6263      	str	r3, [r4, #36]	; 0x24
 800ab0e:	4b05      	ldr	r3, [pc, #20]	; (800ab24 <std+0x3c>)
 800ab10:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab12:	4b05      	ldr	r3, [pc, #20]	; (800ab28 <std+0x40>)
 800ab14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab16:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <std+0x44>)
 800ab18:	6224      	str	r4, [r4, #32]
 800ab1a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab1c:	bd10      	pop	{r4, pc}
 800ab1e:	bf00      	nop
 800ab20:	0800b775 	.word	0x0800b775
 800ab24:	0800b797 	.word	0x0800b797
 800ab28:	0800b7cf 	.word	0x0800b7cf
 800ab2c:	0800b7f3 	.word	0x0800b7f3

0800ab30 <_cleanup_r>:
 800ab30:	4901      	ldr	r1, [pc, #4]	; (800ab38 <_cleanup_r+0x8>)
 800ab32:	f000 b8af 	b.w	800ac94 <_fwalk_reent>
 800ab36:	bf00      	nop
 800ab38:	0800aa71 	.word	0x0800aa71

0800ab3c <__sfmoreglue>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	2268      	movs	r2, #104	; 0x68
 800ab40:	1e4d      	subs	r5, r1, #1
 800ab42:	4355      	muls	r5, r2
 800ab44:	460e      	mov	r6, r1
 800ab46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab4a:	f000 fd4b 	bl	800b5e4 <_malloc_r>
 800ab4e:	4604      	mov	r4, r0
 800ab50:	b140      	cbz	r0, 800ab64 <__sfmoreglue+0x28>
 800ab52:	2100      	movs	r1, #0
 800ab54:	e9c0 1600 	strd	r1, r6, [r0]
 800ab58:	300c      	adds	r0, #12
 800ab5a:	60a0      	str	r0, [r4, #8]
 800ab5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab60:	f7fe fa9c 	bl	800909c <memset>
 800ab64:	4620      	mov	r0, r4
 800ab66:	bd70      	pop	{r4, r5, r6, pc}

0800ab68 <__sfp_lock_acquire>:
 800ab68:	4801      	ldr	r0, [pc, #4]	; (800ab70 <__sfp_lock_acquire+0x8>)
 800ab6a:	f000 b8b8 	b.w	800acde <__retarget_lock_acquire_recursive>
 800ab6e:	bf00      	nop
 800ab70:	240002e1 	.word	0x240002e1

0800ab74 <__sfp_lock_release>:
 800ab74:	4801      	ldr	r0, [pc, #4]	; (800ab7c <__sfp_lock_release+0x8>)
 800ab76:	f000 b8b3 	b.w	800ace0 <__retarget_lock_release_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	240002e1 	.word	0x240002e1

0800ab80 <__sinit_lock_acquire>:
 800ab80:	4801      	ldr	r0, [pc, #4]	; (800ab88 <__sinit_lock_acquire+0x8>)
 800ab82:	f000 b8ac 	b.w	800acde <__retarget_lock_acquire_recursive>
 800ab86:	bf00      	nop
 800ab88:	240002e2 	.word	0x240002e2

0800ab8c <__sinit_lock_release>:
 800ab8c:	4801      	ldr	r0, [pc, #4]	; (800ab94 <__sinit_lock_release+0x8>)
 800ab8e:	f000 b8a7 	b.w	800ace0 <__retarget_lock_release_recursive>
 800ab92:	bf00      	nop
 800ab94:	240002e2 	.word	0x240002e2

0800ab98 <__sinit>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	f7ff fff0 	bl	800ab80 <__sinit_lock_acquire>
 800aba0:	69a3      	ldr	r3, [r4, #24]
 800aba2:	b11b      	cbz	r3, 800abac <__sinit+0x14>
 800aba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aba8:	f7ff bff0 	b.w	800ab8c <__sinit_lock_release>
 800abac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abb0:	6523      	str	r3, [r4, #80]	; 0x50
 800abb2:	4b13      	ldr	r3, [pc, #76]	; (800ac00 <__sinit+0x68>)
 800abb4:	4a13      	ldr	r2, [pc, #76]	; (800ac04 <__sinit+0x6c>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	62a2      	str	r2, [r4, #40]	; 0x28
 800abba:	42a3      	cmp	r3, r4
 800abbc:	bf04      	itt	eq
 800abbe:	2301      	moveq	r3, #1
 800abc0:	61a3      	streq	r3, [r4, #24]
 800abc2:	4620      	mov	r0, r4
 800abc4:	f000 f820 	bl	800ac08 <__sfp>
 800abc8:	6060      	str	r0, [r4, #4]
 800abca:	4620      	mov	r0, r4
 800abcc:	f000 f81c 	bl	800ac08 <__sfp>
 800abd0:	60a0      	str	r0, [r4, #8]
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 f818 	bl	800ac08 <__sfp>
 800abd8:	2200      	movs	r2, #0
 800abda:	60e0      	str	r0, [r4, #12]
 800abdc:	2104      	movs	r1, #4
 800abde:	6860      	ldr	r0, [r4, #4]
 800abe0:	f7ff ff82 	bl	800aae8 <std>
 800abe4:	68a0      	ldr	r0, [r4, #8]
 800abe6:	2201      	movs	r2, #1
 800abe8:	2109      	movs	r1, #9
 800abea:	f7ff ff7d 	bl	800aae8 <std>
 800abee:	68e0      	ldr	r0, [r4, #12]
 800abf0:	2202      	movs	r2, #2
 800abf2:	2112      	movs	r1, #18
 800abf4:	f7ff ff78 	bl	800aae8 <std>
 800abf8:	2301      	movs	r3, #1
 800abfa:	61a3      	str	r3, [r4, #24]
 800abfc:	e7d2      	b.n	800aba4 <__sinit+0xc>
 800abfe:	bf00      	nop
 800ac00:	0800baa8 	.word	0x0800baa8
 800ac04:	0800ab31 	.word	0x0800ab31

0800ac08 <__sfp>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	4607      	mov	r7, r0
 800ac0c:	f7ff ffac 	bl	800ab68 <__sfp_lock_acquire>
 800ac10:	4b1e      	ldr	r3, [pc, #120]	; (800ac8c <__sfp+0x84>)
 800ac12:	681e      	ldr	r6, [r3, #0]
 800ac14:	69b3      	ldr	r3, [r6, #24]
 800ac16:	b913      	cbnz	r3, 800ac1e <__sfp+0x16>
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7ff ffbd 	bl	800ab98 <__sinit>
 800ac1e:	3648      	adds	r6, #72	; 0x48
 800ac20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	d503      	bpl.n	800ac30 <__sfp+0x28>
 800ac28:	6833      	ldr	r3, [r6, #0]
 800ac2a:	b30b      	cbz	r3, 800ac70 <__sfp+0x68>
 800ac2c:	6836      	ldr	r6, [r6, #0]
 800ac2e:	e7f7      	b.n	800ac20 <__sfp+0x18>
 800ac30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac34:	b9d5      	cbnz	r5, 800ac6c <__sfp+0x64>
 800ac36:	4b16      	ldr	r3, [pc, #88]	; (800ac90 <__sfp+0x88>)
 800ac38:	60e3      	str	r3, [r4, #12]
 800ac3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac3e:	6665      	str	r5, [r4, #100]	; 0x64
 800ac40:	f000 f84c 	bl	800acdc <__retarget_lock_init_recursive>
 800ac44:	f7ff ff96 	bl	800ab74 <__sfp_lock_release>
 800ac48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac50:	6025      	str	r5, [r4, #0]
 800ac52:	61a5      	str	r5, [r4, #24]
 800ac54:	2208      	movs	r2, #8
 800ac56:	4629      	mov	r1, r5
 800ac58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac5c:	f7fe fa1e 	bl	800909c <memset>
 800ac60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac68:	4620      	mov	r0, r4
 800ac6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac6c:	3468      	adds	r4, #104	; 0x68
 800ac6e:	e7d9      	b.n	800ac24 <__sfp+0x1c>
 800ac70:	2104      	movs	r1, #4
 800ac72:	4638      	mov	r0, r7
 800ac74:	f7ff ff62 	bl	800ab3c <__sfmoreglue>
 800ac78:	4604      	mov	r4, r0
 800ac7a:	6030      	str	r0, [r6, #0]
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d1d5      	bne.n	800ac2c <__sfp+0x24>
 800ac80:	f7ff ff78 	bl	800ab74 <__sfp_lock_release>
 800ac84:	230c      	movs	r3, #12
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	e7ee      	b.n	800ac68 <__sfp+0x60>
 800ac8a:	bf00      	nop
 800ac8c:	0800baa8 	.word	0x0800baa8
 800ac90:	ffff0001 	.word	0xffff0001

0800ac94 <_fwalk_reent>:
 800ac94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac98:	4606      	mov	r6, r0
 800ac9a:	4688      	mov	r8, r1
 800ac9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aca0:	2700      	movs	r7, #0
 800aca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aca6:	f1b9 0901 	subs.w	r9, r9, #1
 800acaa:	d505      	bpl.n	800acb8 <_fwalk_reent+0x24>
 800acac:	6824      	ldr	r4, [r4, #0]
 800acae:	2c00      	cmp	r4, #0
 800acb0:	d1f7      	bne.n	800aca2 <_fwalk_reent+0xe>
 800acb2:	4638      	mov	r0, r7
 800acb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acb8:	89ab      	ldrh	r3, [r5, #12]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d907      	bls.n	800acce <_fwalk_reent+0x3a>
 800acbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acc2:	3301      	adds	r3, #1
 800acc4:	d003      	beq.n	800acce <_fwalk_reent+0x3a>
 800acc6:	4629      	mov	r1, r5
 800acc8:	4630      	mov	r0, r6
 800acca:	47c0      	blx	r8
 800accc:	4307      	orrs	r7, r0
 800acce:	3568      	adds	r5, #104	; 0x68
 800acd0:	e7e9      	b.n	800aca6 <_fwalk_reent+0x12>
	...

0800acd4 <_localeconv_r>:
 800acd4:	4800      	ldr	r0, [pc, #0]	; (800acd8 <_localeconv_r+0x4>)
 800acd6:	4770      	bx	lr
 800acd8:	24000164 	.word	0x24000164

0800acdc <__retarget_lock_init_recursive>:
 800acdc:	4770      	bx	lr

0800acde <__retarget_lock_acquire_recursive>:
 800acde:	4770      	bx	lr

0800ace0 <__retarget_lock_release_recursive>:
 800ace0:	4770      	bx	lr

0800ace2 <__swhatbuf_r>:
 800ace2:	b570      	push	{r4, r5, r6, lr}
 800ace4:	460e      	mov	r6, r1
 800ace6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acea:	2900      	cmp	r1, #0
 800acec:	b096      	sub	sp, #88	; 0x58
 800acee:	4614      	mov	r4, r2
 800acf0:	461d      	mov	r5, r3
 800acf2:	da08      	bge.n	800ad06 <__swhatbuf_r+0x24>
 800acf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	602a      	str	r2, [r5, #0]
 800acfc:	061a      	lsls	r2, r3, #24
 800acfe:	d410      	bmi.n	800ad22 <__swhatbuf_r+0x40>
 800ad00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad04:	e00e      	b.n	800ad24 <__swhatbuf_r+0x42>
 800ad06:	466a      	mov	r2, sp
 800ad08:	f000 fd9a 	bl	800b840 <_fstat_r>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	dbf1      	blt.n	800acf4 <__swhatbuf_r+0x12>
 800ad10:	9a01      	ldr	r2, [sp, #4]
 800ad12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad1a:	425a      	negs	r2, r3
 800ad1c:	415a      	adcs	r2, r3
 800ad1e:	602a      	str	r2, [r5, #0]
 800ad20:	e7ee      	b.n	800ad00 <__swhatbuf_r+0x1e>
 800ad22:	2340      	movs	r3, #64	; 0x40
 800ad24:	2000      	movs	r0, #0
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	b016      	add	sp, #88	; 0x58
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}

0800ad2c <__smakebuf_r>:
 800ad2c:	898b      	ldrh	r3, [r1, #12]
 800ad2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad30:	079d      	lsls	r5, r3, #30
 800ad32:	4606      	mov	r6, r0
 800ad34:	460c      	mov	r4, r1
 800ad36:	d507      	bpl.n	800ad48 <__smakebuf_r+0x1c>
 800ad38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	2301      	movs	r3, #1
 800ad42:	6163      	str	r3, [r4, #20]
 800ad44:	b002      	add	sp, #8
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	ab01      	add	r3, sp, #4
 800ad4a:	466a      	mov	r2, sp
 800ad4c:	f7ff ffc9 	bl	800ace2 <__swhatbuf_r>
 800ad50:	9900      	ldr	r1, [sp, #0]
 800ad52:	4605      	mov	r5, r0
 800ad54:	4630      	mov	r0, r6
 800ad56:	f000 fc45 	bl	800b5e4 <_malloc_r>
 800ad5a:	b948      	cbnz	r0, 800ad70 <__smakebuf_r+0x44>
 800ad5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad60:	059a      	lsls	r2, r3, #22
 800ad62:	d4ef      	bmi.n	800ad44 <__smakebuf_r+0x18>
 800ad64:	f023 0303 	bic.w	r3, r3, #3
 800ad68:	f043 0302 	orr.w	r3, r3, #2
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	e7e3      	b.n	800ad38 <__smakebuf_r+0xc>
 800ad70:	4b0d      	ldr	r3, [pc, #52]	; (800ada8 <__smakebuf_r+0x7c>)
 800ad72:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad74:	89a3      	ldrh	r3, [r4, #12]
 800ad76:	6020      	str	r0, [r4, #0]
 800ad78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad7c:	81a3      	strh	r3, [r4, #12]
 800ad7e:	9b00      	ldr	r3, [sp, #0]
 800ad80:	6163      	str	r3, [r4, #20]
 800ad82:	9b01      	ldr	r3, [sp, #4]
 800ad84:	6120      	str	r0, [r4, #16]
 800ad86:	b15b      	cbz	r3, 800ada0 <__smakebuf_r+0x74>
 800ad88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f000 fd69 	bl	800b864 <_isatty_r>
 800ad92:	b128      	cbz	r0, 800ada0 <__smakebuf_r+0x74>
 800ad94:	89a3      	ldrh	r3, [r4, #12]
 800ad96:	f023 0303 	bic.w	r3, r3, #3
 800ad9a:	f043 0301 	orr.w	r3, r3, #1
 800ad9e:	81a3      	strh	r3, [r4, #12]
 800ada0:	89a0      	ldrh	r0, [r4, #12]
 800ada2:	4305      	orrs	r5, r0
 800ada4:	81a5      	strh	r5, [r4, #12]
 800ada6:	e7cd      	b.n	800ad44 <__smakebuf_r+0x18>
 800ada8:	0800ab31 	.word	0x0800ab31

0800adac <malloc>:
 800adac:	4b02      	ldr	r3, [pc, #8]	; (800adb8 <malloc+0xc>)
 800adae:	4601      	mov	r1, r0
 800adb0:	6818      	ldr	r0, [r3, #0]
 800adb2:	f000 bc17 	b.w	800b5e4 <_malloc_r>
 800adb6:	bf00      	nop
 800adb8:	24000010 	.word	0x24000010

0800adbc <memcpy>:
 800adbc:	440a      	add	r2, r1
 800adbe:	4291      	cmp	r1, r2
 800adc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800adc4:	d100      	bne.n	800adc8 <memcpy+0xc>
 800adc6:	4770      	bx	lr
 800adc8:	b510      	push	{r4, lr}
 800adca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800add2:	4291      	cmp	r1, r2
 800add4:	d1f9      	bne.n	800adca <memcpy+0xe>
 800add6:	bd10      	pop	{r4, pc}

0800add8 <_Balloc>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800addc:	4604      	mov	r4, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	b976      	cbnz	r6, 800ae00 <_Balloc+0x28>
 800ade2:	2010      	movs	r0, #16
 800ade4:	f7ff ffe2 	bl	800adac <malloc>
 800ade8:	4602      	mov	r2, r0
 800adea:	6260      	str	r0, [r4, #36]	; 0x24
 800adec:	b920      	cbnz	r0, 800adf8 <_Balloc+0x20>
 800adee:	4b18      	ldr	r3, [pc, #96]	; (800ae50 <_Balloc+0x78>)
 800adf0:	4818      	ldr	r0, [pc, #96]	; (800ae54 <_Balloc+0x7c>)
 800adf2:	2166      	movs	r1, #102	; 0x66
 800adf4:	f7fe f8f8 	bl	8008fe8 <__assert_func>
 800adf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adfc:	6006      	str	r6, [r0, #0]
 800adfe:	60c6      	str	r6, [r0, #12]
 800ae00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae02:	68f3      	ldr	r3, [r6, #12]
 800ae04:	b183      	cbz	r3, 800ae28 <_Balloc+0x50>
 800ae06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae0e:	b9b8      	cbnz	r0, 800ae40 <_Balloc+0x68>
 800ae10:	2101      	movs	r1, #1
 800ae12:	fa01 f605 	lsl.w	r6, r1, r5
 800ae16:	1d72      	adds	r2, r6, #5
 800ae18:	0092      	lsls	r2, r2, #2
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 fb60 	bl	800b4e0 <_calloc_r>
 800ae20:	b160      	cbz	r0, 800ae3c <_Balloc+0x64>
 800ae22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae26:	e00e      	b.n	800ae46 <_Balloc+0x6e>
 800ae28:	2221      	movs	r2, #33	; 0x21
 800ae2a:	2104      	movs	r1, #4
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f000 fb57 	bl	800b4e0 <_calloc_r>
 800ae32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae34:	60f0      	str	r0, [r6, #12]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e4      	bne.n	800ae06 <_Balloc+0x2e>
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	6802      	ldr	r2, [r0, #0]
 800ae42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae46:	2300      	movs	r3, #0
 800ae48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae4c:	e7f7      	b.n	800ae3e <_Balloc+0x66>
 800ae4e:	bf00      	nop
 800ae50:	0800bafe 	.word	0x0800bafe
 800ae54:	0800bbe4 	.word	0x0800bbe4

0800ae58 <_Bfree>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	460c      	mov	r4, r1
 800ae60:	b976      	cbnz	r6, 800ae80 <_Bfree+0x28>
 800ae62:	2010      	movs	r0, #16
 800ae64:	f7ff ffa2 	bl	800adac <malloc>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	6268      	str	r0, [r5, #36]	; 0x24
 800ae6c:	b920      	cbnz	r0, 800ae78 <_Bfree+0x20>
 800ae6e:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <_Bfree+0x3c>)
 800ae70:	4809      	ldr	r0, [pc, #36]	; (800ae98 <_Bfree+0x40>)
 800ae72:	218a      	movs	r1, #138	; 0x8a
 800ae74:	f7fe f8b8 	bl	8008fe8 <__assert_func>
 800ae78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae7c:	6006      	str	r6, [r0, #0]
 800ae7e:	60c6      	str	r6, [r0, #12]
 800ae80:	b13c      	cbz	r4, 800ae92 <_Bfree+0x3a>
 800ae82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae84:	6862      	ldr	r2, [r4, #4]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae8c:	6021      	str	r1, [r4, #0]
 800ae8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	0800bafe 	.word	0x0800bafe
 800ae98:	0800bbe4 	.word	0x0800bbe4

0800ae9c <__multadd>:
 800ae9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea0:	690d      	ldr	r5, [r1, #16]
 800aea2:	4607      	mov	r7, r0
 800aea4:	460c      	mov	r4, r1
 800aea6:	461e      	mov	r6, r3
 800aea8:	f101 0c14 	add.w	ip, r1, #20
 800aeac:	2000      	movs	r0, #0
 800aeae:	f8dc 3000 	ldr.w	r3, [ip]
 800aeb2:	b299      	uxth	r1, r3
 800aeb4:	fb02 6101 	mla	r1, r2, r1, r6
 800aeb8:	0c1e      	lsrs	r6, r3, #16
 800aeba:	0c0b      	lsrs	r3, r1, #16
 800aebc:	fb02 3306 	mla	r3, r2, r6, r3
 800aec0:	b289      	uxth	r1, r1
 800aec2:	3001      	adds	r0, #1
 800aec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aec8:	4285      	cmp	r5, r0
 800aeca:	f84c 1b04 	str.w	r1, [ip], #4
 800aece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aed2:	dcec      	bgt.n	800aeae <__multadd+0x12>
 800aed4:	b30e      	cbz	r6, 800af1a <__multadd+0x7e>
 800aed6:	68a3      	ldr	r3, [r4, #8]
 800aed8:	42ab      	cmp	r3, r5
 800aeda:	dc19      	bgt.n	800af10 <__multadd+0x74>
 800aedc:	6861      	ldr	r1, [r4, #4]
 800aede:	4638      	mov	r0, r7
 800aee0:	3101      	adds	r1, #1
 800aee2:	f7ff ff79 	bl	800add8 <_Balloc>
 800aee6:	4680      	mov	r8, r0
 800aee8:	b928      	cbnz	r0, 800aef6 <__multadd+0x5a>
 800aeea:	4602      	mov	r2, r0
 800aeec:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <__multadd+0x84>)
 800aeee:	480d      	ldr	r0, [pc, #52]	; (800af24 <__multadd+0x88>)
 800aef0:	21b5      	movs	r1, #181	; 0xb5
 800aef2:	f7fe f879 	bl	8008fe8 <__assert_func>
 800aef6:	6922      	ldr	r2, [r4, #16]
 800aef8:	3202      	adds	r2, #2
 800aefa:	f104 010c 	add.w	r1, r4, #12
 800aefe:	0092      	lsls	r2, r2, #2
 800af00:	300c      	adds	r0, #12
 800af02:	f7ff ff5b 	bl	800adbc <memcpy>
 800af06:	4621      	mov	r1, r4
 800af08:	4638      	mov	r0, r7
 800af0a:	f7ff ffa5 	bl	800ae58 <_Bfree>
 800af0e:	4644      	mov	r4, r8
 800af10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af14:	3501      	adds	r5, #1
 800af16:	615e      	str	r6, [r3, #20]
 800af18:	6125      	str	r5, [r4, #16]
 800af1a:	4620      	mov	r0, r4
 800af1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af20:	0800bb70 	.word	0x0800bb70
 800af24:	0800bbe4 	.word	0x0800bbe4

0800af28 <__hi0bits>:
 800af28:	0c03      	lsrs	r3, r0, #16
 800af2a:	041b      	lsls	r3, r3, #16
 800af2c:	b9d3      	cbnz	r3, 800af64 <__hi0bits+0x3c>
 800af2e:	0400      	lsls	r0, r0, #16
 800af30:	2310      	movs	r3, #16
 800af32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af36:	bf04      	itt	eq
 800af38:	0200      	lsleq	r0, r0, #8
 800af3a:	3308      	addeq	r3, #8
 800af3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af40:	bf04      	itt	eq
 800af42:	0100      	lsleq	r0, r0, #4
 800af44:	3304      	addeq	r3, #4
 800af46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af4a:	bf04      	itt	eq
 800af4c:	0080      	lsleq	r0, r0, #2
 800af4e:	3302      	addeq	r3, #2
 800af50:	2800      	cmp	r0, #0
 800af52:	db05      	blt.n	800af60 <__hi0bits+0x38>
 800af54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af58:	f103 0301 	add.w	r3, r3, #1
 800af5c:	bf08      	it	eq
 800af5e:	2320      	moveq	r3, #32
 800af60:	4618      	mov	r0, r3
 800af62:	4770      	bx	lr
 800af64:	2300      	movs	r3, #0
 800af66:	e7e4      	b.n	800af32 <__hi0bits+0xa>

0800af68 <__lo0bits>:
 800af68:	6803      	ldr	r3, [r0, #0]
 800af6a:	f013 0207 	ands.w	r2, r3, #7
 800af6e:	4601      	mov	r1, r0
 800af70:	d00b      	beq.n	800af8a <__lo0bits+0x22>
 800af72:	07da      	lsls	r2, r3, #31
 800af74:	d423      	bmi.n	800afbe <__lo0bits+0x56>
 800af76:	0798      	lsls	r0, r3, #30
 800af78:	bf49      	itett	mi
 800af7a:	085b      	lsrmi	r3, r3, #1
 800af7c:	089b      	lsrpl	r3, r3, #2
 800af7e:	2001      	movmi	r0, #1
 800af80:	600b      	strmi	r3, [r1, #0]
 800af82:	bf5c      	itt	pl
 800af84:	600b      	strpl	r3, [r1, #0]
 800af86:	2002      	movpl	r0, #2
 800af88:	4770      	bx	lr
 800af8a:	b298      	uxth	r0, r3
 800af8c:	b9a8      	cbnz	r0, 800afba <__lo0bits+0x52>
 800af8e:	0c1b      	lsrs	r3, r3, #16
 800af90:	2010      	movs	r0, #16
 800af92:	b2da      	uxtb	r2, r3
 800af94:	b90a      	cbnz	r2, 800af9a <__lo0bits+0x32>
 800af96:	3008      	adds	r0, #8
 800af98:	0a1b      	lsrs	r3, r3, #8
 800af9a:	071a      	lsls	r2, r3, #28
 800af9c:	bf04      	itt	eq
 800af9e:	091b      	lsreq	r3, r3, #4
 800afa0:	3004      	addeq	r0, #4
 800afa2:	079a      	lsls	r2, r3, #30
 800afa4:	bf04      	itt	eq
 800afa6:	089b      	lsreq	r3, r3, #2
 800afa8:	3002      	addeq	r0, #2
 800afaa:	07da      	lsls	r2, r3, #31
 800afac:	d403      	bmi.n	800afb6 <__lo0bits+0x4e>
 800afae:	085b      	lsrs	r3, r3, #1
 800afb0:	f100 0001 	add.w	r0, r0, #1
 800afb4:	d005      	beq.n	800afc2 <__lo0bits+0x5a>
 800afb6:	600b      	str	r3, [r1, #0]
 800afb8:	4770      	bx	lr
 800afba:	4610      	mov	r0, r2
 800afbc:	e7e9      	b.n	800af92 <__lo0bits+0x2a>
 800afbe:	2000      	movs	r0, #0
 800afc0:	4770      	bx	lr
 800afc2:	2020      	movs	r0, #32
 800afc4:	4770      	bx	lr
	...

0800afc8 <__i2b>:
 800afc8:	b510      	push	{r4, lr}
 800afca:	460c      	mov	r4, r1
 800afcc:	2101      	movs	r1, #1
 800afce:	f7ff ff03 	bl	800add8 <_Balloc>
 800afd2:	4602      	mov	r2, r0
 800afd4:	b928      	cbnz	r0, 800afe2 <__i2b+0x1a>
 800afd6:	4b05      	ldr	r3, [pc, #20]	; (800afec <__i2b+0x24>)
 800afd8:	4805      	ldr	r0, [pc, #20]	; (800aff0 <__i2b+0x28>)
 800afda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800afde:	f7fe f803 	bl	8008fe8 <__assert_func>
 800afe2:	2301      	movs	r3, #1
 800afe4:	6144      	str	r4, [r0, #20]
 800afe6:	6103      	str	r3, [r0, #16]
 800afe8:	bd10      	pop	{r4, pc}
 800afea:	bf00      	nop
 800afec:	0800bb70 	.word	0x0800bb70
 800aff0:	0800bbe4 	.word	0x0800bbe4

0800aff4 <__multiply>:
 800aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	4691      	mov	r9, r2
 800affa:	690a      	ldr	r2, [r1, #16]
 800affc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b000:	429a      	cmp	r2, r3
 800b002:	bfb8      	it	lt
 800b004:	460b      	movlt	r3, r1
 800b006:	460c      	mov	r4, r1
 800b008:	bfbc      	itt	lt
 800b00a:	464c      	movlt	r4, r9
 800b00c:	4699      	movlt	r9, r3
 800b00e:	6927      	ldr	r7, [r4, #16]
 800b010:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b014:	68a3      	ldr	r3, [r4, #8]
 800b016:	6861      	ldr	r1, [r4, #4]
 800b018:	eb07 060a 	add.w	r6, r7, sl
 800b01c:	42b3      	cmp	r3, r6
 800b01e:	b085      	sub	sp, #20
 800b020:	bfb8      	it	lt
 800b022:	3101      	addlt	r1, #1
 800b024:	f7ff fed8 	bl	800add8 <_Balloc>
 800b028:	b930      	cbnz	r0, 800b038 <__multiply+0x44>
 800b02a:	4602      	mov	r2, r0
 800b02c:	4b44      	ldr	r3, [pc, #272]	; (800b140 <__multiply+0x14c>)
 800b02e:	4845      	ldr	r0, [pc, #276]	; (800b144 <__multiply+0x150>)
 800b030:	f240 115d 	movw	r1, #349	; 0x15d
 800b034:	f7fd ffd8 	bl	8008fe8 <__assert_func>
 800b038:	f100 0514 	add.w	r5, r0, #20
 800b03c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b040:	462b      	mov	r3, r5
 800b042:	2200      	movs	r2, #0
 800b044:	4543      	cmp	r3, r8
 800b046:	d321      	bcc.n	800b08c <__multiply+0x98>
 800b048:	f104 0314 	add.w	r3, r4, #20
 800b04c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b050:	f109 0314 	add.w	r3, r9, #20
 800b054:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b058:	9202      	str	r2, [sp, #8]
 800b05a:	1b3a      	subs	r2, r7, r4
 800b05c:	3a15      	subs	r2, #21
 800b05e:	f022 0203 	bic.w	r2, r2, #3
 800b062:	3204      	adds	r2, #4
 800b064:	f104 0115 	add.w	r1, r4, #21
 800b068:	428f      	cmp	r7, r1
 800b06a:	bf38      	it	cc
 800b06c:	2204      	movcc	r2, #4
 800b06e:	9201      	str	r2, [sp, #4]
 800b070:	9a02      	ldr	r2, [sp, #8]
 800b072:	9303      	str	r3, [sp, #12]
 800b074:	429a      	cmp	r2, r3
 800b076:	d80c      	bhi.n	800b092 <__multiply+0x9e>
 800b078:	2e00      	cmp	r6, #0
 800b07a:	dd03      	ble.n	800b084 <__multiply+0x90>
 800b07c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b080:	2b00      	cmp	r3, #0
 800b082:	d05a      	beq.n	800b13a <__multiply+0x146>
 800b084:	6106      	str	r6, [r0, #16]
 800b086:	b005      	add	sp, #20
 800b088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08c:	f843 2b04 	str.w	r2, [r3], #4
 800b090:	e7d8      	b.n	800b044 <__multiply+0x50>
 800b092:	f8b3 a000 	ldrh.w	sl, [r3]
 800b096:	f1ba 0f00 	cmp.w	sl, #0
 800b09a:	d024      	beq.n	800b0e6 <__multiply+0xf2>
 800b09c:	f104 0e14 	add.w	lr, r4, #20
 800b0a0:	46a9      	mov	r9, r5
 800b0a2:	f04f 0c00 	mov.w	ip, #0
 800b0a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0aa:	f8d9 1000 	ldr.w	r1, [r9]
 800b0ae:	fa1f fb82 	uxth.w	fp, r2
 800b0b2:	b289      	uxth	r1, r1
 800b0b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b0b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b0bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b0c0:	4461      	add	r1, ip
 800b0c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b0ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0ce:	b289      	uxth	r1, r1
 800b0d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0d4:	4577      	cmp	r7, lr
 800b0d6:	f849 1b04 	str.w	r1, [r9], #4
 800b0da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0de:	d8e2      	bhi.n	800b0a6 <__multiply+0xb2>
 800b0e0:	9a01      	ldr	r2, [sp, #4]
 800b0e2:	f845 c002 	str.w	ip, [r5, r2]
 800b0e6:	9a03      	ldr	r2, [sp, #12]
 800b0e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	f1b9 0f00 	cmp.w	r9, #0
 800b0f2:	d020      	beq.n	800b136 <__multiply+0x142>
 800b0f4:	6829      	ldr	r1, [r5, #0]
 800b0f6:	f104 0c14 	add.w	ip, r4, #20
 800b0fa:	46ae      	mov	lr, r5
 800b0fc:	f04f 0a00 	mov.w	sl, #0
 800b100:	f8bc b000 	ldrh.w	fp, [ip]
 800b104:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b108:	fb09 220b 	mla	r2, r9, fp, r2
 800b10c:	4492      	add	sl, r2
 800b10e:	b289      	uxth	r1, r1
 800b110:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b114:	f84e 1b04 	str.w	r1, [lr], #4
 800b118:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b11c:	f8be 1000 	ldrh.w	r1, [lr]
 800b120:	0c12      	lsrs	r2, r2, #16
 800b122:	fb09 1102 	mla	r1, r9, r2, r1
 800b126:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b12a:	4567      	cmp	r7, ip
 800b12c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b130:	d8e6      	bhi.n	800b100 <__multiply+0x10c>
 800b132:	9a01      	ldr	r2, [sp, #4]
 800b134:	50a9      	str	r1, [r5, r2]
 800b136:	3504      	adds	r5, #4
 800b138:	e79a      	b.n	800b070 <__multiply+0x7c>
 800b13a:	3e01      	subs	r6, #1
 800b13c:	e79c      	b.n	800b078 <__multiply+0x84>
 800b13e:	bf00      	nop
 800b140:	0800bb70 	.word	0x0800bb70
 800b144:	0800bbe4 	.word	0x0800bbe4

0800b148 <__pow5mult>:
 800b148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b14c:	4615      	mov	r5, r2
 800b14e:	f012 0203 	ands.w	r2, r2, #3
 800b152:	4606      	mov	r6, r0
 800b154:	460f      	mov	r7, r1
 800b156:	d007      	beq.n	800b168 <__pow5mult+0x20>
 800b158:	4c25      	ldr	r4, [pc, #148]	; (800b1f0 <__pow5mult+0xa8>)
 800b15a:	3a01      	subs	r2, #1
 800b15c:	2300      	movs	r3, #0
 800b15e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b162:	f7ff fe9b 	bl	800ae9c <__multadd>
 800b166:	4607      	mov	r7, r0
 800b168:	10ad      	asrs	r5, r5, #2
 800b16a:	d03d      	beq.n	800b1e8 <__pow5mult+0xa0>
 800b16c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b16e:	b97c      	cbnz	r4, 800b190 <__pow5mult+0x48>
 800b170:	2010      	movs	r0, #16
 800b172:	f7ff fe1b 	bl	800adac <malloc>
 800b176:	4602      	mov	r2, r0
 800b178:	6270      	str	r0, [r6, #36]	; 0x24
 800b17a:	b928      	cbnz	r0, 800b188 <__pow5mult+0x40>
 800b17c:	4b1d      	ldr	r3, [pc, #116]	; (800b1f4 <__pow5mult+0xac>)
 800b17e:	481e      	ldr	r0, [pc, #120]	; (800b1f8 <__pow5mult+0xb0>)
 800b180:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b184:	f7fd ff30 	bl	8008fe8 <__assert_func>
 800b188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b18c:	6004      	str	r4, [r0, #0]
 800b18e:	60c4      	str	r4, [r0, #12]
 800b190:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b198:	b94c      	cbnz	r4, 800b1ae <__pow5mult+0x66>
 800b19a:	f240 2171 	movw	r1, #625	; 0x271
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff ff12 	bl	800afc8 <__i2b>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	6003      	str	r3, [r0, #0]
 800b1ae:	f04f 0900 	mov.w	r9, #0
 800b1b2:	07eb      	lsls	r3, r5, #31
 800b1b4:	d50a      	bpl.n	800b1cc <__pow5mult+0x84>
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f7ff ff1a 	bl	800aff4 <__multiply>
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	4680      	mov	r8, r0
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f7ff fe47 	bl	800ae58 <_Bfree>
 800b1ca:	4647      	mov	r7, r8
 800b1cc:	106d      	asrs	r5, r5, #1
 800b1ce:	d00b      	beq.n	800b1e8 <__pow5mult+0xa0>
 800b1d0:	6820      	ldr	r0, [r4, #0]
 800b1d2:	b938      	cbnz	r0, 800b1e4 <__pow5mult+0x9c>
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7ff ff0b 	bl	800aff4 <__multiply>
 800b1de:	6020      	str	r0, [r4, #0]
 800b1e0:	f8c0 9000 	str.w	r9, [r0]
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	e7e4      	b.n	800b1b2 <__pow5mult+0x6a>
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ee:	bf00      	nop
 800b1f0:	0800bd30 	.word	0x0800bd30
 800b1f4:	0800bafe 	.word	0x0800bafe
 800b1f8:	0800bbe4 	.word	0x0800bbe4

0800b1fc <__lshift>:
 800b1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b200:	460c      	mov	r4, r1
 800b202:	6849      	ldr	r1, [r1, #4]
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b20a:	68a3      	ldr	r3, [r4, #8]
 800b20c:	4607      	mov	r7, r0
 800b20e:	4691      	mov	r9, r2
 800b210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b214:	f108 0601 	add.w	r6, r8, #1
 800b218:	42b3      	cmp	r3, r6
 800b21a:	db0b      	blt.n	800b234 <__lshift+0x38>
 800b21c:	4638      	mov	r0, r7
 800b21e:	f7ff fddb 	bl	800add8 <_Balloc>
 800b222:	4605      	mov	r5, r0
 800b224:	b948      	cbnz	r0, 800b23a <__lshift+0x3e>
 800b226:	4602      	mov	r2, r0
 800b228:	4b2a      	ldr	r3, [pc, #168]	; (800b2d4 <__lshift+0xd8>)
 800b22a:	482b      	ldr	r0, [pc, #172]	; (800b2d8 <__lshift+0xdc>)
 800b22c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b230:	f7fd feda 	bl	8008fe8 <__assert_func>
 800b234:	3101      	adds	r1, #1
 800b236:	005b      	lsls	r3, r3, #1
 800b238:	e7ee      	b.n	800b218 <__lshift+0x1c>
 800b23a:	2300      	movs	r3, #0
 800b23c:	f100 0114 	add.w	r1, r0, #20
 800b240:	f100 0210 	add.w	r2, r0, #16
 800b244:	4618      	mov	r0, r3
 800b246:	4553      	cmp	r3, sl
 800b248:	db37      	blt.n	800b2ba <__lshift+0xbe>
 800b24a:	6920      	ldr	r0, [r4, #16]
 800b24c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b250:	f104 0314 	add.w	r3, r4, #20
 800b254:	f019 091f 	ands.w	r9, r9, #31
 800b258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b25c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b260:	d02f      	beq.n	800b2c2 <__lshift+0xc6>
 800b262:	f1c9 0e20 	rsb	lr, r9, #32
 800b266:	468a      	mov	sl, r1
 800b268:	f04f 0c00 	mov.w	ip, #0
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	fa02 f209 	lsl.w	r2, r2, r9
 800b272:	ea42 020c 	orr.w	r2, r2, ip
 800b276:	f84a 2b04 	str.w	r2, [sl], #4
 800b27a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b27e:	4298      	cmp	r0, r3
 800b280:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b284:	d8f2      	bhi.n	800b26c <__lshift+0x70>
 800b286:	1b03      	subs	r3, r0, r4
 800b288:	3b15      	subs	r3, #21
 800b28a:	f023 0303 	bic.w	r3, r3, #3
 800b28e:	3304      	adds	r3, #4
 800b290:	f104 0215 	add.w	r2, r4, #21
 800b294:	4290      	cmp	r0, r2
 800b296:	bf38      	it	cc
 800b298:	2304      	movcc	r3, #4
 800b29a:	f841 c003 	str.w	ip, [r1, r3]
 800b29e:	f1bc 0f00 	cmp.w	ip, #0
 800b2a2:	d001      	beq.n	800b2a8 <__lshift+0xac>
 800b2a4:	f108 0602 	add.w	r6, r8, #2
 800b2a8:	3e01      	subs	r6, #1
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	612e      	str	r6, [r5, #16]
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	f7ff fdd2 	bl	800ae58 <_Bfree>
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2be:	3301      	adds	r3, #1
 800b2c0:	e7c1      	b.n	800b246 <__lshift+0x4a>
 800b2c2:	3904      	subs	r1, #4
 800b2c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2cc:	4298      	cmp	r0, r3
 800b2ce:	d8f9      	bhi.n	800b2c4 <__lshift+0xc8>
 800b2d0:	e7ea      	b.n	800b2a8 <__lshift+0xac>
 800b2d2:	bf00      	nop
 800b2d4:	0800bb70 	.word	0x0800bb70
 800b2d8:	0800bbe4 	.word	0x0800bbe4

0800b2dc <__mcmp>:
 800b2dc:	b530      	push	{r4, r5, lr}
 800b2de:	6902      	ldr	r2, [r0, #16]
 800b2e0:	690c      	ldr	r4, [r1, #16]
 800b2e2:	1b12      	subs	r2, r2, r4
 800b2e4:	d10e      	bne.n	800b304 <__mcmp+0x28>
 800b2e6:	f100 0314 	add.w	r3, r0, #20
 800b2ea:	3114      	adds	r1, #20
 800b2ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2fc:	42a5      	cmp	r5, r4
 800b2fe:	d003      	beq.n	800b308 <__mcmp+0x2c>
 800b300:	d305      	bcc.n	800b30e <__mcmp+0x32>
 800b302:	2201      	movs	r2, #1
 800b304:	4610      	mov	r0, r2
 800b306:	bd30      	pop	{r4, r5, pc}
 800b308:	4283      	cmp	r3, r0
 800b30a:	d3f3      	bcc.n	800b2f4 <__mcmp+0x18>
 800b30c:	e7fa      	b.n	800b304 <__mcmp+0x28>
 800b30e:	f04f 32ff 	mov.w	r2, #4294967295
 800b312:	e7f7      	b.n	800b304 <__mcmp+0x28>

0800b314 <__mdiff>:
 800b314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	460c      	mov	r4, r1
 800b31a:	4606      	mov	r6, r0
 800b31c:	4611      	mov	r1, r2
 800b31e:	4620      	mov	r0, r4
 800b320:	4690      	mov	r8, r2
 800b322:	f7ff ffdb 	bl	800b2dc <__mcmp>
 800b326:	1e05      	subs	r5, r0, #0
 800b328:	d110      	bne.n	800b34c <__mdiff+0x38>
 800b32a:	4629      	mov	r1, r5
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7ff fd53 	bl	800add8 <_Balloc>
 800b332:	b930      	cbnz	r0, 800b342 <__mdiff+0x2e>
 800b334:	4b3a      	ldr	r3, [pc, #232]	; (800b420 <__mdiff+0x10c>)
 800b336:	4602      	mov	r2, r0
 800b338:	f240 2132 	movw	r1, #562	; 0x232
 800b33c:	4839      	ldr	r0, [pc, #228]	; (800b424 <__mdiff+0x110>)
 800b33e:	f7fd fe53 	bl	8008fe8 <__assert_func>
 800b342:	2301      	movs	r3, #1
 800b344:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34c:	bfa4      	itt	ge
 800b34e:	4643      	movge	r3, r8
 800b350:	46a0      	movge	r8, r4
 800b352:	4630      	mov	r0, r6
 800b354:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b358:	bfa6      	itte	ge
 800b35a:	461c      	movge	r4, r3
 800b35c:	2500      	movge	r5, #0
 800b35e:	2501      	movlt	r5, #1
 800b360:	f7ff fd3a 	bl	800add8 <_Balloc>
 800b364:	b920      	cbnz	r0, 800b370 <__mdiff+0x5c>
 800b366:	4b2e      	ldr	r3, [pc, #184]	; (800b420 <__mdiff+0x10c>)
 800b368:	4602      	mov	r2, r0
 800b36a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b36e:	e7e5      	b.n	800b33c <__mdiff+0x28>
 800b370:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b374:	6926      	ldr	r6, [r4, #16]
 800b376:	60c5      	str	r5, [r0, #12]
 800b378:	f104 0914 	add.w	r9, r4, #20
 800b37c:	f108 0514 	add.w	r5, r8, #20
 800b380:	f100 0e14 	add.w	lr, r0, #20
 800b384:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b388:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b38c:	f108 0210 	add.w	r2, r8, #16
 800b390:	46f2      	mov	sl, lr
 800b392:	2100      	movs	r1, #0
 800b394:	f859 3b04 	ldr.w	r3, [r9], #4
 800b398:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b39c:	fa1f f883 	uxth.w	r8, r3
 800b3a0:	fa11 f18b 	uxtah	r1, r1, fp
 800b3a4:	0c1b      	lsrs	r3, r3, #16
 800b3a6:	eba1 0808 	sub.w	r8, r1, r8
 800b3aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3b2:	fa1f f888 	uxth.w	r8, r8
 800b3b6:	1419      	asrs	r1, r3, #16
 800b3b8:	454e      	cmp	r6, r9
 800b3ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3be:	f84a 3b04 	str.w	r3, [sl], #4
 800b3c2:	d8e7      	bhi.n	800b394 <__mdiff+0x80>
 800b3c4:	1b33      	subs	r3, r6, r4
 800b3c6:	3b15      	subs	r3, #21
 800b3c8:	f023 0303 	bic.w	r3, r3, #3
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	3415      	adds	r4, #21
 800b3d0:	42a6      	cmp	r6, r4
 800b3d2:	bf38      	it	cc
 800b3d4:	2304      	movcc	r3, #4
 800b3d6:	441d      	add	r5, r3
 800b3d8:	4473      	add	r3, lr
 800b3da:	469e      	mov	lr, r3
 800b3dc:	462e      	mov	r6, r5
 800b3de:	4566      	cmp	r6, ip
 800b3e0:	d30e      	bcc.n	800b400 <__mdiff+0xec>
 800b3e2:	f10c 0203 	add.w	r2, ip, #3
 800b3e6:	1b52      	subs	r2, r2, r5
 800b3e8:	f022 0203 	bic.w	r2, r2, #3
 800b3ec:	3d03      	subs	r5, #3
 800b3ee:	45ac      	cmp	ip, r5
 800b3f0:	bf38      	it	cc
 800b3f2:	2200      	movcc	r2, #0
 800b3f4:	441a      	add	r2, r3
 800b3f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b3fa:	b17b      	cbz	r3, 800b41c <__mdiff+0x108>
 800b3fc:	6107      	str	r7, [r0, #16]
 800b3fe:	e7a3      	b.n	800b348 <__mdiff+0x34>
 800b400:	f856 8b04 	ldr.w	r8, [r6], #4
 800b404:	fa11 f288 	uxtah	r2, r1, r8
 800b408:	1414      	asrs	r4, r2, #16
 800b40a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b40e:	b292      	uxth	r2, r2
 800b410:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b414:	f84e 2b04 	str.w	r2, [lr], #4
 800b418:	1421      	asrs	r1, r4, #16
 800b41a:	e7e0      	b.n	800b3de <__mdiff+0xca>
 800b41c:	3f01      	subs	r7, #1
 800b41e:	e7ea      	b.n	800b3f6 <__mdiff+0xe2>
 800b420:	0800bb70 	.word	0x0800bb70
 800b424:	0800bbe4 	.word	0x0800bbe4

0800b428 <__d2b>:
 800b428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b42c:	4689      	mov	r9, r1
 800b42e:	2101      	movs	r1, #1
 800b430:	ec57 6b10 	vmov	r6, r7, d0
 800b434:	4690      	mov	r8, r2
 800b436:	f7ff fccf 	bl	800add8 <_Balloc>
 800b43a:	4604      	mov	r4, r0
 800b43c:	b930      	cbnz	r0, 800b44c <__d2b+0x24>
 800b43e:	4602      	mov	r2, r0
 800b440:	4b25      	ldr	r3, [pc, #148]	; (800b4d8 <__d2b+0xb0>)
 800b442:	4826      	ldr	r0, [pc, #152]	; (800b4dc <__d2b+0xb4>)
 800b444:	f240 310a 	movw	r1, #778	; 0x30a
 800b448:	f7fd fdce 	bl	8008fe8 <__assert_func>
 800b44c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b454:	bb35      	cbnz	r5, 800b4a4 <__d2b+0x7c>
 800b456:	2e00      	cmp	r6, #0
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	d028      	beq.n	800b4ae <__d2b+0x86>
 800b45c:	4668      	mov	r0, sp
 800b45e:	9600      	str	r6, [sp, #0]
 800b460:	f7ff fd82 	bl	800af68 <__lo0bits>
 800b464:	9900      	ldr	r1, [sp, #0]
 800b466:	b300      	cbz	r0, 800b4aa <__d2b+0x82>
 800b468:	9a01      	ldr	r2, [sp, #4]
 800b46a:	f1c0 0320 	rsb	r3, r0, #32
 800b46e:	fa02 f303 	lsl.w	r3, r2, r3
 800b472:	430b      	orrs	r3, r1
 800b474:	40c2      	lsrs	r2, r0
 800b476:	6163      	str	r3, [r4, #20]
 800b478:	9201      	str	r2, [sp, #4]
 800b47a:	9b01      	ldr	r3, [sp, #4]
 800b47c:	61a3      	str	r3, [r4, #24]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	bf14      	ite	ne
 800b482:	2202      	movne	r2, #2
 800b484:	2201      	moveq	r2, #1
 800b486:	6122      	str	r2, [r4, #16]
 800b488:	b1d5      	cbz	r5, 800b4c0 <__d2b+0x98>
 800b48a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b48e:	4405      	add	r5, r0
 800b490:	f8c9 5000 	str.w	r5, [r9]
 800b494:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b498:	f8c8 0000 	str.w	r0, [r8]
 800b49c:	4620      	mov	r0, r4
 800b49e:	b003      	add	sp, #12
 800b4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4a8:	e7d5      	b.n	800b456 <__d2b+0x2e>
 800b4aa:	6161      	str	r1, [r4, #20]
 800b4ac:	e7e5      	b.n	800b47a <__d2b+0x52>
 800b4ae:	a801      	add	r0, sp, #4
 800b4b0:	f7ff fd5a 	bl	800af68 <__lo0bits>
 800b4b4:	9b01      	ldr	r3, [sp, #4]
 800b4b6:	6163      	str	r3, [r4, #20]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	6122      	str	r2, [r4, #16]
 800b4bc:	3020      	adds	r0, #32
 800b4be:	e7e3      	b.n	800b488 <__d2b+0x60>
 800b4c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4c8:	f8c9 0000 	str.w	r0, [r9]
 800b4cc:	6918      	ldr	r0, [r3, #16]
 800b4ce:	f7ff fd2b 	bl	800af28 <__hi0bits>
 800b4d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4d6:	e7df      	b.n	800b498 <__d2b+0x70>
 800b4d8:	0800bb70 	.word	0x0800bb70
 800b4dc:	0800bbe4 	.word	0x0800bbe4

0800b4e0 <_calloc_r>:
 800b4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4e2:	fba1 2402 	umull	r2, r4, r1, r2
 800b4e6:	b94c      	cbnz	r4, 800b4fc <_calloc_r+0x1c>
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	9201      	str	r2, [sp, #4]
 800b4ec:	f000 f87a 	bl	800b5e4 <_malloc_r>
 800b4f0:	9a01      	ldr	r2, [sp, #4]
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	b930      	cbnz	r0, 800b504 <_calloc_r+0x24>
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	b003      	add	sp, #12
 800b4fa:	bd30      	pop	{r4, r5, pc}
 800b4fc:	220c      	movs	r2, #12
 800b4fe:	6002      	str	r2, [r0, #0]
 800b500:	2500      	movs	r5, #0
 800b502:	e7f8      	b.n	800b4f6 <_calloc_r+0x16>
 800b504:	4621      	mov	r1, r4
 800b506:	f7fd fdc9 	bl	800909c <memset>
 800b50a:	e7f4      	b.n	800b4f6 <_calloc_r+0x16>

0800b50c <_free_r>:
 800b50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b50e:	2900      	cmp	r1, #0
 800b510:	d044      	beq.n	800b59c <_free_r+0x90>
 800b512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b516:	9001      	str	r0, [sp, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f1a1 0404 	sub.w	r4, r1, #4
 800b51e:	bfb8      	it	lt
 800b520:	18e4      	addlt	r4, r4, r3
 800b522:	f000 f9d3 	bl	800b8cc <__malloc_lock>
 800b526:	4a1e      	ldr	r2, [pc, #120]	; (800b5a0 <_free_r+0x94>)
 800b528:	9801      	ldr	r0, [sp, #4]
 800b52a:	6813      	ldr	r3, [r2, #0]
 800b52c:	b933      	cbnz	r3, 800b53c <_free_r+0x30>
 800b52e:	6063      	str	r3, [r4, #4]
 800b530:	6014      	str	r4, [r2, #0]
 800b532:	b003      	add	sp, #12
 800b534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b538:	f000 b9ce 	b.w	800b8d8 <__malloc_unlock>
 800b53c:	42a3      	cmp	r3, r4
 800b53e:	d908      	bls.n	800b552 <_free_r+0x46>
 800b540:	6825      	ldr	r5, [r4, #0]
 800b542:	1961      	adds	r1, r4, r5
 800b544:	428b      	cmp	r3, r1
 800b546:	bf01      	itttt	eq
 800b548:	6819      	ldreq	r1, [r3, #0]
 800b54a:	685b      	ldreq	r3, [r3, #4]
 800b54c:	1949      	addeq	r1, r1, r5
 800b54e:	6021      	streq	r1, [r4, #0]
 800b550:	e7ed      	b.n	800b52e <_free_r+0x22>
 800b552:	461a      	mov	r2, r3
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	b10b      	cbz	r3, 800b55c <_free_r+0x50>
 800b558:	42a3      	cmp	r3, r4
 800b55a:	d9fa      	bls.n	800b552 <_free_r+0x46>
 800b55c:	6811      	ldr	r1, [r2, #0]
 800b55e:	1855      	adds	r5, r2, r1
 800b560:	42a5      	cmp	r5, r4
 800b562:	d10b      	bne.n	800b57c <_free_r+0x70>
 800b564:	6824      	ldr	r4, [r4, #0]
 800b566:	4421      	add	r1, r4
 800b568:	1854      	adds	r4, r2, r1
 800b56a:	42a3      	cmp	r3, r4
 800b56c:	6011      	str	r1, [r2, #0]
 800b56e:	d1e0      	bne.n	800b532 <_free_r+0x26>
 800b570:	681c      	ldr	r4, [r3, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	6053      	str	r3, [r2, #4]
 800b576:	4421      	add	r1, r4
 800b578:	6011      	str	r1, [r2, #0]
 800b57a:	e7da      	b.n	800b532 <_free_r+0x26>
 800b57c:	d902      	bls.n	800b584 <_free_r+0x78>
 800b57e:	230c      	movs	r3, #12
 800b580:	6003      	str	r3, [r0, #0]
 800b582:	e7d6      	b.n	800b532 <_free_r+0x26>
 800b584:	6825      	ldr	r5, [r4, #0]
 800b586:	1961      	adds	r1, r4, r5
 800b588:	428b      	cmp	r3, r1
 800b58a:	bf04      	itt	eq
 800b58c:	6819      	ldreq	r1, [r3, #0]
 800b58e:	685b      	ldreq	r3, [r3, #4]
 800b590:	6063      	str	r3, [r4, #4]
 800b592:	bf04      	itt	eq
 800b594:	1949      	addeq	r1, r1, r5
 800b596:	6021      	streq	r1, [r4, #0]
 800b598:	6054      	str	r4, [r2, #4]
 800b59a:	e7ca      	b.n	800b532 <_free_r+0x26>
 800b59c:	b003      	add	sp, #12
 800b59e:	bd30      	pop	{r4, r5, pc}
 800b5a0:	240002e4 	.word	0x240002e4

0800b5a4 <sbrk_aligned>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	4e0e      	ldr	r6, [pc, #56]	; (800b5e0 <sbrk_aligned+0x3c>)
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	6831      	ldr	r1, [r6, #0]
 800b5ac:	4605      	mov	r5, r0
 800b5ae:	b911      	cbnz	r1, 800b5b6 <sbrk_aligned+0x12>
 800b5b0:	f000 f88c 	bl	800b6cc <_sbrk_r>
 800b5b4:	6030      	str	r0, [r6, #0]
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f000 f887 	bl	800b6cc <_sbrk_r>
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	d00a      	beq.n	800b5d8 <sbrk_aligned+0x34>
 800b5c2:	1cc4      	adds	r4, r0, #3
 800b5c4:	f024 0403 	bic.w	r4, r4, #3
 800b5c8:	42a0      	cmp	r0, r4
 800b5ca:	d007      	beq.n	800b5dc <sbrk_aligned+0x38>
 800b5cc:	1a21      	subs	r1, r4, r0
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f000 f87c 	bl	800b6cc <_sbrk_r>
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d101      	bne.n	800b5dc <sbrk_aligned+0x38>
 800b5d8:	f04f 34ff 	mov.w	r4, #4294967295
 800b5dc:	4620      	mov	r0, r4
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	240002e8 	.word	0x240002e8

0800b5e4 <_malloc_r>:
 800b5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	1ccd      	adds	r5, r1, #3
 800b5ea:	f025 0503 	bic.w	r5, r5, #3
 800b5ee:	3508      	adds	r5, #8
 800b5f0:	2d0c      	cmp	r5, #12
 800b5f2:	bf38      	it	cc
 800b5f4:	250c      	movcc	r5, #12
 800b5f6:	2d00      	cmp	r5, #0
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	db01      	blt.n	800b600 <_malloc_r+0x1c>
 800b5fc:	42a9      	cmp	r1, r5
 800b5fe:	d905      	bls.n	800b60c <_malloc_r+0x28>
 800b600:	230c      	movs	r3, #12
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	2600      	movs	r6, #0
 800b606:	4630      	mov	r0, r6
 800b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60c:	4e2e      	ldr	r6, [pc, #184]	; (800b6c8 <_malloc_r+0xe4>)
 800b60e:	f000 f95d 	bl	800b8cc <__malloc_lock>
 800b612:	6833      	ldr	r3, [r6, #0]
 800b614:	461c      	mov	r4, r3
 800b616:	bb34      	cbnz	r4, 800b666 <_malloc_r+0x82>
 800b618:	4629      	mov	r1, r5
 800b61a:	4638      	mov	r0, r7
 800b61c:	f7ff ffc2 	bl	800b5a4 <sbrk_aligned>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	4604      	mov	r4, r0
 800b624:	d14d      	bne.n	800b6c2 <_malloc_r+0xde>
 800b626:	6834      	ldr	r4, [r6, #0]
 800b628:	4626      	mov	r6, r4
 800b62a:	2e00      	cmp	r6, #0
 800b62c:	d140      	bne.n	800b6b0 <_malloc_r+0xcc>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	4631      	mov	r1, r6
 800b632:	4638      	mov	r0, r7
 800b634:	eb04 0803 	add.w	r8, r4, r3
 800b638:	f000 f848 	bl	800b6cc <_sbrk_r>
 800b63c:	4580      	cmp	r8, r0
 800b63e:	d13a      	bne.n	800b6b6 <_malloc_r+0xd2>
 800b640:	6821      	ldr	r1, [r4, #0]
 800b642:	3503      	adds	r5, #3
 800b644:	1a6d      	subs	r5, r5, r1
 800b646:	f025 0503 	bic.w	r5, r5, #3
 800b64a:	3508      	adds	r5, #8
 800b64c:	2d0c      	cmp	r5, #12
 800b64e:	bf38      	it	cc
 800b650:	250c      	movcc	r5, #12
 800b652:	4629      	mov	r1, r5
 800b654:	4638      	mov	r0, r7
 800b656:	f7ff ffa5 	bl	800b5a4 <sbrk_aligned>
 800b65a:	3001      	adds	r0, #1
 800b65c:	d02b      	beq.n	800b6b6 <_malloc_r+0xd2>
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	442b      	add	r3, r5
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	e00e      	b.n	800b684 <_malloc_r+0xa0>
 800b666:	6822      	ldr	r2, [r4, #0]
 800b668:	1b52      	subs	r2, r2, r5
 800b66a:	d41e      	bmi.n	800b6aa <_malloc_r+0xc6>
 800b66c:	2a0b      	cmp	r2, #11
 800b66e:	d916      	bls.n	800b69e <_malloc_r+0xba>
 800b670:	1961      	adds	r1, r4, r5
 800b672:	42a3      	cmp	r3, r4
 800b674:	6025      	str	r5, [r4, #0]
 800b676:	bf18      	it	ne
 800b678:	6059      	strne	r1, [r3, #4]
 800b67a:	6863      	ldr	r3, [r4, #4]
 800b67c:	bf08      	it	eq
 800b67e:	6031      	streq	r1, [r6, #0]
 800b680:	5162      	str	r2, [r4, r5]
 800b682:	604b      	str	r3, [r1, #4]
 800b684:	4638      	mov	r0, r7
 800b686:	f104 060b 	add.w	r6, r4, #11
 800b68a:	f000 f925 	bl	800b8d8 <__malloc_unlock>
 800b68e:	f026 0607 	bic.w	r6, r6, #7
 800b692:	1d23      	adds	r3, r4, #4
 800b694:	1af2      	subs	r2, r6, r3
 800b696:	d0b6      	beq.n	800b606 <_malloc_r+0x22>
 800b698:	1b9b      	subs	r3, r3, r6
 800b69a:	50a3      	str	r3, [r4, r2]
 800b69c:	e7b3      	b.n	800b606 <_malloc_r+0x22>
 800b69e:	6862      	ldr	r2, [r4, #4]
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	bf0c      	ite	eq
 800b6a4:	6032      	streq	r2, [r6, #0]
 800b6a6:	605a      	strne	r2, [r3, #4]
 800b6a8:	e7ec      	b.n	800b684 <_malloc_r+0xa0>
 800b6aa:	4623      	mov	r3, r4
 800b6ac:	6864      	ldr	r4, [r4, #4]
 800b6ae:	e7b2      	b.n	800b616 <_malloc_r+0x32>
 800b6b0:	4634      	mov	r4, r6
 800b6b2:	6876      	ldr	r6, [r6, #4]
 800b6b4:	e7b9      	b.n	800b62a <_malloc_r+0x46>
 800b6b6:	230c      	movs	r3, #12
 800b6b8:	603b      	str	r3, [r7, #0]
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	f000 f90c 	bl	800b8d8 <__malloc_unlock>
 800b6c0:	e7a1      	b.n	800b606 <_malloc_r+0x22>
 800b6c2:	6025      	str	r5, [r4, #0]
 800b6c4:	e7de      	b.n	800b684 <_malloc_r+0xa0>
 800b6c6:	bf00      	nop
 800b6c8:	240002e4 	.word	0x240002e4

0800b6cc <_sbrk_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d06      	ldr	r5, [pc, #24]	; (800b6e8 <_sbrk_r+0x1c>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f6 f8ec 	bl	80018b4 <_sbrk>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_sbrk_r+0x1a>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_sbrk_r+0x1a>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	240002ec 	.word	0x240002ec

0800b6ec <_raise_r>:
 800b6ec:	291f      	cmp	r1, #31
 800b6ee:	b538      	push	{r3, r4, r5, lr}
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	d904      	bls.n	800b700 <_raise_r+0x14>
 800b6f6:	2316      	movs	r3, #22
 800b6f8:	6003      	str	r3, [r0, #0]
 800b6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b702:	b112      	cbz	r2, 800b70a <_raise_r+0x1e>
 800b704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b708:	b94b      	cbnz	r3, 800b71e <_raise_r+0x32>
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 f830 	bl	800b770 <_getpid_r>
 800b710:	462a      	mov	r2, r5
 800b712:	4601      	mov	r1, r0
 800b714:	4620      	mov	r0, r4
 800b716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b71a:	f000 b817 	b.w	800b74c <_kill_r>
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d00a      	beq.n	800b738 <_raise_r+0x4c>
 800b722:	1c59      	adds	r1, r3, #1
 800b724:	d103      	bne.n	800b72e <_raise_r+0x42>
 800b726:	2316      	movs	r3, #22
 800b728:	6003      	str	r3, [r0, #0]
 800b72a:	2001      	movs	r0, #1
 800b72c:	e7e7      	b.n	800b6fe <_raise_r+0x12>
 800b72e:	2400      	movs	r4, #0
 800b730:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b734:	4628      	mov	r0, r5
 800b736:	4798      	blx	r3
 800b738:	2000      	movs	r0, #0
 800b73a:	e7e0      	b.n	800b6fe <_raise_r+0x12>

0800b73c <raise>:
 800b73c:	4b02      	ldr	r3, [pc, #8]	; (800b748 <raise+0xc>)
 800b73e:	4601      	mov	r1, r0
 800b740:	6818      	ldr	r0, [r3, #0]
 800b742:	f7ff bfd3 	b.w	800b6ec <_raise_r>
 800b746:	bf00      	nop
 800b748:	24000010 	.word	0x24000010

0800b74c <_kill_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	4d07      	ldr	r5, [pc, #28]	; (800b76c <_kill_r+0x20>)
 800b750:	2300      	movs	r3, #0
 800b752:	4604      	mov	r4, r0
 800b754:	4608      	mov	r0, r1
 800b756:	4611      	mov	r1, r2
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	f7f6 f824 	bl	80017a6 <_kill>
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	d102      	bne.n	800b768 <_kill_r+0x1c>
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	b103      	cbz	r3, 800b768 <_kill_r+0x1c>
 800b766:	6023      	str	r3, [r4, #0]
 800b768:	bd38      	pop	{r3, r4, r5, pc}
 800b76a:	bf00      	nop
 800b76c:	240002ec 	.word	0x240002ec

0800b770 <_getpid_r>:
 800b770:	f7f6 b811 	b.w	8001796 <_getpid>

0800b774 <__sread>:
 800b774:	b510      	push	{r4, lr}
 800b776:	460c      	mov	r4, r1
 800b778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77c:	f000 f8b2 	bl	800b8e4 <_read_r>
 800b780:	2800      	cmp	r0, #0
 800b782:	bfab      	itete	ge
 800b784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b786:	89a3      	ldrhlt	r3, [r4, #12]
 800b788:	181b      	addge	r3, r3, r0
 800b78a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b78e:	bfac      	ite	ge
 800b790:	6563      	strge	r3, [r4, #84]	; 0x54
 800b792:	81a3      	strhlt	r3, [r4, #12]
 800b794:	bd10      	pop	{r4, pc}

0800b796 <__swrite>:
 800b796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b79a:	461f      	mov	r7, r3
 800b79c:	898b      	ldrh	r3, [r1, #12]
 800b79e:	05db      	lsls	r3, r3, #23
 800b7a0:	4605      	mov	r5, r0
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	4616      	mov	r6, r2
 800b7a6:	d505      	bpl.n	800b7b4 <__swrite+0x1e>
 800b7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f000 f868 	bl	800b884 <_lseek_r>
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7be:	81a3      	strh	r3, [r4, #12]
 800b7c0:	4632      	mov	r2, r6
 800b7c2:	463b      	mov	r3, r7
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ca:	f000 b817 	b.w	800b7fc <_write_r>

0800b7ce <__sseek>:
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d6:	f000 f855 	bl	800b884 <_lseek_r>
 800b7da:	1c43      	adds	r3, r0, #1
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	bf15      	itete	ne
 800b7e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7ea:	81a3      	strheq	r3, [r4, #12]
 800b7ec:	bf18      	it	ne
 800b7ee:	81a3      	strhne	r3, [r4, #12]
 800b7f0:	bd10      	pop	{r4, pc}

0800b7f2 <__sclose>:
 800b7f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f6:	f000 b813 	b.w	800b820 <_close_r>
	...

0800b7fc <_write_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4d07      	ldr	r5, [pc, #28]	; (800b81c <_write_r+0x20>)
 800b800:	4604      	mov	r4, r0
 800b802:	4608      	mov	r0, r1
 800b804:	4611      	mov	r1, r2
 800b806:	2200      	movs	r2, #0
 800b808:	602a      	str	r2, [r5, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	f7f6 f802 	bl	8001814 <_write>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_write_r+0x1e>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_write_r+0x1e>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	240002ec 	.word	0x240002ec

0800b820 <_close_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d06      	ldr	r5, [pc, #24]	; (800b83c <_close_r+0x1c>)
 800b824:	2300      	movs	r3, #0
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	602b      	str	r3, [r5, #0]
 800b82c:	f7f6 f80e 	bl	800184c <_close>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_close_r+0x1a>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_close_r+0x1a>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	240002ec 	.word	0x240002ec

0800b840 <_fstat_r>:
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	4d07      	ldr	r5, [pc, #28]	; (800b860 <_fstat_r+0x20>)
 800b844:	2300      	movs	r3, #0
 800b846:	4604      	mov	r4, r0
 800b848:	4608      	mov	r0, r1
 800b84a:	4611      	mov	r1, r2
 800b84c:	602b      	str	r3, [r5, #0]
 800b84e:	f7f6 f809 	bl	8001864 <_fstat>
 800b852:	1c43      	adds	r3, r0, #1
 800b854:	d102      	bne.n	800b85c <_fstat_r+0x1c>
 800b856:	682b      	ldr	r3, [r5, #0]
 800b858:	b103      	cbz	r3, 800b85c <_fstat_r+0x1c>
 800b85a:	6023      	str	r3, [r4, #0]
 800b85c:	bd38      	pop	{r3, r4, r5, pc}
 800b85e:	bf00      	nop
 800b860:	240002ec 	.word	0x240002ec

0800b864 <_isatty_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	4d06      	ldr	r5, [pc, #24]	; (800b880 <_isatty_r+0x1c>)
 800b868:	2300      	movs	r3, #0
 800b86a:	4604      	mov	r4, r0
 800b86c:	4608      	mov	r0, r1
 800b86e:	602b      	str	r3, [r5, #0]
 800b870:	f7f6 f808 	bl	8001884 <_isatty>
 800b874:	1c43      	adds	r3, r0, #1
 800b876:	d102      	bne.n	800b87e <_isatty_r+0x1a>
 800b878:	682b      	ldr	r3, [r5, #0]
 800b87a:	b103      	cbz	r3, 800b87e <_isatty_r+0x1a>
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	bd38      	pop	{r3, r4, r5, pc}
 800b880:	240002ec 	.word	0x240002ec

0800b884 <_lseek_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d07      	ldr	r5, [pc, #28]	; (800b8a4 <_lseek_r+0x20>)
 800b888:	4604      	mov	r4, r0
 800b88a:	4608      	mov	r0, r1
 800b88c:	4611      	mov	r1, r2
 800b88e:	2200      	movs	r2, #0
 800b890:	602a      	str	r2, [r5, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	f7f6 f801 	bl	800189a <_lseek>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_lseek_r+0x1e>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_lseek_r+0x1e>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	240002ec 	.word	0x240002ec

0800b8a8 <__ascii_mbtowc>:
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	b901      	cbnz	r1, 800b8ae <__ascii_mbtowc+0x6>
 800b8ac:	a901      	add	r1, sp, #4
 800b8ae:	b142      	cbz	r2, 800b8c2 <__ascii_mbtowc+0x1a>
 800b8b0:	b14b      	cbz	r3, 800b8c6 <__ascii_mbtowc+0x1e>
 800b8b2:	7813      	ldrb	r3, [r2, #0]
 800b8b4:	600b      	str	r3, [r1, #0]
 800b8b6:	7812      	ldrb	r2, [r2, #0]
 800b8b8:	1e10      	subs	r0, r2, #0
 800b8ba:	bf18      	it	ne
 800b8bc:	2001      	movne	r0, #1
 800b8be:	b002      	add	sp, #8
 800b8c0:	4770      	bx	lr
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	e7fb      	b.n	800b8be <__ascii_mbtowc+0x16>
 800b8c6:	f06f 0001 	mvn.w	r0, #1
 800b8ca:	e7f8      	b.n	800b8be <__ascii_mbtowc+0x16>

0800b8cc <__malloc_lock>:
 800b8cc:	4801      	ldr	r0, [pc, #4]	; (800b8d4 <__malloc_lock+0x8>)
 800b8ce:	f7ff ba06 	b.w	800acde <__retarget_lock_acquire_recursive>
 800b8d2:	bf00      	nop
 800b8d4:	240002e0 	.word	0x240002e0

0800b8d8 <__malloc_unlock>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__malloc_unlock+0x8>)
 800b8da:	f7ff ba01 	b.w	800ace0 <__retarget_lock_release_recursive>
 800b8de:	bf00      	nop
 800b8e0:	240002e0 	.word	0x240002e0

0800b8e4 <_read_r>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	4d07      	ldr	r5, [pc, #28]	; (800b904 <_read_r+0x20>)
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	4608      	mov	r0, r1
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	602a      	str	r2, [r5, #0]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	f7f5 ff71 	bl	80017da <_read>
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	d102      	bne.n	800b902 <_read_r+0x1e>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	b103      	cbz	r3, 800b902 <_read_r+0x1e>
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	240002ec 	.word	0x240002ec

0800b908 <__ascii_wctomb>:
 800b908:	b149      	cbz	r1, 800b91e <__ascii_wctomb+0x16>
 800b90a:	2aff      	cmp	r2, #255	; 0xff
 800b90c:	bf85      	ittet	hi
 800b90e:	238a      	movhi	r3, #138	; 0x8a
 800b910:	6003      	strhi	r3, [r0, #0]
 800b912:	700a      	strbls	r2, [r1, #0]
 800b914:	f04f 30ff 	movhi.w	r0, #4294967295
 800b918:	bf98      	it	ls
 800b91a:	2001      	movls	r0, #1
 800b91c:	4770      	bx	lr
 800b91e:	4608      	mov	r0, r1
 800b920:	4770      	bx	lr
	...

0800b924 <_init>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	bf00      	nop
 800b928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92a:	bc08      	pop	{r3}
 800b92c:	469e      	mov	lr, r3
 800b92e:	4770      	bx	lr

0800b930 <_fini>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	bf00      	nop
 800b934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b936:	bc08      	pop	{r3}
 800b938:	469e      	mov	lr, r3
 800b93a:	4770      	bx	lr

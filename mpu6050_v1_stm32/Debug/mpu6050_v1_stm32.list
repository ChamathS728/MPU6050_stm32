
mpu6050_v1_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aed4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800b188  0800b188  0001b188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b690  0800b690  0001b690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b698  0800b698  0001b698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b69c  0800b69c  0001b69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800b6a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000110  240001e0  0800b880  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002f0  0800b880  000202f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001534d  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002671  00000000  00000000  0003555b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f28  00000000  00000000  00037bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e40  00000000  00000000  00038af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003043d  00000000  00000000  00039938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000153f7  00000000  00000000  00069d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136670  00000000  00000000  0007f16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b57dc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d70  00000000  00000000  001b582c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b16c 	.word	0x0800b16c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800b16c 	.word	0x0800b16c

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MPU6050_readRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


HAL_StatusTypeDef MPU6050_readRegister(MPU6050* mpu6050, uint8_t reg, uint8_t* data) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af04      	add	r7, sp, #16
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
  Reads 1 byte from the specified register using I2C configuration from the MPU6050 instance
  Info is stored away into the data array
  */
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_IT(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1, HAL_MAX_DELAY);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	b299      	uxth	r1, r3
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	f002 fce2 	bl	8003098 <HAL_I2C_Mem_Read>
 80006d4:	4603      	mov	r3, r0
 80006d6:	75fb      	strb	r3, [r7, #23]
  return result;
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <MPU6050_writeRegister>:

HAL_StatusTypeDef MPU6050_writeRegister(MPU6050* mpu6050, uint8_t reg, uint8_t* data) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b08a      	sub	sp, #40	; 0x28
 80006e6:	af04      	add	r7, sp, #16
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	460b      	mov	r3, r1
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	72fb      	strb	r3, [r7, #11]
  /*
  Writes 1 byte from the data array into the specified register reg using I2C configuration from the MPU6050 instance
  */  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write_IT(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1, HAL_MAX_DELAY);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	b299      	uxth	r1, r3
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	9302      	str	r3, [sp, #8]
 8000704:	2301      	movs	r3, #1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	f002 fbaf 	bl	8002e70 <HAL_I2C_Mem_Write>
 8000712:	4603      	mov	r3, r0
 8000714:	75fb      	strb	r3, [r7, #23]
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MPU6050_readRegisters>:

HAL_StatusTypeDef MPU6050_readRegisters(MPU6050* mpu6050, uint8_t reg, uint8_t* data, uint8_t length) {
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b08b      	sub	sp, #44	; 0x2c
 8000724:	af04      	add	r7, sp, #16
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	461a      	mov	r2, r3
 800072c:	460b      	mov	r3, r1
 800072e:	72fb      	strb	r3, [r7, #11]
 8000730:	4613      	mov	r3, r2
 8000732:	72bb      	strb	r3, [r7, #10]
  Info is stored away into the data array
  */  
  // NOTE: Length is the number of bytes we wanna read from the register -> 1 means read that register. 2 would mean reading this register then the next one
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length);
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_IT(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length, HAL_MAX_DELAY);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	b299      	uxth	r1, r3
 800073e:	7afb      	ldrb	r3, [r7, #11]
 8000740:	b29a      	uxth	r2, r3
 8000742:	7abb      	ldrb	r3, [r7, #10]
 8000744:	b29b      	uxth	r3, r3
 8000746:	f04f 34ff 	mov.w	r4, #4294967295
 800074a:	9402      	str	r4, [sp, #8]
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2301      	movs	r3, #1
 8000754:	f002 fca0 	bl	8003098 <HAL_I2C_Mem_Read>
 8000758:	4603      	mov	r3, r0
 800075a:	75fb      	strb	r3, [r7, #23]
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	371c      	adds	r7, #28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd90      	pop	{r4, r7, pc}

08000766 <MPU6050_wakeup>:


HAL_StatusTypeDef MPU6050_wakeup(MPU6050* mpu6050) {
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  // Write 0's to the PWR_MGMT_1 register to wake it up
  // It sets clock source as internal 8MHz clock, and it is woken up
  // uint8_t zero = 0;
  // HAL_StatusTypeDef res = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &zero, sizeof(zero), TIMEOUT_DEFAULT);

  HAL_StatusTypeDef res = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	216b      	movs	r1, #107	; 0x6b
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffb5 	bl	80006e2 <MPU6050_writeRegister>
 8000778:	4603      	mov	r3, r0
 800077a:	73fb      	strb	r3, [r7, #15]
  return res;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MPU6050_set_pwr_mgmt>:

HAL_StatusTypeDef MPU6050_set_pwr_mgmt(MPU6050* mpu6050, int dev_rst, int sleep, int cycle, int temp_dis, int clksel) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	603b      	str	r3, [r7, #0]
  // Assumption is that the first 4 inputs are 1 bit (0 or 1), and clksel is 3 bit (0 to 7)
  assert(dev_rst >= 0 && dev_rst <= 1);
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db02      	blt.n	80007a2 <MPU6050_set_pwr_mgmt+0x1a>
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	dd05      	ble.n	80007ae <MPU6050_set_pwr_mgmt+0x26>
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <MPU6050_set_pwr_mgmt+0xd4>)
 80007a4:	4a2e      	ldr	r2, [pc, #184]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 80007a6:	21bb      	movs	r1, #187	; 0xbb
 80007a8:	482e      	ldr	r0, [pc, #184]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 80007aa:	f008 f83f 	bl	800882c <__assert_func>
  assert(sleep >= 0 && sleep <= 1);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	db02      	blt.n	80007ba <MPU6050_set_pwr_mgmt+0x32>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	dd05      	ble.n	80007c6 <MPU6050_set_pwr_mgmt+0x3e>
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MPU6050_set_pwr_mgmt+0xe0>)
 80007bc:	4a28      	ldr	r2, [pc, #160]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 80007be:	21bc      	movs	r1, #188	; 0xbc
 80007c0:	4828      	ldr	r0, [pc, #160]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 80007c2:	f008 f833 	bl	800882c <__assert_func>
  assert(cycle >= 0 && cycle <= 1);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db02      	blt.n	80007d2 <MPU6050_set_pwr_mgmt+0x4a>
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	dd05      	ble.n	80007de <MPU6050_set_pwr_mgmt+0x56>
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <MPU6050_set_pwr_mgmt+0xe4>)
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 80007d6:	21bd      	movs	r1, #189	; 0xbd
 80007d8:	4822      	ldr	r0, [pc, #136]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 80007da:	f008 f827 	bl	800882c <__assert_func>
  assert(temp_dis >= 0 && temp_dis <= 1);
 80007de:	6a3b      	ldr	r3, [r7, #32]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db02      	blt.n	80007ea <MPU6050_set_pwr_mgmt+0x62>
 80007e4:	6a3b      	ldr	r3, [r7, #32]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	dd05      	ble.n	80007f6 <MPU6050_set_pwr_mgmt+0x6e>
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MPU6050_set_pwr_mgmt+0xe8>)
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 80007ee:	21be      	movs	r1, #190	; 0xbe
 80007f0:	481c      	ldr	r0, [pc, #112]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 80007f2:	f008 f81b 	bl	800882c <__assert_func>
  assert(clksel >= 0 && clksel <= 7);
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db02      	blt.n	8000802 <MPU6050_set_pwr_mgmt+0x7a>
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	2b07      	cmp	r3, #7
 8000800:	dd05      	ble.n	800080e <MPU6050_set_pwr_mgmt+0x86>
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MPU6050_set_pwr_mgmt+0xec>)
 8000804:	4a16      	ldr	r2, [pc, #88]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 8000806:	21bf      	movs	r1, #191	; 0xbf
 8000808:	4816      	ldr	r0, [pc, #88]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 800080a:	f008 f80f 	bl	800882c <__assert_func>

  // Create bit string to put into the register
  uint8_t res =  0 | (dev_rst << 7) | (sleep << 6) | (cycle << 5) | (temp_dis << 3) | clksel;
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	01db      	lsls	r3, r3, #7
 8000812:	b25a      	sxtb	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	019b      	lsls	r3, r3, #6
 8000818:	b25b      	sxtb	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b25a      	sxtb	r2, r3
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	015b      	lsls	r3, r3, #5
 8000822:	b25b      	sxtb	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b25a      	sxtb	r2, r3
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	b25b      	sxtb	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b25a      	sxtb	r2, r3
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	75bb      	strb	r3, [r7, #22]
  
  // Write to the register over I2C
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, &res);
 800083e:	f107 0316 	add.w	r3, r7, #22
 8000842:	461a      	mov	r2, r3
 8000844:	216b      	movs	r1, #107	; 0x6b
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f7ff ff4b 	bl	80006e2 <MPU6050_writeRegister>
 800084c:	4603      	mov	r3, r0
 800084e:	75fb      	strb	r3, [r7, #23]

  return result;
 8000850:	7dfb      	ldrb	r3, [r7, #23]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	0800b188 	.word	0x0800b188
 8000860:	0800b250 	.word	0x0800b250
 8000864:	0800b1a8 	.word	0x0800b1a8
 8000868:	0800b1bc 	.word	0x0800b1bc
 800086c:	0800b1d8 	.word	0x0800b1d8
 8000870:	0800b1f4 	.word	0x0800b1f4
 8000874:	0800b214 	.word	0x0800b214

08000878 <MPU6050_set_dlpf>:

HAL_StatusTypeDef MPU6050_set_dlpf(uint8_t* dlpf, MPU6050* mpu6050) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  /*
  Just set DLPF_CFG = 001 (so register )
  */

  // Ensure that dlpf is a number between 0 and 7
  assert((*dlpf >= 0) && (*dlpf <= 7));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b07      	cmp	r3, #7
 8000888:	d905      	bls.n	8000896 <MPU6050_set_dlpf+0x1e>
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MPU6050_set_dlpf+0x40>)
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <MPU6050_set_dlpf+0x44>)
 800088e:	21d1      	movs	r1, #209	; 0xd1
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MPU6050_set_dlpf+0x48>)
 8000892:	f007 ffcb 	bl	800882c <__assert_func>
  // assert(*dlpf >= 0);
  // assert(*dlpf <= 7);

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, DLPF, I2C_MEMADD_SIZE_8BIT, dlpf, sizeof(*dlpf), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, dlpf);
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	216b      	movs	r1, #107	; 0x6b
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	f7ff ff21 	bl	80006e2 <MPU6050_writeRegister>
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]
  

  // Store the dlpf number in the struct
  mpu6050->dlpf = *dlpf;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	719a      	strb	r2, [r3, #6]
  return result;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	0800b230 	.word	0x0800b230
 80008bc:	0800b268 	.word	0x0800b268
 80008c0:	0800b1a8 	.word	0x0800b1a8

080008c4 <MPU6050_set_sample_rate>:

// REVIEW - Maths behind the smplrt_div_input may not be good due to division.
HAL_StatusTypeDef MPU6050_set_sample_rate(uint8_t* freq_ptr, MPU6050* mpu6050) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]

  We need to calculate what needs to go into the SMPLRT_DIV register to get the desired frequency
  This also assumes that the gyro output rate is at 1kHz
  */
  
  uint8_t smplrt_div_input = (mpu6050->gyro_smplrt)/(*freq_ptr) - 1;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	795a      	ldrb	r2, [r3, #5]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &smplrt_div_input, sizeof(smplrt_div_input), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, SMPLRT_DIV, &smplrt_div_input);
 80008e2:	f107 030e 	add.w	r3, r7, #14
 80008e6:	461a      	mov	r2, r3
 80008e8:	2119      	movs	r1, #25
 80008ea:	6838      	ldr	r0, [r7, #0]
 80008ec:	f7ff fef9 	bl	80006e2 <MPU6050_writeRegister>
 80008f0:	4603      	mov	r3, r0
 80008f2:	73fb      	strb	r3, [r7, #15]

  // Store the new sample rate divider in the struct
  mpu6050->gyro_smplrt = *freq_ptr;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	715a      	strb	r2, [r3, #5]
  return result;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <MPU6050_set_gyro_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_gyro_FSR(Gyro_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d822      	bhi.n	8000960 <MPU6050_set_gyro_FSR+0x58>
 800091a:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <MPU6050_set_gyro_FSR+0x18>)
 800091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000920:	08000931 	.word	0x08000931
 8000924:	0800093d 	.word	0x0800093d
 8000928:	08000949 	.word	0x08000949
 800092c:	08000955 	.word	0x08000955
    // For each possibility, set the correct data to be written and store the setting away
    // Left shift data bits by 3 so that we only overwrite bits 4 and 3
    case GYRO_FSR_250:
      pData = (0 << 3);
 8000930:	2300      	movs	r3, #0
 8000932:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_250;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	2200      	movs	r2, #0
 8000938:	71da      	strb	r2, [r3, #7]
      break;
 800093a:	e011      	b.n	8000960 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_500:
      pData = (1 << 3);
 800093c:	2308      	movs	r3, #8
 800093e:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_500;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2201      	movs	r2, #1
 8000944:	71da      	strb	r2, [r3, #7]
      break;
 8000946:	e00b      	b.n	8000960 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_1000:
      pData = (2 << 3);
 8000948:	2310      	movs	r3, #16
 800094a:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_1000;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	2202      	movs	r2, #2
 8000950:	71da      	strb	r2, [r3, #7]
      break;
 8000952:	e005      	b.n	8000960 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_2000:
      pData = (3 << 3);
 8000954:	2318      	movs	r3, #24
 8000956:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_2000;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	2203      	movs	r2, #3
 800095c:	71da      	strb	r2, [r3, #7]
      break;
 800095e:	bf00      	nop
  }
  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, GYRO_CONFIG, &pData);  
 8000960:	f107 030e 	add.w	r3, r7, #14
 8000964:	461a      	mov	r2, r3
 8000966:	211b      	movs	r1, #27
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	f7ff feba 	bl	80006e2 <MPU6050_writeRegister>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
  
  return result;
 8000972:	7bfb      	ldrb	r3, [r7, #15]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <MPU6050_set_accel_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_accel_FSR(Accel_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d822      	bhi.n	80009d4 <MPU6050_set_accel_FSR+0x58>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <MPU6050_set_accel_FSR+0x18>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	080009a5 	.word	0x080009a5
 8000998:	080009b1 	.word	0x080009b1
 800099c:	080009bd 	.word	0x080009bd
 80009a0:	080009c9 	.word	0x080009c9
    case ACCEL_FSR_2g:
      pData = (0 << 3);
 80009a4:	2300      	movs	r3, #0
 80009a6:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_2g;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2200      	movs	r2, #0
 80009ac:	721a      	strb	r2, [r3, #8]
      break;
 80009ae:	e011      	b.n	80009d4 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_4g:
      pData = (1 << 3);
 80009b0:	2308      	movs	r3, #8
 80009b2:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_4g;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	2201      	movs	r2, #1
 80009b8:	721a      	strb	r2, [r3, #8]
      break;
 80009ba:	e00b      	b.n	80009d4 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_8g:
      pData = (2 << 3);
 80009bc:	2310      	movs	r3, #16
 80009be:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_8g;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2202      	movs	r2, #2
 80009c4:	721a      	strb	r2, [r3, #8]
      break;
 80009c6:	e005      	b.n	80009d4 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_16g:
      pData = (3 << 3);
 80009c8:	2318      	movs	r3, #24
 80009ca:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_16g;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2203      	movs	r2, #3
 80009d0:	721a      	strb	r2, [r3, #8]
      break;
 80009d2:	bf00      	nop
  }
  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, ACCEL_CONFIG, &pData);    
 80009d4:	f107 030e 	add.w	r3, r7, #14
 80009d8:	461a      	mov	r2, r3
 80009da:	211c      	movs	r1, #28
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f7ff fe80 	bl	80006e2 <MPU6050_writeRegister>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]
  
  return result;  
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <MPU6050_FIFO_enable>:


HAL_StatusTypeDef MPU6050_FIFO_enable(MPU6050* mpu6050) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  // Write a 1 to bit 6 of register 0x6A
  uint8_t res = (1 << 6);
 80009f8:	2340      	movs	r3, #64	; 0x40
 80009fa:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, USER_CTRL, &res);     
 80009fc:	f107 030e 	add.w	r3, r7, #14
 8000a00:	461a      	mov	r2, r3
 8000a02:	216a      	movs	r1, #106	; 0x6a
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff fe6c 	bl	80006e2 <MPU6050_writeRegister>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	73fb      	strb	r3, [r7, #15]
  return result;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <MPU6050_FIFO_reset>:

HAL_StatusTypeDef MPU6050_FIFO_reset(MPU6050* mpu6050) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  // Assumes that MPU6050 FIFO buffer is enabled. FIFO enable bit is driven low ONLY when MPU is power cycled (turned off and back on)
  // Write a 2 to bit 2 of register 0x6A -> this gets written to 0 once FIFO is reset anyway
  uint8_t res = (1 << 2);
 8000a20:	2304      	movs	r3, #4
 8000a22:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, USER_CTRL, &res);  
 8000a24:	f107 030e 	add.w	r3, r7, #14
 8000a28:	461a      	mov	r2, r3
 8000a2a:	216a      	movs	r1, #106	; 0x6a
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fe58 	bl	80006e2 <MPU6050_writeRegister>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]

  return result;  
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MPU6050_init>:

HAL_StatusTypeDef MPU6050_init(MPU6050* mpu6050_ptr, uint8_t* dlpf, uint8_t* smpl_frq, Gyro_FSR_SEL_TypeDef gyro_setting, Accel_FSR_SEL_TypeDef accel_setting) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	70fb      	strb	r3, [r7, #3]
  // Check that we have the correct device by checking its address
  uint8_t check = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	75bb      	strb	r3, [r7, #22]
  // uint8_t check[4];
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &check, sizeof(check), TIMEOUT_DEFAULT);
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &check, sizeof(check), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_readRegister(mpu6050_ptr, WHO_AM_I, &check);
 8000a52:	f107 0316 	add.w	r3, r7, #22
 8000a56:	461a      	mov	r2, r3
 8000a58:	2175      	movs	r1, #117	; 0x75
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f7ff fe22 	bl	80006a4 <MPU6050_readRegister>
 8000a60:	4603      	mov	r3, r0
 8000a62:	75fb      	strb	r3, [r7, #23]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, 1, check, 1, 1000);

  if (result == HAL_OK && check == 0x68) { //check == 0x68
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d118      	bne.n	8000a9c <MPU6050_init+0x5c>
 8000a6a:	7dbb      	ldrb	r3, [r7, #22]
 8000a6c:	2b68      	cmp	r3, #104	; 0x68
 8000a6e:	d115      	bne.n	8000a9c <MPU6050_init+0x5c>
    // Device is identified as the MPU6050 yay -> Wake it up
    MPU6050_wakeup(mpu6050_ptr);
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fe78 	bl	8000766 <MPU6050_wakeup>

    // Configure DLPF_CFG and store away settings
    MPU6050_set_dlpf(dlpf, mpu6050_ptr);
 8000a76:	68f9      	ldr	r1, [r7, #12]
 8000a78:	68b8      	ldr	r0, [r7, #8]
 8000a7a:	f7ff fefd 	bl	8000878 <MPU6050_set_dlpf>

    // Configure the gyro sample rate and store away settings
    MPU6050_set_sample_rate(smpl_frq, mpu6050_ptr);
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff1f 	bl	80008c4 <MPU6050_set_sample_rate>

    // Set the full scale range for the gyroscope and accelerometer
    MPU6050_set_gyro_FSR(gyro_setting, mpu6050_ptr);
 8000a86:	78fb      	ldrb	r3, [r7, #3]
 8000a88:	68f9      	ldr	r1, [r7, #12]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff3c 	bl	8000908 <MPU6050_set_gyro_FSR>
    MPU6050_set_accel_FSR(accel_setting, mpu6050_ptr);
 8000a90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a94:	68f9      	ldr	r1, [r7, #12]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff70 	bl	800097c <MPU6050_set_accel_FSR>
  }

  return result;
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <MPU6050_read_gyro_reg>:

HAL_StatusTypeDef MPU6050_read_gyro_reg(MPU6050* mpu6050) {
 8000aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000aac:	b089      	sub	sp, #36	; 0x24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	466b      	mov	r3, sp
 8000ab4:	461e      	mov	r6, r3
  // Initialise temporary variables
  int16_t gx_raw = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	83fb      	strh	r3, [r7, #30]
  int16_t gy_raw = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	83bb      	strh	r3, [r7, #28]
  int16_t gz_raw = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	837b      	strh	r3, [r7, #26]

  uint8_t num_of_bytes = 6;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	767b      	strb	r3, [r7, #25]
  int8_t g_raw[num_of_bytes];
 8000ac6:	7e79      	ldrb	r1, [r7, #25]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	3b01      	subs	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	b2cb      	uxtb	r3, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4698      	mov	r8, r3
 8000ad4:	4691      	mov	r9, r2
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	f04f 0300 	mov.w	r3, #0
 8000ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000aea:	b2cb      	uxtb	r3, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	461c      	mov	r4, r3
 8000af0:	4615      	mov	r5, r2
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	00eb      	lsls	r3, r5, #3
 8000afc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b00:	00e2      	lsls	r2, r4, #3
 8000b02:	460b      	mov	r3, r1
 8000b04:	3307      	adds	r3, #7
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b0e:	466b      	mov	r3, sp
 8000b10:	3300      	adds	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]

  // Read X gyro registers and store the raw gyroscope value away
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
  
  // Read all gyroscope registers starting from GYRO_XOUT_H and ending at GYRO_ZOUT_L
  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, GYRO_XOUT_H, g_raw, num_of_bytes);
 8000b14:	7e7b      	ldrb	r3, [r7, #25]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	2143      	movs	r1, #67	; 0x43
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fe00 	bl	8000720 <MPU6050_readRegisters>
 8000b20:	4603      	mov	r3, r0
 8000b22:	73fb      	strb	r3, [r7, #15]

  // Get the raw x, y and z values
  gx_raw = (g_raw[0] << 8) | (g_raw[1]);
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	83fb      	strh	r3, [r7, #30]
  gy_raw = (g_raw[2] << 8) | (g_raw[3]);
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	83bb      	strh	r3, [r7, #28]
  gz_raw = (g_raw[4] << 8) | (g_raw[5]);
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	837b      	strh	r3, [r7, #26]
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_ZOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_ZOUT_L, I2C_MEMADD_SIZE_8BIT, &g_raw_L, sizeof(g_raw_L), TIMEOUT_DEFAULT);
  // gz_raw = (g_raw[4] << 8) | (g_raw[5]);

  // Rescale raw readings according to gyro FSR
  switch(mpu6050->gyro_FSR) {
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	79db      	ldrb	r3, [r3, #7]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	f200 80c4 	bhi.w	8000cf8 <MPU6050_read_gyro_reg+0x250>
 8000b70:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <MPU6050_read_gyro_reg+0xd0>)
 8000b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b76:	bf00      	nop
 8000b78:	08000b89 	.word	0x08000b89
 8000b7c:	08000bd9 	.word	0x08000bd9
 8000b80:	08000c29 	.word	0x08000c29
 8000b84:	08000c91 	.word	0x08000c91
    case GYRO_FSR_250:
      mpu6050->gx = ((float) gx_raw) / 131.0;
 8000b88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b94:	eddf 6a60 	vldr	s13, [pc, #384]	; 8000d18 <MPU6050_read_gyro_reg+0x270>
 8000b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 131.0;
 8000ba2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bae:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8000d18 <MPU6050_read_gyro_reg+0x270>
 8000bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 131.0;
 8000bbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc8:	eddf 6a53 	vldr	s13, [pc, #332]	; 8000d18 <MPU6050_read_gyro_reg+0x270>
 8000bcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000bd6:	e08f      	b.n	8000cf8 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_500:
      mpu6050->gx = ((float) gx_raw) / 65.5;
 8000bd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bdc:	ee07 3a90 	vmov	s15, r3
 8000be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be4:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000d1c <MPU6050_read_gyro_reg+0x274>
 8000be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 65.5;
 8000bf2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000bf6:	ee07 3a90 	vmov	s15, r3
 8000bfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bfe:	eddf 6a47 	vldr	s13, [pc, #284]	; 8000d1c <MPU6050_read_gyro_reg+0x274>
 8000c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 65.5;
 8000c0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c18:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000d1c <MPU6050_read_gyro_reg+0x274>
 8000c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000c26:	e067      	b.n	8000cf8 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_1000:
      mpu6050->gx = ((float) gx_raw) / 32.8;
 8000c28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c34:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c38:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000d08 <MPU6050_read_gyro_reg+0x260>
 8000c3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 32.8;
 8000c4a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000c4e:	ee07 3a90 	vmov	s15, r3
 8000c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c56:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c5a:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8000d08 <MPU6050_read_gyro_reg+0x260>
 8000c5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 32.8;
 8000c6c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c70:	ee07 3a90 	vmov	s15, r3
 8000c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c7c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8000d08 <MPU6050_read_gyro_reg+0x260>
 8000c80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000c8e:	e033      	b.n	8000cf8 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_2000:
      mpu6050->gx = ((float) gx_raw) / 16.4;
 8000c90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ca0:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000d10 <MPU6050_read_gyro_reg+0x268>
 8000ca4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 16.4;
 8000cb2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000cb6:	ee07 3a90 	vmov	s15, r3
 8000cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cbe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cc2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000d10 <MPU6050_read_gyro_reg+0x268>
 8000cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 16.4;
 8000cd4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ce4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000d10 <MPU6050_read_gyro_reg+0x268>
 8000ce8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000cf6:	bf00      	nop
  }

  return result;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	46b5      	mov	sp, r6
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3724      	adds	r7, #36	; 0x24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d06:	bf00      	nop
 8000d08:	66666666 	.word	0x66666666
 8000d0c:	40406666 	.word	0x40406666
 8000d10:	66666666 	.word	0x66666666
 8000d14:	40306666 	.word	0x40306666
 8000d18:	43030000 	.word	0x43030000
 8000d1c:	42830000 	.word	0x42830000

08000d20 <MPU6050_read_accel_reg>:

HAL_StatusTypeDef MPU6050_read_accel_reg(MPU6050* mpu6050) {
 8000d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d24:	b089      	sub	sp, #36	; 0x24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	466b      	mov	r3, sp
 8000d2c:	461e      	mov	r6, r3
  // Initialise temporary variables
  int16_t ax_raw = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	83fb      	strh	r3, [r7, #30]
  int16_t ay_raw = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	83bb      	strh	r3, [r7, #28]
  int16_t az_raw = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	837b      	strh	r3, [r7, #26]

  uint8_t num_of_bytes = 6;
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	767b      	strb	r3, [r7, #25]
  int8_t a_raw[num_of_bytes];
 8000d3e:	7e79      	ldrb	r1, [r7, #25]
 8000d40:	460b      	mov	r3, r1
 8000d42:	3b01      	subs	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	b2cb      	uxtb	r3, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d62:	b2cb      	uxtb	r3, r1
 8000d64:	2200      	movs	r2, #0
 8000d66:	461c      	mov	r4, r3
 8000d68:	4615      	mov	r5, r2
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	00eb      	lsls	r3, r5, #3
 8000d74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d78:	00e2      	lsls	r2, r4, #3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	3307      	adds	r3, #7
 8000d7e:	08db      	lsrs	r3, r3, #3
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	ebad 0d03 	sub.w	sp, sp, r3
 8000d86:	466b      	mov	r3, sp
 8000d88:	3300      	adds	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]

  // Read all gyroscope registers starting from GYRO_XOUT_H and ending at GYRO_ZOUT_L
  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, ACCEL_XOUT_H, a_raw, num_of_bytes);
 8000d8c:	7e7b      	ldrb	r3, [r7, #25]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	213b      	movs	r1, #59	; 0x3b
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fcc4 	bl	8000720 <MPU6050_readRegisters>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	73fb      	strb	r3, [r7, #15]

  // Get the raw x, y and z values
  ax_raw = (a_raw[0] << 8) | (a_raw[1]);
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	83fb      	strh	r3, [r7, #30]
  ay_raw = (a_raw[2] << 8) | (a_raw[3]);
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	b21a      	sxth	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	83bb      	strh	r3, [r7, #28]
  az_raw = (a_raw[4] << 8) | (a_raw[5]);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	837b      	strh	r3, [r7, #26]
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_ZOUT_H, I2C_MEMADD_SIZE_8BIT, &a_raw_H, sizeof(a_raw_H), TIMEOUT_DEFAULT);
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_ZOUT_L, I2C_MEMADD_SIZE_8BIT, &a_raw_L, sizeof(a_raw_L), TIMEOUT_DEFAULT);
  // az_raw = (a_raw_H << 8) | (a_raw_L);

  // Rescale them according to accel FSR
  switch(mpu6050->accel_FSR) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7a1b      	ldrb	r3, [r3, #8]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	f200 810c 	bhi.w	8001000 <MPU6050_read_accel_reg+0x2e0>
 8000de8:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <MPU6050_read_accel_reg+0xd0>)
 8000dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dee:	bf00      	nop
 8000df0:	08000e01 	.word	0x08000e01
 8000df4:	08000e81 	.word	0x08000e81
 8000df8:	08000f01 	.word	0x08000f01
 8000dfc:	08000f81 	.word	0x08000f81
    case ACCEL_FSR_2g:
      mpu6050->ax = ((float) ax_raw) / 16384.0 * 9.8;
 8000e00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e04:	ee07 3a90 	vmov	s15, r3
 8000e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e0c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e10:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8001010 <MPU6050_read_accel_reg+0x2f0>
 8000e14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e18:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000e1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 16384.0 * 9.8;
 8000e2a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e36:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e3a:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8001010 <MPU6050_read_accel_reg+0x2f0>
 8000e3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e42:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000e46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 16384.0 * 9.8;
 8000e54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e64:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8001010 <MPU6050_read_accel_reg+0x2f0>
 8000e68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e6c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000e70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000e7e:	e0bf      	b.n	8001000 <MPU6050_read_accel_reg+0x2e0>
    case ACCEL_FSR_4g:
      mpu6050->ax = ((float) ax_raw) / 8192.0 * 9.8;
 8000e80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e90:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8001020 <MPU6050_read_accel_reg+0x300>
 8000e94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e98:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000e9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ea0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 8192.0 * 9.8;
 8000eaa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000eba:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8001020 <MPU6050_read_accel_reg+0x300>
 8000ebe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ec2:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000ec6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 8192.0 * 9.8;
 8000ed4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ee4:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8001020 <MPU6050_read_accel_reg+0x300>
 8000ee8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eec:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000ef0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000efe:	e07f      	b.n	8001000 <MPU6050_read_accel_reg+0x2e0>
    case ACCEL_FSR_8g:
      mpu6050->ax = ((float) ax_raw) / 4096.0 * 9.8;
 8000f00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f10:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001028 <MPU6050_read_accel_reg+0x308>
 8000f14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f18:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000f1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 4096.0 * 9.8;
 8000f2a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f36:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f3a:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001028 <MPU6050_read_accel_reg+0x308>
 8000f3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f42:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000f46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 4096.0 * 9.8;
 8000f54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f64:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8001028 <MPU6050_read_accel_reg+0x308>
 8000f68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f6c:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000f70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000f7e:	e03f      	b.n	8001000 <MPU6050_read_accel_reg+0x2e0>
    case ACCEL_FSR_16g:
      mpu6050->ax = ((float) ax_raw) / 2048.0 * 9.8;
 8000f80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f90:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8001030 <MPU6050_read_accel_reg+0x310>
 8000f94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f98:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000f9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 2048.0 * 9.8;
 8000faa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fba:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001030 <MPU6050_read_accel_reg+0x310>
 8000fbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fc2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000fc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 2048.0 * 9.8;
 8000fd4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fe4:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001030 <MPU6050_read_accel_reg+0x310>
 8000fe8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fec:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001018 <MPU6050_read_accel_reg+0x2f8>
 8000ff0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ff4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000ffe:	bf00      	nop
  }

  return result;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	46b5      	mov	sp, r6
}
 8001004:	4618      	mov	r0, r3
 8001006:	3724      	adds	r7, #36	; 0x24
 8001008:	46bd      	mov	sp, r7
 800100a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800100e:	bf00      	nop
 8001010:	00000000 	.word	0x00000000
 8001014:	40d00000 	.word	0x40d00000
 8001018:	9999999a 	.word	0x9999999a
 800101c:	40239999 	.word	0x40239999
 8001020:	00000000 	.word	0x00000000
 8001024:	40c00000 	.word	0x40c00000
 8001028:	00000000 	.word	0x00000000
 800102c:	40b00000 	.word	0x40b00000
 8001030:	00000000 	.word	0x00000000
 8001034:	40a00000 	.word	0x40a00000

08001038 <MPU6050_read_temp_reg>:

HAL_StatusTypeDef MPU6050_read_temp_reg(MPU6050* mpu6050) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  int16_t raw_temp = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	81fb      	strh	r3, [r7, #14]

  uint8_t num_of_bytes = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	737b      	strb	r3, [r7, #13]
  int8_t temp[2];

  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, TEMP_OUT_H, temp, num_of_bytes);
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	f107 0208 	add.w	r2, r7, #8
 800104e:	2141      	movs	r1, #65	; 0x41
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fb65 	bl	8000720 <MPU6050_readRegisters>
 8001056:	4603      	mov	r3, r0
 8001058:	733b      	strb	r3, [r7, #12]
  raw_temp = (temp[0] << 8) | (temp[1]);
 800105a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	81fb      	strh	r3, [r7, #14]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, &temp_H, sizeof(temp_H), TIMEOUT_DEFAULT);
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, &temp_L, sizeof(temp_L), TIMEOUT_DEFAULT);
  // raw_temp = (temp_H << 8) | (temp_L);

  // Fix the readings to be in celsius
  mpu6050->temp = ((float) raw_temp)/340.0 + 36.53;
 800106c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001078:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800107c:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80010a0 <MPU6050_read_temp_reg+0x68>
 8001080:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001084:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80010a8 <MPU6050_read_temp_reg+0x70>
 8001088:	ee37 7b06 	vadd.f64	d7, d7, d6
 800108c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40754000 	.word	0x40754000
 80010a8:	0a3d70a4 	.word	0x0a3d70a4
 80010ac:	404243d7 	.word	0x404243d7

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f000 fd49 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f85b 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 f963 	bl	8001388 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010c2:	f000 f90d 	bl	80012e0 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 80010c6:	f000 f8cb 	bl	8001260 <MX_I2C4_Init>
  MX_USB_OTG_HS_USB_Init();
 80010ca:	f000 f955 	bl	8001378 <MX_USB_OTG_HS_USB_Init>
  float ax, ay, az; // 16 bit integer
  float gx, gy, gz; // 16 bit integer with 3 entries for x, y and z rotational velocities
  float temp; // 16 bit integer
*/

  MPU6050 mpu6050 = {
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	2228      	movs	r2, #40	; 0x28
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f007 fc02 	bl	80088e0 <memset>
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <main+0xc0>)
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	23d0      	movs	r3, #208	; 0xd0
 80010e2:	733b      	strb	r3, [r7, #12]
    .gz = 0,
    .temp = 0,
  };
  
  // Wake up the MPU6050 as well
  MPU6050_wakeup(&mpu6050);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fb3c 	bl	8000766 <MPU6050_wakeup>

  // Initialise the MPU6050
  uint8_t dlpf = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
  uint8_t smplfrq = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	71bb      	strb	r3, [r7, #6]
  MPU6050_init(&mpu6050, &dlpf, &smplfrq, GYRO_FSR_250, ACCEL_FSR_2g);
 80010f6:	1dba      	adds	r2, r7, #6
 80010f8:	1df9      	adds	r1, r7, #7
 80010fa:	f107 0008 	add.w	r0, r7, #8
 80010fe:	2300      	movs	r3, #0
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f7ff fc9c 	bl	8000a40 <MPU6050_init>
  MPU6050_set_pwr_mgmt(&mpu6050, 0, 0, 0, 0, 1);
 8001108:	f107 0008 	add.w	r0, r7, #8
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	2300      	movs	r3, #0
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	f7ff fb35 	bl	8000788 <MPU6050_set_pwr_mgmt>

  // Enable the FIFO buffer
  MPU6050_FIFO_enable(&mpu6050);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fc64 	bl	80009f0 <MPU6050_FIFO_enable>
  // Reset it as well so that it can be burst read or something -> https://stackoverflow.com/questions/60419390/mpu-6050-correctly-reading-data-from-the-fifo-register
  MPU6050_FIFO_reset(&mpu6050);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fc73 	bl	8000a18 <MPU6050_FIFO_reset>
  MPU6050_FIFO_enable(&mpu6050);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fc5a 	bl	80009f0 <MPU6050_FIFO_enable>
    // MPU6050_read_accel_fifo(&mpu6050);
    // HAL_Delay(100); // Delays in between just for timing??
    // MPU6050_read_temp_fifo(&mpu6050);
    // HAL_Delay(100); // Delays in between just for timing??

    MPU6050_read_gyro_reg(&mpu6050);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fcb1 	bl	8000aa8 <MPU6050_read_gyro_reg>
    HAL_Delay(100); // Delays in between just for timing??
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f000 fd92 	bl	8001c70 <HAL_Delay>
    MPU6050_read_accel_reg(&mpu6050);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fde5 	bl	8000d20 <MPU6050_read_accel_reg>
    HAL_Delay(100); // Delays in between just for timing??
 8001156:	2064      	movs	r0, #100	; 0x64
 8001158:	f000 fd8a 	bl	8001c70 <HAL_Delay>
    MPU6050_read_temp_reg(&mpu6050);
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff69 	bl	8001038 <MPU6050_read_temp_reg>
    HAL_Delay(100); // Delays in between just for timing??
 8001166:	2064      	movs	r0, #100	; 0x64
 8001168:	f000 fd82 	bl	8001c70 <HAL_Delay>
    MPU6050_read_gyro_reg(&mpu6050);
 800116c:	e7e6      	b.n	800113c <main+0x8c>
 800116e:	bf00      	nop
 8001170:	240001fc 	.word	0x240001fc

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09c      	sub	sp, #112	; 0x70
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	224c      	movs	r2, #76	; 0x4c
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f007 fbac 	bl	80088e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2220      	movs	r2, #32
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f007 fba6 	bl	80088e0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <SystemClock_Config+0xe4>)
 8001196:	f04f 32ff 	mov.w	r2, #4294967295
 800119a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800119e:	2004      	movs	r0, #4
 80011a0:	f003 fa34 	bl	800460c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <SystemClock_Config+0xe8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a2b      	ldr	r2, [pc, #172]	; (800125c <SystemClock_Config+0xe8>)
 80011ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <SystemClock_Config+0xe8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011c0:	bf00      	nop
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <SystemClock_Config+0xe8>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ce:	d1f8      	bne.n	80011c2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80011d0:	2321      	movs	r3, #33	; 0x21
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011da:	2301      	movs	r3, #1
 80011dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80011ea:	2346      	movs	r3, #70	; 0x46
 80011ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011fa:	230c      	movs	r3, #12
 80011fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011fe:	2300      	movs	r3, #0
 8001200:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fa58 	bl	80046c0 <HAL_RCC_OscConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001216:	f000 f9d1 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121e:	2303      	movs	r3, #3
 8001220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001236:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001238:	2340      	movs	r3, #64	; 0x40
 800123a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2107      	movs	r1, #7
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fe41 	bl	8004ec8 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800124c:	f000 f9b6 	bl	80015bc <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3770      	adds	r7, #112	; 0x70
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	58024400 	.word	0x58024400
 800125c:	58024800 	.word	0x58024800

08001260 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_I2C4_Init+0x74>)
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <MX_I2C4_Init+0x78>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_I2C4_Init+0x74>)
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <MX_I2C4_Init+0x7c>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_I2C4_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_I2C4_Init+0x74>)
 8001278:	2201      	movs	r2, #1
 800127a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_I2C4_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_I2C4_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_I2C4_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_I2C4_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_I2C4_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <MX_I2C4_Init+0x74>)
 800129c:	f001 fd58 	bl	8002d50 <HAL_I2C_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80012a6:	f000 f989 	bl	80015bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <MX_I2C4_Init+0x74>)
 80012ae:	f003 f915 	bl	80044dc <HAL_I2CEx_ConfigAnalogFilter>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80012b8:	f000 f980 	bl	80015bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80012bc:	2100      	movs	r1, #0
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_I2C4_Init+0x74>)
 80012c0:	f003 f957 	bl	8004572 <HAL_I2CEx_ConfigDigitalFilter>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80012ca:	f000 f977 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240001fc 	.word	0x240001fc
 80012d8:	58001c00 	.word	0x58001c00
 80012dc:	20b0ccff 	.word	0x20b0ccff

080012e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <MX_USART3_UART_Init+0x90>)
 80012e6:	4a23      	ldr	r2, [pc, #140]	; (8001374 <MX_USART3_UART_Init+0x94>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_USART3_UART_Init+0x90>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_USART3_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_USART3_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001328:	4811      	ldr	r0, [pc, #68]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800132a:	f005 fc87 	bl	8006c3c <HAL_UART_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001334:	f000 f942 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001338:	2100      	movs	r1, #0
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800133c:	f007 f9ac 	bl	8008698 <HAL_UARTEx_SetTxFifoThreshold>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001346:	f000 f939 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134a:	2100      	movs	r1, #0
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800134e:	f007 f9e1 	bl	8008714 <HAL_UARTEx_SetRxFifoThreshold>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001358:	f000 f930 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800135e:	f007 f962 	bl	8008626 <HAL_UARTEx_DisableFifoMode>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001368:	f000 f928 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	24000248 	.word	0x24000248
 8001374:	40004800 	.word	0x40004800

08001378 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b80      	ldr	r3, [pc, #512]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a4:	4a7e      	ldr	r2, [pc, #504]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013ae:	4b7c      	ldr	r3, [pc, #496]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	623b      	str	r3, [r7, #32]
 80013ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c2:	4a77      	ldr	r2, [pc, #476]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013cc:	4b74      	ldr	r3, [pc, #464]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d2:	f003 0320 	and.w	r3, r3, #32
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013da:	4b71      	ldr	r3, [pc, #452]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013e0:	4a6f      	ldr	r2, [pc, #444]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013ea:	4b6d      	ldr	r3, [pc, #436]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b69      	ldr	r3, [pc, #420]	; (80015a0 <MX_GPIO_Init+0x218>)
 80013fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013fe:	4a68      	ldr	r2, [pc, #416]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001408:	4b65      	ldr	r3, [pc, #404]	; (80015a0 <MX_GPIO_Init+0x218>)
 800140a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001418:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800141c:	4a60      	ldr	r2, [pc, #384]	; (80015a0 <MX_GPIO_Init+0x218>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001426:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001428:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001434:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001436:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800143a:	4a59      	ldr	r2, [pc, #356]	; (80015a0 <MX_GPIO_Init+0x218>)
 800143c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001440:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001444:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001446:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800144a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001454:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001458:	4a51      	ldr	r2, [pc, #324]	; (80015a0 <MX_GPIO_Init+0x218>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001462:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001464:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001470:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001472:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001476:	4a4a      	ldr	r2, [pc, #296]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001480:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <MX_GPIO_Init+0x218>)
 8001482:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001494:	4843      	ldr	r0, [pc, #268]	; (80015a4 <MX_GPIO_Init+0x21c>)
 8001496:	f001 fc41 	bl	8002d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f244 0101 	movw	r1, #16385	; 0x4001
 80014a0:	4841      	ldr	r0, [pc, #260]	; (80015a8 <MX_GPIO_Init+0x220>)
 80014a2:	f001 fc3b 	bl	8002d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2102      	movs	r1, #2
 80014aa:	4840      	ldr	r0, [pc, #256]	; (80015ac <MX_GPIO_Init+0x224>)
 80014ac:	f001 fc36 	bl	8002d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	483a      	ldr	r0, [pc, #232]	; (80015b0 <MX_GPIO_Init+0x228>)
 80014c6:	f001 fa79 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80014ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4830      	ldr	r0, [pc, #192]	; (80015a4 <MX_GPIO_Init+0x21c>)
 80014e4:	f001 fa6a 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80014e8:	f244 0301 	movw	r3, #16385	; 0x4001
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4829      	ldr	r0, [pc, #164]	; (80015a8 <MX_GPIO_Init+0x220>)
 8001502:	f001 fa5b 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4826      	ldr	r0, [pc, #152]	; (80015b4 <MX_GPIO_Init+0x22c>)
 800151c:	f001 fa4e 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4820      	ldr	r0, [pc, #128]	; (80015b8 <MX_GPIO_Init+0x230>)
 8001536:	f001 fa41 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800153a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800154c:	230a      	movs	r3, #10
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <MX_GPIO_Init+0x230>)
 8001558:	f001 fa30 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800155c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4810      	ldr	r0, [pc, #64]	; (80015b8 <MX_GPIO_Init+0x230>)
 8001576:	f001 fa21 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800157a:	2302      	movs	r3, #2
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_GPIO_Init+0x224>)
 8001592:	f001 fa13 	bl	80029bc <HAL_GPIO_Init>

}
 8001596:	bf00      	nop
 8001598:	3738      	adds	r7, #56	; 0x38
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	58024400 	.word	0x58024400
 80015a4:	58021400 	.word	0x58021400
 80015a8:	58020400 	.word	0x58020400
 80015ac:	58021000 	.word	0x58021000
 80015b0:	58020800 	.word	0x58020800
 80015b4:	58021800 	.word	0x58021800
 80015b8:	58020000 	.word	0x58020000

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_MspInit+0x30>)
 80015d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x30>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x30>)
 80015e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	58024400 	.word	0x58024400

080015fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0b8      	sub	sp, #224	; 0xe0
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	22b8      	movs	r2, #184	; 0xb8
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f007 f95f 	bl	80088e0 <memset>
  if(hi2c->Instance==I2C4)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <HAL_I2C_MspInit+0xe0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d152      	bne.n	80016d2 <HAL_I2C_MspInit+0xd6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800162c:	2310      	movs	r3, #16
 800162e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4618      	mov	r0, r3
 800163c:	f003 ffd0 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001646:	f7ff ffb9 	bl	80015bc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_I2C_MspInit+0xe4>)
 800164c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <HAL_I2C_MspInit+0xe4>)
 8001652:	f043 0320 	orr.w	r3, r3, #32
 8001656:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_I2C_MspInit+0xe4>)
 800165c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001668:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800166c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001670:	2312      	movs	r3, #18
 8001672:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001682:	2304      	movs	r3, #4
 8001684:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001688:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800168c:	4619      	mov	r1, r3
 800168e:	4815      	ldr	r0, [pc, #84]	; (80016e4 <HAL_I2C_MspInit+0xe8>)
 8001690:	f001 f994 	bl	80029bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_I2C_MspInit+0xe4>)
 8001696:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_I2C_MspInit+0xe4>)
 800169c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_I2C_MspInit+0xe4>)
 80016a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	205f      	movs	r0, #95	; 0x5f
 80016b8:	f000 fbd9 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80016bc:	205f      	movs	r0, #95	; 0x5f
 80016be:	f000 fbf0 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2060      	movs	r0, #96	; 0x60
 80016c8:	f000 fbd1 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80016cc:	2060      	movs	r0, #96	; 0x60
 80016ce:	f000 fbe8 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	37e0      	adds	r7, #224	; 0xe0
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	58001c00 	.word	0x58001c00
 80016e0:	58024400 	.word	0x58024400
 80016e4:	58021400 	.word	0x58021400

080016e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0b8      	sub	sp, #224	; 0xe0
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	22b8      	movs	r2, #184	; 0xb8
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f007 f8e9 	bl	80088e0 <memset>
  if(huart->Instance==USART3)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <HAL_UART_MspInit+0xd0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d14a      	bne.n	80017ae <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001718:	2302      	movs	r3, #2
 800171a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4618      	mov	r0, r3
 8001728:	f003 ff5a 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001732:	f7ff ff43 	bl	80015bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_UART_MspInit+0xd4>)
 8001738:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800173c:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <HAL_UART_MspInit+0xd4>)
 800173e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001742:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_UART_MspInit+0xd4>)
 8001748:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800174c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_MspInit+0xd4>)
 8001756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800175a:	4a18      	ldr	r2, [pc, #96]	; (80017bc <HAL_UART_MspInit+0xd4>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_UART_MspInit+0xd4>)
 8001766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001776:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800178c:	2307      	movs	r3, #7
 800178e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001792:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001796:	4619      	mov	r1, r3
 8001798:	4809      	ldr	r0, [pc, #36]	; (80017c0 <HAL_UART_MspInit+0xd8>)
 800179a:	f001 f90f 	bl	80029bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2027      	movs	r0, #39	; 0x27
 80017a4:	f000 fb63 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017a8:	2027      	movs	r0, #39	; 0x27
 80017aa:	f000 fb7a 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	37e0      	adds	r7, #224	; 0xe0
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40004800 	.word	0x40004800
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58020c00 	.word	0x58020c00

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001810:	f000 fa0e 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART3_IRQHandler+0x10>)
 800181e:	f005 fa5d 	bl	8006cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000248 	.word	0x24000248

0800182c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <I2C4_EV_IRQHandler+0x10>)
 8001832:	f001 fd4b 	bl	80032cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	240001fc 	.word	0x240001fc

08001840 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <I2C4_ER_IRQHandler+0x10>)
 8001846:	f001 fd5b 	bl	8003300 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	240001fc 	.word	0x240001fc

08001854 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX2_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <BDMA2_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA2 channel0 global interrupt.
  */
void BDMA2_Channel0_IRQHandler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE END BDMA2_Channel0_IRQn 0 */

  /* USER CODE BEGIN BDMA2_Channel0_IRQn 1 */

  /* USER CODE END BDMA2_Channel0_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <BDMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA2 channel1 global interrupt.
  */
void BDMA2_Channel1_IRQHandler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END BDMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN BDMA2_Channel1_IRQn 1 */

  /* USER CODE END BDMA2_Channel1_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
	return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_kill>:

int _kill(int pid, int sig)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001898:	f006 ffe6 	bl	8008868 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	2216      	movs	r2, #22
 80018a0:	601a      	str	r2, [r3, #0]
	return -1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_exit>:

void _exit (int status)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018b6:	f04f 31ff 	mov.w	r1, #4294967295
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffe7 	bl	800188e <_kill>
	while (1) {}		/* Make sure we hang here */
 80018c0:	e7fe      	b.n	80018c0 <_exit+0x12>

080018c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e00a      	b.n	80018ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d4:	f3af 8000 	nop.w
 80018d8:	4601      	mov	r1, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	60ba      	str	r2, [r7, #8]
 80018e0:	b2ca      	uxtb	r2, r1
 80018e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3301      	adds	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	dbf0      	blt.n	80018d4 <_read+0x12>
	}

return len;
 80018f2:	687b      	ldr	r3, [r7, #4]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e009      	b.n	8001922 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	60ba      	str	r2, [r7, #8]
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3301      	adds	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	dbf1      	blt.n	800190e <_write+0x12>
	}
	return len;
 800192a:	687b      	ldr	r3, [r7, #4]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_close>:

int _close(int file)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195c:	605a      	str	r2, [r3, #4]
	return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_isatty>:

int _isatty(int file)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
	return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f006 ff4c 	bl	8008868 <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	24100000 	.word	0x24100000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	240002d8 	.word	0x240002d8
 8001a04:	240002f0 	.word	0x240002f0

08001a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <SystemInit+0xd0>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <SystemInit+0xd0>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <SystemInit+0xd4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d807      	bhi.n	8001a38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <SystemInit+0xd4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 030f 	bic.w	r3, r3, #15
 8001a30:	4a2a      	ldr	r2, [pc, #168]	; (8001adc <SystemInit+0xd4>)
 8001a32:	f043 0303 	orr.w	r3, r3, #3
 8001a36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <SystemInit+0xd8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a28      	ldr	r2, [pc, #160]	; (8001ae0 <SystemInit+0xd8>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <SystemInit+0xd8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <SystemInit+0xd8>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4924      	ldr	r1, [pc, #144]	; (8001ae0 <SystemInit+0xd8>)
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <SystemInit+0xdc>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a56:	4b21      	ldr	r3, [pc, #132]	; (8001adc <SystemInit+0xd4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <SystemInit+0xd4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 030f 	bic.w	r3, r3, #15
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <SystemInit+0xd4>)
 8001a6c:	f043 0303 	orr.w	r3, r3, #3
 8001a70:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <SystemInit+0xd8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <SystemInit+0xd8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <SystemInit+0xd8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <SystemInit+0xd8>)
 8001a86:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <SystemInit+0xe0>)
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <SystemInit+0xd8>)
 8001a8c:	4a17      	ldr	r2, [pc, #92]	; (8001aec <SystemInit+0xe4>)
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <SystemInit+0xd8>)
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <SystemInit+0xe8>)
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <SystemInit+0xd8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <SystemInit+0xd8>)
 8001a9e:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <SystemInit+0xe8>)
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <SystemInit+0xd8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <SystemInit+0xd8>)
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <SystemInit+0xe8>)
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <SystemInit+0xd8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <SystemInit+0xd8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <SystemInit+0xd8>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <SystemInit+0xd8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <SystemInit+0xec>)
 8001ac8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001acc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00
 8001adc:	52002000 	.word	0x52002000
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ae8:	02020200 	.word	0x02020200
 8001aec:	01ff0000 	.word	0x01ff0000
 8001af0:	01010280 	.word	0x01010280
 8001af4:	52004000 	.word	0x52004000

08001af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001afc:	f7ff ff84 	bl	8001a08 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b02:	490d      	ldr	r1, [pc, #52]	; (8001b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b18:	4c0a      	ldr	r4, [pc, #40]	; (8001b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b26:	f006 feb7 	bl	8008898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2a:	f7ff fac1 	bl	80010b0 <main>
  bx  lr
 8001b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001b34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b38:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001b3c:	0800b6a0 	.word	0x0800b6a0
  ldr r2, =_sbss
 8001b40:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001b44:	240002f0 	.word	0x240002f0

08001b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b52:	2003      	movs	r0, #3
 8001b54:	f000 f980 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b58:	f003 fb6c 	bl	8005234 <HAL_RCC_GetSysClockFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_Init+0x68>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	4913      	ldr	r1, [pc, #76]	; (8001bb8 <HAL_Init+0x6c>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_Init+0x68>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_Init+0x6c>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_Init+0x70>)
 8001b8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_Init+0x74>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f814 	bl	8001bc4 <HAL_InitTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e002      	b.n	8001bac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba6:	f7ff fd0f 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	0800b27c 	.word	0x0800b27c
 8001bbc:	24000004 	.word	0x24000004
 8001bc0:	24000000 	.word	0x24000000

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_InitTick+0x60>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e021      	b.n	8001c1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_InitTick+0x64>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_InitTick+0x60>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f965 	bl	8001ebe <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f000 f92f 	bl	8001e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <HAL_InitTick+0x68>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2400000c 	.word	0x2400000c
 8001c28:	24000000 	.word	0x24000000
 8001c2c:	24000008 	.word	0x24000008

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	2400000c 	.word	0x2400000c
 8001c54:	240002dc 	.word	0x240002dc

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	240002dc 	.word	0x240002dc

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2400000c 	.word	0x2400000c

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00
 8001cfc:	05fa0000 	.word	0x05fa0000

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db0b      	blt.n	8001d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4907      	ldr	r1, [pc, #28]	; (8001d54 <__NVIC_EnableIRQ+0x38>)
 8001d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff8e 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff29 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff40 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff33 	bl	8001d1c <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa4 	bl	8001e14 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff feba 	bl	8001c58 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e2dc      	b.n	80024aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e2cd      	b.n	80024aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a76      	ldr	r2, [pc, #472]	; (80020ec <HAL_DMA_Abort+0x214>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d04a      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a74      	ldr	r2, [pc, #464]	; (80020f0 <HAL_DMA_Abort+0x218>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d045      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a73      	ldr	r2, [pc, #460]	; (80020f4 <HAL_DMA_Abort+0x21c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d040      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a71      	ldr	r2, [pc, #452]	; (80020f8 <HAL_DMA_Abort+0x220>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d03b      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a70      	ldr	r2, [pc, #448]	; (80020fc <HAL_DMA_Abort+0x224>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d036      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_DMA_Abort+0x228>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d031      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6d      	ldr	r2, [pc, #436]	; (8002104 <HAL_DMA_Abort+0x22c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d02c      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6b      	ldr	r2, [pc, #428]	; (8002108 <HAL_DMA_Abort+0x230>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d027      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_DMA_Abort+0x234>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a68      	ldr	r2, [pc, #416]	; (8002110 <HAL_DMA_Abort+0x238>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01d      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a67      	ldr	r2, [pc, #412]	; (8002114 <HAL_DMA_Abort+0x23c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d018      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_DMA_Abort+0x240>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a64      	ldr	r2, [pc, #400]	; (800211c <HAL_DMA_Abort+0x244>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00e      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a62      	ldr	r2, [pc, #392]	; (8002120 <HAL_DMA_Abort+0x248>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a61      	ldr	r2, [pc, #388]	; (8002124 <HAL_DMA_Abort+0x24c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d004      	beq.n	8001fae <HAL_DMA_Abort+0xd6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a5f      	ldr	r2, [pc, #380]	; (8002128 <HAL_DMA_Abort+0x250>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_DMA_Abort+0xda>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_DMA_Abort+0xdc>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 021e 	bic.w	r2, r2, #30
 8001fc6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e00a      	b.n	8001ff6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 020e 	bic.w	r2, r2, #14
 8001fee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a3c      	ldr	r2, [pc, #240]	; (80020ec <HAL_DMA_Abort+0x214>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d072      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a3a      	ldr	r2, [pc, #232]	; (80020f0 <HAL_DMA_Abort+0x218>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d06d      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a39      	ldr	r2, [pc, #228]	; (80020f4 <HAL_DMA_Abort+0x21c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d068      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a37      	ldr	r2, [pc, #220]	; (80020f8 <HAL_DMA_Abort+0x220>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d063      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a36      	ldr	r2, [pc, #216]	; (80020fc <HAL_DMA_Abort+0x224>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d05e      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_DMA_Abort+0x228>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d059      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a33      	ldr	r2, [pc, #204]	; (8002104 <HAL_DMA_Abort+0x22c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d054      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_DMA_Abort+0x230>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d04f      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a30      	ldr	r2, [pc, #192]	; (800210c <HAL_DMA_Abort+0x234>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d04a      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2e      	ldr	r2, [pc, #184]	; (8002110 <HAL_DMA_Abort+0x238>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d045      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <HAL_DMA_Abort+0x23c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d040      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <HAL_DMA_Abort+0x240>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d03b      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_DMA_Abort+0x244>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d036      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_DMA_Abort+0x248>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d031      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_DMA_Abort+0x24c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d02c      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a25      	ldr	r2, [pc, #148]	; (8002128 <HAL_DMA_Abort+0x250>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d027      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a24      	ldr	r2, [pc, #144]	; (800212c <HAL_DMA_Abort+0x254>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d022      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_DMA_Abort+0x258>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01d      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <HAL_DMA_Abort+0x25c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d018      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_DMA_Abort+0x260>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1e      	ldr	r2, [pc, #120]	; (800213c <HAL_DMA_Abort+0x264>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00e      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_DMA_Abort+0x268>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <HAL_DMA_Abort+0x26c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d004      	beq.n	80020e6 <HAL_DMA_Abort+0x20e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_DMA_Abort+0x270>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d132      	bne.n	800214c <HAL_DMA_Abort+0x274>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e031      	b.n	800214e <HAL_DMA_Abort+0x276>
 80020ea:	bf00      	nop
 80020ec:	40020010 	.word	0x40020010
 80020f0:	40020028 	.word	0x40020028
 80020f4:	40020040 	.word	0x40020040
 80020f8:	40020058 	.word	0x40020058
 80020fc:	40020070 	.word	0x40020070
 8002100:	40020088 	.word	0x40020088
 8002104:	400200a0 	.word	0x400200a0
 8002108:	400200b8 	.word	0x400200b8
 800210c:	40020410 	.word	0x40020410
 8002110:	40020428 	.word	0x40020428
 8002114:	40020440 	.word	0x40020440
 8002118:	40020458 	.word	0x40020458
 800211c:	40020470 	.word	0x40020470
 8002120:	40020488 	.word	0x40020488
 8002124:	400204a0 	.word	0x400204a0
 8002128:	400204b8 	.word	0x400204b8
 800212c:	58025408 	.word	0x58025408
 8002130:	5802541c 	.word	0x5802541c
 8002134:	58025430 	.word	0x58025430
 8002138:	58025444 	.word	0x58025444
 800213c:	58025458 	.word	0x58025458
 8002140:	5802546c 	.word	0x5802546c
 8002144:	58025480 	.word	0x58025480
 8002148:	58025494 	.word	0x58025494
 800214c:	2300      	movs	r3, #0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002160:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6d      	ldr	r2, [pc, #436]	; (800231c <HAL_DMA_Abort+0x444>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d04a      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6b      	ldr	r2, [pc, #428]	; (8002320 <HAL_DMA_Abort+0x448>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d045      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6a      	ldr	r2, [pc, #424]	; (8002324 <HAL_DMA_Abort+0x44c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d040      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a68      	ldr	r2, [pc, #416]	; (8002328 <HAL_DMA_Abort+0x450>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d03b      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a67      	ldr	r2, [pc, #412]	; (800232c <HAL_DMA_Abort+0x454>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d036      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a65      	ldr	r2, [pc, #404]	; (8002330 <HAL_DMA_Abort+0x458>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d031      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a64      	ldr	r2, [pc, #400]	; (8002334 <HAL_DMA_Abort+0x45c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d02c      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a62      	ldr	r2, [pc, #392]	; (8002338 <HAL_DMA_Abort+0x460>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d027      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a61      	ldr	r2, [pc, #388]	; (800233c <HAL_DMA_Abort+0x464>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d022      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a5f      	ldr	r2, [pc, #380]	; (8002340 <HAL_DMA_Abort+0x468>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01d      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5e      	ldr	r2, [pc, #376]	; (8002344 <HAL_DMA_Abort+0x46c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d018      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <HAL_DMA_Abort+0x470>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a5b      	ldr	r2, [pc, #364]	; (800234c <HAL_DMA_Abort+0x474>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00e      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a59      	ldr	r2, [pc, #356]	; (8002350 <HAL_DMA_Abort+0x478>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d009      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a58      	ldr	r2, [pc, #352]	; (8002354 <HAL_DMA_Abort+0x47c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d004      	beq.n	8002202 <HAL_DMA_Abort+0x32a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a56      	ldr	r2, [pc, #344]	; (8002358 <HAL_DMA_Abort+0x480>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <HAL_DMA_Abort+0x33c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e007      	b.n	8002224 <HAL_DMA_Abort+0x34c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002224:	e013      	b.n	800224e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002226:	f7ff fd17 	bl	8001c58 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b05      	cmp	r3, #5
 8002232:	d90c      	bls.n	800224e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e12d      	b.n	80024aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e5      	bne.n	8002226 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2f      	ldr	r2, [pc, #188]	; (800231c <HAL_DMA_Abort+0x444>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d04a      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <HAL_DMA_Abort+0x448>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d045      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2c      	ldr	r2, [pc, #176]	; (8002324 <HAL_DMA_Abort+0x44c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d040      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a2a      	ldr	r2, [pc, #168]	; (8002328 <HAL_DMA_Abort+0x450>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d03b      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a29      	ldr	r2, [pc, #164]	; (800232c <HAL_DMA_Abort+0x454>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d036      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_DMA_Abort+0x458>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d031      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_DMA_Abort+0x45c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d02c      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <HAL_DMA_Abort+0x460>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d027      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a23      	ldr	r2, [pc, #140]	; (800233c <HAL_DMA_Abort+0x464>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d022      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a21      	ldr	r2, [pc, #132]	; (8002340 <HAL_DMA_Abort+0x468>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01d      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a20      	ldr	r2, [pc, #128]	; (8002344 <HAL_DMA_Abort+0x46c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d018      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_DMA_Abort+0x470>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_DMA_Abort+0x474>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00e      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_DMA_Abort+0x478>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d009      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HAL_DMA_Abort+0x47c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_DMA_Abort+0x422>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <HAL_DMA_Abort+0x480>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_DMA_Abort+0x426>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_DMA_Abort+0x428>
 80022fe:	2300      	movs	r3, #0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02b      	beq.n	800235c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	223f      	movs	r2, #63	; 0x3f
 8002314:	409a      	lsls	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	e02a      	b.n	8002372 <HAL_DMA_Abort+0x49a>
 800231c:	40020010 	.word	0x40020010
 8002320:	40020028 	.word	0x40020028
 8002324:	40020040 	.word	0x40020040
 8002328:	40020058 	.word	0x40020058
 800232c:	40020070 	.word	0x40020070
 8002330:	40020088 	.word	0x40020088
 8002334:	400200a0 	.word	0x400200a0
 8002338:	400200b8 	.word	0x400200b8
 800233c:	40020410 	.word	0x40020410
 8002340:	40020428 	.word	0x40020428
 8002344:	40020440 	.word	0x40020440
 8002348:	40020458 	.word	0x40020458
 800234c:	40020470 	.word	0x40020470
 8002350:	40020488 	.word	0x40020488
 8002354:	400204a0 	.word	0x400204a0
 8002358:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2201      	movs	r2, #1
 800236c:	409a      	lsls	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a4f      	ldr	r2, [pc, #316]	; (80024b4 <HAL_DMA_Abort+0x5dc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d072      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a4d      	ldr	r2, [pc, #308]	; (80024b8 <HAL_DMA_Abort+0x5e0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d06d      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a4c      	ldr	r2, [pc, #304]	; (80024bc <HAL_DMA_Abort+0x5e4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d068      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HAL_DMA_Abort+0x5e8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d063      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a49      	ldr	r2, [pc, #292]	; (80024c4 <HAL_DMA_Abort+0x5ec>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d05e      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <HAL_DMA_Abort+0x5f0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d059      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a46      	ldr	r2, [pc, #280]	; (80024cc <HAL_DMA_Abort+0x5f4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d054      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a44      	ldr	r2, [pc, #272]	; (80024d0 <HAL_DMA_Abort+0x5f8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d04f      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a43      	ldr	r2, [pc, #268]	; (80024d4 <HAL_DMA_Abort+0x5fc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d04a      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a41      	ldr	r2, [pc, #260]	; (80024d8 <HAL_DMA_Abort+0x600>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d045      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a40      	ldr	r2, [pc, #256]	; (80024dc <HAL_DMA_Abort+0x604>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d040      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3e      	ldr	r2, [pc, #248]	; (80024e0 <HAL_DMA_Abort+0x608>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d03b      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a3d      	ldr	r2, [pc, #244]	; (80024e4 <HAL_DMA_Abort+0x60c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d036      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a3b      	ldr	r2, [pc, #236]	; (80024e8 <HAL_DMA_Abort+0x610>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d031      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a3a      	ldr	r2, [pc, #232]	; (80024ec <HAL_DMA_Abort+0x614>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d02c      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a38      	ldr	r2, [pc, #224]	; (80024f0 <HAL_DMA_Abort+0x618>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d027      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a37      	ldr	r2, [pc, #220]	; (80024f4 <HAL_DMA_Abort+0x61c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d022      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a35      	ldr	r2, [pc, #212]	; (80024f8 <HAL_DMA_Abort+0x620>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01d      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a34      	ldr	r2, [pc, #208]	; (80024fc <HAL_DMA_Abort+0x624>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d018      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a32      	ldr	r2, [pc, #200]	; (8002500 <HAL_DMA_Abort+0x628>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a31      	ldr	r2, [pc, #196]	; (8002504 <HAL_DMA_Abort+0x62c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00e      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2f      	ldr	r2, [pc, #188]	; (8002508 <HAL_DMA_Abort+0x630>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d009      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2e      	ldr	r2, [pc, #184]	; (800250c <HAL_DMA_Abort+0x634>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d004      	beq.n	8002462 <HAL_DMA_Abort+0x58a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2c      	ldr	r2, [pc, #176]	; (8002510 <HAL_DMA_Abort+0x638>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_DMA_Abort+0x58e>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_DMA_Abort+0x590>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d015      	beq.n	8002498 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002474:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00c      	beq.n	8002498 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800248c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002496:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40020010 	.word	0x40020010
 80024b8:	40020028 	.word	0x40020028
 80024bc:	40020040 	.word	0x40020040
 80024c0:	40020058 	.word	0x40020058
 80024c4:	40020070 	.word	0x40020070
 80024c8:	40020088 	.word	0x40020088
 80024cc:	400200a0 	.word	0x400200a0
 80024d0:	400200b8 	.word	0x400200b8
 80024d4:	40020410 	.word	0x40020410
 80024d8:	40020428 	.word	0x40020428
 80024dc:	40020440 	.word	0x40020440
 80024e0:	40020458 	.word	0x40020458
 80024e4:	40020470 	.word	0x40020470
 80024e8:	40020488 	.word	0x40020488
 80024ec:	400204a0 	.word	0x400204a0
 80024f0:	400204b8 	.word	0x400204b8
 80024f4:	58025408 	.word	0x58025408
 80024f8:	5802541c 	.word	0x5802541c
 80024fc:	58025430 	.word	0x58025430
 8002500:	58025444 	.word	0x58025444
 8002504:	58025458 	.word	0x58025458
 8002508:	5802546c 	.word	0x5802546c
 800250c:	58025480 	.word	0x58025480
 8002510:	58025494 	.word	0x58025494

08002514 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e237      	b.n	8002996 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d004      	beq.n	800253c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e22c      	b.n	8002996 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a5c      	ldr	r2, [pc, #368]	; (80026b4 <HAL_DMA_Abort_IT+0x1a0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d04a      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a5b      	ldr	r2, [pc, #364]	; (80026b8 <HAL_DMA_Abort_IT+0x1a4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d045      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a59      	ldr	r2, [pc, #356]	; (80026bc <HAL_DMA_Abort_IT+0x1a8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d040      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <HAL_DMA_Abort_IT+0x1ac>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d03b      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a56      	ldr	r2, [pc, #344]	; (80026c4 <HAL_DMA_Abort_IT+0x1b0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d036      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <HAL_DMA_Abort_IT+0x1b4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d031      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a53      	ldr	r2, [pc, #332]	; (80026cc <HAL_DMA_Abort_IT+0x1b8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02c      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_DMA_Abort_IT+0x1bc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d027      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a50      	ldr	r2, [pc, #320]	; (80026d4 <HAL_DMA_Abort_IT+0x1c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d022      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a4f      	ldr	r2, [pc, #316]	; (80026d8 <HAL_DMA_Abort_IT+0x1c4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d01d      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a4d      	ldr	r2, [pc, #308]	; (80026dc <HAL_DMA_Abort_IT+0x1c8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d018      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a4c      	ldr	r2, [pc, #304]	; (80026e0 <HAL_DMA_Abort_IT+0x1cc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4a      	ldr	r2, [pc, #296]	; (80026e4 <HAL_DMA_Abort_IT+0x1d0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00e      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a49      	ldr	r2, [pc, #292]	; (80026e8 <HAL_DMA_Abort_IT+0x1d4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a47      	ldr	r2, [pc, #284]	; (80026ec <HAL_DMA_Abort_IT+0x1d8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a46      	ldr	r2, [pc, #280]	; (80026f0 <HAL_DMA_Abort_IT+0x1dc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_DMA_Abort_IT+0xcc>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_DMA_Abort_IT+0xce>
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8086 	beq.w	80026f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2204      	movs	r2, #4
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2f      	ldr	r2, [pc, #188]	; (80026b4 <HAL_DMA_Abort_IT+0x1a0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04a      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2e      	ldr	r2, [pc, #184]	; (80026b8 <HAL_DMA_Abort_IT+0x1a4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d045      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2c      	ldr	r2, [pc, #176]	; (80026bc <HAL_DMA_Abort_IT+0x1a8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d040      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <HAL_DMA_Abort_IT+0x1ac>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d03b      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <HAL_DMA_Abort_IT+0x1b0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d036      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a28      	ldr	r2, [pc, #160]	; (80026c8 <HAL_DMA_Abort_IT+0x1b4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d031      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a26      	ldr	r2, [pc, #152]	; (80026cc <HAL_DMA_Abort_IT+0x1b8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02c      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <HAL_DMA_Abort_IT+0x1bc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d027      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a23      	ldr	r2, [pc, #140]	; (80026d4 <HAL_DMA_Abort_IT+0x1c0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <HAL_DMA_Abort_IT+0x1c4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01d      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a20      	ldr	r2, [pc, #128]	; (80026dc <HAL_DMA_Abort_IT+0x1c8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1f      	ldr	r2, [pc, #124]	; (80026e0 <HAL_DMA_Abort_IT+0x1cc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_DMA_Abort_IT+0x1d0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_DMA_Abort_IT+0x1d4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_DMA_Abort_IT+0x1d8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_DMA_Abort_IT+0x17c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <HAL_DMA_Abort_IT+0x1dc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d108      	bne.n	80026a2 <HAL_DMA_Abort_IT+0x18e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e178      	b.n	8002994 <HAL_DMA_Abort_IT+0x480>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e16f      	b.n	8002994 <HAL_DMA_Abort_IT+0x480>
 80026b4:	40020010 	.word	0x40020010
 80026b8:	40020028 	.word	0x40020028
 80026bc:	40020040 	.word	0x40020040
 80026c0:	40020058 	.word	0x40020058
 80026c4:	40020070 	.word	0x40020070
 80026c8:	40020088 	.word	0x40020088
 80026cc:	400200a0 	.word	0x400200a0
 80026d0:	400200b8 	.word	0x400200b8
 80026d4:	40020410 	.word	0x40020410
 80026d8:	40020428 	.word	0x40020428
 80026dc:	40020440 	.word	0x40020440
 80026e0:	40020458 	.word	0x40020458
 80026e4:	40020470 	.word	0x40020470
 80026e8:	40020488 	.word	0x40020488
 80026ec:	400204a0 	.word	0x400204a0
 80026f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 020e 	bic.w	r2, r2, #14
 8002702:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a6c      	ldr	r2, [pc, #432]	; (80028bc <HAL_DMA_Abort_IT+0x3a8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d04a      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6b      	ldr	r2, [pc, #428]	; (80028c0 <HAL_DMA_Abort_IT+0x3ac>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d045      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_DMA_Abort_IT+0x3b0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d040      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a68      	ldr	r2, [pc, #416]	; (80028c8 <HAL_DMA_Abort_IT+0x3b4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d03b      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a66      	ldr	r2, [pc, #408]	; (80028cc <HAL_DMA_Abort_IT+0x3b8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d036      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_DMA_Abort_IT+0x3bc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d031      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a63      	ldr	r2, [pc, #396]	; (80028d4 <HAL_DMA_Abort_IT+0x3c0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02c      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a62      	ldr	r2, [pc, #392]	; (80028d8 <HAL_DMA_Abort_IT+0x3c4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d027      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a60      	ldr	r2, [pc, #384]	; (80028dc <HAL_DMA_Abort_IT+0x3c8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d022      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a5f      	ldr	r2, [pc, #380]	; (80028e0 <HAL_DMA_Abort_IT+0x3cc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d01d      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a5d      	ldr	r2, [pc, #372]	; (80028e4 <HAL_DMA_Abort_IT+0x3d0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d018      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <HAL_DMA_Abort_IT+0x3d4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5a      	ldr	r2, [pc, #360]	; (80028ec <HAL_DMA_Abort_IT+0x3d8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00e      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a59      	ldr	r2, [pc, #356]	; (80028f0 <HAL_DMA_Abort_IT+0x3dc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <HAL_DMA_Abort_IT+0x3e0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x290>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_DMA_Abort_IT+0x3e4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <HAL_DMA_Abort_IT+0x2a2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e007      	b.n	80027c6 <HAL_DMA_Abort_IT+0x2b2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3c      	ldr	r2, [pc, #240]	; (80028bc <HAL_DMA_Abort_IT+0x3a8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d072      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3a      	ldr	r2, [pc, #232]	; (80028c0 <HAL_DMA_Abort_IT+0x3ac>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d06d      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a39      	ldr	r2, [pc, #228]	; (80028c4 <HAL_DMA_Abort_IT+0x3b0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d068      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a37      	ldr	r2, [pc, #220]	; (80028c8 <HAL_DMA_Abort_IT+0x3b4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d063      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a36      	ldr	r2, [pc, #216]	; (80028cc <HAL_DMA_Abort_IT+0x3b8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d05e      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <HAL_DMA_Abort_IT+0x3bc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d059      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a33      	ldr	r2, [pc, #204]	; (80028d4 <HAL_DMA_Abort_IT+0x3c0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d054      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a31      	ldr	r2, [pc, #196]	; (80028d8 <HAL_DMA_Abort_IT+0x3c4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d04f      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a30      	ldr	r2, [pc, #192]	; (80028dc <HAL_DMA_Abort_IT+0x3c8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d04a      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2e      	ldr	r2, [pc, #184]	; (80028e0 <HAL_DMA_Abort_IT+0x3cc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d045      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a2d      	ldr	r2, [pc, #180]	; (80028e4 <HAL_DMA_Abort_IT+0x3d0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d040      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2b      	ldr	r2, [pc, #172]	; (80028e8 <HAL_DMA_Abort_IT+0x3d4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d03b      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2a      	ldr	r2, [pc, #168]	; (80028ec <HAL_DMA_Abort_IT+0x3d8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d036      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a28      	ldr	r2, [pc, #160]	; (80028f0 <HAL_DMA_Abort_IT+0x3dc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d031      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <HAL_DMA_Abort_IT+0x3e0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d02c      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <HAL_DMA_Abort_IT+0x3e4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d027      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a24      	ldr	r2, [pc, #144]	; (80028fc <HAL_DMA_Abort_IT+0x3e8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d022      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a22      	ldr	r2, [pc, #136]	; (8002900 <HAL_DMA_Abort_IT+0x3ec>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01d      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a21      	ldr	r2, [pc, #132]	; (8002904 <HAL_DMA_Abort_IT+0x3f0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d018      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <HAL_DMA_Abort_IT+0x3f4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_DMA_Abort_IT+0x3f8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <HAL_DMA_Abort_IT+0x3fc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_DMA_Abort_IT+0x400>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x3a2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_DMA_Abort_IT+0x404>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d132      	bne.n	800291c <HAL_DMA_Abort_IT+0x408>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e031      	b.n	800291e <HAL_DMA_Abort_IT+0x40a>
 80028ba:	bf00      	nop
 80028bc:	40020010 	.word	0x40020010
 80028c0:	40020028 	.word	0x40020028
 80028c4:	40020040 	.word	0x40020040
 80028c8:	40020058 	.word	0x40020058
 80028cc:	40020070 	.word	0x40020070
 80028d0:	40020088 	.word	0x40020088
 80028d4:	400200a0 	.word	0x400200a0
 80028d8:	400200b8 	.word	0x400200b8
 80028dc:	40020410 	.word	0x40020410
 80028e0:	40020428 	.word	0x40020428
 80028e4:	40020440 	.word	0x40020440
 80028e8:	40020458 	.word	0x40020458
 80028ec:	40020470 	.word	0x40020470
 80028f0:	40020488 	.word	0x40020488
 80028f4:	400204a0 	.word	0x400204a0
 80028f8:	400204b8 	.word	0x400204b8
 80028fc:	58025408 	.word	0x58025408
 8002900:	5802541c 	.word	0x5802541c
 8002904:	58025430 	.word	0x58025430
 8002908:	58025444 	.word	0x58025444
 800290c:	58025458 	.word	0x58025458
 8002910:	5802546c 	.word	0x5802546c
 8002914:	58025480 	.word	0x58025480
 8002918:	58025494 	.word	0x58025494
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d028      	beq.n	8002974 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002930:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2201      	movs	r2, #1
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002950:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00c      	beq.n	8002974 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002968:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002972:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop

080029a0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ae:	b2db      	uxtb	r3, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029ca:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <HAL_GPIO_Init+0x234>)
 80029cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029ce:	e194      	b.n	8002cfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8186 	beq.w	8002cf4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d005      	beq.n	8002a00 <HAL_GPIO_Init+0x44>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d130      	bne.n	8002a62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a36:	2201      	movs	r2, #1
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f003 0201 	and.w	r2, r3, #1
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d017      	beq.n	8002a9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d123      	bne.n	8002af2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	69b9      	ldr	r1, [r7, #24]
 8002aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	2203      	movs	r2, #3
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0203 	and.w	r2, r3, #3
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80e0 	beq.w	8002cf4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_GPIO_Init+0x238>)
 8002b36:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b3a:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <HAL_GPIO_Init+0x238>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_GPIO_Init+0x238>)
 8002b46:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <HAL_GPIO_Init+0x23c>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <HAL_GPIO_Init+0x240>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d052      	beq.n	8002c24 <HAL_GPIO_Init+0x268>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <HAL_GPIO_Init+0x244>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d031      	beq.n	8002bea <HAL_GPIO_Init+0x22e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_GPIO_Init+0x248>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02b      	beq.n	8002be6 <HAL_GPIO_Init+0x22a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <HAL_GPIO_Init+0x24c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d025      	beq.n	8002be2 <HAL_GPIO_Init+0x226>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <HAL_GPIO_Init+0x250>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01f      	beq.n	8002bde <HAL_GPIO_Init+0x222>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <HAL_GPIO_Init+0x254>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d019      	beq.n	8002bda <HAL_GPIO_Init+0x21e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1a      	ldr	r2, [pc, #104]	; (8002c14 <HAL_GPIO_Init+0x258>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_GPIO_Init+0x21a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_GPIO_Init+0x25c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_GPIO_Init+0x216>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_GPIO_Init+0x260>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <HAL_GPIO_Init+0x212>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <HAL_GPIO_Init+0x264>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_GPIO_Init+0x20e>
 8002bc6:	2309      	movs	r3, #9
 8002bc8:	e02d      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bca:	230a      	movs	r3, #10
 8002bcc:	e02b      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bce:	2308      	movs	r3, #8
 8002bd0:	e029      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	e027      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e025      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e023      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e021      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e01f      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e01d      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e01b      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bee:	bf00      	nop
 8002bf0:	58000080 	.word	0x58000080
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	58000400 	.word	0x58000400
 8002bfc:	58020000 	.word	0x58020000
 8002c00:	58020400 	.word	0x58020400
 8002c04:	58020800 	.word	0x58020800
 8002c08:	58020c00 	.word	0x58020c00
 8002c0c:	58021000 	.word	0x58021000
 8002c10:	58021400 	.word	0x58021400
 8002c14:	58021800 	.word	0x58021800
 8002c18:	58021c00 	.word	0x58021c00
 8002c1c:	58022000 	.word	0x58022000
 8002c20:	58022400 	.word	0x58022400
 8002c24:	2300      	movs	r3, #0
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	f002 0203 	and.w	r2, r2, #3
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	4093      	lsls	r3, r2
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c36:	4938      	ldr	r1, [pc, #224]	; (8002d18 <HAL_GPIO_Init+0x35c>)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f47f ae63 	bne.w	80029d0 <HAL_GPIO_Init+0x14>
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	3724      	adds	r7, #36	; 0x24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	58000400 	.word	0x58000400

08002d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d2c:	787b      	ldrb	r3, [r7, #1]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d38:	e003      	b.n	8002d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d3a:	887b      	ldrh	r3, [r7, #2]
 8002d3c:	041a      	lsls	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	619a      	str	r2, [r3, #24]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e07f      	b.n	8002e62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe fc40 	bl	80015fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2224      	movs	r2, #36	; 0x24
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002da0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	e006      	b.n	8002dd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d104      	bne.n	8002dea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_I2C_Init+0x11c>)
 8002df6:	430b      	orrs	r3, r1
 8002df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69d9      	ldr	r1, [r3, #28]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	02008000 	.word	0x02008000

08002e70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	817b      	strh	r3, [r7, #10]
 8002e82:	460b      	mov	r3, r1
 8002e84:	813b      	strh	r3, [r7, #8]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	f040 80f9 	bne.w	800308a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_I2C_Mem_Write+0x34>
 8002e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0ed      	b.n	800308c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_I2C_Mem_Write+0x4e>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0e6      	b.n	800308c <HAL_I2C_Mem_Write+0x21c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ec6:	f7fe fec7 	bl	8001c58 <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2319      	movs	r3, #25
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f001 f8c6 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0d1      	b.n	800308c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2221      	movs	r2, #33	; 0x21
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2240      	movs	r2, #64	; 0x40
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a3a      	ldr	r2, [r7, #32]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f10:	88f8      	ldrh	r0, [r7, #6]
 8002f12:	893a      	ldrh	r2, [r7, #8]
 8002f14:	8979      	ldrh	r1, [r7, #10]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	4603      	mov	r3, r0
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fb91 	bl	8003648 <I2C_RequestMemoryWrite>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0a9      	b.n	800308c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2bff      	cmp	r3, #255	; 0xff
 8002f40:	d90e      	bls.n	8002f60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	22ff      	movs	r2, #255	; 0xff
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	8979      	ldrh	r1, [r7, #10]
 8002f50:	2300      	movs	r3, #0
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f001 fa2f 	bl	80043bc <I2C_TransferConfig>
 8002f5e:	e00f      	b.n	8002f80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	2300      	movs	r3, #0
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f001 fa1e 	bl	80043bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f001 f8b0 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e07b      	b.n	800308c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d034      	beq.n	8003038 <HAL_I2C_Mem_Write+0x1c8>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d130      	bne.n	8003038 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f001 f842 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e04d      	b.n	800308c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2bff      	cmp	r3, #255	; 0xff
 8002ff8:	d90e      	bls.n	8003018 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	22ff      	movs	r2, #255	; 0xff
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	b2da      	uxtb	r2, r3
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	2300      	movs	r3, #0
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f001 f9d3 	bl	80043bc <I2C_TransferConfig>
 8003016:	e00f      	b.n	8003038 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	b2da      	uxtb	r2, r3
 8003028:	8979      	ldrh	r1, [r7, #10]
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f001 f9c2 	bl	80043bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d19e      	bne.n	8002f80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f001 f88f 	bl	800416a <I2C_WaitOnSTOPFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e01a      	b.n	800308c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_I2C_Mem_Write+0x224>)
 800306a:	400b      	ands	r3, r1
 800306c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	fe00e800 	.word	0xfe00e800

08003098 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	817b      	strh	r3, [r7, #10]
 80030aa:	460b      	mov	r3, r1
 80030ac:	813b      	strh	r3, [r7, #8]
 80030ae:	4613      	mov	r3, r2
 80030b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	f040 80fd 	bne.w	80032ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_I2C_Mem_Read+0x34>
 80030c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0f1      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Mem_Read+0x4e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e0ea      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030ee:	f7fe fdb3 	bl	8001c58 <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2319      	movs	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 ffb2 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0d5      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2222      	movs	r2, #34	; 0x22
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	; 0x40
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003138:	88f8      	ldrh	r0, [r7, #6]
 800313a:	893a      	ldrh	r2, [r7, #8]
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	4603      	mov	r3, r0
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fad1 	bl	80036f0 <I2C_RequestMemoryRead>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0ad      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2bff      	cmp	r3, #255	; 0xff
 8003168:	d90e      	bls.n	8003188 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	22ff      	movs	r2, #255	; 0xff
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	b2da      	uxtb	r2, r3
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	4b52      	ldr	r3, [pc, #328]	; (80032c4 <HAL_I2C_Mem_Read+0x22c>)
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f001 f91b 	bl	80043bc <I2C_TransferConfig>
 8003186:	e00f      	b.n	80031a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	b2da      	uxtb	r2, r3
 8003198:	8979      	ldrh	r1, [r7, #10]
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_I2C_Mem_Read+0x22c>)
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f001 f90a 	bl	80043bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	2200      	movs	r2, #0
 80031b0:	2104      	movs	r1, #4
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 ff59 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07c      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d034      	beq.n	8003268 <HAL_I2C_Mem_Read+0x1d0>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d130      	bne.n	8003268 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	2200      	movs	r2, #0
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 ff2a 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e04d      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2bff      	cmp	r3, #255	; 0xff
 8003228:	d90e      	bls.n	8003248 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	22ff      	movs	r2, #255	; 0xff
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	b2da      	uxtb	r2, r3
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	2300      	movs	r3, #0
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f001 f8bb 	bl	80043bc <I2C_TransferConfig>
 8003246:	e00f      	b.n	8003268 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	b2da      	uxtb	r2, r3
 8003258:	8979      	ldrh	r1, [r7, #10]
 800325a:	2300      	movs	r3, #0
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f001 f8aa 	bl	80043bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d19a      	bne.n	80031a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 ff77 	bl	800416a <I2C_WaitOnSTOPFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e01a      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2220      	movs	r2, #32
 800328c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_I2C_Mem_Read+0x230>)
 800329a:	400b      	ands	r3, r1
 800329c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	80002400 	.word	0x80002400
 80032c8:	fe00e800 	.word	0xfe00e800

080032cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
  }
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d010      	beq.n	8003346 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	09db      	lsrs	r3, r3, #7
 8003328:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f043 0201 	orr.w	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003344:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	0a9b      	lsrs	r3, r3, #10
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d010      	beq.n	8003374 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	09db      	lsrs	r3, r3, #7
 8003356:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f043 0208 	orr.w	r2, r3, #8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003372:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	0a5b      	lsrs	r3, r3, #9
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d010      	beq.n	80033a2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	09db      	lsrs	r3, r3, #7
 8003384:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f043 0202 	orr.w	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 030b 	and.w	r3, r3, #11
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fd1f 	bl	8003df8 <I2C_ITError>
  }
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	70fb      	strb	r3, [r7, #3]
 80033f6:	4613      	mov	r3, r2
 80033f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <I2C_Slave_ISR_IT+0x24>
 8003462:	2302      	movs	r3, #2
 8003464:	e0ec      	b.n	8003640 <I2C_Slave_ISR_IT+0x1fe>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003486:	6939      	ldr	r1, [r7, #16]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fa67 	bl	800395c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d04d      	beq.n	8003536 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d047      	beq.n	8003536 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d128      	bne.n	8003502 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b28      	cmp	r3, #40	; 0x28
 80034ba:	d108      	bne.n	80034ce <I2C_Slave_ISR_IT+0x8c>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c2:	d104      	bne.n	80034ce <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034c4:	6939      	ldr	r1, [r7, #16]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fc40 	bl	8003d4c <I2C_ITListenCplt>
 80034cc:	e032      	b.n	8003534 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b29      	cmp	r3, #41	; 0x29
 80034d8:	d10e      	bne.n	80034f8 <I2C_Slave_ISR_IT+0xb6>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e0:	d00a      	beq.n	80034f8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2210      	movs	r2, #16
 80034e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fd7b 	bl	8003fe6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f9d5 	bl	80038a0 <I2C_ITSlaveSeqCplt>
 80034f6:	e01d      	b.n	8003534 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2210      	movs	r2, #16
 80034fe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003500:	e096      	b.n	8003630 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <I2C_Slave_ISR_IT+0xe4>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003522:	f040 8085 	bne.w	8003630 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4619      	mov	r1, r3
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fc63 	bl	8003df8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003532:	e07d      	b.n	8003630 <I2C_Slave_ISR_IT+0x1ee>
 8003534:	e07c      	b.n	8003630 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d030      	beq.n	80035a4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02a      	beq.n	80035a4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d018      	beq.n	800358a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d14f      	bne.n	8003634 <I2C_Slave_ISR_IT+0x1f2>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800359a:	d04b      	beq.n	8003634 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f97f 	bl	80038a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80035a2:	e047      	b.n	8003634 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	08db      	lsrs	r3, r3, #3
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	08db      	lsrs	r3, r3, #3
 80035b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80035bc:	6939      	ldr	r1, [r7, #16]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f8ea 	bl	8003798 <I2C_ITAddrCplt>
 80035c4:	e037      	b.n	8003636 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d031      	beq.n	8003636 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02b      	beq.n	8003636 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d018      	beq.n	800361a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
 8003618:	e00d      	b.n	8003636 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003620:	d002      	beq.n	8003628 <I2C_Slave_ISR_IT+0x1e6>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f939 	bl	80038a0 <I2C_ITSlaveSeqCplt>
 800362e:	e002      	b.n	8003636 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003630:	bf00      	nop
 8003632:	e000      	b.n	8003636 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003634:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4603      	mov	r3, r0
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	460b      	mov	r3, r1
 800365c:	813b      	strh	r3, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	8979      	ldrh	r1, [r7, #10]
 8003668:	4b20      	ldr	r3, [pc, #128]	; (80036ec <I2C_RequestMemoryWrite+0xa4>)
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fea3 	bl	80043bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 fd35 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e02c      	b.n	80036e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	629a      	str	r2, [r3, #40]	; 0x28
 800369a:	e015      	b.n	80036c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800369c:	893b      	ldrh	r3, [r7, #8]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	69b9      	ldr	r1, [r7, #24]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fd1b 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e012      	b.n	80036e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036be:	893b      	ldrh	r3, [r7, #8]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2200      	movs	r2, #0
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fcc9 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	80002000 	.word	0x80002000

080036f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	8979      	ldrh	r1, [r7, #10]
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <I2C_RequestMemoryRead+0xa4>)
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	2300      	movs	r3, #0
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fe50 	bl	80043bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fce2 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e02c      	b.n	800378a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	629a      	str	r2, [r3, #40]	; 0x28
 8003740:	e015      	b.n	800376e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003742:	893b      	ldrh	r3, [r7, #8]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	69b9      	ldr	r1, [r7, #24]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fcc8 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e012      	b.n	800378a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003764:	893b      	ldrh	r3, [r7, #8]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2200      	movs	r2, #0
 8003776:	2140      	movs	r1, #64	; 0x40
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fc76 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	80002000 	.word	0x80002000

08003798 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037ae:	2b28      	cmp	r3, #40	; 0x28
 80037b0:	d16a      	bne.n	8003888 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037d0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037de:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037ec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d138      	bne.n	8003868 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	09db      	lsrs	r3, r3, #7
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	89bb      	ldrh	r3, [r7, #12]
 80037fe:	4053      	eors	r3, r2
 8003800:	b29b      	uxth	r3, r3
 8003802:	f003 0306 	and.w	r3, r3, #6
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11c      	bne.n	8003844 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800380a:	897b      	ldrh	r3, [r7, #10]
 800380c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381c:	2b02      	cmp	r3, #2
 800381e:	d13b      	bne.n	8003898 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2208      	movs	r2, #8
 800382c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003836:	89ba      	ldrh	r2, [r7, #12]
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff fdd4 	bl	80033ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003842:	e029      	b.n	8003898 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fde7 	bl	8004420 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800385a:	89ba      	ldrh	r2, [r7, #12]
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	4619      	mov	r1, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fdc2 	bl	80033ea <HAL_I2C_AddrCallback>
}
 8003866:	e017      	b.n	8003898 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fdd7 	bl	8004420 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800387a:	89ba      	ldrh	r2, [r7, #12]
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fdb2 	bl	80033ea <HAL_I2C_AddrCallback>
}
 8003886:	e007      	b.n	8003898 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	0b9b      	lsrs	r3, r3, #14
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e00d      	b.n	80038f2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	0bdb      	lsrs	r3, r3, #15
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b29      	cmp	r3, #41	; 0x29
 80038fc:	d112      	bne.n	8003924 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2228      	movs	r2, #40	; 0x28
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2221      	movs	r2, #33	; 0x21
 800390a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800390c:	2101      	movs	r1, #1
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fd86 	bl	8004420 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fd50 	bl	80033c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003922:	e017      	b.n	8003954 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b2a      	cmp	r3, #42	; 0x2a
 800392e:	d111      	bne.n	8003954 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2228      	movs	r2, #40	; 0x28
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2222      	movs	r2, #34	; 0x22
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800393e:	2102      	movs	r1, #2
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fd6d 	bl	8004420 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fd41 	bl	80033d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003978:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2220      	movs	r2, #32
 8003980:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b21      	cmp	r3, #33	; 0x21
 8003986:	d002      	beq.n	800398e <I2C_ITSlaveCplt+0x32>
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b29      	cmp	r3, #41	; 0x29
 800398c:	d108      	bne.n	80039a0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800398e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fd44 	bl	8004420 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2221      	movs	r2, #33	; 0x21
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
 800399e:	e00d      	b.n	80039bc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b22      	cmp	r3, #34	; 0x22
 80039a4:	d002      	beq.n	80039ac <I2C_ITSlaveCplt+0x50>
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b2a      	cmp	r3, #42	; 0x2a
 80039aa:	d107      	bne.n	80039bc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80039ac:	f248 0102 	movw	r1, #32770	; 0x8002
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fd35 	bl	8004420 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2222      	movs	r2, #34	; 0x22
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ca:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b80      	ldr	r3, [pc, #512]	; (8003bd8 <I2C_ITSlaveCplt+0x27c>)
 80039d8:	400b      	ands	r3, r1
 80039da:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fb02 	bl	8003fe6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	0b9b      	lsrs	r3, r3, #14
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d07a      	beq.n	8003ae4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8111 	beq.w	8003c2a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a73      	ldr	r2, [pc, #460]	; (8003bdc <I2C_ITSlaveCplt+0x280>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d059      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a71      	ldr	r2, [pc, #452]	; (8003be0 <I2C_ITSlaveCplt+0x284>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d053      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6f      	ldr	r2, [pc, #444]	; (8003be4 <I2C_ITSlaveCplt+0x288>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d04d      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6d      	ldr	r2, [pc, #436]	; (8003be8 <I2C_ITSlaveCplt+0x28c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d047      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6b      	ldr	r2, [pc, #428]	; (8003bec <I2C_ITSlaveCplt+0x290>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d041      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a69      	ldr	r2, [pc, #420]	; (8003bf0 <I2C_ITSlaveCplt+0x294>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d03b      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a67      	ldr	r2, [pc, #412]	; (8003bf4 <I2C_ITSlaveCplt+0x298>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d035      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a65      	ldr	r2, [pc, #404]	; (8003bf8 <I2C_ITSlaveCplt+0x29c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d02f      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <I2C_ITSlaveCplt+0x2a0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d029      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <I2C_ITSlaveCplt+0x2a4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d023      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a5f      	ldr	r2, [pc, #380]	; (8003c04 <I2C_ITSlaveCplt+0x2a8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d01d      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5d      	ldr	r2, [pc, #372]	; (8003c08 <I2C_ITSlaveCplt+0x2ac>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d017      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a5b      	ldr	r2, [pc, #364]	; (8003c0c <I2C_ITSlaveCplt+0x2b0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d011      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a59      	ldr	r2, [pc, #356]	; (8003c10 <I2C_ITSlaveCplt+0x2b4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a57      	ldr	r2, [pc, #348]	; (8003c14 <I2C_ITSlaveCplt+0x2b8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d005      	beq.n	8003ac8 <I2C_ITSlaveCplt+0x16c>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a55      	ldr	r2, [pc, #340]	; (8003c18 <I2C_ITSlaveCplt+0x2bc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d105      	bne.n	8003ad4 <I2C_ITSlaveCplt+0x178>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	e004      	b.n	8003ade <I2C_ITSlaveCplt+0x182>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	8553      	strh	r3, [r2, #42]	; 0x2a
 8003ae2:	e0a2      	b.n	8003c2a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	0bdb      	lsrs	r3, r3, #15
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 809c 	beq.w	8003c2a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b00:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 808f 	beq.w	8003c2a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a32      	ldr	r2, [pc, #200]	; (8003bdc <I2C_ITSlaveCplt+0x280>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d059      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a30      	ldr	r2, [pc, #192]	; (8003be0 <I2C_ITSlaveCplt+0x284>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d053      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2e      	ldr	r2, [pc, #184]	; (8003be4 <I2C_ITSlaveCplt+0x288>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04d      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2c      	ldr	r2, [pc, #176]	; (8003be8 <I2C_ITSlaveCplt+0x28c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d047      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <I2C_ITSlaveCplt+0x290>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d041      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <I2C_ITSlaveCplt+0x294>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d03b      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a26      	ldr	r2, [pc, #152]	; (8003bf4 <I2C_ITSlaveCplt+0x298>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d035      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <I2C_ITSlaveCplt+0x29c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d02f      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <I2C_ITSlaveCplt+0x2a0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d029      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <I2C_ITSlaveCplt+0x2a4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d023      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <I2C_ITSlaveCplt+0x2a8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01d      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <I2C_ITSlaveCplt+0x2ac>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d017      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <I2C_ITSlaveCplt+0x2b0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d011      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <I2C_ITSlaveCplt+0x2b4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <I2C_ITSlaveCplt+0x2b8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d005      	beq.n	8003bcc <I2C_ITSlaveCplt+0x270>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <I2C_ITSlaveCplt+0x2bc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d127      	bne.n	8003c1c <I2C_ITSlaveCplt+0x2c0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	e026      	b.n	8003c26 <I2C_ITSlaveCplt+0x2ca>
 8003bd8:	fe00e800 	.word	0xfe00e800
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d020      	beq.n	8003c78 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f023 0304 	bic.w	r3, r3, #4
 8003c3c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00c      	beq.n	8003c78 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	f043 0204 	orr.w	r2, r3, #4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8a4 	bl	8003df8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b28      	cmp	r3, #40	; 0x28
 8003cba:	d141      	bne.n	8003d40 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003cbc:	6979      	ldr	r1, [r7, #20]
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f844 	bl	8003d4c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cc4:	e03c      	b.n	8003d40 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cce:	d014      	beq.n	8003cfa <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fde5 	bl	80038a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <I2C_ITSlaveCplt+0x3ec>)
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fb87 	bl	8003406 <HAL_I2C_ListenCpltCallback>
}
 8003cf8:	e022      	b.n	8003d40 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b22      	cmp	r3, #34	; 0x22
 8003d04:	d10e      	bne.n	8003d24 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fb5a 	bl	80033d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d22:	e00d      	b.n	8003d40 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fb41 	bl	80033c2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d40:	bf00      	nop
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	ffff0000 	.word	0xffff0000

08003d4c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a26      	ldr	r2, [pc, #152]	; (8003df4 <I2C_ITListenCplt+0xa8>)
 8003d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d022      	beq.n	8003dca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f043 0204 	orr.w	r2, r3, #4
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003dca:	f248 0103 	movw	r1, #32771	; 0x8003
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fb26 	bl	8004420 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2210      	movs	r2, #16
 8003dda:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fb0e 	bl	8003406 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	ffff0000 	.word	0xffff0000

08003df8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a5d      	ldr	r2, [pc, #372]	; (8003f8c <I2C_ITError+0x194>)
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b28      	cmp	r3, #40	; 0x28
 8003e2e:	d005      	beq.n	8003e3c <I2C_ITError+0x44>
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b29      	cmp	r3, #41	; 0x29
 8003e34:	d002      	beq.n	8003e3c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3a:	d10b      	bne.n	8003e54 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e3c:	2103      	movs	r1, #3
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 faee 	bl	8004420 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2228      	movs	r2, #40	; 0x28
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a50      	ldr	r2, [pc, #320]	; (8003f90 <I2C_ITError+0x198>)
 8003e50:	635a      	str	r2, [r3, #52]	; 0x34
 8003e52:	e011      	b.n	8003e78 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e54:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fae1 	bl	8004420 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b60      	cmp	r3, #96	; 0x60
 8003e68:	d003      	beq.n	8003e72 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d039      	beq.n	8003efa <I2C_ITError+0x102>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b11      	cmp	r3, #17
 8003e8a:	d002      	beq.n	8003e92 <I2C_ITError+0x9a>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b21      	cmp	r3, #33	; 0x21
 8003e90:	d133      	bne.n	8003efa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea0:	d107      	bne.n	8003eb2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eb0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fd72 	bl	80029a0 <HAL_DMA_GetState>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d017      	beq.n	8003ef2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	4a33      	ldr	r2, [pc, #204]	; (8003f94 <I2C_ITError+0x19c>)
 8003ec8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fb1c 	bl	8002514 <HAL_DMA_Abort_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d04d      	beq.n	8003f7e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eec:	4610      	mov	r0, r2
 8003eee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ef0:	e045      	b.n	8003f7e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f850 	bl	8003f98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ef8:	e041      	b.n	8003f7e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d039      	beq.n	8003f76 <I2C_ITError+0x17e>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b12      	cmp	r3, #18
 8003f06:	d002      	beq.n	8003f0e <I2C_ITError+0x116>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b22      	cmp	r3, #34	; 0x22
 8003f0c:	d133      	bne.n	8003f76 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1c:	d107      	bne.n	8003f2e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f2c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fd34 	bl	80029a0 <HAL_DMA_GetState>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d017      	beq.n	8003f6e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <I2C_ITError+0x19c>)
 8003f44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fade 	bl	8002514 <HAL_DMA_Abort_IT>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d011      	beq.n	8003f82 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f6c:	e009      	b.n	8003f82 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f812 	bl	8003f98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f74:	e005      	b.n	8003f82 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f80e 	bl	8003f98 <I2C_TreatErrorCallback>
  }
}
 8003f7c:	e002      	b.n	8003f84 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f82:	bf00      	nop
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	ffff0000 	.word	0xffff0000
 8003f90:	08003443 	.word	0x08003443
 8003f94:	0800402f 	.word	0x0800402f

08003f98 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b60      	cmp	r3, #96	; 0x60
 8003faa:	d10e      	bne.n	8003fca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fa33 	bl	800342e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fc8:	e009      	b.n	8003fde <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fa1e 	bl	800341a <HAL_I2C_ErrorCallback>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d103      	bne.n	8004004 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2200      	movs	r2, #0
 8004002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b01      	cmp	r3, #1
 8004010:	d007      	beq.n	8004022 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0201 	orr.w	r2, r2, #1
 8004020:	619a      	str	r2, [r3, #24]
  }
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	2200      	movs	r2, #0
 800404a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	2200      	movs	r2, #0
 800405a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff ff9b 	bl	8003f98 <I2C_TreatErrorCallback>
}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800407a:	e022      	b.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d01e      	beq.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004084:	f7fd fde8 	bl	8001c58 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d302      	bcc.n	800409a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d113      	bne.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f043 0220 	orr.w	r2, r3, #32
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e00f      	b.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	bf0c      	ite	eq
 80040d2:	2301      	moveq	r3, #1
 80040d4:	2300      	movne	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d0cd      	beq.n	800407c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040f6:	e02c      	b.n	8004152 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f871 	bl	80041e4 <I2C_IsErrorOccurred>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e02a      	b.n	8004162 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d01e      	beq.n	8004152 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004114:	f7fd fda0 	bl	8001c58 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d113      	bne.n	8004152 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e007      	b.n	8004162 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d1cb      	bne.n	80040f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004176:	e028      	b.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f831 	bl	80041e4 <I2C_IsErrorOccurred>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e026      	b.n	80041da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418c:	f7fd fd64 	bl	8001c58 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e007      	b.n	80041da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d1cf      	bne.n	8004178 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b00      	cmp	r3, #0
 800420e:	d075      	beq.n	80042fc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2210      	movs	r2, #16
 8004216:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004218:	e056      	b.n	80042c8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d052      	beq.n	80042c8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fd fd19 	bl	8001c58 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_IsErrorOccurred+0x54>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d147      	bne.n	80042c8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004242:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800424a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d12e      	bne.n	80042ba <I2C_IsErrorOccurred+0xd6>
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004262:	d02a      	beq.n	80042ba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	2b20      	cmp	r3, #32
 8004268:	d027      	beq.n	80042ba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004278:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800427a:	f7fd fced 	bl	8001c58 <HAL_GetTick>
 800427e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004280:	e01b      	b.n	80042ba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004282:	f7fd fce9 	bl	8001c58 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b19      	cmp	r3, #25
 800428e:	d914      	bls.n	80042ba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d1dc      	bne.n	8004282 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d003      	beq.n	80042de <I2C_IsErrorOccurred+0xfa>
 80042d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d09d      	beq.n	800421a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2220      	movs	r2, #32
 80042ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800431e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f043 0308 	orr.w	r3, r3, #8
 8004336:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004340:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004362:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800436a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01c      	beq.n	80043ac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff fe37 	bl	8003fe6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <I2C_IsErrorOccurred+0x1d4>)
 8004384:	400b      	ands	r3, r1
 8004386:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	431a      	orrs	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80043ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3728      	adds	r7, #40	; 0x28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	fe00e800 	.word	0xfe00e800

080043bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	460b      	mov	r3, r1
 80043c8:	817b      	strh	r3, [r7, #10]
 80043ca:	4613      	mov	r3, r2
 80043cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ce:	897b      	ldrh	r3, [r7, #10]
 80043d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043d4:	7a7b      	ldrb	r3, [r7, #9]
 80043d6:	041b      	lsls	r3, r3, #16
 80043d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043dc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043ea:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	0d5b      	lsrs	r3, r3, #21
 80043f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <I2C_TransferConfig+0x60>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	43db      	mvns	r3, r3
 8004400:	ea02 0103 	and.w	r1, r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	03ff63ff 	.word	0x03ff63ff

08004420 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004430:	887b      	ldrh	r3, [r7, #2]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00f      	beq.n	800445a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004440:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800444e:	2b28      	cmp	r3, #40	; 0x28
 8004450:	d003      	beq.n	800445a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004458:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800445a:	887b      	ldrh	r3, [r7, #2]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00f      	beq.n	8004484 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800446a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004478:	2b28      	cmp	r3, #40	; 0x28
 800447a:	d003      	beq.n	8004484 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004482:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004484:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004488:	2b00      	cmp	r3, #0
 800448a:	da03      	bge.n	8004494 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004492:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	2b10      	cmp	r3, #16
 8004498:	d103      	bne.n	80044a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d103      	bne.n	80044b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f043 0320 	orr.w	r3, r3, #32
 80044ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80044b0:	887b      	ldrh	r3, [r7, #2]
 80044b2:	2b40      	cmp	r3, #64	; 0x40
 80044b4:	d103      	bne.n	80044be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	43da      	mvns	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	400a      	ands	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d138      	bne.n	8004564 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e032      	b.n	8004566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800452e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b20      	cmp	r3, #32
 8004586:	d139      	bne.n	80045fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004592:	2302      	movs	r3, #2
 8004594:	e033      	b.n	80045fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2224      	movs	r2, #36	; 0x24
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e000      	b.n	80045fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004614:	4b29      	ldr	r3, [pc, #164]	; (80046bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	2b06      	cmp	r3, #6
 800461e:	d00a      	beq.n	8004636 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	429a      	cmp	r2, r3
 800462c:	d001      	beq.n	8004632 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e040      	b.n	80046b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e03e      	b.n	80046b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004636:	4b21      	ldr	r3, [pc, #132]	; (80046bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800463e:	491f      	ldr	r1, [pc, #124]	; (80046bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4313      	orrs	r3, r2
 8004644:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004646:	f7fd fb07 	bl	8001c58 <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800464c:	e009      	b.n	8004662 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800464e:	f7fd fb03 	bl	8001c58 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800465c:	d901      	bls.n	8004662 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e028      	b.n	80046b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004662:	4b16      	ldr	r3, [pc, #88]	; (80046bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466e:	d1ee      	bne.n	800464e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b1e      	cmp	r3, #30
 8004674:	d008      	beq.n	8004688 <HAL_PWREx_ConfigSupply+0x7c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b2e      	cmp	r3, #46	; 0x2e
 800467a:	d005      	beq.n	8004688 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b1d      	cmp	r3, #29
 8004680:	d002      	beq.n	8004688 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b2d      	cmp	r3, #45	; 0x2d
 8004686:	d114      	bne.n	80046b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004688:	f7fd fae6 	bl	8001c58 <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800468e:	e009      	b.n	80046a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004690:	f7fd fae2 	bl	8001c58 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800469e:	d901      	bls.n	80046a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e007      	b.n	80046b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_PWREx_ConfigSupply+0xb0>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b0:	d1ee      	bne.n	8004690 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	58024800 	.word	0x58024800

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08c      	sub	sp, #48	; 0x30
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e3f4      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80b3 	beq.w	8004846 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e0:	4b95      	ldr	r3, [pc, #596]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ea:	4b93      	ldr	r3, [pc, #588]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	2b10      	cmp	r3, #16
 80046f4:	d007      	beq.n	8004706 <HAL_RCC_OscConfig+0x46>
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	2b18      	cmp	r3, #24
 80046fa:	d112      	bne.n	8004722 <HAL_RCC_OscConfig+0x62>
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d10d      	bne.n	8004722 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004706:	4b8c      	ldr	r3, [pc, #560]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8098 	beq.w	8004844 <HAL_RCC_OscConfig+0x184>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f040 8093 	bne.w	8004844 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e3cc      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x7a>
 800472c:	4b82      	ldr	r3, [pc, #520]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a81      	ldr	r2, [pc, #516]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e058      	b.n	80047ec <HAL_RCC_OscConfig+0x12c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d112      	bne.n	8004768 <HAL_RCC_OscConfig+0xa8>
 8004742:	4b7d      	ldr	r3, [pc, #500]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7c      	ldr	r2, [pc, #496]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b7a      	ldr	r3, [pc, #488]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a79      	ldr	r2, [pc, #484]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004754:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b77      	ldr	r3, [pc, #476]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a76      	ldr	r2, [pc, #472]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e041      	b.n	80047ec <HAL_RCC_OscConfig+0x12c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004770:	d112      	bne.n	8004798 <HAL_RCC_OscConfig+0xd8>
 8004772:	4b71      	ldr	r3, [pc, #452]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a70      	ldr	r2, [pc, #448]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b6e      	ldr	r3, [pc, #440]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6d      	ldr	r2, [pc, #436]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004784:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b6b      	ldr	r3, [pc, #428]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a6a      	ldr	r2, [pc, #424]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e029      	b.n	80047ec <HAL_RCC_OscConfig+0x12c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80047a0:	d112      	bne.n	80047c8 <HAL_RCC_OscConfig+0x108>
 80047a2:	4b65      	ldr	r3, [pc, #404]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a64      	ldr	r2, [pc, #400]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	4b62      	ldr	r3, [pc, #392]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a61      	ldr	r2, [pc, #388]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	4b5f      	ldr	r3, [pc, #380]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a5e      	ldr	r2, [pc, #376]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e011      	b.n	80047ec <HAL_RCC_OscConfig+0x12c>
 80047c8:	4b5b      	ldr	r3, [pc, #364]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5a      	ldr	r2, [pc, #360]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	4b58      	ldr	r3, [pc, #352]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a57      	ldr	r2, [pc, #348]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	4b55      	ldr	r3, [pc, #340]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a54      	ldr	r2, [pc, #336]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d013      	beq.n	800481c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fd fa30 	bl	8001c58 <HAL_GetTick>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fd fa2c 	bl	8001c58 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	; 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e356      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800480e:	4b4a      	ldr	r3, [pc, #296]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x13c>
 800481a:	e014      	b.n	8004846 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fd fa1c 	bl	8001c58 <HAL_GetTick>
 8004820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004824:	f7fd fa18 	bl	8001c58 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b64      	cmp	r3, #100	; 0x64
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e342      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004836:	4b40      	ldr	r3, [pc, #256]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x164>
 8004842:	e000      	b.n	8004846 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 808d 	beq.w	800496e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004854:	4b38      	ldr	r3, [pc, #224]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800485c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800485e:	4b36      	ldr	r3, [pc, #216]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_RCC_OscConfig+0x1ba>
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	2b18      	cmp	r3, #24
 800486e:	d137      	bne.n	80048e0 <HAL_RCC_OscConfig+0x220>
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d132      	bne.n	80048e0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800487a:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_RCC_OscConfig+0x1d2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e314      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004892:	4b29      	ldr	r3, [pc, #164]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 0219 	bic.w	r2, r3, #25
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	4926      	ldr	r1, [pc, #152]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048a4:	f7fd f9d8 	bl	8001c58 <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ac:	f7fd f9d4 	bl	8001c58 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e2fe      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048be:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	4917      	ldr	r1, [pc, #92]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048de:	e046      	b.n	800496e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d029      	beq.n	800493c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f023 0219 	bic.w	r2, r3, #25
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4910      	ldr	r1, [pc, #64]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fd f9ad 	bl	8001c58 <HAL_GetTick>
 80048fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004902:	f7fd f9a9 	bl	8001c58 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e2d3      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	4902      	ldr	r1, [pc, #8]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
 8004934:	e01b      	b.n	800496e <HAL_RCC_OscConfig+0x2ae>
 8004936:	bf00      	nop
 8004938:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493c:	4b97      	ldr	r3, [pc, #604]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a96      	ldr	r2, [pc, #600]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fd f986 	bl	8001c58 <HAL_GetTick>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004950:	f7fd f982 	bl	8001c58 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e2ac      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004962:	4b8e      	ldr	r3, [pc, #568]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b00      	cmp	r3, #0
 8004978:	d06a      	beq.n	8004a50 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800497a:	4b88      	ldr	r3, [pc, #544]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004982:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004984:	4b85      	ldr	r3, [pc, #532]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d007      	beq.n	80049a0 <HAL_RCC_OscConfig+0x2e0>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b18      	cmp	r3, #24
 8004994:	d11b      	bne.n	80049ce <HAL_RCC_OscConfig+0x30e>
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d116      	bne.n	80049ce <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049a0:	4b7e      	ldr	r3, [pc, #504]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_OscConfig+0x2f8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e281      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049b8:	4b78      	ldr	r3, [pc, #480]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	4975      	ldr	r1, [pc, #468]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049cc:	e040      	b.n	8004a50 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d023      	beq.n	8004a1e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049d6:	4b71      	ldr	r3, [pc, #452]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a70      	ldr	r2, [pc, #448]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7fd f939 	bl	8001c58 <HAL_GetTick>
 80049e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80049ea:	f7fd f935 	bl	8001c58 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e25f      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049fc:	4b67      	ldr	r3, [pc, #412]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a08:	4b64      	ldr	r3, [pc, #400]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	4961      	ldr	r1, [pc, #388]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60cb      	str	r3, [r1, #12]
 8004a1c:	e018      	b.n	8004a50 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a1e:	4b5f      	ldr	r3, [pc, #380]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a5e      	ldr	r2, [pc, #376]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fd f915 	bl	8001c58 <HAL_GetTick>
 8004a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a32:	f7fd f911 	bl	8001c58 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e23b      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a44:	4b55      	ldr	r3, [pc, #340]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d036      	beq.n	8004aca <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d019      	beq.n	8004a98 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a64:	4b4d      	ldr	r3, [pc, #308]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a68:	4a4c      	ldr	r2, [pc, #304]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a70:	f7fd f8f2 	bl	8001c58 <HAL_GetTick>
 8004a74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a78:	f7fd f8ee 	bl	8001c58 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e218      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a8a:	4b44      	ldr	r3, [pc, #272]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x3b8>
 8004a96:	e018      	b.n	8004aca <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a98:	4b40      	ldr	r3, [pc, #256]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9c:	4a3f      	ldr	r2, [pc, #252]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
 8004aa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fd f8d8 	bl	8001c58 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fd f8d4 	bl	8001c58 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1fe      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004abe:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d036      	beq.n	8004b44 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d019      	beq.n	8004b12 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ade:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2e      	ldr	r2, [pc, #184]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004ae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004aea:	f7fd f8b5 	bl	8001c58 <HAL_GetTick>
 8004aee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004af2:	f7fd f8b1 	bl	8001c58 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e1db      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b04:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x432>
 8004b10:	e018      	b.n	8004b44 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b1e:	f7fd f89b 	bl	8001c58 <HAL_GetTick>
 8004b22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b26:	f7fd f897 	bl	8001c58 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1c1      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80af 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <HAL_RCC_OscConfig+0x4e0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <HAL_RCC_OscConfig+0x4e0>)
 8004b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b5e:	f7fd f87b 	bl	8001c58 <HAL_GetTick>
 8004b62:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b66:	f7fd f877 	bl	8001c58 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b64      	cmp	r3, #100	; 0x64
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1a1      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCC_OscConfig+0x4e0>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x4e4>
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a02      	ldr	r2, [pc, #8]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
 8004b98:	e05b      	b.n	8004c52 <HAL_RCC_OscConfig+0x592>
 8004b9a:	bf00      	nop
 8004b9c:	58024400 	.word	0x58024400
 8004ba0:	58024800 	.word	0x58024800
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d112      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x512>
 8004bac:	4b9d      	ldr	r3, [pc, #628]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	4a9c      	ldr	r2, [pc, #624]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb8:	4b9a      	ldr	r3, [pc, #616]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	4a99      	ldr	r2, [pc, #612]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc4:	4b97      	ldr	r3, [pc, #604]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	4a96      	ldr	r2, [pc, #600]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bca:	f023 0304 	bic.w	r3, r3, #4
 8004bce:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd0:	e03f      	b.n	8004c52 <HAL_RCC_OscConfig+0x592>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d112      	bne.n	8004c00 <HAL_RCC_OscConfig+0x540>
 8004bda:	4b92      	ldr	r3, [pc, #584]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	4a91      	ldr	r2, [pc, #580]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004be0:	f043 0304 	orr.w	r3, r3, #4
 8004be4:	6713      	str	r3, [r2, #112]	; 0x70
 8004be6:	4b8f      	ldr	r3, [pc, #572]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	4a8e      	ldr	r2, [pc, #568]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf2:	4b8c      	ldr	r3, [pc, #560]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	4a8b      	ldr	r2, [pc, #556]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfe:	e028      	b.n	8004c52 <HAL_RCC_OscConfig+0x592>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b85      	cmp	r3, #133	; 0x85
 8004c06:	d112      	bne.n	8004c2e <HAL_RCC_OscConfig+0x56e>
 8004c08:	4b86      	ldr	r3, [pc, #536]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	4a85      	ldr	r2, [pc, #532]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c0e:	f043 0304 	orr.w	r3, r3, #4
 8004c12:	6713      	str	r3, [r2, #112]	; 0x70
 8004c14:	4b83      	ldr	r3, [pc, #524]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a82      	ldr	r2, [pc, #520]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c20:	4b80      	ldr	r3, [pc, #512]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a7f      	ldr	r2, [pc, #508]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2c:	e011      	b.n	8004c52 <HAL_RCC_OscConfig+0x592>
 8004c2e:	4b7d      	ldr	r3, [pc, #500]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	4a7c      	ldr	r2, [pc, #496]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	4a79      	ldr	r2, [pc, #484]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c40:	f023 0304 	bic.w	r3, r3, #4
 8004c44:	6713      	str	r3, [r2, #112]	; 0x70
 8004c46:	4b77      	ldr	r3, [pc, #476]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	4a76      	ldr	r2, [pc, #472]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d015      	beq.n	8004c86 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fc fffd 	bl	8001c58 <HAL_GetTick>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fc fff9 	bl	8001c58 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e121      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c78:	4b6a      	ldr	r3, [pc, #424]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0ee      	beq.n	8004c62 <HAL_RCC_OscConfig+0x5a2>
 8004c84:	e014      	b.n	8004cb0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c86:	f7fc ffe7 	bl	8001c58 <HAL_GetTick>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8e:	f7fc ffe3 	bl	8001c58 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e10b      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ca4:	4b5f      	ldr	r3, [pc, #380]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ee      	bne.n	8004c8e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8100 	beq.w	8004eba <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004cba:	4b5a      	ldr	r3, [pc, #360]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cc2:	2b18      	cmp	r3, #24
 8004cc4:	f000 80bb 	beq.w	8004e3e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	f040 8095 	bne.w	8004dfc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd2:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a53      	ldr	r2, [pc, #332]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cde:	f7fc ffbb 	bl	8001c58 <HAL_GetTick>
 8004ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce6:	f7fc ffb7 	bl	8001c58 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0e1      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cf8:	4b4a      	ldr	r3, [pc, #296]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f0      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d04:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d08:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCC_OscConfig+0x768>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d14:	0112      	lsls	r2, r2, #4
 8004d16:	430a      	orrs	r2, r1
 8004d18:	4942      	ldr	r1, [pc, #264]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	628b      	str	r3, [r1, #40]	; 0x28
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	3b01      	subs	r3, #1
 8004d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	025b      	lsls	r3, r3, #9
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	3b01      	subs	r3, #1
 8004d48:	061b      	lsls	r3, r3, #24
 8004d4a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d4e:	4935      	ldr	r1, [pc, #212]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004d54:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4a32      	ldr	r2, [pc, #200]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d60:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d64:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d6c:	00d2      	lsls	r2, r2, #3
 8004d6e:	492d      	ldr	r1, [pc, #180]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d74:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	f023 020c 	bic.w	r2, r3, #12
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	4928      	ldr	r1, [pc, #160]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d86:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	f023 0202 	bic.w	r2, r3, #2
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	4924      	ldr	r1, [pc, #144]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d98:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	4a21      	ldr	r2, [pc, #132]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc8:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fc ff40 	bl	8001c58 <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fc ff3c 	bl	8001c58 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e066      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x71c>
 8004dfa:	e05e      	b.n	8004eba <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfc:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <HAL_RCC_OscConfig+0x764>)
 8004e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fc ff26 	bl	8001c58 <HAL_GetTick>
 8004e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e0e:	e00f      	b.n	8004e30 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fc ff22 	bl	8001c58 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d908      	bls.n	8004e30 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e04c      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400
 8004e28:	fffffc0c 	.word	0xfffffc0c
 8004e2c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e30:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <HAL_RCC_OscConfig+0x804>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e9      	bne.n	8004e10 <HAL_RCC_OscConfig+0x750>
 8004e3c:	e03d      	b.n	8004eba <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e3e:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <HAL_RCC_OscConfig+0x804>)
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e44:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <HAL_RCC_OscConfig+0x804>)
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d031      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f003 0203 	and.w	r2, r3, #3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d12a      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d122      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d11a      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	0a5b      	lsrs	r3, r3, #9
 8004e84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d111      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d108      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	0e1b      	lsrs	r3, r3, #24
 8004ea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d001      	beq.n	8004eba <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3730      	adds	r7, #48	; 0x30
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	58024400 	.word	0x58024400

08004ec8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e19c      	b.n	8005216 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004edc:	4b8a      	ldr	r3, [pc, #552]	; (8005108 <HAL_RCC_ClockConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d910      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b87      	ldr	r3, [pc, #540]	; (8005108 <HAL_RCC_ClockConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 020f 	bic.w	r2, r3, #15
 8004ef2:	4985      	ldr	r1, [pc, #532]	; (8005108 <HAL_RCC_ClockConfig+0x240>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b83      	ldr	r3, [pc, #524]	; (8005108 <HAL_RCC_ClockConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e184      	b.n	8005216 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d010      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	4b7b      	ldr	r3, [pc, #492]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d908      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f28:	4b78      	ldr	r3, [pc, #480]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	4975      	ldr	r1, [pc, #468]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d010      	beq.n	8004f68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	4b70      	ldr	r3, [pc, #448]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d908      	bls.n	8004f68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f56:	4b6d      	ldr	r3, [pc, #436]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	496a      	ldr	r1, [pc, #424]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d010      	beq.n	8004f96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699a      	ldr	r2, [r3, #24]
 8004f78:	4b64      	ldr	r3, [pc, #400]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d908      	bls.n	8004f96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f84:	4b61      	ldr	r3, [pc, #388]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	495e      	ldr	r1, [pc, #376]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d010      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	4b59      	ldr	r3, [pc, #356]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d908      	bls.n	8004fc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004fb2:	4b56      	ldr	r3, [pc, #344]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	4953      	ldr	r1, [pc, #332]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d010      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	4b4d      	ldr	r3, [pc, #308]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d908      	bls.n	8004ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe0:	4b4a      	ldr	r3, [pc, #296]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f023 020f 	bic.w	r2, r3, #15
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4947      	ldr	r1, [pc, #284]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d055      	beq.n	80050aa <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ffe:	4b43      	ldr	r3, [pc, #268]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	4940      	ldr	r1, [pc, #256]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 800500c:	4313      	orrs	r3, r2
 800500e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d107      	bne.n	8005028 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005018:	4b3c      	ldr	r3, [pc, #240]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d121      	bne.n	8005068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0f6      	b.n	8005216 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d107      	bne.n	8005040 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005030:	4b36      	ldr	r3, [pc, #216]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d115      	bne.n	8005068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0ea      	b.n	8005216 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d107      	bne.n	8005058 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005048:	4b30      	ldr	r3, [pc, #192]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0de      	b.n	8005216 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005058:	4b2c      	ldr	r3, [pc, #176]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0d6      	b.n	8005216 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005068:	4b28      	ldr	r3, [pc, #160]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f023 0207 	bic.w	r2, r3, #7
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	4925      	ldr	r1, [pc, #148]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 8005076:	4313      	orrs	r3, r2
 8005078:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507a:	f7fc fded 	bl	8001c58 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005080:	e00a      	b.n	8005098 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005082:	f7fc fde9 	bl	8001c58 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e0be      	b.n	8005216 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005098:	4b1c      	ldr	r3, [pc, #112]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d1eb      	bne.n	8005082 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d010      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	4b14      	ldr	r3, [pc, #80]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d208      	bcs.n	80050d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f023 020f 	bic.w	r2, r3, #15
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	490e      	ldr	r1, [pc, #56]	; (800510c <HAL_RCC_ClockConfig+0x244>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_ClockConfig+0x240>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d214      	bcs.n	8005110 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <HAL_RCC_ClockConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 020f 	bic.w	r2, r3, #15
 80050ee:	4906      	ldr	r1, [pc, #24]	; (8005108 <HAL_RCC_ClockConfig+0x240>)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f6:	4b04      	ldr	r3, [pc, #16]	; (8005108 <HAL_RCC_ClockConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d005      	beq.n	8005110 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e086      	b.n	8005216 <HAL_RCC_ClockConfig+0x34e>
 8005108:	52002000 	.word	0x52002000
 800510c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d010      	beq.n	800513e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	4b3f      	ldr	r3, [pc, #252]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005128:	429a      	cmp	r2, r3
 800512a:	d208      	bcs.n	800513e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800512c:	4b3c      	ldr	r3, [pc, #240]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	4939      	ldr	r1, [pc, #228]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 800513a:	4313      	orrs	r3, r2
 800513c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d010      	beq.n	800516c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	4b34      	ldr	r3, [pc, #208]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005156:	429a      	cmp	r2, r3
 8005158:	d208      	bcs.n	800516c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800515a:	4b31      	ldr	r3, [pc, #196]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	492e      	ldr	r1, [pc, #184]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 8005168:	4313      	orrs	r3, r2
 800516a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	d010      	beq.n	800519a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	4b28      	ldr	r3, [pc, #160]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005184:	429a      	cmp	r2, r3
 8005186:	d208      	bcs.n	800519a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	4922      	ldr	r1, [pc, #136]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 8005196:	4313      	orrs	r3, r2
 8005198:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d010      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69da      	ldr	r2, [r3, #28]
 80051aa:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d208      	bcs.n	80051c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	4917      	ldr	r1, [pc, #92]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80051c8:	f000 f834 	bl	8005234 <HAL_RCC_GetSysClockFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	4912      	ldr	r1, [pc, #72]	; (8005224 <HAL_RCC_ClockConfig+0x35c>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80051e6:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <HAL_RCC_ClockConfig+0x358>)
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <HAL_RCC_ClockConfig+0x35c>)
 80051f0:	5cd3      	ldrb	r3, [r2, r3]
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
 80051fc:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <HAL_RCC_ClockConfig+0x360>)
 80051fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005200:	4a0a      	ldr	r2, [pc, #40]	; (800522c <HAL_RCC_ClockConfig+0x364>)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005206:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <HAL_RCC_ClockConfig+0x368>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fc fcda 	bl	8001bc4 <HAL_InitTick>
 8005210:	4603      	mov	r3, r0
 8005212:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
 8005224:	0800b27c 	.word	0x0800b27c
 8005228:	24000004 	.word	0x24000004
 800522c:	24000000 	.word	0x24000000
 8005230:	24000008 	.word	0x24000008

08005234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005234:	b480      	push	{r7}
 8005236:	b089      	sub	sp, #36	; 0x24
 8005238:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800523a:	4bb3      	ldr	r3, [pc, #716]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005242:	2b18      	cmp	r3, #24
 8005244:	f200 8155 	bhi.w	80054f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005248:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <HAL_RCC_GetSysClockFreq+0x1c>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	080052b5 	.word	0x080052b5
 8005254:	080054f3 	.word	0x080054f3
 8005258:	080054f3 	.word	0x080054f3
 800525c:	080054f3 	.word	0x080054f3
 8005260:	080054f3 	.word	0x080054f3
 8005264:	080054f3 	.word	0x080054f3
 8005268:	080054f3 	.word	0x080054f3
 800526c:	080054f3 	.word	0x080054f3
 8005270:	080052db 	.word	0x080052db
 8005274:	080054f3 	.word	0x080054f3
 8005278:	080054f3 	.word	0x080054f3
 800527c:	080054f3 	.word	0x080054f3
 8005280:	080054f3 	.word	0x080054f3
 8005284:	080054f3 	.word	0x080054f3
 8005288:	080054f3 	.word	0x080054f3
 800528c:	080054f3 	.word	0x080054f3
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080054f3 	.word	0x080054f3
 8005298:	080054f3 	.word	0x080054f3
 800529c:	080054f3 	.word	0x080054f3
 80052a0:	080054f3 	.word	0x080054f3
 80052a4:	080054f3 	.word	0x080054f3
 80052a8:	080054f3 	.word	0x080054f3
 80052ac:	080054f3 	.word	0x080054f3
 80052b0:	080052e7 	.word	0x080052e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b4:	4b94      	ldr	r3, [pc, #592]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052c0:	4b91      	ldr	r3, [pc, #580]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	08db      	lsrs	r3, r3, #3
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	4a90      	ldr	r2, [pc, #576]	; (800550c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
 80052d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80052d2:	e111      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052d4:	4b8d      	ldr	r3, [pc, #564]	; (800550c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052d6:	61bb      	str	r3, [r7, #24]
    break;
 80052d8:	e10e      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80052da:	4b8d      	ldr	r3, [pc, #564]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052dc:	61bb      	str	r3, [r7, #24]
    break;
 80052de:	e10b      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80052e0:	4b8c      	ldr	r3, [pc, #560]	; (8005514 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052e2:	61bb      	str	r3, [r7, #24]
    break;
 80052e4:	e108      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052e6:	4b88      	ldr	r3, [pc, #544]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80052f0:	4b85      	ldr	r3, [pc, #532]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052fc:	4b82      	ldr	r3, [pc, #520]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005306:	4b80      	ldr	r3, [pc, #512]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	08db      	lsrs	r3, r3, #3
 800530c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80e1 	beq.w	80054ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b02      	cmp	r3, #2
 800532e:	f000 8083 	beq.w	8005438 <HAL_RCC_GetSysClockFreq+0x204>
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b02      	cmp	r3, #2
 8005336:	f200 80a1 	bhi.w	800547c <HAL_RCC_GetSysClockFreq+0x248>
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_RCC_GetSysClockFreq+0x114>
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d056      	beq.n	80053f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005346:	e099      	b.n	800547c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005348:	4b6f      	ldr	r3, [pc, #444]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d02d      	beq.n	80053b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005354:	4b6c      	ldr	r3, [pc, #432]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	08db      	lsrs	r3, r3, #3
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	4a6b      	ldr	r2, [pc, #428]	; (800550c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
 8005364:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537e:	4b62      	ldr	r3, [pc, #392]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005392:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80053ae:	e087      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800551c <HAL_RCC_GetSysClockFreq+0x2e8>
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c2:	4b51      	ldr	r3, [pc, #324]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f2:	e065      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005520 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005406:	4b40      	ldr	r3, [pc, #256]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a02 	vldr	s12, [r7, #8]
 800541a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005436:	e043      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005524 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544a:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545a:	ed97 6a02 	vldr	s12, [r7, #8]
 800545e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547a:	e021      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005486:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005520 <HAL_RCC_GetSysClockFreq+0x2ec>
 800548a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548e:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549e:	ed97 6a02 	vldr	s12, [r7, #8]
 80054a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80054c0:	4b11      	ldr	r3, [pc, #68]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	0a5b      	lsrs	r3, r3, #9
 80054c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ca:	3301      	adds	r3, #1
 80054cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e4:	ee17 3a90 	vmov	r3, s15
 80054e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80054ea:	e005      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61bb      	str	r3, [r7, #24]
    break;
 80054f0:	e002      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054f4:	61bb      	str	r3, [r7, #24]
    break;
 80054f6:	bf00      	nop
  }

  return sysclockfreq;
 80054f8:	69bb      	ldr	r3, [r7, #24]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3724      	adds	r7, #36	; 0x24
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	58024400 	.word	0x58024400
 800550c:	03d09000 	.word	0x03d09000
 8005510:	003d0900 	.word	0x003d0900
 8005514:	007a1200 	.word	0x007a1200
 8005518:	46000000 	.word	0x46000000
 800551c:	4c742400 	.word	0x4c742400
 8005520:	4a742400 	.word	0x4a742400
 8005524:	4af42400 	.word	0x4af42400

08005528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800552e:	f7ff fe81 	bl	8005234 <HAL_RCC_GetSysClockFreq>
 8005532:	4602      	mov	r2, r0
 8005534:	4b10      	ldr	r3, [pc, #64]	; (8005578 <HAL_RCC_GetHCLKFreq+0x50>)
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	490f      	ldr	r1, [pc, #60]	; (800557c <HAL_RCC_GetHCLKFreq+0x54>)
 8005540:	5ccb      	ldrb	r3, [r1, r3]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	fa22 f303 	lsr.w	r3, r2, r3
 800554a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800554c:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <HAL_RCC_GetHCLKFreq+0x50>)
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	4a09      	ldr	r2, [pc, #36]	; (800557c <HAL_RCC_GetHCLKFreq+0x54>)
 8005556:	5cd3      	ldrb	r3, [r2, r3]
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	fa22 f303 	lsr.w	r3, r2, r3
 8005562:	4a07      	ldr	r2, [pc, #28]	; (8005580 <HAL_RCC_GetHCLKFreq+0x58>)
 8005564:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005566:	4a07      	ldr	r2, [pc, #28]	; (8005584 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <HAL_RCC_GetHCLKFreq+0x58>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	58024400 	.word	0x58024400
 800557c:	0800b27c 	.word	0x0800b27c
 8005580:	24000004 	.word	0x24000004
 8005584:	24000000 	.word	0x24000000

08005588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800558c:	f7ff ffcc 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005590:	4602      	mov	r2, r0
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	4904      	ldr	r1, [pc, #16]	; (80055b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800559e:	5ccb      	ldrb	r3, [r1, r3]
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	58024400 	.word	0x58024400
 80055b0:	0800b27c 	.word	0x0800b27c

080055b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80055b8:	f7ff ffb6 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 80055bc:	4602      	mov	r2, r0
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	4904      	ldr	r1, [pc, #16]	; (80055dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ca:	5ccb      	ldrb	r3, [r1, r3]
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	58024400 	.word	0x58024400
 80055dc:	0800b27c 	.word	0x0800b27c

080055e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055e8:	2300      	movs	r3, #0
 80055ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055ec:	2300      	movs	r3, #0
 80055ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d03f      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005604:	d02a      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005606:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800560a:	d824      	bhi.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800560c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005610:	d018      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005616:	d81e      	bhi.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800561c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005620:	d007      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005622:	e018      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005624:	4b9f      	ldr	r3, [pc, #636]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	4a9e      	ldr	r2, [pc, #632]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800562a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005630:	e015      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3304      	adds	r3, #4
 8005636:	2102      	movs	r1, #2
 8005638:	4618      	mov	r0, r3
 800563a:	f001 f99b 	bl	8006974 <RCCEx_PLL2_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005642:	e00c      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3324      	adds	r3, #36	; 0x24
 8005648:	2102      	movs	r1, #2
 800564a:	4618      	mov	r0, r3
 800564c:	f001 fa44 	bl	8006ad8 <RCCEx_PLL3_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
      break;
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800565c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005664:	4b8f      	ldr	r3, [pc, #572]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005670:	498c      	ldr	r1, [pc, #560]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005672:	4313      	orrs	r3, r2
 8005674:	650b      	str	r3, [r1, #80]	; 0x50
 8005676:	e001      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d03d      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	2b04      	cmp	r3, #4
 800568e:	d826      	bhi.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005690:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005696:	bf00      	nop
 8005698:	080056ad 	.word	0x080056ad
 800569c:	080056bb 	.word	0x080056bb
 80056a0:	080056cd 	.word	0x080056cd
 80056a4:	080056e5 	.word	0x080056e5
 80056a8:	080056e5 	.word	0x080056e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ac:	4b7d      	ldr	r3, [pc, #500]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	4a7c      	ldr	r2, [pc, #496]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056b8:	e015      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3304      	adds	r3, #4
 80056be:	2100      	movs	r1, #0
 80056c0:	4618      	mov	r0, r3
 80056c2:	f001 f957 	bl	8006974 <RCCEx_PLL2_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056ca:	e00c      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3324      	adds	r3, #36	; 0x24
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f001 fa00 	bl	8006ad8 <RCCEx_PLL3_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056dc:	e003      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
      break;
 80056e2:	e000      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80056e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056ec:	4b6d      	ldr	r3, [pc, #436]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f0:	f023 0207 	bic.w	r2, r3, #7
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	496a      	ldr	r1, [pc, #424]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	650b      	str	r3, [r1, #80]	; 0x50
 80056fe:	e001      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800570c:	2b00      	cmp	r3, #0
 800570e:	d04a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005714:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005718:	d031      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800571a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800571e:	d82b      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005724:	d02d      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572a:	d825      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800572c:	2bc0      	cmp	r3, #192	; 0xc0
 800572e:	d02a      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005730:	2bc0      	cmp	r3, #192	; 0xc0
 8005732:	d821      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005734:	2b80      	cmp	r3, #128	; 0x80
 8005736:	d016      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005738:	2b80      	cmp	r3, #128	; 0x80
 800573a:	d81d      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d007      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005744:	e018      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005746:	4b57      	ldr	r3, [pc, #348]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4a56      	ldr	r2, [pc, #344]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800574c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005752:	e019      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f001 f90a 	bl	8006974 <RCCEx_PLL2_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005764:	e010      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3324      	adds	r3, #36	; 0x24
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f001 f9b3 	bl	8006ad8 <RCCEx_PLL3_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005776:	e007      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
      break;
 800577c:	e004      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800578e:	4b45      	ldr	r3, [pc, #276]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005792:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579a:	4942      	ldr	r1, [pc, #264]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800579c:	4313      	orrs	r3, r2
 800579e:	650b      	str	r3, [r1, #80]	; 0x50
 80057a0:	e001      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
 80057a4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d04f      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80057ba:	d036      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80057bc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80057c0:	d830      	bhi.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80057c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c6:	d032      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80057c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057cc:	d82a      	bhi.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80057ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057d2:	d02e      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80057d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057d8:	d824      	bhi.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d018      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80057e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e4:	d81e      	bhi.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80057ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ee:	d007      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80057f0:	e018      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f2:	4b2c      	ldr	r3, [pc, #176]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	4a2b      	ldr	r2, [pc, #172]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80057fe:	e019      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f001 f8b4 	bl	8006974 <RCCEx_PLL2_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005810:	e010      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3324      	adds	r3, #36	; 0x24
 8005816:	2100      	movs	r1, #0
 8005818:	4618      	mov	r0, r3
 800581a:	f001 f95d 	bl	8006ad8 <RCCEx_PLL3_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005822:	e007      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	75fb      	strb	r3, [r7, #23]
      break;
 8005828:	e004      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800583a:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800583c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005846:	4917      	ldr	r1, [pc, #92]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005848:	4313      	orrs	r3, r2
 800584a:	650b      	str	r3, [r1, #80]	; 0x50
 800584c:	e001      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d034      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005862:	2b30      	cmp	r3, #48	; 0x30
 8005864:	d01c      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005866:	2b30      	cmp	r3, #48	; 0x30
 8005868:	d817      	bhi.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800586a:	2b20      	cmp	r3, #32
 800586c:	d00c      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800586e:	2b20      	cmp	r3, #32
 8005870:	d813      	bhi.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d018      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8005876:	2b10      	cmp	r3, #16
 8005878:	d10f      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005886:	e010      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	2102      	movs	r1, #2
 800588e:	4618      	mov	r0, r3
 8005890:	f001 f870 	bl	8006974 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005898:	e007      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
      break;
 800589e:	e004      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80058a0:	bf00      	nop
 80058a2:	e002      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80058a4:	58024400 	.word	0x58024400
      break;
 80058a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058b0:	4b9b      	ldr	r3, [pc, #620]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80058b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058bc:	4998      	ldr	r1, [pc, #608]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058c2:	e001      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d047      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058dc:	d030      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e2:	d82a      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80058e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058e8:	d02c      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80058ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058ee:	d824      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80058f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f4:	d018      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80058f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fa:	d81e      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005904:	d007      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005906:	e018      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005908:	4b85      	ldr	r3, [pc, #532]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	4a84      	ldr	r2, [pc, #528]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800590e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005914:	e017      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3304      	adds	r3, #4
 800591a:	2100      	movs	r1, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f829 	bl	8006974 <RCCEx_PLL2_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005926:	e00e      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3324      	adds	r3, #36	; 0x24
 800592c:	2100      	movs	r1, #0
 800592e:	4618      	mov	r0, r3
 8005930:	f001 f8d2 	bl	8006ad8 <RCCEx_PLL3_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005938:	e005      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
      break;
 800593e:	e002      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800594c:	4b74      	ldr	r3, [pc, #464]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800594e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005950:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005958:	4971      	ldr	r1, [pc, #452]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800595a:	4313      	orrs	r3, r2
 800595c:	650b      	str	r3, [r1, #80]	; 0x50
 800595e:	e001      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d049      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005978:	d02e      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800597a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800597e:	d828      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005984:	d02a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800598a:	d822      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800598c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005990:	d026      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005992:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005996:	d81c      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800599c:	d010      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800599e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059a2:	d816      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01d      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80059a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ac:	d111      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	2101      	movs	r1, #1
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 ffdd 	bl	8006974 <RCCEx_PLL2_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80059be:	e012      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3324      	adds	r3, #36	; 0x24
 80059c4:	2101      	movs	r1, #1
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 f886 	bl	8006ad8 <RCCEx_PLL3_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80059d0:	e009      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
      break;
 80059d6:	e006      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80059d8:	bf00      	nop
 80059da:	e004      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80059e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d109      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059ec:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f8:	4949      	ldr	r1, [pc, #292]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	650b      	str	r3, [r1, #80]	; 0x50
 80059fe:	e001      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d053      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a16:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005a1a:	d034      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005a20:	d82e      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a26:	d030      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a2c:	d828      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d02c      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a38:	d822      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005a3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a3e:	d028      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005a40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a44:	d81c      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a4a:	d010      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a50:	d816      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01f      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a5a:	d111      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	2101      	movs	r1, #1
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 ff86 	bl	8006974 <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a6c:	e014      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3324      	adds	r3, #36	; 0x24
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f82f 	bl	8006ad8 <RCCEx_PLL3_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a7e:	e00b      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	e008      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005a86:	bf00      	nop
 8005a88:	e006      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e004      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e002      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005a92:	bf00      	nop
 8005a94:	e000      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a9e:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005aac:	491c      	ldr	r1, [pc, #112]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	658b      	str	r3, [r1, #88]	; 0x58
 8005ab2:	e001      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d031      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005acc:	d00e      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad2:	d814      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d015      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005adc:	d10f      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ade:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	4a0f      	ldr	r2, [pc, #60]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005aea:	e00c      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	2101      	movs	r1, #1
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 ff3e 	bl	8006974 <RCCEx_PLL2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005afc:	e003      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
      break;
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b18:	4901      	ldr	r1, [pc, #4]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	650b      	str	r3, [r1, #80]	; 0x50
 8005b1e:	e003      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	7dfb      	ldrb	r3, [r7, #23]
 8005b26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d032      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d81b      	bhi.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b7b 	.word	0x08005b7b
 8005b48:	08005b55 	.word	0x08005b55
 8005b4c:	08005b63 	.word	0x08005b63
 8005b50:	08005b7b 	.word	0x08005b7b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b54:	4bb2      	ldr	r3, [pc, #712]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	4ab1      	ldr	r2, [pc, #708]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b60:	e00c      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3304      	adds	r3, #4
 8005b66:	2102      	movs	r1, #2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 ff03 	bl	8006974 <RCCEx_PLL2_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b72:	e003      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	75fb      	strb	r3, [r7, #23]
      break;
 8005b78:	e000      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b82:	4ba7      	ldr	r3, [pc, #668]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b86:	f023 0203 	bic.w	r2, r3, #3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	49a4      	ldr	r1, [pc, #656]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b94:	e001      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 8086 	beq.w	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ba8:	4b9e      	ldr	r3, [pc, #632]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a9d      	ldr	r2, [pc, #628]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bb4:	f7fc f850 	bl	8001c58 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bba:	e009      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbc:	f7fc f84c 	bl	8001c58 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b64      	cmp	r3, #100	; 0x64
 8005bc8:	d902      	bls.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	75fb      	strb	r3, [r7, #23]
        break;
 8005bce:	e005      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bd0:	4b94      	ldr	r3, [pc, #592]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0ef      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d166      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005be2:	4b8f      	ldr	r3, [pc, #572]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bec:	4053      	eors	r3, r2
 8005bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d013      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bf6:	4b8a      	ldr	r3, [pc, #552]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c00:	4b87      	ldr	r3, [pc, #540]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4a86      	ldr	r2, [pc, #536]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c0c:	4b84      	ldr	r3, [pc, #528]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	4a83      	ldr	r2, [pc, #524]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c18:	4a81      	ldr	r2, [pc, #516]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c28:	d115      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2a:	f7fc f815 	bl	8001c58 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c30:	e00b      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c32:	f7fc f811 	bl	8001c58 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d902      	bls.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	75fb      	strb	r3, [r7, #23]
            break;
 8005c48:	e005      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c4a:	4b75      	ldr	r3, [pc, #468]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0ed      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d126      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6a:	d10d      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8005c6c:	4b6c      	ldr	r3, [pc, #432]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c7a:	0919      	lsrs	r1, r3, #4
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c7e:	400b      	ands	r3, r1
 8005c80:	4967      	ldr	r1, [pc, #412]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	610b      	str	r3, [r1, #16]
 8005c86:	e005      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8005c88:	4b65      	ldr	r3, [pc, #404]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	4a64      	ldr	r2, [pc, #400]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c92:	6113      	str	r3, [r2, #16]
 8005c94:	4b62      	ldr	r3, [pc, #392]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca2:	495f      	ldr	r1, [pc, #380]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	670b      	str	r3, [r1, #112]	; 0x70
 8005ca8:	e004      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	75bb      	strb	r3, [r7, #22]
 8005cae:	e001      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d07f      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc6:	2b28      	cmp	r3, #40	; 0x28
 8005cc8:	d866      	bhi.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8005cca:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005d9f 	.word	0x08005d9f
 8005cd4:	08005d99 	.word	0x08005d99
 8005cd8:	08005d99 	.word	0x08005d99
 8005cdc:	08005d99 	.word	0x08005d99
 8005ce0:	08005d99 	.word	0x08005d99
 8005ce4:	08005d99 	.word	0x08005d99
 8005ce8:	08005d99 	.word	0x08005d99
 8005cec:	08005d99 	.word	0x08005d99
 8005cf0:	08005d75 	.word	0x08005d75
 8005cf4:	08005d99 	.word	0x08005d99
 8005cf8:	08005d99 	.word	0x08005d99
 8005cfc:	08005d99 	.word	0x08005d99
 8005d00:	08005d99 	.word	0x08005d99
 8005d04:	08005d99 	.word	0x08005d99
 8005d08:	08005d99 	.word	0x08005d99
 8005d0c:	08005d99 	.word	0x08005d99
 8005d10:	08005d87 	.word	0x08005d87
 8005d14:	08005d99 	.word	0x08005d99
 8005d18:	08005d99 	.word	0x08005d99
 8005d1c:	08005d99 	.word	0x08005d99
 8005d20:	08005d99 	.word	0x08005d99
 8005d24:	08005d99 	.word	0x08005d99
 8005d28:	08005d99 	.word	0x08005d99
 8005d2c:	08005d99 	.word	0x08005d99
 8005d30:	08005d9f 	.word	0x08005d9f
 8005d34:	08005d99 	.word	0x08005d99
 8005d38:	08005d99 	.word	0x08005d99
 8005d3c:	08005d99 	.word	0x08005d99
 8005d40:	08005d99 	.word	0x08005d99
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005d99 	.word	0x08005d99
 8005d50:	08005d9f 	.word	0x08005d9f
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005d99 	.word	0x08005d99
 8005d60:	08005d99 	.word	0x08005d99
 8005d64:	08005d99 	.word	0x08005d99
 8005d68:	08005d99 	.word	0x08005d99
 8005d6c:	08005d99 	.word	0x08005d99
 8005d70:	08005d9f 	.word	0x08005d9f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	2101      	movs	r1, #1
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fdfa 	bl	8006974 <RCCEx_PLL2_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d84:	e00c      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3324      	adds	r3, #36	; 0x24
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fea3 	bl	8006ad8 <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d96:	e003      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9c:	e000      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8005d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005da6:	4b1e      	ldr	r3, [pc, #120]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db4:	491a      	ldr	r1, [pc, #104]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	654b      	str	r3, [r1, #84]	; 0x54
 8005dba:	e001      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d03f      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd0:	2b05      	cmp	r3, #5
 8005dd2:	d821      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e2d 	.word	0x08005e2d
 8005de0:	08005df5 	.word	0x08005df5
 8005de4:	08005e07 	.word	0x08005e07
 8005de8:	08005e2d 	.word	0x08005e2d
 8005dec:	08005e2d 	.word	0x08005e2d
 8005df0:	08005e2d 	.word	0x08005e2d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	2101      	movs	r1, #1
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fdba 	bl	8006974 <RCCEx_PLL2_Config>
 8005e00:	4603      	mov	r3, r0
 8005e02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e04:	e013      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3324      	adds	r3, #36	; 0x24
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fe63 	bl	8006ad8 <RCCEx_PLL3_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e16:	e00a      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1c:	e007      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005e1e:	bf00      	nop
 8005e20:	58024400 	.word	0x58024400
 8005e24:	58024800 	.word	0x58024800
 8005e28:	00ffffcf 	.word	0x00ffffcf
      break;
 8005e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e34:	4b9f      	ldr	r3, [pc, #636]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e38:	f023 0207 	bic.w	r2, r3, #7
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e40:	499c      	ldr	r1, [pc, #624]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	654b      	str	r3, [r1, #84]	; 0x54
 8005e46:	e001      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d039      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d820      	bhi.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005eab 	.word	0x08005eab
 8005e6c:	08005e81 	.word	0x08005e81
 8005e70:	08005e93 	.word	0x08005e93
 8005e74:	08005eab 	.word	0x08005eab
 8005e78:	08005eab 	.word	0x08005eab
 8005e7c:	08005eab 	.word	0x08005eab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	2101      	movs	r1, #1
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fd74 	bl	8006974 <RCCEx_PLL2_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e90:	e00c      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3324      	adds	r3, #36	; 0x24
 8005e96:	2101      	movs	r1, #1
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fe1d 	bl	8006ad8 <RCCEx_PLL3_Config>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ea2:	e003      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea8:	e000      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10a      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eb2:	4b80      	ldr	r3, [pc, #512]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb6:	f023 0207 	bic.w	r2, r3, #7
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ec0:	497c      	ldr	r1, [pc, #496]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	658b      	str	r3, [r1, #88]	; 0x58
 8005ec6:	e001      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d04b      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ee2:	d02e      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ee8:	d828      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d02a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef4:	d822      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005ef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005efa:	d026      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005efc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f00:	d81c      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f06:	d010      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f0c:	d816      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01d      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f16:	d111      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fd28 	bl	8006974 <RCCEx_PLL2_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f28:	e012      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3324      	adds	r3, #36	; 0x24
 8005f2e:	2102      	movs	r1, #2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fdd1 	bl	8006ad8 <RCCEx_PLL3_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f3a:	e009      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f40:	e006      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005f42:	bf00      	nop
 8005f44:	e004      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005f46:	bf00      	nop
 8005f48:	e002      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f56:	4b57      	ldr	r3, [pc, #348]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f64:	4953      	ldr	r1, [pc, #332]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	654b      	str	r3, [r1, #84]	; 0x54
 8005f6a:	e001      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d04b      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f86:	d02e      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005f88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f8c:	d828      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f92:	d02a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f98:	d822      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005f9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f9e:	d026      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005fa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fa4:	d81c      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005faa:	d010      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb0:	d816      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d01d      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fba:	d111      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fcd6 	bl	8006974 <RCCEx_PLL2_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fcc:	e012      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3324      	adds	r3, #36	; 0x24
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fd7f 	bl	8006ad8 <RCCEx_PLL3_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fde:	e009      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe4:	e006      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e004      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005fea:	bf00      	nop
 8005fec:	e002      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ffa:	4b2e      	ldr	r3, [pc, #184]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006008:	492a      	ldr	r1, [pc, #168]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800600a:	4313      	orrs	r3, r2
 800600c:	658b      	str	r3, [r1, #88]	; 0x58
 800600e:	e001      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	7dfb      	ldrb	r3, [r7, #23]
 8006012:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601c:	2b00      	cmp	r3, #0
 800601e:	d04d      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006026:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800602a:	d02e      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800602c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006030:	d828      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006036:	d02a      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603c:	d822      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800603e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006042:	d026      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006044:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006048:	d81c      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800604a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800604e:	d010      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8006050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006054:	d816      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01d      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800605a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605e:	d111      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	2100      	movs	r1, #0
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fc84 	bl	8006974 <RCCEx_PLL2_Config>
 800606c:	4603      	mov	r3, r0
 800606e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006070:	e012      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3324      	adds	r3, #36	; 0x24
 8006076:	2102      	movs	r1, #2
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fd2d 	bl	8006ad8 <RCCEx_PLL3_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006082:	e009      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	75fb      	strb	r3, [r7, #23]
      break;
 8006088:	e006      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800608a:	bf00      	nop
 800608c:	e004      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800608e:	bf00      	nop
 8006090:	e002      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10c      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800609e:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80060a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060ac:	4901      	ldr	r1, [pc, #4]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	658b      	str	r3, [r1, #88]	; 0x58
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80060b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01a      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d2:	d10a      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3324      	adds	r3, #36	; 0x24
 80060d8:	2102      	movs	r1, #2
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fcfc 	bl	8006ad8 <RCCEx_PLL3_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060ea:	4b8c      	ldr	r3, [pc, #560]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	4988      	ldr	r1, [pc, #544]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006114:	d10a      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3324      	adds	r3, #36	; 0x24
 800611a:	2102      	movs	r1, #2
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fcdb 	bl	8006ad8 <RCCEx_PLL3_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800612c:	4b7b      	ldr	r3, [pc, #492]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800612e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800613a:	4978      	ldr	r1, [pc, #480]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d034      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006156:	d01d      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8006158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800615c:	d817      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8006162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006166:	d009      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006168:	e011      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	2100      	movs	r1, #0
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fbff 	bl	8006974 <RCCEx_PLL2_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800617a:	e00c      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3324      	adds	r3, #36	; 0x24
 8006180:	2102      	movs	r1, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fca8 	bl	8006ad8 <RCCEx_PLL3_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
      break;
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800619c:	4b5f      	ldr	r3, [pc, #380]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800619e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061aa:	495c      	ldr	r1, [pc, #368]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	658b      	str	r3, [r1, #88]	; 0x58
 80061b0:	e001      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d033      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061cc:	d01c      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80061ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061d2:	d816      	bhi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80061d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d8:	d003      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80061da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061de:	d007      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80061e0:	e00f      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e2:	4b4e      	ldr	r3, [pc, #312]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	4a4d      	ldr	r2, [pc, #308]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80061e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80061ee:	e00c      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3324      	adds	r3, #36	; 0x24
 80061f4:	2101      	movs	r1, #1
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fc6e 	bl	8006ad8 <RCCEx_PLL3_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006200:	e003      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
      break;
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006210:	4b42      	ldr	r3, [pc, #264]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800621e:	493f      	ldr	r1, [pc, #252]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006220:	4313      	orrs	r3, r2
 8006222:	654b      	str	r3, [r1, #84]	; 0x54
 8006224:	e001      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d029      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800623e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006242:	d007      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006244:	e00f      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006246:	4b35      	ldr	r3, [pc, #212]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	4a34      	ldr	r2, [pc, #208]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800624c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006250:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006252:	e00b      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	2102      	movs	r1, #2
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fb8a 	bl	8006974 <RCCEx_PLL2_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006264:	e002      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]
      break;
 800626a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006272:	4b2a      	ldr	r3, [pc, #168]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006276:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627e:	4927      	ldr	r1, [pc, #156]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006280:	4313      	orrs	r3, r2
 8006282:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006284:	e001      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3324      	adds	r3, #36	; 0x24
 800629a:	2102      	movs	r1, #2
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fc1b 	bl	8006ad8 <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d035      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c2:	d017      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c8:	d811      	bhi.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80062ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ce:	d013      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d4:	d80b      	bhi.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d010      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80062da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062de:	d106      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e0:	4b0e      	ldr	r3, [pc, #56]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	4a0d      	ldr	r2, [pc, #52]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80062e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80062ec:	e007      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
      break;
 80062f2:	e004      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80062f4:	bf00      	nop
 80062f6:	e002      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80062f8:	bf00      	nop
 80062fa:	e000      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80062fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10d      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006312:	4902      	ldr	r1, [pc, #8]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006314:	4313      	orrs	r3, r2
 8006316:	654b      	str	r3, [r1, #84]	; 0x54
 8006318:	e004      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800631a:	bf00      	nop
 800631c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006330:	4b30      	ldr	r3, [pc, #192]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006334:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633c:	492d      	ldr	r1, [pc, #180]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800633e:	4313      	orrs	r3, r2
 8006340:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800634e:	4b29      	ldr	r3, [pc, #164]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006352:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635a:	4926      	ldr	r1, [pc, #152]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800635c:	4313      	orrs	r3, r2
 800635e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800636c:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800636e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006370:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006378:	491e      	ldr	r1, [pc, #120]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800637a:	4313      	orrs	r3, r2
 800637c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00d      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800638a:	4b1a      	ldr	r3, [pc, #104]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006390:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006394:	6113      	str	r3, [r2, #16]
 8006396:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063a0:	4914      	ldr	r1, [pc, #80]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	da08      	bge.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80063b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ba:	490e      	ldr	r1, [pc, #56]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80063ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063da:	4906      	ldr	r1, [pc, #24]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80063e0:	7dbb      	ldrb	r3, [r7, #22]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	58024400 	.word	0x58024400

080063f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80063fc:	f7ff f894 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8006400:	4602      	mov	r2, r0
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	4904      	ldr	r1, [pc, #16]	; (8006420 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800640e:	5ccb      	ldrb	r3, [r1, r3]
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006418:	4618      	mov	r0, r3
 800641a:	bd80      	pop	{r7, pc}
 800641c:	58024400 	.word	0x58024400
 8006420:	0800b27c 	.word	0x0800b27c

08006424 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	; 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800642c:	4ba1      	ldr	r3, [pc, #644]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006436:	4b9f      	ldr	r3, [pc, #636]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	0b1b      	lsrs	r3, r3, #12
 800643c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006440:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006442:	4b9c      	ldr	r3, [pc, #624]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800644e:	4b99      	ldr	r3, [pc, #612]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	08db      	lsrs	r3, r3, #3
 8006454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8111 	beq.w	8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b02      	cmp	r3, #2
 8006476:	f000 8083 	beq.w	8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b02      	cmp	r3, #2
 800647e:	f200 80a1 	bhi.w	80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d056      	beq.n	800653c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800648e:	e099      	b.n	80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006490:	4b88      	ldr	r3, [pc, #544]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d02d      	beq.n	80064f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800649c:	4b85      	ldr	r3, [pc, #532]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	08db      	lsrs	r3, r3, #3
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	4a84      	ldr	r2, [pc, #528]	; (80066b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	ee07 3a90 	vmov	s15, r3
 80064b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c6:	4b7b      	ldr	r3, [pc, #492]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80064f6:	e087      	b.n	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650a:	4b6a      	ldr	r3, [pc, #424]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651a:	ed97 6a03 	vldr	s12, [r7, #12]
 800651e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800652e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800653a:	e065      	b.n	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800654a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654e:	4b59      	ldr	r3, [pc, #356]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006562:	eddf 5a56 	vldr	s11, [pc, #344]	; 80066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800657e:	e043      	b.n	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800658e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006592:	4b48      	ldr	r3, [pc, #288]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065c2:	e021      	b.n	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d6:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006606:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006608:	4b2a      	ldr	r3, [pc, #168]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	0a5b      	lsrs	r3, r3, #9
 800660e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800661e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006622:	edd7 6a07 	vldr	s13, [r7, #28]
 8006626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800662a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800662e:	ee17 2a90 	vmov	r2, s15
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006636:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	0c1b      	lsrs	r3, r3, #16
 800663c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800664c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006650:	edd7 6a07 	vldr	s13, [r7, #28]
 8006654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800665c:	ee17 2a90 	vmov	r2, s15
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006664:	4b13      	ldr	r3, [pc, #76]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	0e1b      	lsrs	r3, r3, #24
 800666a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800667a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800667e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800668a:	ee17 2a90 	vmov	r2, s15
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006692:	e008      	b.n	80066a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	609a      	str	r2, [r3, #8]
}
 80066a6:	bf00      	nop
 80066a8:	3724      	adds	r7, #36	; 0x24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	58024400 	.word	0x58024400
 80066b8:	03d09000 	.word	0x03d09000
 80066bc:	46000000 	.word	0x46000000
 80066c0:	4c742400 	.word	0x4c742400
 80066c4:	4a742400 	.word	0x4a742400
 80066c8:	4af42400 	.word	0x4af42400

080066cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b089      	sub	sp, #36	; 0x24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066d4:	4ba1      	ldr	r3, [pc, #644]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80066de:	4b9f      	ldr	r3, [pc, #636]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	0d1b      	lsrs	r3, r3, #20
 80066e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066ea:	4b9c      	ldr	r3, [pc, #624]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80066f6:	4b99      	ldr	r3, [pc, #612]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	08db      	lsrs	r3, r3, #3
 80066fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8111 	beq.w	800693c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b02      	cmp	r3, #2
 800671e:	f000 8083 	beq.w	8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b02      	cmp	r3, #2
 8006726:	f200 80a1 	bhi.w	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d056      	beq.n	80067e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006736:	e099      	b.n	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006738:	4b88      	ldr	r3, [pc, #544]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d02d      	beq.n	80067a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006744:	4b85      	ldr	r3, [pc, #532]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	08db      	lsrs	r3, r3, #3
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	4a84      	ldr	r2, [pc, #528]	; (8006960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676e:	4b7b      	ldr	r3, [pc, #492]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006782:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800678a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800679e:	e087      	b.n	80068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006968 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80067ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b2:	4b6a      	ldr	r3, [pc, #424]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067e2:	e065      	b.n	80068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800696c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f6:	4b59      	ldr	r3, [pc, #356]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006806:	ed97 6a03 	vldr	s12, [r7, #12]
 800680a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800680e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800681a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006826:	e043      	b.n	80068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006832:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683a:	4b48      	ldr	r3, [pc, #288]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684a:	ed97 6a03 	vldr	s12, [r7, #12]
 800684e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800685e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800686a:	e021      	b.n	80068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006876:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800696c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800687a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687e:	4b37      	ldr	r3, [pc, #220]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006892:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80068b0:	4b2a      	ldr	r3, [pc, #168]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	0a5b      	lsrs	r3, r3, #9
 80068b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ba:	ee07 3a90 	vmov	s15, r3
 80068be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d6:	ee17 2a90 	vmov	r2, s15
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80068de:	4b1f      	ldr	r3, [pc, #124]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	0c1b      	lsrs	r3, r3, #16
 80068e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e8:	ee07 3a90 	vmov	s15, r3
 80068ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006904:	ee17 2a90 	vmov	r2, s15
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800690c:	4b13      	ldr	r3, [pc, #76]	; (800695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	0e1b      	lsrs	r3, r3, #24
 8006912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006926:	edd7 6a07 	vldr	s13, [r7, #28]
 800692a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800692e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006932:	ee17 2a90 	vmov	r2, s15
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800693a:	e008      	b.n	800694e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	609a      	str	r2, [r3, #8]
}
 800694e:	bf00      	nop
 8006950:	3724      	adds	r7, #36	; 0x24
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	58024400 	.word	0x58024400
 8006960:	03d09000 	.word	0x03d09000
 8006964:	46000000 	.word	0x46000000
 8006968:	4c742400 	.word	0x4c742400
 800696c:	4a742400 	.word	0x4a742400
 8006970:	4af42400 	.word	0x4af42400

08006974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006982:	4b53      	ldr	r3, [pc, #332]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	2b03      	cmp	r3, #3
 800698c:	d101      	bne.n	8006992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e099      	b.n	8006ac6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006992:	4b4f      	ldr	r3, [pc, #316]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a4e      	ldr	r2, [pc, #312]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800699c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800699e:	f7fb f95b 	bl	8001c58 <HAL_GetTick>
 80069a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069a4:	e008      	b.n	80069b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80069a6:	f7fb f957 	bl	8001c58 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e086      	b.n	8006ac6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069b8:	4b45      	ldr	r3, [pc, #276]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1f0      	bne.n	80069a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069c4:	4b42      	ldr	r3, [pc, #264]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	031b      	lsls	r3, r3, #12
 80069d2:	493f      	ldr	r1, [pc, #252]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	628b      	str	r3, [r1, #40]	; 0x28
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	3b01      	subs	r3, #1
 80069de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	025b      	lsls	r3, r3, #9
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	041b      	lsls	r3, r3, #16
 80069f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	061b      	lsls	r3, r3, #24
 8006a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a08:	4931      	ldr	r1, [pc, #196]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a0e:	4b30      	ldr	r3, [pc, #192]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	492d      	ldr	r1, [pc, #180]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a20:	4b2b      	ldr	r3, [pc, #172]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	f023 0220 	bic.w	r2, r3, #32
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	4928      	ldr	r1, [pc, #160]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a32:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	4a26      	ldr	r2, [pc, #152]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a38:	f023 0310 	bic.w	r3, r3, #16
 8006a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a3e:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a42:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <RCCEx_PLL2_Config+0x160>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	69d2      	ldr	r2, [r2, #28]
 8006a4a:	00d2      	lsls	r2, r2, #3
 8006a4c:	4920      	ldr	r1, [pc, #128]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a52:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	4a1e      	ldr	r2, [pc, #120]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a58:	f043 0310 	orr.w	r3, r3, #16
 8006a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d106      	bne.n	8006a72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a64:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	4a19      	ldr	r2, [pc, #100]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a70:	e00f      	b.n	8006a92 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d106      	bne.n	8006a86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a78:	4b15      	ldr	r3, [pc, #84]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	4a14      	ldr	r2, [pc, #80]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a84:	e005      	b.n	8006a92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a86:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	4a11      	ldr	r2, [pc, #68]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a92:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a9e:	f7fb f8db 	bl	8001c58 <HAL_GetTick>
 8006aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006aa4:	e008      	b.n	8006ab8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006aa6:	f7fb f8d7 	bl	8001c58 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d901      	bls.n	8006ab8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e006      	b.n	8006ac6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ab8:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <RCCEx_PLL2_Config+0x15c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0f0      	beq.n	8006aa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	ffff0007 	.word	0xffff0007

08006ad8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ae6:	4b53      	ldr	r3, [pc, #332]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d101      	bne.n	8006af6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e099      	b.n	8006c2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006af6:	4b4f      	ldr	r3, [pc, #316]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a4e      	ldr	r2, [pc, #312]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b02:	f7fb f8a9 	bl	8001c58 <HAL_GetTick>
 8006b06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b08:	e008      	b.n	8006b1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b0a:	f7fb f8a5 	bl	8001c58 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e086      	b.n	8006c2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b1c:	4b45      	ldr	r3, [pc, #276]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f0      	bne.n	8006b0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b28:	4b42      	ldr	r3, [pc, #264]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	493f      	ldr	r1, [pc, #252]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	628b      	str	r3, [r1, #40]	; 0x28
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	025b      	lsls	r3, r3, #9
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	041b      	lsls	r3, r3, #16
 8006b5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	061b      	lsls	r3, r3, #24
 8006b68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b6c:	4931      	ldr	r1, [pc, #196]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b72:	4b30      	ldr	r3, [pc, #192]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	492d      	ldr	r1, [pc, #180]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b84:	4b2b      	ldr	r3, [pc, #172]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	4928      	ldr	r1, [pc, #160]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b96:	4b27      	ldr	r3, [pc, #156]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	4a26      	ldr	r2, [pc, #152]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ba2:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ba6:	4b24      	ldr	r3, [pc, #144]	; (8006c38 <RCCEx_PLL3_Config+0x160>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	69d2      	ldr	r2, [r2, #28]
 8006bae:	00d2      	lsls	r2, r2, #3
 8006bb0:	4920      	ldr	r1, [pc, #128]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006bb6:	4b1f      	ldr	r3, [pc, #124]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d106      	bne.n	8006bd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006bc8:	4b1a      	ldr	r3, [pc, #104]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bd4:	e00f      	b.n	8006bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d106      	bne.n	8006bea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006bdc:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	4a14      	ldr	r2, [pc, #80]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006be2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006be8:	e005      	b.n	8006bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bea:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	4a11      	ldr	r2, [pc, #68]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a0e      	ldr	r2, [pc, #56]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c02:	f7fb f829 	bl	8001c58 <HAL_GetTick>
 8006c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c08:	e008      	b.n	8006c1c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c0a:	f7fb f825 	bl	8001c58 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e006      	b.n	8006c2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <RCCEx_PLL3_Config+0x15c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f0      	beq.n	8006c0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	58024400 	.word	0x58024400
 8006c38:	ffff0007 	.word	0xffff0007

08006c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e042      	b.n	8006cd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7fa fd41 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2224      	movs	r2, #36	; 0x24
 8006c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fbea 	bl	8007458 <UART_SetConfig>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d101      	bne.n	8006c8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e022      	b.n	8006cd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fa4a 	bl	8008130 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689a      	ldr	r2, [r3, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fad1 	bl	8008274 <UART_CheckIdleState>
 8006cd2:	4603      	mov	r3, r0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b0ba      	sub	sp, #232	; 0xe8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d06:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d11b      	bne.n	8006d50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1c:	f003 0320 	and.w	r3, r3, #32
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d015      	beq.n	8006d50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d105      	bne.n	8006d3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 835a 	beq.w	80073fa <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
      }
      return;
 8006d4e:	e354      	b.n	80073fa <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 811f 	beq.w	8006f98 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d5e:	4b8b      	ldr	r3, [pc, #556]	; (8006f8c <HAL_UART_IRQHandler+0x2b0>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d6a:	4b89      	ldr	r3, [pc, #548]	; (8006f90 <HAL_UART_IRQHandler+0x2b4>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8112 	beq.w	8006f98 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d011      	beq.n	8006da4 <HAL_UART_IRQHandler+0xc8>
 8006d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00b      	beq.n	8006da4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2201      	movs	r2, #1
 8006d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d9a:	f043 0201 	orr.w	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d011      	beq.n	8006dd4 <HAL_UART_IRQHandler+0xf8>
 8006db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00b      	beq.n	8006dd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dca:	f043 0204 	orr.w	r2, r3, #4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d011      	beq.n	8006e04 <HAL_UART_IRQHandler+0x128>
 8006de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2204      	movs	r2, #4
 8006df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dfa:	f043 0202 	orr.w	r2, r3, #2
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d017      	beq.n	8006e40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006e20:	4b5a      	ldr	r3, [pc, #360]	; (8006f8c <HAL_UART_IRQHandler+0x2b0>)
 8006e22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e36:	f043 0208 	orr.w	r2, r3, #8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d012      	beq.n	8006e72 <HAL_UART_IRQHandler+0x196>
 8006e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00c      	beq.n	8006e72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e68:	f043 0220 	orr.w	r2, r3, #32
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 82c0 	beq.w	80073fe <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d013      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d105      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d005      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ece:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d04f      	beq.n	8006f76 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fae0 	bl	800849c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d141      	bne.n	8006f6e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3308      	adds	r3, #8
 8006f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1d9      	bne.n	8006eea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d013      	beq.n	8006f66 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f42:	4a14      	ldr	r2, [pc, #80]	; (8006f94 <HAL_UART_IRQHandler+0x2b8>)
 8006f44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fb fae2 	bl	8002514 <HAL_DMA_Abort_IT>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d017      	beq.n	8006f86 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006f60:	4610      	mov	r0, r2
 8006f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f64:	e00f      	b.n	8006f86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa60 	bl	800742c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f6c:	e00b      	b.n	8006f86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa5c 	bl	800742c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f74:	e007      	b.n	8006f86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa58 	bl	800742c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006f84:	e23b      	b.n	80073fe <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f86:	bf00      	nop
    return;
 8006f88:	e239      	b.n	80073fe <HAL_UART_IRQHandler+0x722>
 8006f8a:	bf00      	nop
 8006f8c:	10000001 	.word	0x10000001
 8006f90:	04000120 	.word	0x04000120
 8006f94:	08008569 	.word	0x08008569

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	f040 81ce 	bne.w	800733e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 81c7 	beq.w	800733e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 81c0 	beq.w	800733e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2210      	movs	r2, #16
 8006fc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	f040 813b 	bne.w	800724c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a8b      	ldr	r2, [pc, #556]	; (800720c <HAL_UART_IRQHandler+0x530>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d059      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a89      	ldr	r2, [pc, #548]	; (8007210 <HAL_UART_IRQHandler+0x534>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d053      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a87      	ldr	r2, [pc, #540]	; (8007214 <HAL_UART_IRQHandler+0x538>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d04d      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a85      	ldr	r2, [pc, #532]	; (8007218 <HAL_UART_IRQHandler+0x53c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d047      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a83      	ldr	r2, [pc, #524]	; (800721c <HAL_UART_IRQHandler+0x540>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d041      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a81      	ldr	r2, [pc, #516]	; (8007220 <HAL_UART_IRQHandler+0x544>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d03b      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a7f      	ldr	r2, [pc, #508]	; (8007224 <HAL_UART_IRQHandler+0x548>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d035      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a7d      	ldr	r2, [pc, #500]	; (8007228 <HAL_UART_IRQHandler+0x54c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02f      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a7b      	ldr	r2, [pc, #492]	; (800722c <HAL_UART_IRQHandler+0x550>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d029      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a79      	ldr	r2, [pc, #484]	; (8007230 <HAL_UART_IRQHandler+0x554>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d023      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a77      	ldr	r2, [pc, #476]	; (8007234 <HAL_UART_IRQHandler+0x558>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d01d      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a75      	ldr	r2, [pc, #468]	; (8007238 <HAL_UART_IRQHandler+0x55c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d017      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a73      	ldr	r2, [pc, #460]	; (800723c <HAL_UART_IRQHandler+0x560>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d011      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a71      	ldr	r2, [pc, #452]	; (8007240 <HAL_UART_IRQHandler+0x564>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00b      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a6f      	ldr	r2, [pc, #444]	; (8007244 <HAL_UART_IRQHandler+0x568>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d005      	beq.n	8007096 <HAL_UART_IRQHandler+0x3ba>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a6d      	ldr	r2, [pc, #436]	; (8007248 <HAL_UART_IRQHandler+0x56c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d105      	bne.n	80070a2 <HAL_UART_IRQHandler+0x3c6>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	e004      	b.n	80070ac <HAL_UART_IRQHandler+0x3d0>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 81a4 	beq.w	8007402 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070c4:	429a      	cmp	r2, r3
 80070c6:	f080 819c 	bcs.w	8007402 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070de:	f000 8086 	beq.w	80071ee <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800710c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007110:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007118:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1da      	bne.n	80070e2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800713c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800713e:	f023 0301 	bic.w	r3, r3, #1
 8007142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007150:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007154:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007158:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e1      	bne.n	800712c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800717a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3308      	adds	r3, #8
 8007188:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800718c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800718e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007192:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800719a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e3      	bne.n	8007168 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071be:	f023 0310 	bic.w	r3, r3, #16
 80071c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80071d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e4      	bne.n	80071ae <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fa fe75 	bl	8001ed8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f91c 	bl	8007440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007208:	e0fb      	b.n	8007402 <HAL_UART_IRQHandler+0x726>
 800720a:	bf00      	nop
 800720c:	40020010 	.word	0x40020010
 8007210:	40020028 	.word	0x40020028
 8007214:	40020040 	.word	0x40020040
 8007218:	40020058 	.word	0x40020058
 800721c:	40020070 	.word	0x40020070
 8007220:	40020088 	.word	0x40020088
 8007224:	400200a0 	.word	0x400200a0
 8007228:	400200b8 	.word	0x400200b8
 800722c:	40020410 	.word	0x40020410
 8007230:	40020428 	.word	0x40020428
 8007234:	40020440 	.word	0x40020440
 8007238:	40020458 	.word	0x40020458
 800723c:	40020470 	.word	0x40020470
 8007240:	40020488 	.word	0x40020488
 8007244:	400204a0 	.word	0x400204a0
 8007248:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007258:	b29b      	uxth	r3, r3
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007266:	b29b      	uxth	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 80cc 	beq.w	8007406 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800726e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80c7 	beq.w	8007406 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800728c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800729a:	647b      	str	r3, [r7, #68]	; 0x44
 800729c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e4      	bne.n	8007278 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3308      	adds	r3, #8
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	623b      	str	r3, [r7, #32]
   return(result);
 80072be:	6a3a      	ldr	r2, [r7, #32]
 80072c0:	4b54      	ldr	r3, [pc, #336]	; (8007414 <HAL_UART_IRQHandler+0x738>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3308      	adds	r3, #8
 80072ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072d2:	633a      	str	r2, [r7, #48]	; 0x30
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e3      	bne.n	80072ae <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	60fb      	str	r3, [r7, #12]
   return(result);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 0310 	bic.w	r3, r3, #16
 800730e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800731c:	61fb      	str	r3, [r7, #28]
 800731e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	69b9      	ldr	r1, [r7, #24]
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	617b      	str	r3, [r7, #20]
   return(result);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e4      	bne.n	80072fa <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f882 	bl	8007440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800733c:	e063      	b.n	8007406 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800733e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <HAL_UART_IRQHandler+0x68c>
 800734a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800734e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d008      	beq.n	8007368 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800735e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f942 	bl	80085ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007366:	e051      	b.n	800740c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007370:	2b00      	cmp	r3, #0
 8007372:	d014      	beq.n	800739e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737c:	2b00      	cmp	r3, #0
 800737e:	d105      	bne.n	800738c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007390:	2b00      	cmp	r3, #0
 8007392:	d03a      	beq.n	800740a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	4798      	blx	r3
    }
    return;
 800739c:	e035      	b.n	800740a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800739e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <HAL_UART_IRQHandler+0x6e2>
 80073aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 f8ec 	bl	8008594 <UART_EndTransmit_IT>
    return;
 80073bc:	e026      	b.n	800740c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <HAL_UART_IRQHandler+0x702>
 80073ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 f91b 	bl	8008612 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073dc:	e016      	b.n	800740c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d010      	beq.n	800740c <HAL_UART_IRQHandler+0x730>
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da0c      	bge.n	800740c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 f903 	bl	80085fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073f8:	e008      	b.n	800740c <HAL_UART_IRQHandler+0x730>
      return;
 80073fa:	bf00      	nop
 80073fc:	e006      	b.n	800740c <HAL_UART_IRQHandler+0x730>
    return;
 80073fe:	bf00      	nop
 8007400:	e004      	b.n	800740c <HAL_UART_IRQHandler+0x730>
      return;
 8007402:	bf00      	nop
 8007404:	e002      	b.n	800740c <HAL_UART_IRQHandler+0x730>
      return;
 8007406:	bf00      	nop
 8007408:	e000      	b.n	800740c <HAL_UART_IRQHandler+0x730>
    return;
 800740a:	bf00      	nop
  }
}
 800740c:	37e8      	adds	r7, #232	; 0xe8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	effffffe 	.word	0xeffffffe

08007418 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800745c:	b092      	sub	sp, #72	; 0x48
 800745e:	af00      	add	r7, sp, #0
 8007460:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	431a      	orrs	r2, r3
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	431a      	orrs	r2, r3
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	4313      	orrs	r3, r2
 800747e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	4bbe      	ldr	r3, [pc, #760]	; (8007780 <UART_SetConfig+0x328>)
 8007488:	4013      	ands	r3, r2
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007490:	430b      	orrs	r3, r1
 8007492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4ab3      	ldr	r2, [pc, #716]	; (8007784 <UART_SetConfig+0x32c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d004      	beq.n	80074c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c0:	4313      	orrs	r3, r2
 80074c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	4baf      	ldr	r3, [pc, #700]	; (8007788 <UART_SetConfig+0x330>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074d4:	430b      	orrs	r3, r1
 80074d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	f023 010f 	bic.w	r1, r3, #15
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4aa6      	ldr	r2, [pc, #664]	; (800778c <UART_SetConfig+0x334>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d177      	bne.n	80075e8 <UART_SetConfig+0x190>
 80074f8:	4ba5      	ldr	r3, [pc, #660]	; (8007790 <UART_SetConfig+0x338>)
 80074fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007500:	2b28      	cmp	r3, #40	; 0x28
 8007502:	d86d      	bhi.n	80075e0 <UART_SetConfig+0x188>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <UART_SetConfig+0xb4>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	080075b1 	.word	0x080075b1
 8007510:	080075e1 	.word	0x080075e1
 8007514:	080075e1 	.word	0x080075e1
 8007518:	080075e1 	.word	0x080075e1
 800751c:	080075e1 	.word	0x080075e1
 8007520:	080075e1 	.word	0x080075e1
 8007524:	080075e1 	.word	0x080075e1
 8007528:	080075e1 	.word	0x080075e1
 800752c:	080075b9 	.word	0x080075b9
 8007530:	080075e1 	.word	0x080075e1
 8007534:	080075e1 	.word	0x080075e1
 8007538:	080075e1 	.word	0x080075e1
 800753c:	080075e1 	.word	0x080075e1
 8007540:	080075e1 	.word	0x080075e1
 8007544:	080075e1 	.word	0x080075e1
 8007548:	080075e1 	.word	0x080075e1
 800754c:	080075c1 	.word	0x080075c1
 8007550:	080075e1 	.word	0x080075e1
 8007554:	080075e1 	.word	0x080075e1
 8007558:	080075e1 	.word	0x080075e1
 800755c:	080075e1 	.word	0x080075e1
 8007560:	080075e1 	.word	0x080075e1
 8007564:	080075e1 	.word	0x080075e1
 8007568:	080075e1 	.word	0x080075e1
 800756c:	080075c9 	.word	0x080075c9
 8007570:	080075e1 	.word	0x080075e1
 8007574:	080075e1 	.word	0x080075e1
 8007578:	080075e1 	.word	0x080075e1
 800757c:	080075e1 	.word	0x080075e1
 8007580:	080075e1 	.word	0x080075e1
 8007584:	080075e1 	.word	0x080075e1
 8007588:	080075e1 	.word	0x080075e1
 800758c:	080075d1 	.word	0x080075d1
 8007590:	080075e1 	.word	0x080075e1
 8007594:	080075e1 	.word	0x080075e1
 8007598:	080075e1 	.word	0x080075e1
 800759c:	080075e1 	.word	0x080075e1
 80075a0:	080075e1 	.word	0x080075e1
 80075a4:	080075e1 	.word	0x080075e1
 80075a8:	080075e1 	.word	0x080075e1
 80075ac:	080075d9 	.word	0x080075d9
 80075b0:	2301      	movs	r3, #1
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b6:	e326      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80075b8:	2304      	movs	r3, #4
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075be:	e322      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80075c0:	2308      	movs	r3, #8
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c6:	e31e      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80075c8:	2310      	movs	r3, #16
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ce:	e31a      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80075d0:	2320      	movs	r3, #32
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d6:	e316      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80075d8:	2340      	movs	r3, #64	; 0x40
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075de:	e312      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80075e0:	2380      	movs	r3, #128	; 0x80
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e30e      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a69      	ldr	r2, [pc, #420]	; (8007794 <UART_SetConfig+0x33c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d130      	bne.n	8007654 <UART_SetConfig+0x1fc>
 80075f2:	4b67      	ldr	r3, [pc, #412]	; (8007790 <UART_SetConfig+0x338>)
 80075f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b05      	cmp	r3, #5
 80075fc:	d826      	bhi.n	800764c <UART_SetConfig+0x1f4>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <UART_SetConfig+0x1ac>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	0800761d 	.word	0x0800761d
 8007608:	08007625 	.word	0x08007625
 800760c:	0800762d 	.word	0x0800762d
 8007610:	08007635 	.word	0x08007635
 8007614:	0800763d 	.word	0x0800763d
 8007618:	08007645 	.word	0x08007645
 800761c:	2300      	movs	r3, #0
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007622:	e2f0      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007624:	2304      	movs	r3, #4
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762a:	e2ec      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800762c:	2308      	movs	r3, #8
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007632:	e2e8      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007634:	2310      	movs	r3, #16
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763a:	e2e4      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800763c:	2320      	movs	r3, #32
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007642:	e2e0      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007644:	2340      	movs	r3, #64	; 0x40
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764a:	e2dc      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800764c:	2380      	movs	r3, #128	; 0x80
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007652:	e2d8      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a4f      	ldr	r2, [pc, #316]	; (8007798 <UART_SetConfig+0x340>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d130      	bne.n	80076c0 <UART_SetConfig+0x268>
 800765e:	4b4c      	ldr	r3, [pc, #304]	; (8007790 <UART_SetConfig+0x338>)
 8007660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b05      	cmp	r3, #5
 8007668:	d826      	bhi.n	80076b8 <UART_SetConfig+0x260>
 800766a:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <UART_SetConfig+0x218>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	08007689 	.word	0x08007689
 8007674:	08007691 	.word	0x08007691
 8007678:	08007699 	.word	0x08007699
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076a9 	.word	0x080076a9
 8007684:	080076b1 	.word	0x080076b1
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768e:	e2ba      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007690:	2304      	movs	r3, #4
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007696:	e2b6      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007698:	2308      	movs	r3, #8
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769e:	e2b2      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80076a0:	2310      	movs	r3, #16
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a6:	e2ae      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80076a8:	2320      	movs	r3, #32
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ae:	e2aa      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80076b0:	2340      	movs	r3, #64	; 0x40
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b6:	e2a6      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80076b8:	2380      	movs	r3, #128	; 0x80
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076be:	e2a2      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a35      	ldr	r2, [pc, #212]	; (800779c <UART_SetConfig+0x344>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d130      	bne.n	800772c <UART_SetConfig+0x2d4>
 80076ca:	4b31      	ldr	r3, [pc, #196]	; (8007790 <UART_SetConfig+0x338>)
 80076cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	2b05      	cmp	r3, #5
 80076d4:	d826      	bhi.n	8007724 <UART_SetConfig+0x2cc>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0x284>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	080076f5 	.word	0x080076f5
 80076e0:	080076fd 	.word	0x080076fd
 80076e4:	08007705 	.word	0x08007705
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	08007715 	.word	0x08007715
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fa:	e284      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80076fc:	2304      	movs	r3, #4
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007702:	e280      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007704:	2308      	movs	r3, #8
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770a:	e27c      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800770c:	2310      	movs	r3, #16
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007712:	e278      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007714:	2320      	movs	r3, #32
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e274      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800771c:	2340      	movs	r3, #64	; 0x40
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e270      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007724:	2380      	movs	r3, #128	; 0x80
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e26c      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a1b      	ldr	r2, [pc, #108]	; (80077a0 <UART_SetConfig+0x348>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d142      	bne.n	80077bc <UART_SetConfig+0x364>
 8007736:	4b16      	ldr	r3, [pc, #88]	; (8007790 <UART_SetConfig+0x338>)
 8007738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	2b05      	cmp	r3, #5
 8007740:	d838      	bhi.n	80077b4 <UART_SetConfig+0x35c>
 8007742:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <UART_SetConfig+0x2f0>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	08007761 	.word	0x08007761
 800774c:	08007769 	.word	0x08007769
 8007750:	08007771 	.word	0x08007771
 8007754:	08007779 	.word	0x08007779
 8007758:	080077a5 	.word	0x080077a5
 800775c:	080077ad 	.word	0x080077ad
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007766:	e24e      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007768:	2304      	movs	r3, #4
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e24a      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007770:	2308      	movs	r3, #8
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e246      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007778:	2310      	movs	r3, #16
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777e:	e242      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007780:	cfff69f3 	.word	0xcfff69f3
 8007784:	58000c00 	.word	0x58000c00
 8007788:	11fff4ff 	.word	0x11fff4ff
 800778c:	40011000 	.word	0x40011000
 8007790:	58024400 	.word	0x58024400
 8007794:	40004400 	.word	0x40004400
 8007798:	40004800 	.word	0x40004800
 800779c:	40004c00 	.word	0x40004c00
 80077a0:	40005000 	.word	0x40005000
 80077a4:	2320      	movs	r3, #32
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077aa:	e22c      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b2:	e228      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80077b4:	2380      	movs	r3, #128	; 0x80
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ba:	e224      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4ab1      	ldr	r2, [pc, #708]	; (8007a88 <UART_SetConfig+0x630>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d176      	bne.n	80078b4 <UART_SetConfig+0x45c>
 80077c6:	4bb1      	ldr	r3, [pc, #708]	; (8007a8c <UART_SetConfig+0x634>)
 80077c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ce:	2b28      	cmp	r3, #40	; 0x28
 80077d0:	d86c      	bhi.n	80078ac <UART_SetConfig+0x454>
 80077d2:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0x380>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	0800787d 	.word	0x0800787d
 80077dc:	080078ad 	.word	0x080078ad
 80077e0:	080078ad 	.word	0x080078ad
 80077e4:	080078ad 	.word	0x080078ad
 80077e8:	080078ad 	.word	0x080078ad
 80077ec:	080078ad 	.word	0x080078ad
 80077f0:	080078ad 	.word	0x080078ad
 80077f4:	080078ad 	.word	0x080078ad
 80077f8:	08007885 	.word	0x08007885
 80077fc:	080078ad 	.word	0x080078ad
 8007800:	080078ad 	.word	0x080078ad
 8007804:	080078ad 	.word	0x080078ad
 8007808:	080078ad 	.word	0x080078ad
 800780c:	080078ad 	.word	0x080078ad
 8007810:	080078ad 	.word	0x080078ad
 8007814:	080078ad 	.word	0x080078ad
 8007818:	0800788d 	.word	0x0800788d
 800781c:	080078ad 	.word	0x080078ad
 8007820:	080078ad 	.word	0x080078ad
 8007824:	080078ad 	.word	0x080078ad
 8007828:	080078ad 	.word	0x080078ad
 800782c:	080078ad 	.word	0x080078ad
 8007830:	080078ad 	.word	0x080078ad
 8007834:	080078ad 	.word	0x080078ad
 8007838:	08007895 	.word	0x08007895
 800783c:	080078ad 	.word	0x080078ad
 8007840:	080078ad 	.word	0x080078ad
 8007844:	080078ad 	.word	0x080078ad
 8007848:	080078ad 	.word	0x080078ad
 800784c:	080078ad 	.word	0x080078ad
 8007850:	080078ad 	.word	0x080078ad
 8007854:	080078ad 	.word	0x080078ad
 8007858:	0800789d 	.word	0x0800789d
 800785c:	080078ad 	.word	0x080078ad
 8007860:	080078ad 	.word	0x080078ad
 8007864:	080078ad 	.word	0x080078ad
 8007868:	080078ad 	.word	0x080078ad
 800786c:	080078ad 	.word	0x080078ad
 8007870:	080078ad 	.word	0x080078ad
 8007874:	080078ad 	.word	0x080078ad
 8007878:	080078a5 	.word	0x080078a5
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007882:	e1c0      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007884:	2304      	movs	r3, #4
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788a:	e1bc      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800788c:	2308      	movs	r3, #8
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007892:	e1b8      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007894:	2310      	movs	r3, #16
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789a:	e1b4      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800789c:	2320      	movs	r3, #32
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a2:	e1b0      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80078a4:	2340      	movs	r3, #64	; 0x40
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078aa:	e1ac      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80078ac:	2380      	movs	r3, #128	; 0x80
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b2:	e1a8      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a75      	ldr	r2, [pc, #468]	; (8007a90 <UART_SetConfig+0x638>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d130      	bne.n	8007920 <UART_SetConfig+0x4c8>
 80078be:	4b73      	ldr	r3, [pc, #460]	; (8007a8c <UART_SetConfig+0x634>)
 80078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	d826      	bhi.n	8007918 <UART_SetConfig+0x4c0>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <UART_SetConfig+0x478>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078e9 	.word	0x080078e9
 80078d4:	080078f1 	.word	0x080078f1
 80078d8:	080078f9 	.word	0x080078f9
 80078dc:	08007901 	.word	0x08007901
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007911 	.word	0x08007911
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e18a      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80078f0:	2304      	movs	r3, #4
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e186      	b.n	8007c06 <UART_SetConfig+0x7ae>
 80078f8:	2308      	movs	r3, #8
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fe:	e182      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007900:	2310      	movs	r3, #16
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007906:	e17e      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007908:	2320      	movs	r3, #32
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790e:	e17a      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007910:	2340      	movs	r3, #64	; 0x40
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007916:	e176      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007918:	2380      	movs	r3, #128	; 0x80
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791e:	e172      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a5b      	ldr	r2, [pc, #364]	; (8007a94 <UART_SetConfig+0x63c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d130      	bne.n	800798c <UART_SetConfig+0x534>
 800792a:	4b58      	ldr	r3, [pc, #352]	; (8007a8c <UART_SetConfig+0x634>)
 800792c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	2b05      	cmp	r3, #5
 8007934:	d826      	bhi.n	8007984 <UART_SetConfig+0x52c>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <UART_SetConfig+0x4e4>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007955 	.word	0x08007955
 8007940:	0800795d 	.word	0x0800795d
 8007944:	08007965 	.word	0x08007965
 8007948:	0800796d 	.word	0x0800796d
 800794c:	08007975 	.word	0x08007975
 8007950:	0800797d 	.word	0x0800797d
 8007954:	2300      	movs	r3, #0
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e154      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800795c:	2304      	movs	r3, #4
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007962:	e150      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007964:	2308      	movs	r3, #8
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796a:	e14c      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800796c:	2310      	movs	r3, #16
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007972:	e148      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007974:	2320      	movs	r3, #32
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797a:	e144      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800797c:	2340      	movs	r3, #64	; 0x40
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007982:	e140      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798a:	e13c      	b.n	8007c06 <UART_SetConfig+0x7ae>
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a41      	ldr	r2, [pc, #260]	; (8007a98 <UART_SetConfig+0x640>)
 8007992:	4293      	cmp	r3, r2
 8007994:	f040 8082 	bne.w	8007a9c <UART_SetConfig+0x644>
 8007998:	4b3c      	ldr	r3, [pc, #240]	; (8007a8c <UART_SetConfig+0x634>)
 800799a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079a0:	2b28      	cmp	r3, #40	; 0x28
 80079a2:	d86d      	bhi.n	8007a80 <UART_SetConfig+0x628>
 80079a4:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <UART_SetConfig+0x554>)
 80079a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079aa:	bf00      	nop
 80079ac:	08007a51 	.word	0x08007a51
 80079b0:	08007a81 	.word	0x08007a81
 80079b4:	08007a81 	.word	0x08007a81
 80079b8:	08007a81 	.word	0x08007a81
 80079bc:	08007a81 	.word	0x08007a81
 80079c0:	08007a81 	.word	0x08007a81
 80079c4:	08007a81 	.word	0x08007a81
 80079c8:	08007a81 	.word	0x08007a81
 80079cc:	08007a59 	.word	0x08007a59
 80079d0:	08007a81 	.word	0x08007a81
 80079d4:	08007a81 	.word	0x08007a81
 80079d8:	08007a81 	.word	0x08007a81
 80079dc:	08007a81 	.word	0x08007a81
 80079e0:	08007a81 	.word	0x08007a81
 80079e4:	08007a81 	.word	0x08007a81
 80079e8:	08007a81 	.word	0x08007a81
 80079ec:	08007a61 	.word	0x08007a61
 80079f0:	08007a81 	.word	0x08007a81
 80079f4:	08007a81 	.word	0x08007a81
 80079f8:	08007a81 	.word	0x08007a81
 80079fc:	08007a81 	.word	0x08007a81
 8007a00:	08007a81 	.word	0x08007a81
 8007a04:	08007a81 	.word	0x08007a81
 8007a08:	08007a81 	.word	0x08007a81
 8007a0c:	08007a69 	.word	0x08007a69
 8007a10:	08007a81 	.word	0x08007a81
 8007a14:	08007a81 	.word	0x08007a81
 8007a18:	08007a81 	.word	0x08007a81
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007a81 	.word	0x08007a81
 8007a24:	08007a81 	.word	0x08007a81
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a71 	.word	0x08007a71
 8007a30:	08007a81 	.word	0x08007a81
 8007a34:	08007a81 	.word	0x08007a81
 8007a38:	08007a81 	.word	0x08007a81
 8007a3c:	08007a81 	.word	0x08007a81
 8007a40:	08007a81 	.word	0x08007a81
 8007a44:	08007a81 	.word	0x08007a81
 8007a48:	08007a81 	.word	0x08007a81
 8007a4c:	08007a79 	.word	0x08007a79
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e0d6      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5e:	e0d2      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007a60:	2308      	movs	r3, #8
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a66:	e0ce      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6e:	e0ca      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007a70:	2320      	movs	r3, #32
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a76:	e0c6      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007a78:	2340      	movs	r3, #64	; 0x40
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7e:	e0c2      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a86:	e0be      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007a88:	40011400 	.word	0x40011400
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	40007800 	.word	0x40007800
 8007a94:	40007c00 	.word	0x40007c00
 8007a98:	40011800 	.word	0x40011800
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4aad      	ldr	r2, [pc, #692]	; (8007d58 <UART_SetConfig+0x900>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d176      	bne.n	8007b94 <UART_SetConfig+0x73c>
 8007aa6:	4bad      	ldr	r3, [pc, #692]	; (8007d5c <UART_SetConfig+0x904>)
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aae:	2b28      	cmp	r3, #40	; 0x28
 8007ab0:	d86c      	bhi.n	8007b8c <UART_SetConfig+0x734>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <UART_SetConfig+0x660>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007b5d 	.word	0x08007b5d
 8007abc:	08007b8d 	.word	0x08007b8d
 8007ac0:	08007b8d 	.word	0x08007b8d
 8007ac4:	08007b8d 	.word	0x08007b8d
 8007ac8:	08007b8d 	.word	0x08007b8d
 8007acc:	08007b8d 	.word	0x08007b8d
 8007ad0:	08007b8d 	.word	0x08007b8d
 8007ad4:	08007b8d 	.word	0x08007b8d
 8007ad8:	08007b65 	.word	0x08007b65
 8007adc:	08007b8d 	.word	0x08007b8d
 8007ae0:	08007b8d 	.word	0x08007b8d
 8007ae4:	08007b8d 	.word	0x08007b8d
 8007ae8:	08007b8d 	.word	0x08007b8d
 8007aec:	08007b8d 	.word	0x08007b8d
 8007af0:	08007b8d 	.word	0x08007b8d
 8007af4:	08007b8d 	.word	0x08007b8d
 8007af8:	08007b6d 	.word	0x08007b6d
 8007afc:	08007b8d 	.word	0x08007b8d
 8007b00:	08007b8d 	.word	0x08007b8d
 8007b04:	08007b8d 	.word	0x08007b8d
 8007b08:	08007b8d 	.word	0x08007b8d
 8007b0c:	08007b8d 	.word	0x08007b8d
 8007b10:	08007b8d 	.word	0x08007b8d
 8007b14:	08007b8d 	.word	0x08007b8d
 8007b18:	08007b75 	.word	0x08007b75
 8007b1c:	08007b8d 	.word	0x08007b8d
 8007b20:	08007b8d 	.word	0x08007b8d
 8007b24:	08007b8d 	.word	0x08007b8d
 8007b28:	08007b8d 	.word	0x08007b8d
 8007b2c:	08007b8d 	.word	0x08007b8d
 8007b30:	08007b8d 	.word	0x08007b8d
 8007b34:	08007b8d 	.word	0x08007b8d
 8007b38:	08007b7d 	.word	0x08007b7d
 8007b3c:	08007b8d 	.word	0x08007b8d
 8007b40:	08007b8d 	.word	0x08007b8d
 8007b44:	08007b8d 	.word	0x08007b8d
 8007b48:	08007b8d 	.word	0x08007b8d
 8007b4c:	08007b8d 	.word	0x08007b8d
 8007b50:	08007b8d 	.word	0x08007b8d
 8007b54:	08007b8d 	.word	0x08007b8d
 8007b58:	08007b85 	.word	0x08007b85
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b62:	e050      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007b64:	2304      	movs	r3, #4
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6a:	e04c      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007b6c:	2308      	movs	r3, #8
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b72:	e048      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007b74:	2310      	movs	r3, #16
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7a:	e044      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007b7c:	2320      	movs	r3, #32
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b82:	e040      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007b84:	2340      	movs	r3, #64	; 0x40
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8a:	e03c      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007b8c:	2380      	movs	r3, #128	; 0x80
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b92:	e038      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a71      	ldr	r2, [pc, #452]	; (8007d60 <UART_SetConfig+0x908>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d130      	bne.n	8007c00 <UART_SetConfig+0x7a8>
 8007b9e:	4b6f      	ldr	r3, [pc, #444]	; (8007d5c <UART_SetConfig+0x904>)
 8007ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	2b05      	cmp	r3, #5
 8007ba8:	d826      	bhi.n	8007bf8 <UART_SetConfig+0x7a0>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <UART_SetConfig+0x758>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007bc9 	.word	0x08007bc9
 8007bb4:	08007bd1 	.word	0x08007bd1
 8007bb8:	08007bd9 	.word	0x08007bd9
 8007bbc:	08007be1 	.word	0x08007be1
 8007bc0:	08007be9 	.word	0x08007be9
 8007bc4:	08007bf1 	.word	0x08007bf1
 8007bc8:	2302      	movs	r3, #2
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bce:	e01a      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007bd0:	2304      	movs	r3, #4
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bd6:	e016      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007bd8:	2308      	movs	r3, #8
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bde:	e012      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007be0:	2310      	movs	r3, #16
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be6:	e00e      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007be8:	2320      	movs	r3, #32
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bee:	e00a      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007bf0:	2340      	movs	r3, #64	; 0x40
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf6:	e006      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007bf8:	2380      	movs	r3, #128	; 0x80
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfe:	e002      	b.n	8007c06 <UART_SetConfig+0x7ae>
 8007c00:	2380      	movs	r3, #128	; 0x80
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a55      	ldr	r2, [pc, #340]	; (8007d60 <UART_SetConfig+0x908>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	f040 80f8 	bne.w	8007e02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	dc46      	bgt.n	8007ca8 <UART_SetConfig+0x850>
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	db75      	blt.n	8007d0a <UART_SetConfig+0x8b2>
 8007c1e:	3b02      	subs	r3, #2
 8007c20:	2b1e      	cmp	r3, #30
 8007c22:	d872      	bhi.n	8007d0a <UART_SetConfig+0x8b2>
 8007c24:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0x7d4>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007caf 	.word	0x08007caf
 8007c30:	08007d0b 	.word	0x08007d0b
 8007c34:	08007cb7 	.word	0x08007cb7
 8007c38:	08007d0b 	.word	0x08007d0b
 8007c3c:	08007d0b 	.word	0x08007d0b
 8007c40:	08007d0b 	.word	0x08007d0b
 8007c44:	08007cc7 	.word	0x08007cc7
 8007c48:	08007d0b 	.word	0x08007d0b
 8007c4c:	08007d0b 	.word	0x08007d0b
 8007c50:	08007d0b 	.word	0x08007d0b
 8007c54:	08007d0b 	.word	0x08007d0b
 8007c58:	08007d0b 	.word	0x08007d0b
 8007c5c:	08007d0b 	.word	0x08007d0b
 8007c60:	08007d0b 	.word	0x08007d0b
 8007c64:	08007cd7 	.word	0x08007cd7
 8007c68:	08007d0b 	.word	0x08007d0b
 8007c6c:	08007d0b 	.word	0x08007d0b
 8007c70:	08007d0b 	.word	0x08007d0b
 8007c74:	08007d0b 	.word	0x08007d0b
 8007c78:	08007d0b 	.word	0x08007d0b
 8007c7c:	08007d0b 	.word	0x08007d0b
 8007c80:	08007d0b 	.word	0x08007d0b
 8007c84:	08007d0b 	.word	0x08007d0b
 8007c88:	08007d0b 	.word	0x08007d0b
 8007c8c:	08007d0b 	.word	0x08007d0b
 8007c90:	08007d0b 	.word	0x08007d0b
 8007c94:	08007d0b 	.word	0x08007d0b
 8007c98:	08007d0b 	.word	0x08007d0b
 8007c9c:	08007d0b 	.word	0x08007d0b
 8007ca0:	08007d0b 	.word	0x08007d0b
 8007ca4:	08007cfd 	.word	0x08007cfd
 8007ca8:	2b40      	cmp	r3, #64	; 0x40
 8007caa:	d02a      	beq.n	8007d02 <UART_SetConfig+0x8aa>
 8007cac:	e02d      	b.n	8007d0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007cae:	f7fe fba3 	bl	80063f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007cb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cb4:	e02f      	b.n	8007d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fbb2 	bl	8006424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc4:	e027      	b.n	8007d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cc6:	f107 0318 	add.w	r3, r7, #24
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fcfe 	bl	80066cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd4:	e01f      	b.n	8007d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <UART_SetConfig+0x904>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ce2:	4b1e      	ldr	r3, [pc, #120]	; (8007d5c <UART_SetConfig+0x904>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	08db      	lsrs	r3, r3, #3
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	4a1d      	ldr	r2, [pc, #116]	; (8007d64 <UART_SetConfig+0x90c>)
 8007cee:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cf4:	e00f      	b.n	8007d16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007cf6:	4b1b      	ldr	r3, [pc, #108]	; (8007d64 <UART_SetConfig+0x90c>)
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cfa:	e00c      	b.n	8007d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <UART_SetConfig+0x910>)
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d00:	e009      	b.n	8007d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d08:	e005      	b.n	8007d16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 81ee 	beq.w	80080fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	4a12      	ldr	r2, [pc, #72]	; (8007d6c <UART_SetConfig+0x914>)
 8007d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d30:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	4413      	add	r3, r2
 8007d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d305      	bcc.n	8007d4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d910      	bls.n	8007d70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d54:	e1d1      	b.n	80080fa <UART_SetConfig+0xca2>
 8007d56:	bf00      	nop
 8007d58:	40011c00 	.word	0x40011c00
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	58000c00 	.word	0x58000c00
 8007d64:	03d09000 	.word	0x03d09000
 8007d68:	003d0900 	.word	0x003d0900
 8007d6c:	0800b28c 	.word	0x0800b28c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d72:	2200      	movs	r2, #0
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	60fa      	str	r2, [r7, #12]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	4ac0      	ldr	r2, [pc, #768]	; (8008080 <UART_SetConfig+0xc28>)
 8007d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2200      	movs	r2, #0
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d92:	f7f8 fb05 	bl	80003a0 <__aeabi_uldivmod>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	f04f 0300 	mov.w	r3, #0
 8007da6:	020b      	lsls	r3, r1, #8
 8007da8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dac:	0202      	lsls	r2, r0, #8
 8007dae:	6979      	ldr	r1, [r7, #20]
 8007db0:	6849      	ldr	r1, [r1, #4]
 8007db2:	0849      	lsrs	r1, r1, #1
 8007db4:	2000      	movs	r0, #0
 8007db6:	460c      	mov	r4, r1
 8007db8:	4605      	mov	r5, r0
 8007dba:	eb12 0804 	adds.w	r8, r2, r4
 8007dbe:	eb43 0905 	adc.w	r9, r3, r5
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	469a      	mov	sl, r3
 8007dca:	4693      	mov	fp, r2
 8007dcc:	4652      	mov	r2, sl
 8007dce:	465b      	mov	r3, fp
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fae4 	bl	80003a0 <__aeabi_uldivmod>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4613      	mov	r3, r2
 8007dde:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de6:	d308      	bcc.n	8007dfa <UART_SetConfig+0x9a2>
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dee:	d204      	bcs.n	8007dfa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007df6:	60da      	str	r2, [r3, #12]
 8007df8:	e17f      	b.n	80080fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e00:	e17b      	b.n	80080fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e0a:	f040 80bd 	bne.w	8007f88 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007e0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	dc48      	bgt.n	8007ea8 <UART_SetConfig+0xa50>
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	db7b      	blt.n	8007f12 <UART_SetConfig+0xaba>
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d879      	bhi.n	8007f12 <UART_SetConfig+0xaba>
 8007e1e:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <UART_SetConfig+0x9cc>)
 8007e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e24:	08007eaf 	.word	0x08007eaf
 8007e28:	08007eb7 	.word	0x08007eb7
 8007e2c:	08007f13 	.word	0x08007f13
 8007e30:	08007f13 	.word	0x08007f13
 8007e34:	08007ebf 	.word	0x08007ebf
 8007e38:	08007f13 	.word	0x08007f13
 8007e3c:	08007f13 	.word	0x08007f13
 8007e40:	08007f13 	.word	0x08007f13
 8007e44:	08007ecf 	.word	0x08007ecf
 8007e48:	08007f13 	.word	0x08007f13
 8007e4c:	08007f13 	.word	0x08007f13
 8007e50:	08007f13 	.word	0x08007f13
 8007e54:	08007f13 	.word	0x08007f13
 8007e58:	08007f13 	.word	0x08007f13
 8007e5c:	08007f13 	.word	0x08007f13
 8007e60:	08007f13 	.word	0x08007f13
 8007e64:	08007edf 	.word	0x08007edf
 8007e68:	08007f13 	.word	0x08007f13
 8007e6c:	08007f13 	.word	0x08007f13
 8007e70:	08007f13 	.word	0x08007f13
 8007e74:	08007f13 	.word	0x08007f13
 8007e78:	08007f13 	.word	0x08007f13
 8007e7c:	08007f13 	.word	0x08007f13
 8007e80:	08007f13 	.word	0x08007f13
 8007e84:	08007f13 	.word	0x08007f13
 8007e88:	08007f13 	.word	0x08007f13
 8007e8c:	08007f13 	.word	0x08007f13
 8007e90:	08007f13 	.word	0x08007f13
 8007e94:	08007f13 	.word	0x08007f13
 8007e98:	08007f13 	.word	0x08007f13
 8007e9c:	08007f13 	.word	0x08007f13
 8007ea0:	08007f13 	.word	0x08007f13
 8007ea4:	08007f05 	.word	0x08007f05
 8007ea8:	2b40      	cmp	r3, #64	; 0x40
 8007eaa:	d02e      	beq.n	8007f0a <UART_SetConfig+0xab2>
 8007eac:	e031      	b.n	8007f12 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eae:	f7fd fb6b 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 8007eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007eb4:	e033      	b.n	8007f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb6:	f7fd fb7d 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
 8007eba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ebc:	e02f      	b.n	8007f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe faae 	bl	8006424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ecc:	e027      	b.n	8007f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ece:	f107 0318 	add.w	r3, r7, #24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fbfa 	bl	80066cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007edc:	e01f      	b.n	8007f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ede:	4b69      	ldr	r3, [pc, #420]	; (8008084 <UART_SetConfig+0xc2c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d009      	beq.n	8007efe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007eea:	4b66      	ldr	r3, [pc, #408]	; (8008084 <UART_SetConfig+0xc2c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	08db      	lsrs	r3, r3, #3
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	4a64      	ldr	r2, [pc, #400]	; (8008088 <UART_SetConfig+0xc30>)
 8007ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007efc:	e00f      	b.n	8007f1e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007efe:	4b62      	ldr	r3, [pc, #392]	; (8008088 <UART_SetConfig+0xc30>)
 8007f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f02:	e00c      	b.n	8007f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f04:	4b61      	ldr	r3, [pc, #388]	; (800808c <UART_SetConfig+0xc34>)
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f08:	e009      	b.n	8007f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f10:	e005      	b.n	8007f1e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80ea 	beq.w	80080fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	4a55      	ldr	r2, [pc, #340]	; (8008080 <UART_SetConfig+0xc28>)
 8007f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f30:	461a      	mov	r2, r3
 8007f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f38:	005a      	lsls	r2, r3, #1
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	441a      	add	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	2b0f      	cmp	r3, #15
 8007f50:	d916      	bls.n	8007f80 <UART_SetConfig+0xb28>
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f58:	d212      	bcs.n	8007f80 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f023 030f 	bic.w	r3, r3, #15
 8007f62:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f72:	4313      	orrs	r3, r2
 8007f74:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007f7c:	60da      	str	r2, [r3, #12]
 8007f7e:	e0bc      	b.n	80080fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f86:	e0b8      	b.n	80080fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	dc4b      	bgt.n	8008028 <UART_SetConfig+0xbd0>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f2c0 8087 	blt.w	80080a4 <UART_SetConfig+0xc4c>
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	f200 8084 	bhi.w	80080a4 <UART_SetConfig+0xc4c>
 8007f9c:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <UART_SetConfig+0xb4c>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	0800802f 	.word	0x0800802f
 8007fa8:	08008037 	.word	0x08008037
 8007fac:	080080a5 	.word	0x080080a5
 8007fb0:	080080a5 	.word	0x080080a5
 8007fb4:	0800803f 	.word	0x0800803f
 8007fb8:	080080a5 	.word	0x080080a5
 8007fbc:	080080a5 	.word	0x080080a5
 8007fc0:	080080a5 	.word	0x080080a5
 8007fc4:	0800804f 	.word	0x0800804f
 8007fc8:	080080a5 	.word	0x080080a5
 8007fcc:	080080a5 	.word	0x080080a5
 8007fd0:	080080a5 	.word	0x080080a5
 8007fd4:	080080a5 	.word	0x080080a5
 8007fd8:	080080a5 	.word	0x080080a5
 8007fdc:	080080a5 	.word	0x080080a5
 8007fe0:	080080a5 	.word	0x080080a5
 8007fe4:	0800805f 	.word	0x0800805f
 8007fe8:	080080a5 	.word	0x080080a5
 8007fec:	080080a5 	.word	0x080080a5
 8007ff0:	080080a5 	.word	0x080080a5
 8007ff4:	080080a5 	.word	0x080080a5
 8007ff8:	080080a5 	.word	0x080080a5
 8007ffc:	080080a5 	.word	0x080080a5
 8008000:	080080a5 	.word	0x080080a5
 8008004:	080080a5 	.word	0x080080a5
 8008008:	080080a5 	.word	0x080080a5
 800800c:	080080a5 	.word	0x080080a5
 8008010:	080080a5 	.word	0x080080a5
 8008014:	080080a5 	.word	0x080080a5
 8008018:	080080a5 	.word	0x080080a5
 800801c:	080080a5 	.word	0x080080a5
 8008020:	080080a5 	.word	0x080080a5
 8008024:	08008097 	.word	0x08008097
 8008028:	2b40      	cmp	r3, #64	; 0x40
 800802a:	d037      	beq.n	800809c <UART_SetConfig+0xc44>
 800802c:	e03a      	b.n	80080a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800802e:	f7fd faab 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 8008032:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008034:	e03c      	b.n	80080b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008036:	f7fd fabd 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
 800803a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800803c:	e038      	b.n	80080b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800803e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe f9ee 	bl	8006424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800804c:	e030      	b.n	80080b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800804e:	f107 0318 	add.w	r3, r7, #24
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fb3a 	bl	80066cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800805c:	e028      	b.n	80080b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800805e:	4b09      	ldr	r3, [pc, #36]	; (8008084 <UART_SetConfig+0xc2c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d012      	beq.n	8008090 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <UART_SetConfig+0xc2c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	08db      	lsrs	r3, r3, #3
 8008070:	f003 0303 	and.w	r3, r3, #3
 8008074:	4a04      	ldr	r2, [pc, #16]	; (8008088 <UART_SetConfig+0xc30>)
 8008076:	fa22 f303 	lsr.w	r3, r2, r3
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800807c:	e018      	b.n	80080b0 <UART_SetConfig+0xc58>
 800807e:	bf00      	nop
 8008080:	0800b28c 	.word	0x0800b28c
 8008084:	58024400 	.word	0x58024400
 8008088:	03d09000 	.word	0x03d09000
 800808c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008090:	4b24      	ldr	r3, [pc, #144]	; (8008124 <UART_SetConfig+0xccc>)
 8008092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008094:	e00c      	b.n	80080b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008096:	4b24      	ldr	r3, [pc, #144]	; (8008128 <UART_SetConfig+0xcd0>)
 8008098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800809a:	e009      	b.n	80080b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800809c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a2:	e005      	b.n	80080b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80080ae:	bf00      	nop
    }

    if (pclk != 0U)
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d021      	beq.n	80080fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	4a1c      	ldr	r2, [pc, #112]	; (800812c <UART_SetConfig+0xcd4>)
 80080bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c0:	461a      	mov	r2, r3
 80080c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	441a      	add	r2, r3
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	2b0f      	cmp	r3, #15
 80080de:	d909      	bls.n	80080f4 <UART_SetConfig+0xc9c>
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e6:	d205      	bcs.n	80080f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60da      	str	r2, [r3, #12]
 80080f2:	e002      	b.n	80080fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2201      	movs	r2, #1
 8008106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2200      	movs	r2, #0
 800810e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2200      	movs	r2, #0
 8008114:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008116:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800811a:	4618      	mov	r0, r3
 800811c:	3748      	adds	r7, #72	; 0x48
 800811e:	46bd      	mov	sp, r7
 8008120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008124:	03d09000 	.word	0x03d09000
 8008128:	003d0900 	.word	0x003d0900
 800812c:	0800b28c 	.word	0x0800b28c

08008130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01a      	beq.n	8008246 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800822e:	d10a      	bne.n	8008246 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	605a      	str	r2, [r3, #4]
  }
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af02      	add	r7, sp, #8
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008284:	f7f9 fce8 	bl	8001c58 <HAL_GetTick>
 8008288:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b08      	cmp	r3, #8
 8008296:	d10e      	bne.n	80082b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f82f 	bl	800830a <UART_WaitOnFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e025      	b.n	8008302 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d10e      	bne.n	80082e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f819 	bl	800830a <UART_WaitOnFlagUntilTimeout>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e00f      	b.n	8008302 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b09c      	sub	sp, #112	; 0x70
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	603b      	str	r3, [r7, #0]
 8008316:	4613      	mov	r3, r2
 8008318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800831a:	e0a9      	b.n	8008470 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800831c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	f000 80a5 	beq.w	8008470 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008326:	f7f9 fc97 	bl	8001c58 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008332:	429a      	cmp	r2, r3
 8008334:	d302      	bcc.n	800833c <UART_WaitOnFlagUntilTimeout+0x32>
 8008336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008338:	2b00      	cmp	r3, #0
 800833a:	d140      	bne.n	80083be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800834a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008350:	667b      	str	r3, [r7, #100]	; 0x64
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800835a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800835c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008360:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e6      	bne.n	800833c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3308      	adds	r3, #8
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	f023 0301 	bic.w	r3, r3, #1
 8008384:	663b      	str	r3, [r7, #96]	; 0x60
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3308      	adds	r3, #8
 800838c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800838e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800839c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e5      	bne.n	800836e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2220      	movs	r2, #32
 80083a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e069      	b.n	8008492 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d051      	beq.n	8008470 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083da:	d149      	bne.n	8008470 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	461a      	mov	r2, r3
 8008402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
 8008406:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800840a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e6      	bne.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3308      	adds	r3, #8
 800841e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	613b      	str	r3, [r7, #16]
   return(result);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f023 0301 	bic.w	r3, r3, #1
 800842e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3308      	adds	r3, #8
 8008436:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008438:	623a      	str	r2, [r7, #32]
 800843a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	69f9      	ldr	r1, [r7, #28]
 800843e:	6a3a      	ldr	r2, [r7, #32]
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	61bb      	str	r3, [r7, #24]
   return(result);
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e5      	bne.n	8008418 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2220      	movs	r2, #32
 8008450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e010      	b.n	8008492 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	69da      	ldr	r2, [r3, #28]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	4013      	ands	r3, r2
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	429a      	cmp	r2, r3
 800847e:	bf0c      	ite	eq
 8008480:	2301      	moveq	r3, #1
 8008482:	2300      	movne	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	461a      	mov	r2, r3
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	429a      	cmp	r2, r3
 800848c:	f43f af46 	beq.w	800831c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3770      	adds	r7, #112	; 0x70
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800849c:	b480      	push	{r7}
 800849e:	b095      	sub	sp, #84	; 0x54
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c2:	643b      	str	r3, [r7, #64]	; 0x40
 80084c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e6      	bne.n	80084a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	4b1e      	ldr	r3, [pc, #120]	; (8008564 <UART_EndRxTransfer+0xc8>)
 80084ea:	4013      	ands	r3, r2
 80084ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3308      	adds	r3, #8
 80084f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e5      	bne.n	80084d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800850e:	2b01      	cmp	r3, #1
 8008510:	d118      	bne.n	8008544 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f023 0310 	bic.w	r3, r3, #16
 8008526:	647b      	str	r3, [r7, #68]	; 0x44
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	461a      	mov	r2, r3
 800852e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008530:	61bb      	str	r3, [r7, #24]
 8008532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6979      	ldr	r1, [r7, #20]
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	613b      	str	r3, [r7, #16]
   return(result);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e6      	bne.n	8008512 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2220      	movs	r2, #32
 8008548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008558:	bf00      	nop
 800855a:	3754      	adds	r7, #84	; 0x54
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	effffffe 	.word	0xeffffffe

08008568 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7fe ff50 	bl	800742c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800858c:	bf00      	nop
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b0:	61fb      	str	r3, [r7, #28]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6979      	ldr	r1, [r7, #20]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	613b      	str	r3, [r7, #16]
   return(result);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e6      	bne.n	800859c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7fe ff1b 	bl	8007418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085e2:	bf00      	nop
 80085e4:	3720      	adds	r7, #32
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008612:	b480      	push	{r7}
 8008614:	b083      	sub	sp, #12
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800861a:	bf00      	nop
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_UARTEx_DisableFifoMode+0x16>
 8008638:	2302      	movs	r3, #2
 800863a:	e027      	b.n	800868c <HAL_UARTEx_DisableFifoMode+0x66>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2224      	movs	r2, #36	; 0x24
 8008648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0201 	bic.w	r2, r2, #1
 8008662:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800866a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e02d      	b.n	800870c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2224      	movs	r2, #36	; 0x24
 80086bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0201 	bic.w	r2, r2, #1
 80086d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f84f 	bl	8008790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008728:	2302      	movs	r3, #2
 800872a:	e02d      	b.n	8008788 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2224      	movs	r2, #36	; 0x24
 8008738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 0201 	bic.w	r2, r2, #1
 8008752:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f811 	bl	8008790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2220      	movs	r2, #32
 800877a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800879c:	2b00      	cmp	r3, #0
 800879e:	d108      	bne.n	80087b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087b0:	e031      	b.n	8008816 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087b2:	2310      	movs	r3, #16
 80087b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087b6:	2310      	movs	r3, #16
 80087b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	0e5b      	lsrs	r3, r3, #25
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	0f5b      	lsrs	r3, r3, #29
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f003 0307 	and.w	r3, r3, #7
 80087d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	7b3a      	ldrb	r2, [r7, #12]
 80087de:	4911      	ldr	r1, [pc, #68]	; (8008824 <UARTEx_SetNbDataToProcess+0x94>)
 80087e0:	5c8a      	ldrb	r2, [r1, r2]
 80087e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087e6:	7b3a      	ldrb	r2, [r7, #12]
 80087e8:	490f      	ldr	r1, [pc, #60]	; (8008828 <UARTEx_SetNbDataToProcess+0x98>)
 80087ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	7b7a      	ldrb	r2, [r7, #13]
 80087fc:	4909      	ldr	r1, [pc, #36]	; (8008824 <UARTEx_SetNbDataToProcess+0x94>)
 80087fe:	5c8a      	ldrb	r2, [r1, r2]
 8008800:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008804:	7b7a      	ldrb	r2, [r7, #13]
 8008806:	4908      	ldr	r1, [pc, #32]	; (8008828 <UARTEx_SetNbDataToProcess+0x98>)
 8008808:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800880a:	fb93 f3f2 	sdiv	r3, r3, r2
 800880e:	b29a      	uxth	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008816:	bf00      	nop
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	0800b2a4 	.word	0x0800b2a4
 8008828:	0800b2ac 	.word	0x0800b2ac

0800882c <__assert_func>:
 800882c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800882e:	4614      	mov	r4, r2
 8008830:	461a      	mov	r2, r3
 8008832:	4b09      	ldr	r3, [pc, #36]	; (8008858 <__assert_func+0x2c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4605      	mov	r5, r0
 8008838:	68d8      	ldr	r0, [r3, #12]
 800883a:	b14c      	cbz	r4, 8008850 <__assert_func+0x24>
 800883c:	4b07      	ldr	r3, [pc, #28]	; (800885c <__assert_func+0x30>)
 800883e:	9100      	str	r1, [sp, #0]
 8008840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008844:	4906      	ldr	r1, [pc, #24]	; (8008860 <__assert_func+0x34>)
 8008846:	462b      	mov	r3, r5
 8008848:	f000 f814 	bl	8008874 <fiprintf>
 800884c:	f000 feae 	bl	80095ac <abort>
 8008850:	4b04      	ldr	r3, [pc, #16]	; (8008864 <__assert_func+0x38>)
 8008852:	461c      	mov	r4, r3
 8008854:	e7f3      	b.n	800883e <__assert_func+0x12>
 8008856:	bf00      	nop
 8008858:	24000010 	.word	0x24000010
 800885c:	0800b2b4 	.word	0x0800b2b4
 8008860:	0800b2c1 	.word	0x0800b2c1
 8008864:	0800b2ef 	.word	0x0800b2ef

08008868 <__errno>:
 8008868:	4b01      	ldr	r3, [pc, #4]	; (8008870 <__errno+0x8>)
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	24000010 	.word	0x24000010

08008874 <fiprintf>:
 8008874:	b40e      	push	{r1, r2, r3}
 8008876:	b503      	push	{r0, r1, lr}
 8008878:	4601      	mov	r1, r0
 800887a:	ab03      	add	r3, sp, #12
 800887c:	4805      	ldr	r0, [pc, #20]	; (8008894 <fiprintf+0x20>)
 800887e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008882:	6800      	ldr	r0, [r0, #0]
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	f000 f85d 	bl	8008944 <_vfiprintf_r>
 800888a:	b002      	add	sp, #8
 800888c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008890:	b003      	add	sp, #12
 8008892:	4770      	bx	lr
 8008894:	24000010 	.word	0x24000010

08008898 <__libc_init_array>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	4d0d      	ldr	r5, [pc, #52]	; (80088d0 <__libc_init_array+0x38>)
 800889c:	4c0d      	ldr	r4, [pc, #52]	; (80088d4 <__libc_init_array+0x3c>)
 800889e:	1b64      	subs	r4, r4, r5
 80088a0:	10a4      	asrs	r4, r4, #2
 80088a2:	2600      	movs	r6, #0
 80088a4:	42a6      	cmp	r6, r4
 80088a6:	d109      	bne.n	80088bc <__libc_init_array+0x24>
 80088a8:	4d0b      	ldr	r5, [pc, #44]	; (80088d8 <__libc_init_array+0x40>)
 80088aa:	4c0c      	ldr	r4, [pc, #48]	; (80088dc <__libc_init_array+0x44>)
 80088ac:	f002 fc5e 	bl	800b16c <_init>
 80088b0:	1b64      	subs	r4, r4, r5
 80088b2:	10a4      	asrs	r4, r4, #2
 80088b4:	2600      	movs	r6, #0
 80088b6:	42a6      	cmp	r6, r4
 80088b8:	d105      	bne.n	80088c6 <__libc_init_array+0x2e>
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c0:	4798      	blx	r3
 80088c2:	3601      	adds	r6, #1
 80088c4:	e7ee      	b.n	80088a4 <__libc_init_array+0xc>
 80088c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ca:	4798      	blx	r3
 80088cc:	3601      	adds	r6, #1
 80088ce:	e7f2      	b.n	80088b6 <__libc_init_array+0x1e>
 80088d0:	0800b698 	.word	0x0800b698
 80088d4:	0800b698 	.word	0x0800b698
 80088d8:	0800b698 	.word	0x0800b698
 80088dc:	0800b69c 	.word	0x0800b69c

080088e0 <memset>:
 80088e0:	4402      	add	r2, r0
 80088e2:	4603      	mov	r3, r0
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d100      	bne.n	80088ea <memset+0xa>
 80088e8:	4770      	bx	lr
 80088ea:	f803 1b01 	strb.w	r1, [r3], #1
 80088ee:	e7f9      	b.n	80088e4 <memset+0x4>

080088f0 <__sfputc_r>:
 80088f0:	6893      	ldr	r3, [r2, #8]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	b410      	push	{r4}
 80088f8:	6093      	str	r3, [r2, #8]
 80088fa:	da08      	bge.n	800890e <__sfputc_r+0x1e>
 80088fc:	6994      	ldr	r4, [r2, #24]
 80088fe:	42a3      	cmp	r3, r4
 8008900:	db01      	blt.n	8008906 <__sfputc_r+0x16>
 8008902:	290a      	cmp	r1, #10
 8008904:	d103      	bne.n	800890e <__sfputc_r+0x1e>
 8008906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800890a:	f000 bd8f 	b.w	800942c <__swbuf_r>
 800890e:	6813      	ldr	r3, [r2, #0]
 8008910:	1c58      	adds	r0, r3, #1
 8008912:	6010      	str	r0, [r2, #0]
 8008914:	7019      	strb	r1, [r3, #0]
 8008916:	4608      	mov	r0, r1
 8008918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800891c:	4770      	bx	lr

0800891e <__sfputs_r>:
 800891e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008920:	4606      	mov	r6, r0
 8008922:	460f      	mov	r7, r1
 8008924:	4614      	mov	r4, r2
 8008926:	18d5      	adds	r5, r2, r3
 8008928:	42ac      	cmp	r4, r5
 800892a:	d101      	bne.n	8008930 <__sfputs_r+0x12>
 800892c:	2000      	movs	r0, #0
 800892e:	e007      	b.n	8008940 <__sfputs_r+0x22>
 8008930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008934:	463a      	mov	r2, r7
 8008936:	4630      	mov	r0, r6
 8008938:	f7ff ffda 	bl	80088f0 <__sfputc_r>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d1f3      	bne.n	8008928 <__sfputs_r+0xa>
 8008940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008944 <_vfiprintf_r>:
 8008944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008948:	460d      	mov	r5, r1
 800894a:	b09d      	sub	sp, #116	; 0x74
 800894c:	4614      	mov	r4, r2
 800894e:	4698      	mov	r8, r3
 8008950:	4606      	mov	r6, r0
 8008952:	b118      	cbz	r0, 800895c <_vfiprintf_r+0x18>
 8008954:	6983      	ldr	r3, [r0, #24]
 8008956:	b90b      	cbnz	r3, 800895c <_vfiprintf_r+0x18>
 8008958:	f001 fd42 	bl	800a3e0 <__sinit>
 800895c:	4b89      	ldr	r3, [pc, #548]	; (8008b84 <_vfiprintf_r+0x240>)
 800895e:	429d      	cmp	r5, r3
 8008960:	d11b      	bne.n	800899a <_vfiprintf_r+0x56>
 8008962:	6875      	ldr	r5, [r6, #4]
 8008964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008966:	07d9      	lsls	r1, r3, #31
 8008968:	d405      	bmi.n	8008976 <_vfiprintf_r+0x32>
 800896a:	89ab      	ldrh	r3, [r5, #12]
 800896c:	059a      	lsls	r2, r3, #22
 800896e:	d402      	bmi.n	8008976 <_vfiprintf_r+0x32>
 8008970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008972:	f001 fdd8 	bl	800a526 <__retarget_lock_acquire_recursive>
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	071b      	lsls	r3, r3, #28
 800897a:	d501      	bpl.n	8008980 <_vfiprintf_r+0x3c>
 800897c:	692b      	ldr	r3, [r5, #16]
 800897e:	b9eb      	cbnz	r3, 80089bc <_vfiprintf_r+0x78>
 8008980:	4629      	mov	r1, r5
 8008982:	4630      	mov	r0, r6
 8008984:	f000 fda4 	bl	80094d0 <__swsetup_r>
 8008988:	b1c0      	cbz	r0, 80089bc <_vfiprintf_r+0x78>
 800898a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800898c:	07dc      	lsls	r4, r3, #31
 800898e:	d50e      	bpl.n	80089ae <_vfiprintf_r+0x6a>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	b01d      	add	sp, #116	; 0x74
 8008996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899a:	4b7b      	ldr	r3, [pc, #492]	; (8008b88 <_vfiprintf_r+0x244>)
 800899c:	429d      	cmp	r5, r3
 800899e:	d101      	bne.n	80089a4 <_vfiprintf_r+0x60>
 80089a0:	68b5      	ldr	r5, [r6, #8]
 80089a2:	e7df      	b.n	8008964 <_vfiprintf_r+0x20>
 80089a4:	4b79      	ldr	r3, [pc, #484]	; (8008b8c <_vfiprintf_r+0x248>)
 80089a6:	429d      	cmp	r5, r3
 80089a8:	bf08      	it	eq
 80089aa:	68f5      	ldreq	r5, [r6, #12]
 80089ac:	e7da      	b.n	8008964 <_vfiprintf_r+0x20>
 80089ae:	89ab      	ldrh	r3, [r5, #12]
 80089b0:	0598      	lsls	r0, r3, #22
 80089b2:	d4ed      	bmi.n	8008990 <_vfiprintf_r+0x4c>
 80089b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089b6:	f001 fdb7 	bl	800a528 <__retarget_lock_release_recursive>
 80089ba:	e7e9      	b.n	8008990 <_vfiprintf_r+0x4c>
 80089bc:	2300      	movs	r3, #0
 80089be:	9309      	str	r3, [sp, #36]	; 0x24
 80089c0:	2320      	movs	r3, #32
 80089c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ca:	2330      	movs	r3, #48	; 0x30
 80089cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b90 <_vfiprintf_r+0x24c>
 80089d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089d4:	f04f 0901 	mov.w	r9, #1
 80089d8:	4623      	mov	r3, r4
 80089da:	469a      	mov	sl, r3
 80089dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089e0:	b10a      	cbz	r2, 80089e6 <_vfiprintf_r+0xa2>
 80089e2:	2a25      	cmp	r2, #37	; 0x25
 80089e4:	d1f9      	bne.n	80089da <_vfiprintf_r+0x96>
 80089e6:	ebba 0b04 	subs.w	fp, sl, r4
 80089ea:	d00b      	beq.n	8008a04 <_vfiprintf_r+0xc0>
 80089ec:	465b      	mov	r3, fp
 80089ee:	4622      	mov	r2, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff ff93 	bl	800891e <__sfputs_r>
 80089f8:	3001      	adds	r0, #1
 80089fa:	f000 80aa 	beq.w	8008b52 <_vfiprintf_r+0x20e>
 80089fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a00:	445a      	add	r2, fp
 8008a02:	9209      	str	r2, [sp, #36]	; 0x24
 8008a04:	f89a 3000 	ldrb.w	r3, [sl]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 80a2 	beq.w	8008b52 <_vfiprintf_r+0x20e>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f04f 32ff 	mov.w	r2, #4294967295
 8008a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a18:	f10a 0a01 	add.w	sl, sl, #1
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	9307      	str	r3, [sp, #28]
 8008a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a24:	931a      	str	r3, [sp, #104]	; 0x68
 8008a26:	4654      	mov	r4, sl
 8008a28:	2205      	movs	r2, #5
 8008a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2e:	4858      	ldr	r0, [pc, #352]	; (8008b90 <_vfiprintf_r+0x24c>)
 8008a30:	f7f7 fc66 	bl	8000300 <memchr>
 8008a34:	9a04      	ldr	r2, [sp, #16]
 8008a36:	b9d8      	cbnz	r0, 8008a70 <_vfiprintf_r+0x12c>
 8008a38:	06d1      	lsls	r1, r2, #27
 8008a3a:	bf44      	itt	mi
 8008a3c:	2320      	movmi	r3, #32
 8008a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a42:	0713      	lsls	r3, r2, #28
 8008a44:	bf44      	itt	mi
 8008a46:	232b      	movmi	r3, #43	; 0x2b
 8008a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a50:	2b2a      	cmp	r3, #42	; 0x2a
 8008a52:	d015      	beq.n	8008a80 <_vfiprintf_r+0x13c>
 8008a54:	9a07      	ldr	r2, [sp, #28]
 8008a56:	4654      	mov	r4, sl
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f04f 0c0a 	mov.w	ip, #10
 8008a5e:	4621      	mov	r1, r4
 8008a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a64:	3b30      	subs	r3, #48	; 0x30
 8008a66:	2b09      	cmp	r3, #9
 8008a68:	d94e      	bls.n	8008b08 <_vfiprintf_r+0x1c4>
 8008a6a:	b1b0      	cbz	r0, 8008a9a <_vfiprintf_r+0x156>
 8008a6c:	9207      	str	r2, [sp, #28]
 8008a6e:	e014      	b.n	8008a9a <_vfiprintf_r+0x156>
 8008a70:	eba0 0308 	sub.w	r3, r0, r8
 8008a74:	fa09 f303 	lsl.w	r3, r9, r3
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	46a2      	mov	sl, r4
 8008a7e:	e7d2      	b.n	8008a26 <_vfiprintf_r+0xe2>
 8008a80:	9b03      	ldr	r3, [sp, #12]
 8008a82:	1d19      	adds	r1, r3, #4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	9103      	str	r1, [sp, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	bfbb      	ittet	lt
 8008a8c:	425b      	neglt	r3, r3
 8008a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a92:	9307      	strge	r3, [sp, #28]
 8008a94:	9307      	strlt	r3, [sp, #28]
 8008a96:	bfb8      	it	lt
 8008a98:	9204      	strlt	r2, [sp, #16]
 8008a9a:	7823      	ldrb	r3, [r4, #0]
 8008a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a9e:	d10c      	bne.n	8008aba <_vfiprintf_r+0x176>
 8008aa0:	7863      	ldrb	r3, [r4, #1]
 8008aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa4:	d135      	bne.n	8008b12 <_vfiprintf_r+0x1ce>
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	1d1a      	adds	r2, r3, #4
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	9203      	str	r2, [sp, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bfb8      	it	lt
 8008ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ab6:	3402      	adds	r4, #2
 8008ab8:	9305      	str	r3, [sp, #20]
 8008aba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ba0 <_vfiprintf_r+0x25c>
 8008abe:	7821      	ldrb	r1, [r4, #0]
 8008ac0:	2203      	movs	r2, #3
 8008ac2:	4650      	mov	r0, sl
 8008ac4:	f7f7 fc1c 	bl	8000300 <memchr>
 8008ac8:	b140      	cbz	r0, 8008adc <_vfiprintf_r+0x198>
 8008aca:	2340      	movs	r3, #64	; 0x40
 8008acc:	eba0 000a 	sub.w	r0, r0, sl
 8008ad0:	fa03 f000 	lsl.w	r0, r3, r0
 8008ad4:	9b04      	ldr	r3, [sp, #16]
 8008ad6:	4303      	orrs	r3, r0
 8008ad8:	3401      	adds	r4, #1
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae0:	482c      	ldr	r0, [pc, #176]	; (8008b94 <_vfiprintf_r+0x250>)
 8008ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ae6:	2206      	movs	r2, #6
 8008ae8:	f7f7 fc0a 	bl	8000300 <memchr>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d03f      	beq.n	8008b70 <_vfiprintf_r+0x22c>
 8008af0:	4b29      	ldr	r3, [pc, #164]	; (8008b98 <_vfiprintf_r+0x254>)
 8008af2:	bb1b      	cbnz	r3, 8008b3c <_vfiprintf_r+0x1f8>
 8008af4:	9b03      	ldr	r3, [sp, #12]
 8008af6:	3307      	adds	r3, #7
 8008af8:	f023 0307 	bic.w	r3, r3, #7
 8008afc:	3308      	adds	r3, #8
 8008afe:	9303      	str	r3, [sp, #12]
 8008b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b02:	443b      	add	r3, r7
 8008b04:	9309      	str	r3, [sp, #36]	; 0x24
 8008b06:	e767      	b.n	80089d8 <_vfiprintf_r+0x94>
 8008b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	2001      	movs	r0, #1
 8008b10:	e7a5      	b.n	8008a5e <_vfiprintf_r+0x11a>
 8008b12:	2300      	movs	r3, #0
 8008b14:	3401      	adds	r4, #1
 8008b16:	9305      	str	r3, [sp, #20]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	f04f 0c0a 	mov.w	ip, #10
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b24:	3a30      	subs	r2, #48	; 0x30
 8008b26:	2a09      	cmp	r2, #9
 8008b28:	d903      	bls.n	8008b32 <_vfiprintf_r+0x1ee>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0c5      	beq.n	8008aba <_vfiprintf_r+0x176>
 8008b2e:	9105      	str	r1, [sp, #20]
 8008b30:	e7c3      	b.n	8008aba <_vfiprintf_r+0x176>
 8008b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b36:	4604      	mov	r4, r0
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e7f0      	b.n	8008b1e <_vfiprintf_r+0x1da>
 8008b3c:	ab03      	add	r3, sp, #12
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	462a      	mov	r2, r5
 8008b42:	4b16      	ldr	r3, [pc, #88]	; (8008b9c <_vfiprintf_r+0x258>)
 8008b44:	a904      	add	r1, sp, #16
 8008b46:	4630      	mov	r0, r6
 8008b48:	f000 f8be 	bl	8008cc8 <_printf_float>
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	1c78      	adds	r0, r7, #1
 8008b50:	d1d6      	bne.n	8008b00 <_vfiprintf_r+0x1bc>
 8008b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b54:	07d9      	lsls	r1, r3, #31
 8008b56:	d405      	bmi.n	8008b64 <_vfiprintf_r+0x220>
 8008b58:	89ab      	ldrh	r3, [r5, #12]
 8008b5a:	059a      	lsls	r2, r3, #22
 8008b5c:	d402      	bmi.n	8008b64 <_vfiprintf_r+0x220>
 8008b5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b60:	f001 fce2 	bl	800a528 <__retarget_lock_release_recursive>
 8008b64:	89ab      	ldrh	r3, [r5, #12]
 8008b66:	065b      	lsls	r3, r3, #25
 8008b68:	f53f af12 	bmi.w	8008990 <_vfiprintf_r+0x4c>
 8008b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b6e:	e711      	b.n	8008994 <_vfiprintf_r+0x50>
 8008b70:	ab03      	add	r3, sp, #12
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	462a      	mov	r2, r5
 8008b76:	4b09      	ldr	r3, [pc, #36]	; (8008b9c <_vfiprintf_r+0x258>)
 8008b78:	a904      	add	r1, sp, #16
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f000 fb30 	bl	80091e0 <_printf_i>
 8008b80:	e7e4      	b.n	8008b4c <_vfiprintf_r+0x208>
 8008b82:	bf00      	nop
 8008b84:	0800b3ec 	.word	0x0800b3ec
 8008b88:	0800b40c 	.word	0x0800b40c
 8008b8c:	0800b3cc 	.word	0x0800b3cc
 8008b90:	0800b2f4 	.word	0x0800b2f4
 8008b94:	0800b2fe 	.word	0x0800b2fe
 8008b98:	08008cc9 	.word	0x08008cc9
 8008b9c:	0800891f 	.word	0x0800891f
 8008ba0:	0800b2fa 	.word	0x0800b2fa

08008ba4 <__cvt>:
 8008ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ba6:	ed2d 8b02 	vpush	{d8}
 8008baa:	eeb0 8b40 	vmov.f64	d8, d0
 8008bae:	b085      	sub	sp, #20
 8008bb0:	4617      	mov	r7, r2
 8008bb2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008bb4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008bb6:	ee18 2a90 	vmov	r2, s17
 8008bba:	f025 0520 	bic.w	r5, r5, #32
 8008bbe:	2a00      	cmp	r2, #0
 8008bc0:	bfb6      	itet	lt
 8008bc2:	222d      	movlt	r2, #45	; 0x2d
 8008bc4:	2200      	movge	r2, #0
 8008bc6:	eeb1 8b40 	vneglt.f64	d8, d0
 8008bca:	2d46      	cmp	r5, #70	; 0x46
 8008bcc:	460c      	mov	r4, r1
 8008bce:	701a      	strb	r2, [r3, #0]
 8008bd0:	d004      	beq.n	8008bdc <__cvt+0x38>
 8008bd2:	2d45      	cmp	r5, #69	; 0x45
 8008bd4:	d100      	bne.n	8008bd8 <__cvt+0x34>
 8008bd6:	3401      	adds	r4, #1
 8008bd8:	2102      	movs	r1, #2
 8008bda:	e000      	b.n	8008bde <__cvt+0x3a>
 8008bdc:	2103      	movs	r1, #3
 8008bde:	ab03      	add	r3, sp, #12
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	ab02      	add	r3, sp, #8
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	4622      	mov	r2, r4
 8008be8:	4633      	mov	r3, r6
 8008bea:	eeb0 0b48 	vmov.f64	d0, d8
 8008bee:	f000 fd6f 	bl	80096d0 <_dtoa_r>
 8008bf2:	2d47      	cmp	r5, #71	; 0x47
 8008bf4:	d101      	bne.n	8008bfa <__cvt+0x56>
 8008bf6:	07fb      	lsls	r3, r7, #31
 8008bf8:	d51a      	bpl.n	8008c30 <__cvt+0x8c>
 8008bfa:	2d46      	cmp	r5, #70	; 0x46
 8008bfc:	eb00 0204 	add.w	r2, r0, r4
 8008c00:	d10c      	bne.n	8008c1c <__cvt+0x78>
 8008c02:	7803      	ldrb	r3, [r0, #0]
 8008c04:	2b30      	cmp	r3, #48	; 0x30
 8008c06:	d107      	bne.n	8008c18 <__cvt+0x74>
 8008c08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c10:	bf1c      	itt	ne
 8008c12:	f1c4 0401 	rsbne	r4, r4, #1
 8008c16:	6034      	strne	r4, [r6, #0]
 8008c18:	6833      	ldr	r3, [r6, #0]
 8008c1a:	441a      	add	r2, r3
 8008c1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c24:	bf08      	it	eq
 8008c26:	9203      	streq	r2, [sp, #12]
 8008c28:	2130      	movs	r1, #48	; 0x30
 8008c2a:	9b03      	ldr	r3, [sp, #12]
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d307      	bcc.n	8008c40 <__cvt+0x9c>
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c34:	1a1b      	subs	r3, r3, r0
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	b005      	add	sp, #20
 8008c3a:	ecbd 8b02 	vpop	{d8}
 8008c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c40:	1c5c      	adds	r4, r3, #1
 8008c42:	9403      	str	r4, [sp, #12]
 8008c44:	7019      	strb	r1, [r3, #0]
 8008c46:	e7f0      	b.n	8008c2a <__cvt+0x86>

08008c48 <__exponent>:
 8008c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bfb8      	it	lt
 8008c50:	4249      	neglt	r1, r1
 8008c52:	f803 2b02 	strb.w	r2, [r3], #2
 8008c56:	bfb4      	ite	lt
 8008c58:	222d      	movlt	r2, #45	; 0x2d
 8008c5a:	222b      	movge	r2, #43	; 0x2b
 8008c5c:	2909      	cmp	r1, #9
 8008c5e:	7042      	strb	r2, [r0, #1]
 8008c60:	dd2a      	ble.n	8008cb8 <__exponent+0x70>
 8008c62:	f10d 0407 	add.w	r4, sp, #7
 8008c66:	46a4      	mov	ip, r4
 8008c68:	270a      	movs	r7, #10
 8008c6a:	46a6      	mov	lr, r4
 8008c6c:	460a      	mov	r2, r1
 8008c6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c72:	fb07 1516 	mls	r5, r7, r6, r1
 8008c76:	3530      	adds	r5, #48	; 0x30
 8008c78:	2a63      	cmp	r2, #99	; 0x63
 8008c7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c82:	4631      	mov	r1, r6
 8008c84:	dcf1      	bgt.n	8008c6a <__exponent+0x22>
 8008c86:	3130      	adds	r1, #48	; 0x30
 8008c88:	f1ae 0502 	sub.w	r5, lr, #2
 8008c8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c90:	1c44      	adds	r4, r0, #1
 8008c92:	4629      	mov	r1, r5
 8008c94:	4561      	cmp	r1, ip
 8008c96:	d30a      	bcc.n	8008cae <__exponent+0x66>
 8008c98:	f10d 0209 	add.w	r2, sp, #9
 8008c9c:	eba2 020e 	sub.w	r2, r2, lr
 8008ca0:	4565      	cmp	r5, ip
 8008ca2:	bf88      	it	hi
 8008ca4:	2200      	movhi	r2, #0
 8008ca6:	4413      	add	r3, r2
 8008ca8:	1a18      	subs	r0, r3, r0
 8008caa:	b003      	add	sp, #12
 8008cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008cb6:	e7ed      	b.n	8008c94 <__exponent+0x4c>
 8008cb8:	2330      	movs	r3, #48	; 0x30
 8008cba:	3130      	adds	r1, #48	; 0x30
 8008cbc:	7083      	strb	r3, [r0, #2]
 8008cbe:	70c1      	strb	r1, [r0, #3]
 8008cc0:	1d03      	adds	r3, r0, #4
 8008cc2:	e7f1      	b.n	8008ca8 <__exponent+0x60>
 8008cc4:	0000      	movs	r0, r0
	...

08008cc8 <_printf_float>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	b08b      	sub	sp, #44	; 0x2c
 8008cce:	460c      	mov	r4, r1
 8008cd0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008cd4:	4616      	mov	r6, r2
 8008cd6:	461f      	mov	r7, r3
 8008cd8:	4605      	mov	r5, r0
 8008cda:	f001 fc1f 	bl	800a51c <_localeconv_r>
 8008cde:	f8d0 b000 	ldr.w	fp, [r0]
 8008ce2:	4658      	mov	r0, fp
 8008ce4:	f7f7 fb04 	bl	80002f0 <strlen>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	9308      	str	r3, [sp, #32]
 8008cec:	f8d8 3000 	ldr.w	r3, [r8]
 8008cf0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008cf4:	6822      	ldr	r2, [r4, #0]
 8008cf6:	3307      	adds	r3, #7
 8008cf8:	f023 0307 	bic.w	r3, r3, #7
 8008cfc:	f103 0108 	add.w	r1, r3, #8
 8008d00:	f8c8 1000 	str.w	r1, [r8]
 8008d04:	4682      	mov	sl, r0
 8008d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008d0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008f70 <_printf_float+0x2a8>
 8008d12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008d16:	eeb0 6bc0 	vabs.f64	d6, d0
 8008d1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d22:	dd24      	ble.n	8008d6e <_printf_float+0xa6>
 8008d24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2c:	d502      	bpl.n	8008d34 <_printf_float+0x6c>
 8008d2e:	232d      	movs	r3, #45	; 0x2d
 8008d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d34:	4b90      	ldr	r3, [pc, #576]	; (8008f78 <_printf_float+0x2b0>)
 8008d36:	4891      	ldr	r0, [pc, #580]	; (8008f7c <_printf_float+0x2b4>)
 8008d38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008d3c:	bf94      	ite	ls
 8008d3e:	4698      	movls	r8, r3
 8008d40:	4680      	movhi	r8, r0
 8008d42:	2303      	movs	r3, #3
 8008d44:	6123      	str	r3, [r4, #16]
 8008d46:	f022 0204 	bic.w	r2, r2, #4
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6022      	str	r2, [r4, #0]
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	9700      	str	r7, [sp, #0]
 8008d52:	4633      	mov	r3, r6
 8008d54:	aa09      	add	r2, sp, #36	; 0x24
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f000 f9d3 	bl	8009104 <_printf_common>
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f040 808a 	bne.w	8008e78 <_printf_float+0x1b0>
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	b00b      	add	sp, #44	; 0x2c
 8008d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d76:	d709      	bvc.n	8008d8c <_printf_float+0xc4>
 8008d78:	ee10 3a90 	vmov	r3, s1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bfbc      	itt	lt
 8008d80:	232d      	movlt	r3, #45	; 0x2d
 8008d82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d86:	487e      	ldr	r0, [pc, #504]	; (8008f80 <_printf_float+0x2b8>)
 8008d88:	4b7e      	ldr	r3, [pc, #504]	; (8008f84 <_printf_float+0x2bc>)
 8008d8a:	e7d5      	b.n	8008d38 <_printf_float+0x70>
 8008d8c:	6863      	ldr	r3, [r4, #4]
 8008d8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008d92:	9104      	str	r1, [sp, #16]
 8008d94:	1c59      	adds	r1, r3, #1
 8008d96:	d13c      	bne.n	8008e12 <_printf_float+0x14a>
 8008d98:	2306      	movs	r3, #6
 8008d9a:	6063      	str	r3, [r4, #4]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9303      	str	r3, [sp, #12]
 8008da0:	ab08      	add	r3, sp, #32
 8008da2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008da6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008daa:	ab07      	add	r3, sp, #28
 8008dac:	6861      	ldr	r1, [r4, #4]
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	6022      	str	r2, [r4, #0]
 8008db2:	f10d 031b 	add.w	r3, sp, #27
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7ff fef4 	bl	8008ba4 <__cvt>
 8008dbc:	9b04      	ldr	r3, [sp, #16]
 8008dbe:	9907      	ldr	r1, [sp, #28]
 8008dc0:	2b47      	cmp	r3, #71	; 0x47
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	d108      	bne.n	8008dd8 <_printf_float+0x110>
 8008dc6:	1cc8      	adds	r0, r1, #3
 8008dc8:	db02      	blt.n	8008dd0 <_printf_float+0x108>
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	dd41      	ble.n	8008e54 <_printf_float+0x18c>
 8008dd0:	f1a9 0902 	sub.w	r9, r9, #2
 8008dd4:	fa5f f989 	uxtb.w	r9, r9
 8008dd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ddc:	d820      	bhi.n	8008e20 <_printf_float+0x158>
 8008dde:	3901      	subs	r1, #1
 8008de0:	464a      	mov	r2, r9
 8008de2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008de6:	9107      	str	r1, [sp, #28]
 8008de8:	f7ff ff2e 	bl	8008c48 <__exponent>
 8008dec:	9a08      	ldr	r2, [sp, #32]
 8008dee:	9004      	str	r0, [sp, #16]
 8008df0:	1813      	adds	r3, r2, r0
 8008df2:	2a01      	cmp	r2, #1
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	dc02      	bgt.n	8008dfe <_printf_float+0x136>
 8008df8:	6822      	ldr	r2, [r4, #0]
 8008dfa:	07d2      	lsls	r2, r2, #31
 8008dfc:	d501      	bpl.n	8008e02 <_printf_float+0x13a>
 8008dfe:	3301      	adds	r3, #1
 8008e00:	6123      	str	r3, [r4, #16]
 8008e02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0a2      	beq.n	8008d50 <_printf_float+0x88>
 8008e0a:	232d      	movs	r3, #45	; 0x2d
 8008e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e10:	e79e      	b.n	8008d50 <_printf_float+0x88>
 8008e12:	9904      	ldr	r1, [sp, #16]
 8008e14:	2947      	cmp	r1, #71	; 0x47
 8008e16:	d1c1      	bne.n	8008d9c <_printf_float+0xd4>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1bf      	bne.n	8008d9c <_printf_float+0xd4>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e7bc      	b.n	8008d9a <_printf_float+0xd2>
 8008e20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008e24:	d118      	bne.n	8008e58 <_printf_float+0x190>
 8008e26:	2900      	cmp	r1, #0
 8008e28:	6863      	ldr	r3, [r4, #4]
 8008e2a:	dd0b      	ble.n	8008e44 <_printf_float+0x17c>
 8008e2c:	6121      	str	r1, [r4, #16]
 8008e2e:	b913      	cbnz	r3, 8008e36 <_printf_float+0x16e>
 8008e30:	6822      	ldr	r2, [r4, #0]
 8008e32:	07d0      	lsls	r0, r2, #31
 8008e34:	d502      	bpl.n	8008e3c <_printf_float+0x174>
 8008e36:	3301      	adds	r3, #1
 8008e38:	440b      	add	r3, r1
 8008e3a:	6123      	str	r3, [r4, #16]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	e7de      	b.n	8008e02 <_printf_float+0x13a>
 8008e44:	b913      	cbnz	r3, 8008e4c <_printf_float+0x184>
 8008e46:	6822      	ldr	r2, [r4, #0]
 8008e48:	07d2      	lsls	r2, r2, #31
 8008e4a:	d501      	bpl.n	8008e50 <_printf_float+0x188>
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	e7f4      	b.n	8008e3a <_printf_float+0x172>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e7f2      	b.n	8008e3a <_printf_float+0x172>
 8008e54:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008e58:	9b08      	ldr	r3, [sp, #32]
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	db05      	blt.n	8008e6a <_printf_float+0x1a2>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	6121      	str	r1, [r4, #16]
 8008e62:	07d8      	lsls	r0, r3, #31
 8008e64:	d5ea      	bpl.n	8008e3c <_printf_float+0x174>
 8008e66:	1c4b      	adds	r3, r1, #1
 8008e68:	e7e7      	b.n	8008e3a <_printf_float+0x172>
 8008e6a:	2900      	cmp	r1, #0
 8008e6c:	bfd4      	ite	le
 8008e6e:	f1c1 0202 	rsble	r2, r1, #2
 8008e72:	2201      	movgt	r2, #1
 8008e74:	4413      	add	r3, r2
 8008e76:	e7e0      	b.n	8008e3a <_printf_float+0x172>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	055a      	lsls	r2, r3, #21
 8008e7c:	d407      	bmi.n	8008e8e <_printf_float+0x1c6>
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	4642      	mov	r2, r8
 8008e82:	4631      	mov	r1, r6
 8008e84:	4628      	mov	r0, r5
 8008e86:	47b8      	blx	r7
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d12a      	bne.n	8008ee2 <_printf_float+0x21a>
 8008e8c:	e76a      	b.n	8008d64 <_printf_float+0x9c>
 8008e8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008e92:	f240 80e2 	bls.w	800905a <_printf_float+0x392>
 8008e96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008e9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea2:	d133      	bne.n	8008f0c <_printf_float+0x244>
 8008ea4:	4a38      	ldr	r2, [pc, #224]	; (8008f88 <_printf_float+0x2c0>)
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f43f af58 	beq.w	8008d64 <_printf_float+0x9c>
 8008eb4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	db02      	blt.n	8008ec2 <_printf_float+0x1fa>
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	07d8      	lsls	r0, r3, #31
 8008ec0:	d50f      	bpl.n	8008ee2 <_printf_float+0x21a>
 8008ec2:	4653      	mov	r3, sl
 8008ec4:	465a      	mov	r2, fp
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4628      	mov	r0, r5
 8008eca:	47b8      	blx	r7
 8008ecc:	3001      	adds	r0, #1
 8008ece:	f43f af49 	beq.w	8008d64 <_printf_float+0x9c>
 8008ed2:	f04f 0800 	mov.w	r8, #0
 8008ed6:	f104 091a 	add.w	r9, r4, #26
 8008eda:	9b08      	ldr	r3, [sp, #32]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	4543      	cmp	r3, r8
 8008ee0:	dc09      	bgt.n	8008ef6 <_printf_float+0x22e>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	079b      	lsls	r3, r3, #30
 8008ee6:	f100 8108 	bmi.w	80090fa <_printf_float+0x432>
 8008eea:	68e0      	ldr	r0, [r4, #12]
 8008eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eee:	4298      	cmp	r0, r3
 8008ef0:	bfb8      	it	lt
 8008ef2:	4618      	movlt	r0, r3
 8008ef4:	e738      	b.n	8008d68 <_printf_float+0xa0>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	464a      	mov	r2, r9
 8008efa:	4631      	mov	r1, r6
 8008efc:	4628      	mov	r0, r5
 8008efe:	47b8      	blx	r7
 8008f00:	3001      	adds	r0, #1
 8008f02:	f43f af2f 	beq.w	8008d64 <_printf_float+0x9c>
 8008f06:	f108 0801 	add.w	r8, r8, #1
 8008f0a:	e7e6      	b.n	8008eda <_printf_float+0x212>
 8008f0c:	9b07      	ldr	r3, [sp, #28]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	dc3c      	bgt.n	8008f8c <_printf_float+0x2c4>
 8008f12:	4a1d      	ldr	r2, [pc, #116]	; (8008f88 <_printf_float+0x2c0>)
 8008f14:	2301      	movs	r3, #1
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	47b8      	blx	r7
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	f43f af21 	beq.w	8008d64 <_printf_float+0x9c>
 8008f22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	d102      	bne.n	8008f30 <_printf_float+0x268>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	07d9      	lsls	r1, r3, #31
 8008f2e:	d5d8      	bpl.n	8008ee2 <_printf_float+0x21a>
 8008f30:	4653      	mov	r3, sl
 8008f32:	465a      	mov	r2, fp
 8008f34:	4631      	mov	r1, r6
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b8      	blx	r7
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	f43f af12 	beq.w	8008d64 <_printf_float+0x9c>
 8008f40:	f04f 0900 	mov.w	r9, #0
 8008f44:	f104 0a1a 	add.w	sl, r4, #26
 8008f48:	9b07      	ldr	r3, [sp, #28]
 8008f4a:	425b      	negs	r3, r3
 8008f4c:	454b      	cmp	r3, r9
 8008f4e:	dc01      	bgt.n	8008f54 <_printf_float+0x28c>
 8008f50:	9b08      	ldr	r3, [sp, #32]
 8008f52:	e795      	b.n	8008e80 <_printf_float+0x1b8>
 8008f54:	2301      	movs	r3, #1
 8008f56:	4652      	mov	r2, sl
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b8      	blx	r7
 8008f5e:	3001      	adds	r0, #1
 8008f60:	f43f af00 	beq.w	8008d64 <_printf_float+0x9c>
 8008f64:	f109 0901 	add.w	r9, r9, #1
 8008f68:	e7ee      	b.n	8008f48 <_printf_float+0x280>
 8008f6a:	bf00      	nop
 8008f6c:	f3af 8000 	nop.w
 8008f70:	ffffffff 	.word	0xffffffff
 8008f74:	7fefffff 	.word	0x7fefffff
 8008f78:	0800b305 	.word	0x0800b305
 8008f7c:	0800b309 	.word	0x0800b309
 8008f80:	0800b311 	.word	0x0800b311
 8008f84:	0800b30d 	.word	0x0800b30d
 8008f88:	0800b315 	.word	0x0800b315
 8008f8c:	9a08      	ldr	r2, [sp, #32]
 8008f8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f90:	429a      	cmp	r2, r3
 8008f92:	bfa8      	it	ge
 8008f94:	461a      	movge	r2, r3
 8008f96:	2a00      	cmp	r2, #0
 8008f98:	4691      	mov	r9, r2
 8008f9a:	dc38      	bgt.n	800900e <_printf_float+0x346>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9305      	str	r3, [sp, #20]
 8008fa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fa4:	f104 021a 	add.w	r2, r4, #26
 8008fa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008faa:	9905      	ldr	r1, [sp, #20]
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	eba3 0309 	sub.w	r3, r3, r9
 8008fb2:	428b      	cmp	r3, r1
 8008fb4:	dc33      	bgt.n	800901e <_printf_float+0x356>
 8008fb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	db3c      	blt.n	8009038 <_printf_float+0x370>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	07da      	lsls	r2, r3, #31
 8008fc2:	d439      	bmi.n	8009038 <_printf_float+0x370>
 8008fc4:	9b08      	ldr	r3, [sp, #32]
 8008fc6:	9a04      	ldr	r2, [sp, #16]
 8008fc8:	9907      	ldr	r1, [sp, #28]
 8008fca:	1a9a      	subs	r2, r3, r2
 8008fcc:	eba3 0901 	sub.w	r9, r3, r1
 8008fd0:	4591      	cmp	r9, r2
 8008fd2:	bfa8      	it	ge
 8008fd4:	4691      	movge	r9, r2
 8008fd6:	f1b9 0f00 	cmp.w	r9, #0
 8008fda:	dc35      	bgt.n	8009048 <_printf_float+0x380>
 8008fdc:	f04f 0800 	mov.w	r8, #0
 8008fe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fe4:	f104 0a1a 	add.w	sl, r4, #26
 8008fe8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008fec:	1a9b      	subs	r3, r3, r2
 8008fee:	eba3 0309 	sub.w	r3, r3, r9
 8008ff2:	4543      	cmp	r3, r8
 8008ff4:	f77f af75 	ble.w	8008ee2 <_printf_float+0x21a>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	4652      	mov	r2, sl
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4628      	mov	r0, r5
 8009000:	47b8      	blx	r7
 8009002:	3001      	adds	r0, #1
 8009004:	f43f aeae 	beq.w	8008d64 <_printf_float+0x9c>
 8009008:	f108 0801 	add.w	r8, r8, #1
 800900c:	e7ec      	b.n	8008fe8 <_printf_float+0x320>
 800900e:	4613      	mov	r3, r2
 8009010:	4631      	mov	r1, r6
 8009012:	4642      	mov	r2, r8
 8009014:	4628      	mov	r0, r5
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	d1bf      	bne.n	8008f9c <_printf_float+0x2d4>
 800901c:	e6a2      	b.n	8008d64 <_printf_float+0x9c>
 800901e:	2301      	movs	r3, #1
 8009020:	4631      	mov	r1, r6
 8009022:	4628      	mov	r0, r5
 8009024:	9204      	str	r2, [sp, #16]
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f ae9b 	beq.w	8008d64 <_printf_float+0x9c>
 800902e:	9b05      	ldr	r3, [sp, #20]
 8009030:	9a04      	ldr	r2, [sp, #16]
 8009032:	3301      	adds	r3, #1
 8009034:	9305      	str	r3, [sp, #20]
 8009036:	e7b7      	b.n	8008fa8 <_printf_float+0x2e0>
 8009038:	4653      	mov	r3, sl
 800903a:	465a      	mov	r2, fp
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	d1be      	bne.n	8008fc4 <_printf_float+0x2fc>
 8009046:	e68d      	b.n	8008d64 <_printf_float+0x9c>
 8009048:	9a04      	ldr	r2, [sp, #16]
 800904a:	464b      	mov	r3, r9
 800904c:	4442      	add	r2, r8
 800904e:	4631      	mov	r1, r6
 8009050:	4628      	mov	r0, r5
 8009052:	47b8      	blx	r7
 8009054:	3001      	adds	r0, #1
 8009056:	d1c1      	bne.n	8008fdc <_printf_float+0x314>
 8009058:	e684      	b.n	8008d64 <_printf_float+0x9c>
 800905a:	9a08      	ldr	r2, [sp, #32]
 800905c:	2a01      	cmp	r2, #1
 800905e:	dc01      	bgt.n	8009064 <_printf_float+0x39c>
 8009060:	07db      	lsls	r3, r3, #31
 8009062:	d537      	bpl.n	80090d4 <_printf_float+0x40c>
 8009064:	2301      	movs	r3, #1
 8009066:	4642      	mov	r2, r8
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	f43f ae78 	beq.w	8008d64 <_printf_float+0x9c>
 8009074:	4653      	mov	r3, sl
 8009076:	465a      	mov	r2, fp
 8009078:	4631      	mov	r1, r6
 800907a:	4628      	mov	r0, r5
 800907c:	47b8      	blx	r7
 800907e:	3001      	adds	r0, #1
 8009080:	f43f ae70 	beq.w	8008d64 <_printf_float+0x9c>
 8009084:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009088:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800908c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009090:	d01b      	beq.n	80090ca <_printf_float+0x402>
 8009092:	9b08      	ldr	r3, [sp, #32]
 8009094:	f108 0201 	add.w	r2, r8, #1
 8009098:	3b01      	subs	r3, #1
 800909a:	4631      	mov	r1, r6
 800909c:	4628      	mov	r0, r5
 800909e:	47b8      	blx	r7
 80090a0:	3001      	adds	r0, #1
 80090a2:	d10e      	bne.n	80090c2 <_printf_float+0x3fa>
 80090a4:	e65e      	b.n	8008d64 <_printf_float+0x9c>
 80090a6:	2301      	movs	r3, #1
 80090a8:	464a      	mov	r2, r9
 80090aa:	4631      	mov	r1, r6
 80090ac:	4628      	mov	r0, r5
 80090ae:	47b8      	blx	r7
 80090b0:	3001      	adds	r0, #1
 80090b2:	f43f ae57 	beq.w	8008d64 <_printf_float+0x9c>
 80090b6:	f108 0801 	add.w	r8, r8, #1
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	3b01      	subs	r3, #1
 80090be:	4543      	cmp	r3, r8
 80090c0:	dcf1      	bgt.n	80090a6 <_printf_float+0x3de>
 80090c2:	9b04      	ldr	r3, [sp, #16]
 80090c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090c8:	e6db      	b.n	8008e82 <_printf_float+0x1ba>
 80090ca:	f04f 0800 	mov.w	r8, #0
 80090ce:	f104 091a 	add.w	r9, r4, #26
 80090d2:	e7f2      	b.n	80090ba <_printf_float+0x3f2>
 80090d4:	2301      	movs	r3, #1
 80090d6:	4642      	mov	r2, r8
 80090d8:	e7df      	b.n	800909a <_printf_float+0x3d2>
 80090da:	2301      	movs	r3, #1
 80090dc:	464a      	mov	r2, r9
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b8      	blx	r7
 80090e4:	3001      	adds	r0, #1
 80090e6:	f43f ae3d 	beq.w	8008d64 <_printf_float+0x9c>
 80090ea:	f108 0801 	add.w	r8, r8, #1
 80090ee:	68e3      	ldr	r3, [r4, #12]
 80090f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090f2:	1a5b      	subs	r3, r3, r1
 80090f4:	4543      	cmp	r3, r8
 80090f6:	dcf0      	bgt.n	80090da <_printf_float+0x412>
 80090f8:	e6f7      	b.n	8008eea <_printf_float+0x222>
 80090fa:	f04f 0800 	mov.w	r8, #0
 80090fe:	f104 0919 	add.w	r9, r4, #25
 8009102:	e7f4      	b.n	80090ee <_printf_float+0x426>

08009104 <_printf_common>:
 8009104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009108:	4616      	mov	r6, r2
 800910a:	4699      	mov	r9, r3
 800910c:	688a      	ldr	r2, [r1, #8]
 800910e:	690b      	ldr	r3, [r1, #16]
 8009110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009114:	4293      	cmp	r3, r2
 8009116:	bfb8      	it	lt
 8009118:	4613      	movlt	r3, r2
 800911a:	6033      	str	r3, [r6, #0]
 800911c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009120:	4607      	mov	r7, r0
 8009122:	460c      	mov	r4, r1
 8009124:	b10a      	cbz	r2, 800912a <_printf_common+0x26>
 8009126:	3301      	adds	r3, #1
 8009128:	6033      	str	r3, [r6, #0]
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	0699      	lsls	r1, r3, #26
 800912e:	bf42      	ittt	mi
 8009130:	6833      	ldrmi	r3, [r6, #0]
 8009132:	3302      	addmi	r3, #2
 8009134:	6033      	strmi	r3, [r6, #0]
 8009136:	6825      	ldr	r5, [r4, #0]
 8009138:	f015 0506 	ands.w	r5, r5, #6
 800913c:	d106      	bne.n	800914c <_printf_common+0x48>
 800913e:	f104 0a19 	add.w	sl, r4, #25
 8009142:	68e3      	ldr	r3, [r4, #12]
 8009144:	6832      	ldr	r2, [r6, #0]
 8009146:	1a9b      	subs	r3, r3, r2
 8009148:	42ab      	cmp	r3, r5
 800914a:	dc26      	bgt.n	800919a <_printf_common+0x96>
 800914c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009150:	1e13      	subs	r3, r2, #0
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	bf18      	it	ne
 8009156:	2301      	movne	r3, #1
 8009158:	0692      	lsls	r2, r2, #26
 800915a:	d42b      	bmi.n	80091b4 <_printf_common+0xb0>
 800915c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009160:	4649      	mov	r1, r9
 8009162:	4638      	mov	r0, r7
 8009164:	47c0      	blx	r8
 8009166:	3001      	adds	r0, #1
 8009168:	d01e      	beq.n	80091a8 <_printf_common+0xa4>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	68e5      	ldr	r5, [r4, #12]
 800916e:	6832      	ldr	r2, [r6, #0]
 8009170:	f003 0306 	and.w	r3, r3, #6
 8009174:	2b04      	cmp	r3, #4
 8009176:	bf08      	it	eq
 8009178:	1aad      	subeq	r5, r5, r2
 800917a:	68a3      	ldr	r3, [r4, #8]
 800917c:	6922      	ldr	r2, [r4, #16]
 800917e:	bf0c      	ite	eq
 8009180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009184:	2500      	movne	r5, #0
 8009186:	4293      	cmp	r3, r2
 8009188:	bfc4      	itt	gt
 800918a:	1a9b      	subgt	r3, r3, r2
 800918c:	18ed      	addgt	r5, r5, r3
 800918e:	2600      	movs	r6, #0
 8009190:	341a      	adds	r4, #26
 8009192:	42b5      	cmp	r5, r6
 8009194:	d11a      	bne.n	80091cc <_printf_common+0xc8>
 8009196:	2000      	movs	r0, #0
 8009198:	e008      	b.n	80091ac <_printf_common+0xa8>
 800919a:	2301      	movs	r3, #1
 800919c:	4652      	mov	r2, sl
 800919e:	4649      	mov	r1, r9
 80091a0:	4638      	mov	r0, r7
 80091a2:	47c0      	blx	r8
 80091a4:	3001      	adds	r0, #1
 80091a6:	d103      	bne.n	80091b0 <_printf_common+0xac>
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b0:	3501      	adds	r5, #1
 80091b2:	e7c6      	b.n	8009142 <_printf_common+0x3e>
 80091b4:	18e1      	adds	r1, r4, r3
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	2030      	movs	r0, #48	; 0x30
 80091ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091be:	4422      	add	r2, r4
 80091c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091c8:	3302      	adds	r3, #2
 80091ca:	e7c7      	b.n	800915c <_printf_common+0x58>
 80091cc:	2301      	movs	r3, #1
 80091ce:	4622      	mov	r2, r4
 80091d0:	4649      	mov	r1, r9
 80091d2:	4638      	mov	r0, r7
 80091d4:	47c0      	blx	r8
 80091d6:	3001      	adds	r0, #1
 80091d8:	d0e6      	beq.n	80091a8 <_printf_common+0xa4>
 80091da:	3601      	adds	r6, #1
 80091dc:	e7d9      	b.n	8009192 <_printf_common+0x8e>
	...

080091e0 <_printf_i>:
 80091e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091e4:	7e0f      	ldrb	r7, [r1, #24]
 80091e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091e8:	2f78      	cmp	r7, #120	; 0x78
 80091ea:	4691      	mov	r9, r2
 80091ec:	4680      	mov	r8, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	469a      	mov	sl, r3
 80091f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091f6:	d807      	bhi.n	8009208 <_printf_i+0x28>
 80091f8:	2f62      	cmp	r7, #98	; 0x62
 80091fa:	d80a      	bhi.n	8009212 <_printf_i+0x32>
 80091fc:	2f00      	cmp	r7, #0
 80091fe:	f000 80d8 	beq.w	80093b2 <_printf_i+0x1d2>
 8009202:	2f58      	cmp	r7, #88	; 0x58
 8009204:	f000 80a3 	beq.w	800934e <_printf_i+0x16e>
 8009208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800920c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009210:	e03a      	b.n	8009288 <_printf_i+0xa8>
 8009212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009216:	2b15      	cmp	r3, #21
 8009218:	d8f6      	bhi.n	8009208 <_printf_i+0x28>
 800921a:	a101      	add	r1, pc, #4	; (adr r1, 8009220 <_printf_i+0x40>)
 800921c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009220:	08009279 	.word	0x08009279
 8009224:	0800928d 	.word	0x0800928d
 8009228:	08009209 	.word	0x08009209
 800922c:	08009209 	.word	0x08009209
 8009230:	08009209 	.word	0x08009209
 8009234:	08009209 	.word	0x08009209
 8009238:	0800928d 	.word	0x0800928d
 800923c:	08009209 	.word	0x08009209
 8009240:	08009209 	.word	0x08009209
 8009244:	08009209 	.word	0x08009209
 8009248:	08009209 	.word	0x08009209
 800924c:	08009399 	.word	0x08009399
 8009250:	080092bd 	.word	0x080092bd
 8009254:	0800937b 	.word	0x0800937b
 8009258:	08009209 	.word	0x08009209
 800925c:	08009209 	.word	0x08009209
 8009260:	080093bb 	.word	0x080093bb
 8009264:	08009209 	.word	0x08009209
 8009268:	080092bd 	.word	0x080092bd
 800926c:	08009209 	.word	0x08009209
 8009270:	08009209 	.word	0x08009209
 8009274:	08009383 	.word	0x08009383
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	1d1a      	adds	r2, r3, #4
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	602a      	str	r2, [r5, #0]
 8009280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009288:	2301      	movs	r3, #1
 800928a:	e0a3      	b.n	80093d4 <_printf_i+0x1f4>
 800928c:	6820      	ldr	r0, [r4, #0]
 800928e:	6829      	ldr	r1, [r5, #0]
 8009290:	0606      	lsls	r6, r0, #24
 8009292:	f101 0304 	add.w	r3, r1, #4
 8009296:	d50a      	bpl.n	80092ae <_printf_i+0xce>
 8009298:	680e      	ldr	r6, [r1, #0]
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	2e00      	cmp	r6, #0
 800929e:	da03      	bge.n	80092a8 <_printf_i+0xc8>
 80092a0:	232d      	movs	r3, #45	; 0x2d
 80092a2:	4276      	negs	r6, r6
 80092a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092a8:	485e      	ldr	r0, [pc, #376]	; (8009424 <_printf_i+0x244>)
 80092aa:	230a      	movs	r3, #10
 80092ac:	e019      	b.n	80092e2 <_printf_i+0x102>
 80092ae:	680e      	ldr	r6, [r1, #0]
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092b6:	bf18      	it	ne
 80092b8:	b236      	sxthne	r6, r6
 80092ba:	e7ef      	b.n	800929c <_printf_i+0xbc>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	6820      	ldr	r0, [r4, #0]
 80092c0:	1d19      	adds	r1, r3, #4
 80092c2:	6029      	str	r1, [r5, #0]
 80092c4:	0601      	lsls	r1, r0, #24
 80092c6:	d501      	bpl.n	80092cc <_printf_i+0xec>
 80092c8:	681e      	ldr	r6, [r3, #0]
 80092ca:	e002      	b.n	80092d2 <_printf_i+0xf2>
 80092cc:	0646      	lsls	r6, r0, #25
 80092ce:	d5fb      	bpl.n	80092c8 <_printf_i+0xe8>
 80092d0:	881e      	ldrh	r6, [r3, #0]
 80092d2:	4854      	ldr	r0, [pc, #336]	; (8009424 <_printf_i+0x244>)
 80092d4:	2f6f      	cmp	r7, #111	; 0x6f
 80092d6:	bf0c      	ite	eq
 80092d8:	2308      	moveq	r3, #8
 80092da:	230a      	movne	r3, #10
 80092dc:	2100      	movs	r1, #0
 80092de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092e2:	6865      	ldr	r5, [r4, #4]
 80092e4:	60a5      	str	r5, [r4, #8]
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	bfa2      	ittt	ge
 80092ea:	6821      	ldrge	r1, [r4, #0]
 80092ec:	f021 0104 	bicge.w	r1, r1, #4
 80092f0:	6021      	strge	r1, [r4, #0]
 80092f2:	b90e      	cbnz	r6, 80092f8 <_printf_i+0x118>
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	d04d      	beq.n	8009394 <_printf_i+0x1b4>
 80092f8:	4615      	mov	r5, r2
 80092fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80092fe:	fb03 6711 	mls	r7, r3, r1, r6
 8009302:	5dc7      	ldrb	r7, [r0, r7]
 8009304:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009308:	4637      	mov	r7, r6
 800930a:	42bb      	cmp	r3, r7
 800930c:	460e      	mov	r6, r1
 800930e:	d9f4      	bls.n	80092fa <_printf_i+0x11a>
 8009310:	2b08      	cmp	r3, #8
 8009312:	d10b      	bne.n	800932c <_printf_i+0x14c>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	07de      	lsls	r6, r3, #31
 8009318:	d508      	bpl.n	800932c <_printf_i+0x14c>
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	6861      	ldr	r1, [r4, #4]
 800931e:	4299      	cmp	r1, r3
 8009320:	bfde      	ittt	le
 8009322:	2330      	movle	r3, #48	; 0x30
 8009324:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009328:	f105 35ff 	addle.w	r5, r5, #4294967295
 800932c:	1b52      	subs	r2, r2, r5
 800932e:	6122      	str	r2, [r4, #16]
 8009330:	f8cd a000 	str.w	sl, [sp]
 8009334:	464b      	mov	r3, r9
 8009336:	aa03      	add	r2, sp, #12
 8009338:	4621      	mov	r1, r4
 800933a:	4640      	mov	r0, r8
 800933c:	f7ff fee2 	bl	8009104 <_printf_common>
 8009340:	3001      	adds	r0, #1
 8009342:	d14c      	bne.n	80093de <_printf_i+0x1fe>
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	b004      	add	sp, #16
 800934a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934e:	4835      	ldr	r0, [pc, #212]	; (8009424 <_printf_i+0x244>)
 8009350:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009354:	6829      	ldr	r1, [r5, #0]
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	f851 6b04 	ldr.w	r6, [r1], #4
 800935c:	6029      	str	r1, [r5, #0]
 800935e:	061d      	lsls	r5, r3, #24
 8009360:	d514      	bpl.n	800938c <_printf_i+0x1ac>
 8009362:	07df      	lsls	r7, r3, #31
 8009364:	bf44      	itt	mi
 8009366:	f043 0320 	orrmi.w	r3, r3, #32
 800936a:	6023      	strmi	r3, [r4, #0]
 800936c:	b91e      	cbnz	r6, 8009376 <_printf_i+0x196>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	f023 0320 	bic.w	r3, r3, #32
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	2310      	movs	r3, #16
 8009378:	e7b0      	b.n	80092dc <_printf_i+0xfc>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f043 0320 	orr.w	r3, r3, #32
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	2378      	movs	r3, #120	; 0x78
 8009384:	4828      	ldr	r0, [pc, #160]	; (8009428 <_printf_i+0x248>)
 8009386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800938a:	e7e3      	b.n	8009354 <_printf_i+0x174>
 800938c:	0659      	lsls	r1, r3, #25
 800938e:	bf48      	it	mi
 8009390:	b2b6      	uxthmi	r6, r6
 8009392:	e7e6      	b.n	8009362 <_printf_i+0x182>
 8009394:	4615      	mov	r5, r2
 8009396:	e7bb      	b.n	8009310 <_printf_i+0x130>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	6826      	ldr	r6, [r4, #0]
 800939c:	6961      	ldr	r1, [r4, #20]
 800939e:	1d18      	adds	r0, r3, #4
 80093a0:	6028      	str	r0, [r5, #0]
 80093a2:	0635      	lsls	r5, r6, #24
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	d501      	bpl.n	80093ac <_printf_i+0x1cc>
 80093a8:	6019      	str	r1, [r3, #0]
 80093aa:	e002      	b.n	80093b2 <_printf_i+0x1d2>
 80093ac:	0670      	lsls	r0, r6, #25
 80093ae:	d5fb      	bpl.n	80093a8 <_printf_i+0x1c8>
 80093b0:	8019      	strh	r1, [r3, #0]
 80093b2:	2300      	movs	r3, #0
 80093b4:	6123      	str	r3, [r4, #16]
 80093b6:	4615      	mov	r5, r2
 80093b8:	e7ba      	b.n	8009330 <_printf_i+0x150>
 80093ba:	682b      	ldr	r3, [r5, #0]
 80093bc:	1d1a      	adds	r2, r3, #4
 80093be:	602a      	str	r2, [r5, #0]
 80093c0:	681d      	ldr	r5, [r3, #0]
 80093c2:	6862      	ldr	r2, [r4, #4]
 80093c4:	2100      	movs	r1, #0
 80093c6:	4628      	mov	r0, r5
 80093c8:	f7f6 ff9a 	bl	8000300 <memchr>
 80093cc:	b108      	cbz	r0, 80093d2 <_printf_i+0x1f2>
 80093ce:	1b40      	subs	r0, r0, r5
 80093d0:	6060      	str	r0, [r4, #4]
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	2300      	movs	r3, #0
 80093d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093dc:	e7a8      	b.n	8009330 <_printf_i+0x150>
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	462a      	mov	r2, r5
 80093e2:	4649      	mov	r1, r9
 80093e4:	4640      	mov	r0, r8
 80093e6:	47d0      	blx	sl
 80093e8:	3001      	adds	r0, #1
 80093ea:	d0ab      	beq.n	8009344 <_printf_i+0x164>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	079b      	lsls	r3, r3, #30
 80093f0:	d413      	bmi.n	800941a <_printf_i+0x23a>
 80093f2:	68e0      	ldr	r0, [r4, #12]
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	4298      	cmp	r0, r3
 80093f8:	bfb8      	it	lt
 80093fa:	4618      	movlt	r0, r3
 80093fc:	e7a4      	b.n	8009348 <_printf_i+0x168>
 80093fe:	2301      	movs	r3, #1
 8009400:	4632      	mov	r2, r6
 8009402:	4649      	mov	r1, r9
 8009404:	4640      	mov	r0, r8
 8009406:	47d0      	blx	sl
 8009408:	3001      	adds	r0, #1
 800940a:	d09b      	beq.n	8009344 <_printf_i+0x164>
 800940c:	3501      	adds	r5, #1
 800940e:	68e3      	ldr	r3, [r4, #12]
 8009410:	9903      	ldr	r1, [sp, #12]
 8009412:	1a5b      	subs	r3, r3, r1
 8009414:	42ab      	cmp	r3, r5
 8009416:	dcf2      	bgt.n	80093fe <_printf_i+0x21e>
 8009418:	e7eb      	b.n	80093f2 <_printf_i+0x212>
 800941a:	2500      	movs	r5, #0
 800941c:	f104 0619 	add.w	r6, r4, #25
 8009420:	e7f5      	b.n	800940e <_printf_i+0x22e>
 8009422:	bf00      	nop
 8009424:	0800b317 	.word	0x0800b317
 8009428:	0800b328 	.word	0x0800b328

0800942c <__swbuf_r>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	460e      	mov	r6, r1
 8009430:	4614      	mov	r4, r2
 8009432:	4605      	mov	r5, r0
 8009434:	b118      	cbz	r0, 800943e <__swbuf_r+0x12>
 8009436:	6983      	ldr	r3, [r0, #24]
 8009438:	b90b      	cbnz	r3, 800943e <__swbuf_r+0x12>
 800943a:	f000 ffd1 	bl	800a3e0 <__sinit>
 800943e:	4b21      	ldr	r3, [pc, #132]	; (80094c4 <__swbuf_r+0x98>)
 8009440:	429c      	cmp	r4, r3
 8009442:	d12b      	bne.n	800949c <__swbuf_r+0x70>
 8009444:	686c      	ldr	r4, [r5, #4]
 8009446:	69a3      	ldr	r3, [r4, #24]
 8009448:	60a3      	str	r3, [r4, #8]
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	071a      	lsls	r2, r3, #28
 800944e:	d52f      	bpl.n	80094b0 <__swbuf_r+0x84>
 8009450:	6923      	ldr	r3, [r4, #16]
 8009452:	b36b      	cbz	r3, 80094b0 <__swbuf_r+0x84>
 8009454:	6923      	ldr	r3, [r4, #16]
 8009456:	6820      	ldr	r0, [r4, #0]
 8009458:	1ac0      	subs	r0, r0, r3
 800945a:	6963      	ldr	r3, [r4, #20]
 800945c:	b2f6      	uxtb	r6, r6
 800945e:	4283      	cmp	r3, r0
 8009460:	4637      	mov	r7, r6
 8009462:	dc04      	bgt.n	800946e <__swbuf_r+0x42>
 8009464:	4621      	mov	r1, r4
 8009466:	4628      	mov	r0, r5
 8009468:	f000 ff26 	bl	800a2b8 <_fflush_r>
 800946c:	bb30      	cbnz	r0, 80094bc <__swbuf_r+0x90>
 800946e:	68a3      	ldr	r3, [r4, #8]
 8009470:	3b01      	subs	r3, #1
 8009472:	60a3      	str	r3, [r4, #8]
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	701e      	strb	r6, [r3, #0]
 800947c:	6963      	ldr	r3, [r4, #20]
 800947e:	3001      	adds	r0, #1
 8009480:	4283      	cmp	r3, r0
 8009482:	d004      	beq.n	800948e <__swbuf_r+0x62>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	07db      	lsls	r3, r3, #31
 8009488:	d506      	bpl.n	8009498 <__swbuf_r+0x6c>
 800948a:	2e0a      	cmp	r6, #10
 800948c:	d104      	bne.n	8009498 <__swbuf_r+0x6c>
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f000 ff11 	bl	800a2b8 <_fflush_r>
 8009496:	b988      	cbnz	r0, 80094bc <__swbuf_r+0x90>
 8009498:	4638      	mov	r0, r7
 800949a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800949c:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <__swbuf_r+0x9c>)
 800949e:	429c      	cmp	r4, r3
 80094a0:	d101      	bne.n	80094a6 <__swbuf_r+0x7a>
 80094a2:	68ac      	ldr	r4, [r5, #8]
 80094a4:	e7cf      	b.n	8009446 <__swbuf_r+0x1a>
 80094a6:	4b09      	ldr	r3, [pc, #36]	; (80094cc <__swbuf_r+0xa0>)
 80094a8:	429c      	cmp	r4, r3
 80094aa:	bf08      	it	eq
 80094ac:	68ec      	ldreq	r4, [r5, #12]
 80094ae:	e7ca      	b.n	8009446 <__swbuf_r+0x1a>
 80094b0:	4621      	mov	r1, r4
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 f80c 	bl	80094d0 <__swsetup_r>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d0cb      	beq.n	8009454 <__swbuf_r+0x28>
 80094bc:	f04f 37ff 	mov.w	r7, #4294967295
 80094c0:	e7ea      	b.n	8009498 <__swbuf_r+0x6c>
 80094c2:	bf00      	nop
 80094c4:	0800b3ec 	.word	0x0800b3ec
 80094c8:	0800b40c 	.word	0x0800b40c
 80094cc:	0800b3cc 	.word	0x0800b3cc

080094d0 <__swsetup_r>:
 80094d0:	4b32      	ldr	r3, [pc, #200]	; (800959c <__swsetup_r+0xcc>)
 80094d2:	b570      	push	{r4, r5, r6, lr}
 80094d4:	681d      	ldr	r5, [r3, #0]
 80094d6:	4606      	mov	r6, r0
 80094d8:	460c      	mov	r4, r1
 80094da:	b125      	cbz	r5, 80094e6 <__swsetup_r+0x16>
 80094dc:	69ab      	ldr	r3, [r5, #24]
 80094de:	b913      	cbnz	r3, 80094e6 <__swsetup_r+0x16>
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 ff7d 	bl	800a3e0 <__sinit>
 80094e6:	4b2e      	ldr	r3, [pc, #184]	; (80095a0 <__swsetup_r+0xd0>)
 80094e8:	429c      	cmp	r4, r3
 80094ea:	d10f      	bne.n	800950c <__swsetup_r+0x3c>
 80094ec:	686c      	ldr	r4, [r5, #4]
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094f4:	0719      	lsls	r1, r3, #28
 80094f6:	d42c      	bmi.n	8009552 <__swsetup_r+0x82>
 80094f8:	06dd      	lsls	r5, r3, #27
 80094fa:	d411      	bmi.n	8009520 <__swsetup_r+0x50>
 80094fc:	2309      	movs	r3, #9
 80094fe:	6033      	str	r3, [r6, #0]
 8009500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	f04f 30ff 	mov.w	r0, #4294967295
 800950a:	e03e      	b.n	800958a <__swsetup_r+0xba>
 800950c:	4b25      	ldr	r3, [pc, #148]	; (80095a4 <__swsetup_r+0xd4>)
 800950e:	429c      	cmp	r4, r3
 8009510:	d101      	bne.n	8009516 <__swsetup_r+0x46>
 8009512:	68ac      	ldr	r4, [r5, #8]
 8009514:	e7eb      	b.n	80094ee <__swsetup_r+0x1e>
 8009516:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <__swsetup_r+0xd8>)
 8009518:	429c      	cmp	r4, r3
 800951a:	bf08      	it	eq
 800951c:	68ec      	ldreq	r4, [r5, #12]
 800951e:	e7e6      	b.n	80094ee <__swsetup_r+0x1e>
 8009520:	0758      	lsls	r0, r3, #29
 8009522:	d512      	bpl.n	800954a <__swsetup_r+0x7a>
 8009524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009526:	b141      	cbz	r1, 800953a <__swsetup_r+0x6a>
 8009528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800952c:	4299      	cmp	r1, r3
 800952e:	d002      	beq.n	8009536 <__swsetup_r+0x66>
 8009530:	4630      	mov	r0, r6
 8009532:	f001 fc0f 	bl	800ad54 <_free_r>
 8009536:	2300      	movs	r3, #0
 8009538:	6363      	str	r3, [r4, #52]	; 0x34
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009540:	81a3      	strh	r3, [r4, #12]
 8009542:	2300      	movs	r3, #0
 8009544:	6063      	str	r3, [r4, #4]
 8009546:	6923      	ldr	r3, [r4, #16]
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	f043 0308 	orr.w	r3, r3, #8
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	b94b      	cbnz	r3, 800956a <__swsetup_r+0x9a>
 8009556:	89a3      	ldrh	r3, [r4, #12]
 8009558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800955c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009560:	d003      	beq.n	800956a <__swsetup_r+0x9a>
 8009562:	4621      	mov	r1, r4
 8009564:	4630      	mov	r0, r6
 8009566:	f001 f805 	bl	800a574 <__smakebuf_r>
 800956a:	89a0      	ldrh	r0, [r4, #12]
 800956c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009570:	f010 0301 	ands.w	r3, r0, #1
 8009574:	d00a      	beq.n	800958c <__swsetup_r+0xbc>
 8009576:	2300      	movs	r3, #0
 8009578:	60a3      	str	r3, [r4, #8]
 800957a:	6963      	ldr	r3, [r4, #20]
 800957c:	425b      	negs	r3, r3
 800957e:	61a3      	str	r3, [r4, #24]
 8009580:	6923      	ldr	r3, [r4, #16]
 8009582:	b943      	cbnz	r3, 8009596 <__swsetup_r+0xc6>
 8009584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009588:	d1ba      	bne.n	8009500 <__swsetup_r+0x30>
 800958a:	bd70      	pop	{r4, r5, r6, pc}
 800958c:	0781      	lsls	r1, r0, #30
 800958e:	bf58      	it	pl
 8009590:	6963      	ldrpl	r3, [r4, #20]
 8009592:	60a3      	str	r3, [r4, #8]
 8009594:	e7f4      	b.n	8009580 <__swsetup_r+0xb0>
 8009596:	2000      	movs	r0, #0
 8009598:	e7f7      	b.n	800958a <__swsetup_r+0xba>
 800959a:	bf00      	nop
 800959c:	24000010 	.word	0x24000010
 80095a0:	0800b3ec 	.word	0x0800b3ec
 80095a4:	0800b40c 	.word	0x0800b40c
 80095a8:	0800b3cc 	.word	0x0800b3cc

080095ac <abort>:
 80095ac:	b508      	push	{r3, lr}
 80095ae:	2006      	movs	r0, #6
 80095b0:	f001 fce8 	bl	800af84 <raise>
 80095b4:	2001      	movs	r0, #1
 80095b6:	f7f8 f97a 	bl	80018ae <_exit>

080095ba <quorem>:
 80095ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095be:	6903      	ldr	r3, [r0, #16]
 80095c0:	690c      	ldr	r4, [r1, #16]
 80095c2:	42a3      	cmp	r3, r4
 80095c4:	4607      	mov	r7, r0
 80095c6:	f2c0 8081 	blt.w	80096cc <quorem+0x112>
 80095ca:	3c01      	subs	r4, #1
 80095cc:	f101 0814 	add.w	r8, r1, #20
 80095d0:	f100 0514 	add.w	r5, r0, #20
 80095d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095e2:	3301      	adds	r3, #1
 80095e4:	429a      	cmp	r2, r3
 80095e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80095ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80095f2:	d331      	bcc.n	8009658 <quorem+0x9e>
 80095f4:	f04f 0e00 	mov.w	lr, #0
 80095f8:	4640      	mov	r0, r8
 80095fa:	46ac      	mov	ip, r5
 80095fc:	46f2      	mov	sl, lr
 80095fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8009602:	b293      	uxth	r3, r2
 8009604:	fb06 e303 	mla	r3, r6, r3, lr
 8009608:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800960c:	b29b      	uxth	r3, r3
 800960e:	ebaa 0303 	sub.w	r3, sl, r3
 8009612:	f8dc a000 	ldr.w	sl, [ip]
 8009616:	0c12      	lsrs	r2, r2, #16
 8009618:	fa13 f38a 	uxtah	r3, r3, sl
 800961c:	fb06 e202 	mla	r2, r6, r2, lr
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	9b00      	ldr	r3, [sp, #0]
 8009624:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009628:	b292      	uxth	r2, r2
 800962a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800962e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009632:	f8bd 3000 	ldrh.w	r3, [sp]
 8009636:	4581      	cmp	r9, r0
 8009638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800963c:	f84c 3b04 	str.w	r3, [ip], #4
 8009640:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009644:	d2db      	bcs.n	80095fe <quorem+0x44>
 8009646:	f855 300b 	ldr.w	r3, [r5, fp]
 800964a:	b92b      	cbnz	r3, 8009658 <quorem+0x9e>
 800964c:	9b01      	ldr	r3, [sp, #4]
 800964e:	3b04      	subs	r3, #4
 8009650:	429d      	cmp	r5, r3
 8009652:	461a      	mov	r2, r3
 8009654:	d32e      	bcc.n	80096b4 <quorem+0xfa>
 8009656:	613c      	str	r4, [r7, #16]
 8009658:	4638      	mov	r0, r7
 800965a:	f001 fa63 	bl	800ab24 <__mcmp>
 800965e:	2800      	cmp	r0, #0
 8009660:	db24      	blt.n	80096ac <quorem+0xf2>
 8009662:	3601      	adds	r6, #1
 8009664:	4628      	mov	r0, r5
 8009666:	f04f 0c00 	mov.w	ip, #0
 800966a:	f858 2b04 	ldr.w	r2, [r8], #4
 800966e:	f8d0 e000 	ldr.w	lr, [r0]
 8009672:	b293      	uxth	r3, r2
 8009674:	ebac 0303 	sub.w	r3, ip, r3
 8009678:	0c12      	lsrs	r2, r2, #16
 800967a:	fa13 f38e 	uxtah	r3, r3, lr
 800967e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009682:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009686:	b29b      	uxth	r3, r3
 8009688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800968c:	45c1      	cmp	r9, r8
 800968e:	f840 3b04 	str.w	r3, [r0], #4
 8009692:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009696:	d2e8      	bcs.n	800966a <quorem+0xb0>
 8009698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800969c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096a0:	b922      	cbnz	r2, 80096ac <quorem+0xf2>
 80096a2:	3b04      	subs	r3, #4
 80096a4:	429d      	cmp	r5, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	d30a      	bcc.n	80096c0 <quorem+0x106>
 80096aa:	613c      	str	r4, [r7, #16]
 80096ac:	4630      	mov	r0, r6
 80096ae:	b003      	add	sp, #12
 80096b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	3b04      	subs	r3, #4
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	d1cc      	bne.n	8009656 <quorem+0x9c>
 80096bc:	3c01      	subs	r4, #1
 80096be:	e7c7      	b.n	8009650 <quorem+0x96>
 80096c0:	6812      	ldr	r2, [r2, #0]
 80096c2:	3b04      	subs	r3, #4
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	d1f0      	bne.n	80096aa <quorem+0xf0>
 80096c8:	3c01      	subs	r4, #1
 80096ca:	e7eb      	b.n	80096a4 <quorem+0xea>
 80096cc:	2000      	movs	r0, #0
 80096ce:	e7ee      	b.n	80096ae <quorem+0xf4>

080096d0 <_dtoa_r>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	ed2d 8b02 	vpush	{d8}
 80096d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096da:	b091      	sub	sp, #68	; 0x44
 80096dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80096e0:	ec59 8b10 	vmov	r8, r9, d0
 80096e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80096e6:	9106      	str	r1, [sp, #24]
 80096e8:	4606      	mov	r6, r0
 80096ea:	9208      	str	r2, [sp, #32]
 80096ec:	930c      	str	r3, [sp, #48]	; 0x30
 80096ee:	b975      	cbnz	r5, 800970e <_dtoa_r+0x3e>
 80096f0:	2010      	movs	r0, #16
 80096f2:	f000 ff7f 	bl	800a5f4 <malloc>
 80096f6:	4602      	mov	r2, r0
 80096f8:	6270      	str	r0, [r6, #36]	; 0x24
 80096fa:	b920      	cbnz	r0, 8009706 <_dtoa_r+0x36>
 80096fc:	4baa      	ldr	r3, [pc, #680]	; (80099a8 <_dtoa_r+0x2d8>)
 80096fe:	21ea      	movs	r1, #234	; 0xea
 8009700:	48aa      	ldr	r0, [pc, #680]	; (80099ac <_dtoa_r+0x2dc>)
 8009702:	f7ff f893 	bl	800882c <__assert_func>
 8009706:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800970a:	6005      	str	r5, [r0, #0]
 800970c:	60c5      	str	r5, [r0, #12]
 800970e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009710:	6819      	ldr	r1, [r3, #0]
 8009712:	b151      	cbz	r1, 800972a <_dtoa_r+0x5a>
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	604a      	str	r2, [r1, #4]
 8009718:	2301      	movs	r3, #1
 800971a:	4093      	lsls	r3, r2
 800971c:	608b      	str	r3, [r1, #8]
 800971e:	4630      	mov	r0, r6
 8009720:	f000 ffbe 	bl	800a6a0 <_Bfree>
 8009724:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009726:	2200      	movs	r2, #0
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	f1b9 0300 	subs.w	r3, r9, #0
 800972e:	bfbb      	ittet	lt
 8009730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009734:	9303      	strlt	r3, [sp, #12]
 8009736:	2300      	movge	r3, #0
 8009738:	2201      	movlt	r2, #1
 800973a:	bfac      	ite	ge
 800973c:	6023      	strge	r3, [r4, #0]
 800973e:	6022      	strlt	r2, [r4, #0]
 8009740:	4b9b      	ldr	r3, [pc, #620]	; (80099b0 <_dtoa_r+0x2e0>)
 8009742:	9c03      	ldr	r4, [sp, #12]
 8009744:	43a3      	bics	r3, r4
 8009746:	d11c      	bne.n	8009782 <_dtoa_r+0xb2>
 8009748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800974a:	f242 730f 	movw	r3, #9999	; 0x270f
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009754:	ea53 0308 	orrs.w	r3, r3, r8
 8009758:	f000 84fd 	beq.w	800a156 <_dtoa_r+0xa86>
 800975c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800975e:	b963      	cbnz	r3, 800977a <_dtoa_r+0xaa>
 8009760:	4b94      	ldr	r3, [pc, #592]	; (80099b4 <_dtoa_r+0x2e4>)
 8009762:	e01f      	b.n	80097a4 <_dtoa_r+0xd4>
 8009764:	4b94      	ldr	r3, [pc, #592]	; (80099b8 <_dtoa_r+0x2e8>)
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	3308      	adds	r3, #8
 800976a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	9801      	ldr	r0, [sp, #4]
 8009770:	b011      	add	sp, #68	; 0x44
 8009772:	ecbd 8b02 	vpop	{d8}
 8009776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977a:	4b8e      	ldr	r3, [pc, #568]	; (80099b4 <_dtoa_r+0x2e4>)
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	3303      	adds	r3, #3
 8009780:	e7f3      	b.n	800976a <_dtoa_r+0x9a>
 8009782:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009786:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800978a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978e:	d10b      	bne.n	80097a8 <_dtoa_r+0xd8>
 8009790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009792:	2301      	movs	r3, #1
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 84d9 	beq.w	800a150 <_dtoa_r+0xa80>
 800979e:	4887      	ldr	r0, [pc, #540]	; (80099bc <_dtoa_r+0x2ec>)
 80097a0:	6018      	str	r0, [r3, #0]
 80097a2:	1e43      	subs	r3, r0, #1
 80097a4:	9301      	str	r3, [sp, #4]
 80097a6:	e7e2      	b.n	800976e <_dtoa_r+0x9e>
 80097a8:	a90f      	add	r1, sp, #60	; 0x3c
 80097aa:	aa0e      	add	r2, sp, #56	; 0x38
 80097ac:	4630      	mov	r0, r6
 80097ae:	eeb0 0b48 	vmov.f64	d0, d8
 80097b2:	f001 fa5d 	bl	800ac70 <__d2b>
 80097b6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80097ba:	4605      	mov	r5, r0
 80097bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80097be:	2900      	cmp	r1, #0
 80097c0:	d046      	beq.n	8009850 <_dtoa_r+0x180>
 80097c2:	ee18 4a90 	vmov	r4, s17
 80097c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80097ca:	ec53 2b18 	vmov	r2, r3, d8
 80097ce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80097d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80097da:	2400      	movs	r4, #0
 80097dc:	ec43 2b16 	vmov	d6, r2, r3
 80097e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80097e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009990 <_dtoa_r+0x2c0>
 80097e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80097ec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009998 <_dtoa_r+0x2c8>
 80097f0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80097f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80099a0 <_dtoa_r+0x2d0>
 80097f8:	ee07 1a90 	vmov	s15, r1
 80097fc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009800:	eeb0 7b46 	vmov.f64	d7, d6
 8009804:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009808:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800980c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009814:	ee16 ba90 	vmov	fp, s13
 8009818:	940a      	str	r4, [sp, #40]	; 0x28
 800981a:	d508      	bpl.n	800982e <_dtoa_r+0x15e>
 800981c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009820:	eeb4 6b47 	vcmp.f64	d6, d7
 8009824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009828:	bf18      	it	ne
 800982a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800982e:	f1bb 0f16 	cmp.w	fp, #22
 8009832:	d82f      	bhi.n	8009894 <_dtoa_r+0x1c4>
 8009834:	4b62      	ldr	r3, [pc, #392]	; (80099c0 <_dtoa_r+0x2f0>)
 8009836:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800983a:	ed93 7b00 	vldr	d7, [r3]
 800983e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	d501      	bpl.n	800984c <_dtoa_r+0x17c>
 8009848:	f10b 3bff 	add.w	fp, fp, #4294967295
 800984c:	2300      	movs	r3, #0
 800984e:	e022      	b.n	8009896 <_dtoa_r+0x1c6>
 8009850:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009852:	4401      	add	r1, r0
 8009854:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009858:	2b20      	cmp	r3, #32
 800985a:	bfc1      	itttt	gt
 800985c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009860:	fa04 f303 	lslgt.w	r3, r4, r3
 8009864:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009868:	fa28 f804 	lsrgt.w	r8, r8, r4
 800986c:	bfd6      	itet	le
 800986e:	f1c3 0320 	rsble	r3, r3, #32
 8009872:	ea43 0808 	orrgt.w	r8, r3, r8
 8009876:	fa08 f803 	lslle.w	r8, r8, r3
 800987a:	ee07 8a90 	vmov	s15, r8
 800987e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009882:	3901      	subs	r1, #1
 8009884:	ee17 4a90 	vmov	r4, s15
 8009888:	ec53 2b17 	vmov	r2, r3, d7
 800988c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009890:	2401      	movs	r4, #1
 8009892:	e7a3      	b.n	80097dc <_dtoa_r+0x10c>
 8009894:	2301      	movs	r3, #1
 8009896:	930b      	str	r3, [sp, #44]	; 0x2c
 8009898:	1a43      	subs	r3, r0, r1
 800989a:	1e5a      	subs	r2, r3, #1
 800989c:	bf45      	ittet	mi
 800989e:	f1c3 0301 	rsbmi	r3, r3, #1
 80098a2:	9304      	strmi	r3, [sp, #16]
 80098a4:	2300      	movpl	r3, #0
 80098a6:	2300      	movmi	r3, #0
 80098a8:	9205      	str	r2, [sp, #20]
 80098aa:	bf54      	ite	pl
 80098ac:	9304      	strpl	r3, [sp, #16]
 80098ae:	9305      	strmi	r3, [sp, #20]
 80098b0:	f1bb 0f00 	cmp.w	fp, #0
 80098b4:	db18      	blt.n	80098e8 <_dtoa_r+0x218>
 80098b6:	9b05      	ldr	r3, [sp, #20]
 80098b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80098bc:	445b      	add	r3, fp
 80098be:	9305      	str	r3, [sp, #20]
 80098c0:	2300      	movs	r3, #0
 80098c2:	9a06      	ldr	r2, [sp, #24]
 80098c4:	2a09      	cmp	r2, #9
 80098c6:	d849      	bhi.n	800995c <_dtoa_r+0x28c>
 80098c8:	2a05      	cmp	r2, #5
 80098ca:	bfc4      	itt	gt
 80098cc:	3a04      	subgt	r2, #4
 80098ce:	9206      	strgt	r2, [sp, #24]
 80098d0:	9a06      	ldr	r2, [sp, #24]
 80098d2:	f1a2 0202 	sub.w	r2, r2, #2
 80098d6:	bfcc      	ite	gt
 80098d8:	2400      	movgt	r4, #0
 80098da:	2401      	movle	r4, #1
 80098dc:	2a03      	cmp	r2, #3
 80098de:	d848      	bhi.n	8009972 <_dtoa_r+0x2a2>
 80098e0:	e8df f002 	tbb	[pc, r2]
 80098e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80098e8:	9b04      	ldr	r3, [sp, #16]
 80098ea:	2200      	movs	r2, #0
 80098ec:	eba3 030b 	sub.w	r3, r3, fp
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	9209      	str	r2, [sp, #36]	; 0x24
 80098f4:	f1cb 0300 	rsb	r3, fp, #0
 80098f8:	e7e3      	b.n	80098c2 <_dtoa_r+0x1f2>
 80098fa:	2200      	movs	r2, #0
 80098fc:	9207      	str	r2, [sp, #28]
 80098fe:	9a08      	ldr	r2, [sp, #32]
 8009900:	2a00      	cmp	r2, #0
 8009902:	dc39      	bgt.n	8009978 <_dtoa_r+0x2a8>
 8009904:	f04f 0a01 	mov.w	sl, #1
 8009908:	46d1      	mov	r9, sl
 800990a:	4652      	mov	r2, sl
 800990c:	f8cd a020 	str.w	sl, [sp, #32]
 8009910:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009912:	2100      	movs	r1, #0
 8009914:	6079      	str	r1, [r7, #4]
 8009916:	2004      	movs	r0, #4
 8009918:	f100 0c14 	add.w	ip, r0, #20
 800991c:	4594      	cmp	ip, r2
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	d92f      	bls.n	8009982 <_dtoa_r+0x2b2>
 8009922:	4630      	mov	r0, r6
 8009924:	930d      	str	r3, [sp, #52]	; 0x34
 8009926:	f000 fe7b 	bl	800a620 <_Balloc>
 800992a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800992c:	9001      	str	r0, [sp, #4]
 800992e:	4602      	mov	r2, r0
 8009930:	2800      	cmp	r0, #0
 8009932:	d149      	bne.n	80099c8 <_dtoa_r+0x2f8>
 8009934:	4b23      	ldr	r3, [pc, #140]	; (80099c4 <_dtoa_r+0x2f4>)
 8009936:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800993a:	e6e1      	b.n	8009700 <_dtoa_r+0x30>
 800993c:	2201      	movs	r2, #1
 800993e:	e7dd      	b.n	80098fc <_dtoa_r+0x22c>
 8009940:	2200      	movs	r2, #0
 8009942:	9207      	str	r2, [sp, #28]
 8009944:	9a08      	ldr	r2, [sp, #32]
 8009946:	eb0b 0a02 	add.w	sl, fp, r2
 800994a:	f10a 0901 	add.w	r9, sl, #1
 800994e:	464a      	mov	r2, r9
 8009950:	2a01      	cmp	r2, #1
 8009952:	bfb8      	it	lt
 8009954:	2201      	movlt	r2, #1
 8009956:	e7db      	b.n	8009910 <_dtoa_r+0x240>
 8009958:	2201      	movs	r2, #1
 800995a:	e7f2      	b.n	8009942 <_dtoa_r+0x272>
 800995c:	2401      	movs	r4, #1
 800995e:	2200      	movs	r2, #0
 8009960:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009964:	f04f 3aff 	mov.w	sl, #4294967295
 8009968:	2100      	movs	r1, #0
 800996a:	46d1      	mov	r9, sl
 800996c:	2212      	movs	r2, #18
 800996e:	9108      	str	r1, [sp, #32]
 8009970:	e7ce      	b.n	8009910 <_dtoa_r+0x240>
 8009972:	2201      	movs	r2, #1
 8009974:	9207      	str	r2, [sp, #28]
 8009976:	e7f5      	b.n	8009964 <_dtoa_r+0x294>
 8009978:	f8dd a020 	ldr.w	sl, [sp, #32]
 800997c:	46d1      	mov	r9, sl
 800997e:	4652      	mov	r2, sl
 8009980:	e7c6      	b.n	8009910 <_dtoa_r+0x240>
 8009982:	3101      	adds	r1, #1
 8009984:	6079      	str	r1, [r7, #4]
 8009986:	0040      	lsls	r0, r0, #1
 8009988:	e7c6      	b.n	8009918 <_dtoa_r+0x248>
 800998a:	bf00      	nop
 800998c:	f3af 8000 	nop.w
 8009990:	636f4361 	.word	0x636f4361
 8009994:	3fd287a7 	.word	0x3fd287a7
 8009998:	8b60c8b3 	.word	0x8b60c8b3
 800999c:	3fc68a28 	.word	0x3fc68a28
 80099a0:	509f79fb 	.word	0x509f79fb
 80099a4:	3fd34413 	.word	0x3fd34413
 80099a8:	0800b346 	.word	0x0800b346
 80099ac:	0800b35d 	.word	0x0800b35d
 80099b0:	7ff00000 	.word	0x7ff00000
 80099b4:	0800b342 	.word	0x0800b342
 80099b8:	0800b339 	.word	0x0800b339
 80099bc:	0800b316 	.word	0x0800b316
 80099c0:	0800b4b0 	.word	0x0800b4b0
 80099c4:	0800b3b8 	.word	0x0800b3b8
 80099c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80099ca:	9901      	ldr	r1, [sp, #4]
 80099cc:	6011      	str	r1, [r2, #0]
 80099ce:	f1b9 0f0e 	cmp.w	r9, #14
 80099d2:	d86c      	bhi.n	8009aae <_dtoa_r+0x3de>
 80099d4:	2c00      	cmp	r4, #0
 80099d6:	d06a      	beq.n	8009aae <_dtoa_r+0x3de>
 80099d8:	f1bb 0f00 	cmp.w	fp, #0
 80099dc:	f340 80a0 	ble.w	8009b20 <_dtoa_r+0x450>
 80099e0:	49c1      	ldr	r1, [pc, #772]	; (8009ce8 <_dtoa_r+0x618>)
 80099e2:	f00b 020f 	and.w	r2, fp, #15
 80099e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80099ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80099ee:	ed92 7b00 	vldr	d7, [r2]
 80099f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80099f6:	f000 8087 	beq.w	8009b08 <_dtoa_r+0x438>
 80099fa:	4abc      	ldr	r2, [pc, #752]	; (8009cec <_dtoa_r+0x61c>)
 80099fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8009a00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009a04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a08:	f001 010f 	and.w	r1, r1, #15
 8009a0c:	2203      	movs	r2, #3
 8009a0e:	48b7      	ldr	r0, [pc, #732]	; (8009cec <_dtoa_r+0x61c>)
 8009a10:	2900      	cmp	r1, #0
 8009a12:	d17b      	bne.n	8009b0c <_dtoa_r+0x43c>
 8009a14:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a22:	2900      	cmp	r1, #0
 8009a24:	f000 80a2 	beq.w	8009b6c <_dtoa_r+0x49c>
 8009a28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009a2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a38:	f140 8098 	bpl.w	8009b6c <_dtoa_r+0x49c>
 8009a3c:	f1b9 0f00 	cmp.w	r9, #0
 8009a40:	f000 8094 	beq.w	8009b6c <_dtoa_r+0x49c>
 8009a44:	f1ba 0f00 	cmp.w	sl, #0
 8009a48:	dd2f      	ble.n	8009aaa <_dtoa_r+0x3da>
 8009a4a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a52:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a56:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009a5a:	3201      	adds	r2, #1
 8009a5c:	4650      	mov	r0, sl
 8009a5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009a66:	ee07 2a90 	vmov	s15, r2
 8009a6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a6e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009a72:	ee15 4a90 	vmov	r4, s11
 8009a76:	ec52 1b15 	vmov	r1, r2, d5
 8009a7a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d177      	bne.n	8009b72 <_dtoa_r+0x4a2>
 8009a82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009a86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009a8a:	ec42 1b17 	vmov	d7, r1, r2
 8009a8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	f300 8263 	bgt.w	8009f60 <_dtoa_r+0x890>
 8009a9a:	eeb1 7b47 	vneg.f64	d7, d7
 8009a9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa6:	f100 8258 	bmi.w	8009f5a <_dtoa_r+0x88a>
 8009aaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ab0:	2a00      	cmp	r2, #0
 8009ab2:	f2c0 811d 	blt.w	8009cf0 <_dtoa_r+0x620>
 8009ab6:	f1bb 0f0e 	cmp.w	fp, #14
 8009aba:	f300 8119 	bgt.w	8009cf0 <_dtoa_r+0x620>
 8009abe:	4b8a      	ldr	r3, [pc, #552]	; (8009ce8 <_dtoa_r+0x618>)
 8009ac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ac4:	ed93 6b00 	vldr	d6, [r3]
 8009ac8:	9b08      	ldr	r3, [sp, #32]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f280 80b7 	bge.w	8009c3e <_dtoa_r+0x56e>
 8009ad0:	f1b9 0f00 	cmp.w	r9, #0
 8009ad4:	f300 80b3 	bgt.w	8009c3e <_dtoa_r+0x56e>
 8009ad8:	f040 823f 	bne.w	8009f5a <_dtoa_r+0x88a>
 8009adc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009ae0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009ae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ae8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af0:	464c      	mov	r4, r9
 8009af2:	464f      	mov	r7, r9
 8009af4:	f280 8215 	bge.w	8009f22 <_dtoa_r+0x852>
 8009af8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009afc:	2331      	movs	r3, #49	; 0x31
 8009afe:	f808 3b01 	strb.w	r3, [r8], #1
 8009b02:	f10b 0b01 	add.w	fp, fp, #1
 8009b06:	e211      	b.n	8009f2c <_dtoa_r+0x85c>
 8009b08:	2202      	movs	r2, #2
 8009b0a:	e780      	b.n	8009a0e <_dtoa_r+0x33e>
 8009b0c:	07cc      	lsls	r4, r1, #31
 8009b0e:	d504      	bpl.n	8009b1a <_dtoa_r+0x44a>
 8009b10:	ed90 6b00 	vldr	d6, [r0]
 8009b14:	3201      	adds	r2, #1
 8009b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b1a:	1049      	asrs	r1, r1, #1
 8009b1c:	3008      	adds	r0, #8
 8009b1e:	e777      	b.n	8009a10 <_dtoa_r+0x340>
 8009b20:	d022      	beq.n	8009b68 <_dtoa_r+0x498>
 8009b22:	f1cb 0100 	rsb	r1, fp, #0
 8009b26:	4a70      	ldr	r2, [pc, #448]	; (8009ce8 <_dtoa_r+0x618>)
 8009b28:	f001 000f 	and.w	r0, r1, #15
 8009b2c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009b30:	ed92 7b00 	vldr	d7, [r2]
 8009b34:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009b38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b3c:	486b      	ldr	r0, [pc, #428]	; (8009cec <_dtoa_r+0x61c>)
 8009b3e:	1109      	asrs	r1, r1, #4
 8009b40:	2400      	movs	r4, #0
 8009b42:	2202      	movs	r2, #2
 8009b44:	b929      	cbnz	r1, 8009b52 <_dtoa_r+0x482>
 8009b46:	2c00      	cmp	r4, #0
 8009b48:	f43f af6a 	beq.w	8009a20 <_dtoa_r+0x350>
 8009b4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b50:	e766      	b.n	8009a20 <_dtoa_r+0x350>
 8009b52:	07cf      	lsls	r7, r1, #31
 8009b54:	d505      	bpl.n	8009b62 <_dtoa_r+0x492>
 8009b56:	ed90 6b00 	vldr	d6, [r0]
 8009b5a:	3201      	adds	r2, #1
 8009b5c:	2401      	movs	r4, #1
 8009b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b62:	1049      	asrs	r1, r1, #1
 8009b64:	3008      	adds	r0, #8
 8009b66:	e7ed      	b.n	8009b44 <_dtoa_r+0x474>
 8009b68:	2202      	movs	r2, #2
 8009b6a:	e759      	b.n	8009a20 <_dtoa_r+0x350>
 8009b6c:	465f      	mov	r7, fp
 8009b6e:	4648      	mov	r0, r9
 8009b70:	e775      	b.n	8009a5e <_dtoa_r+0x38e>
 8009b72:	ec42 1b17 	vmov	d7, r1, r2
 8009b76:	4a5c      	ldr	r2, [pc, #368]	; (8009ce8 <_dtoa_r+0x618>)
 8009b78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009b7c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009b80:	9a01      	ldr	r2, [sp, #4]
 8009b82:	1814      	adds	r4, r2, r0
 8009b84:	9a07      	ldr	r2, [sp, #28]
 8009b86:	b352      	cbz	r2, 8009bde <_dtoa_r+0x50e>
 8009b88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009b8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009b90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009b98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009b9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ba0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ba4:	ee14 2a90 	vmov	r2, s9
 8009ba8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009bac:	3230      	adds	r2, #48	; 0x30
 8009bae:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009bb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bba:	f808 2b01 	strb.w	r2, [r8], #1
 8009bbe:	d439      	bmi.n	8009c34 <_dtoa_r+0x564>
 8009bc0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009bc4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bcc:	d472      	bmi.n	8009cb4 <_dtoa_r+0x5e4>
 8009bce:	45a0      	cmp	r8, r4
 8009bd0:	f43f af6b 	beq.w	8009aaa <_dtoa_r+0x3da>
 8009bd4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009bd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009bdc:	e7e0      	b.n	8009ba0 <_dtoa_r+0x4d0>
 8009bde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009be2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009be6:	4621      	mov	r1, r4
 8009be8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009bec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009bf0:	ee14 2a90 	vmov	r2, s9
 8009bf4:	3230      	adds	r2, #48	; 0x30
 8009bf6:	f808 2b01 	strb.w	r2, [r8], #1
 8009bfa:	45a0      	cmp	r8, r4
 8009bfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c04:	d118      	bne.n	8009c38 <_dtoa_r+0x568>
 8009c06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009c0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009c0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c16:	dc4d      	bgt.n	8009cb4 <_dtoa_r+0x5e4>
 8009c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c24:	f57f af41 	bpl.w	8009aaa <_dtoa_r+0x3da>
 8009c28:	4688      	mov	r8, r1
 8009c2a:	3901      	subs	r1, #1
 8009c2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009c30:	2b30      	cmp	r3, #48	; 0x30
 8009c32:	d0f9      	beq.n	8009c28 <_dtoa_r+0x558>
 8009c34:	46bb      	mov	fp, r7
 8009c36:	e02a      	b.n	8009c8e <_dtoa_r+0x5be>
 8009c38:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c3c:	e7d6      	b.n	8009bec <_dtoa_r+0x51c>
 8009c3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009c46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009c4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009c52:	ee15 3a10 	vmov	r3, s10
 8009c56:	3330      	adds	r3, #48	; 0x30
 8009c58:	f808 3b01 	strb.w	r3, [r8], #1
 8009c5c:	9b01      	ldr	r3, [sp, #4]
 8009c5e:	eba8 0303 	sub.w	r3, r8, r3
 8009c62:	4599      	cmp	r9, r3
 8009c64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009c68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009c6c:	d133      	bne.n	8009cd6 <_dtoa_r+0x606>
 8009c6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009c72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7a:	dc1a      	bgt.n	8009cb2 <_dtoa_r+0x5e2>
 8009c7c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c84:	d103      	bne.n	8009c8e <_dtoa_r+0x5be>
 8009c86:	ee15 3a10 	vmov	r3, s10
 8009c8a:	07d9      	lsls	r1, r3, #31
 8009c8c:	d411      	bmi.n	8009cb2 <_dtoa_r+0x5e2>
 8009c8e:	4629      	mov	r1, r5
 8009c90:	4630      	mov	r0, r6
 8009c92:	f000 fd05 	bl	800a6a0 <_Bfree>
 8009c96:	2300      	movs	r3, #0
 8009c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c9a:	f888 3000 	strb.w	r3, [r8]
 8009c9e:	f10b 0301 	add.w	r3, fp, #1
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f43f ad61 	beq.w	800976e <_dtoa_r+0x9e>
 8009cac:	f8c3 8000 	str.w	r8, [r3]
 8009cb0:	e55d      	b.n	800976e <_dtoa_r+0x9e>
 8009cb2:	465f      	mov	r7, fp
 8009cb4:	4643      	mov	r3, r8
 8009cb6:	4698      	mov	r8, r3
 8009cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cbc:	2a39      	cmp	r2, #57	; 0x39
 8009cbe:	d106      	bne.n	8009cce <_dtoa_r+0x5fe>
 8009cc0:	9a01      	ldr	r2, [sp, #4]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d1f7      	bne.n	8009cb6 <_dtoa_r+0x5e6>
 8009cc6:	9901      	ldr	r1, [sp, #4]
 8009cc8:	2230      	movs	r2, #48	; 0x30
 8009cca:	3701      	adds	r7, #1
 8009ccc:	700a      	strb	r2, [r1, #0]
 8009cce:	781a      	ldrb	r2, [r3, #0]
 8009cd0:	3201      	adds	r2, #1
 8009cd2:	701a      	strb	r2, [r3, #0]
 8009cd4:	e7ae      	b.n	8009c34 <_dtoa_r+0x564>
 8009cd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009cda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce2:	d1b2      	bne.n	8009c4a <_dtoa_r+0x57a>
 8009ce4:	e7d3      	b.n	8009c8e <_dtoa_r+0x5be>
 8009ce6:	bf00      	nop
 8009ce8:	0800b4b0 	.word	0x0800b4b0
 8009cec:	0800b488 	.word	0x0800b488
 8009cf0:	9907      	ldr	r1, [sp, #28]
 8009cf2:	2900      	cmp	r1, #0
 8009cf4:	f000 80d0 	beq.w	8009e98 <_dtoa_r+0x7c8>
 8009cf8:	9906      	ldr	r1, [sp, #24]
 8009cfa:	2901      	cmp	r1, #1
 8009cfc:	f300 80b4 	bgt.w	8009e68 <_dtoa_r+0x798>
 8009d00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d02:	2900      	cmp	r1, #0
 8009d04:	f000 80ac 	beq.w	8009e60 <_dtoa_r+0x790>
 8009d08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009d10:	461c      	mov	r4, r3
 8009d12:	930a      	str	r3, [sp, #40]	; 0x28
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	4413      	add	r3, r2
 8009d18:	9304      	str	r3, [sp, #16]
 8009d1a:	9b05      	ldr	r3, [sp, #20]
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	4413      	add	r3, r2
 8009d20:	4630      	mov	r0, r6
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	f000 fd74 	bl	800a810 <__i2b>
 8009d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d2a:	4607      	mov	r7, r0
 8009d2c:	f1b8 0f00 	cmp.w	r8, #0
 8009d30:	dd0d      	ble.n	8009d4e <_dtoa_r+0x67e>
 8009d32:	9a05      	ldr	r2, [sp, #20]
 8009d34:	2a00      	cmp	r2, #0
 8009d36:	dd0a      	ble.n	8009d4e <_dtoa_r+0x67e>
 8009d38:	4542      	cmp	r2, r8
 8009d3a:	9904      	ldr	r1, [sp, #16]
 8009d3c:	bfa8      	it	ge
 8009d3e:	4642      	movge	r2, r8
 8009d40:	1a89      	subs	r1, r1, r2
 8009d42:	9104      	str	r1, [sp, #16]
 8009d44:	9905      	ldr	r1, [sp, #20]
 8009d46:	eba8 0802 	sub.w	r8, r8, r2
 8009d4a:	1a8a      	subs	r2, r1, r2
 8009d4c:	9205      	str	r2, [sp, #20]
 8009d4e:	b303      	cbz	r3, 8009d92 <_dtoa_r+0x6c2>
 8009d50:	9a07      	ldr	r2, [sp, #28]
 8009d52:	2a00      	cmp	r2, #0
 8009d54:	f000 80a5 	beq.w	8009ea2 <_dtoa_r+0x7d2>
 8009d58:	2c00      	cmp	r4, #0
 8009d5a:	dd13      	ble.n	8009d84 <_dtoa_r+0x6b4>
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	4622      	mov	r2, r4
 8009d60:	4630      	mov	r0, r6
 8009d62:	930d      	str	r3, [sp, #52]	; 0x34
 8009d64:	f000 fe14 	bl	800a990 <__pow5mult>
 8009d68:	462a      	mov	r2, r5
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f000 fd64 	bl	800a83c <__multiply>
 8009d74:	4629      	mov	r1, r5
 8009d76:	900a      	str	r0, [sp, #40]	; 0x28
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f000 fc91 	bl	800a6a0 <_Bfree>
 8009d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d82:	4615      	mov	r5, r2
 8009d84:	1b1a      	subs	r2, r3, r4
 8009d86:	d004      	beq.n	8009d92 <_dtoa_r+0x6c2>
 8009d88:	4629      	mov	r1, r5
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f000 fe00 	bl	800a990 <__pow5mult>
 8009d90:	4605      	mov	r5, r0
 8009d92:	2101      	movs	r1, #1
 8009d94:	4630      	mov	r0, r6
 8009d96:	f000 fd3b 	bl	800a810 <__i2b>
 8009d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	4604      	mov	r4, r0
 8009da0:	f340 8081 	ble.w	8009ea6 <_dtoa_r+0x7d6>
 8009da4:	461a      	mov	r2, r3
 8009da6:	4601      	mov	r1, r0
 8009da8:	4630      	mov	r0, r6
 8009daa:	f000 fdf1 	bl	800a990 <__pow5mult>
 8009dae:	9b06      	ldr	r3, [sp, #24]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	4604      	mov	r4, r0
 8009db4:	dd7a      	ble.n	8009eac <_dtoa_r+0x7dc>
 8009db6:	2300      	movs	r3, #0
 8009db8:	930a      	str	r3, [sp, #40]	; 0x28
 8009dba:	6922      	ldr	r2, [r4, #16]
 8009dbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009dc0:	6910      	ldr	r0, [r2, #16]
 8009dc2:	f000 fcd5 	bl	800a770 <__hi0bits>
 8009dc6:	f1c0 0020 	rsb	r0, r0, #32
 8009dca:	9b05      	ldr	r3, [sp, #20]
 8009dcc:	4418      	add	r0, r3
 8009dce:	f010 001f 	ands.w	r0, r0, #31
 8009dd2:	f000 808c 	beq.w	8009eee <_dtoa_r+0x81e>
 8009dd6:	f1c0 0220 	rsb	r2, r0, #32
 8009dda:	2a04      	cmp	r2, #4
 8009ddc:	f340 8085 	ble.w	8009eea <_dtoa_r+0x81a>
 8009de0:	f1c0 001c 	rsb	r0, r0, #28
 8009de4:	9b04      	ldr	r3, [sp, #16]
 8009de6:	4403      	add	r3, r0
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	4403      	add	r3, r0
 8009dee:	4480      	add	r8, r0
 8009df0:	9305      	str	r3, [sp, #20]
 8009df2:	9b04      	ldr	r3, [sp, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dd05      	ble.n	8009e04 <_dtoa_r+0x734>
 8009df8:	4629      	mov	r1, r5
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f000 fe21 	bl	800aa44 <__lshift>
 8009e02:	4605      	mov	r5, r0
 8009e04:	9b05      	ldr	r3, [sp, #20]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	dd05      	ble.n	8009e16 <_dtoa_r+0x746>
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f000 fe18 	bl	800aa44 <__lshift>
 8009e14:	4604      	mov	r4, r0
 8009e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d06a      	beq.n	8009ef2 <_dtoa_r+0x822>
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f000 fe80 	bl	800ab24 <__mcmp>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	da64      	bge.n	8009ef2 <_dtoa_r+0x822>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	220a      	movs	r2, #10
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f000 fc58 	bl	800a6e4 <__multadd>
 8009e34:	9b07      	ldr	r3, [sp, #28]
 8009e36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 8191 	beq.w	800a164 <_dtoa_r+0xa94>
 8009e42:	4639      	mov	r1, r7
 8009e44:	2300      	movs	r3, #0
 8009e46:	220a      	movs	r2, #10
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f000 fc4b 	bl	800a6e4 <__multadd>
 8009e4e:	f1ba 0f00 	cmp.w	sl, #0
 8009e52:	4607      	mov	r7, r0
 8009e54:	f300 808d 	bgt.w	8009f72 <_dtoa_r+0x8a2>
 8009e58:	9b06      	ldr	r3, [sp, #24]
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	dc50      	bgt.n	8009f00 <_dtoa_r+0x830>
 8009e5e:	e088      	b.n	8009f72 <_dtoa_r+0x8a2>
 8009e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e66:	e751      	b.n	8009d0c <_dtoa_r+0x63c>
 8009e68:	f109 34ff 	add.w	r4, r9, #4294967295
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	bfbf      	itttt	lt
 8009e70:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009e72:	1ae3      	sublt	r3, r4, r3
 8009e74:	18d2      	addlt	r2, r2, r3
 8009e76:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009e78:	bfb6      	itet	lt
 8009e7a:	4623      	movlt	r3, r4
 8009e7c:	1b1c      	subge	r4, r3, r4
 8009e7e:	2400      	movlt	r4, #0
 8009e80:	f1b9 0f00 	cmp.w	r9, #0
 8009e84:	bfb5      	itete	lt
 8009e86:	9a04      	ldrlt	r2, [sp, #16]
 8009e88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009e8c:	eba2 0809 	sublt.w	r8, r2, r9
 8009e90:	464a      	movge	r2, r9
 8009e92:	bfb8      	it	lt
 8009e94:	2200      	movlt	r2, #0
 8009e96:	e73c      	b.n	8009d12 <_dtoa_r+0x642>
 8009e98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009e9c:	9f07      	ldr	r7, [sp, #28]
 8009e9e:	461c      	mov	r4, r3
 8009ea0:	e744      	b.n	8009d2c <_dtoa_r+0x65c>
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	e770      	b.n	8009d88 <_dtoa_r+0x6b8>
 8009ea6:	9b06      	ldr	r3, [sp, #24]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	dc18      	bgt.n	8009ede <_dtoa_r+0x80e>
 8009eac:	9b02      	ldr	r3, [sp, #8]
 8009eae:	b9b3      	cbnz	r3, 8009ede <_dtoa_r+0x80e>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009eb6:	b9a2      	cbnz	r2, 8009ee2 <_dtoa_r+0x812>
 8009eb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ebc:	0d12      	lsrs	r2, r2, #20
 8009ebe:	0512      	lsls	r2, r2, #20
 8009ec0:	b18a      	cbz	r2, 8009ee6 <_dtoa_r+0x816>
 8009ec2:	9b04      	ldr	r3, [sp, #16]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	9b05      	ldr	r3, [sp, #20]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	9305      	str	r3, [sp, #20]
 8009ece:	2301      	movs	r3, #1
 8009ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f47f af70 	bne.w	8009dba <_dtoa_r+0x6ea>
 8009eda:	2001      	movs	r0, #1
 8009edc:	e775      	b.n	8009dca <_dtoa_r+0x6fa>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e7f6      	b.n	8009ed0 <_dtoa_r+0x800>
 8009ee2:	9b02      	ldr	r3, [sp, #8]
 8009ee4:	e7f4      	b.n	8009ed0 <_dtoa_r+0x800>
 8009ee6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ee8:	e7f3      	b.n	8009ed2 <_dtoa_r+0x802>
 8009eea:	d082      	beq.n	8009df2 <_dtoa_r+0x722>
 8009eec:	4610      	mov	r0, r2
 8009eee:	301c      	adds	r0, #28
 8009ef0:	e778      	b.n	8009de4 <_dtoa_r+0x714>
 8009ef2:	f1b9 0f00 	cmp.w	r9, #0
 8009ef6:	dc37      	bgt.n	8009f68 <_dtoa_r+0x898>
 8009ef8:	9b06      	ldr	r3, [sp, #24]
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	dd34      	ble.n	8009f68 <_dtoa_r+0x898>
 8009efe:	46ca      	mov	sl, r9
 8009f00:	f1ba 0f00 	cmp.w	sl, #0
 8009f04:	d10d      	bne.n	8009f22 <_dtoa_r+0x852>
 8009f06:	4621      	mov	r1, r4
 8009f08:	4653      	mov	r3, sl
 8009f0a:	2205      	movs	r2, #5
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f000 fbe9 	bl	800a6e4 <__multadd>
 8009f12:	4601      	mov	r1, r0
 8009f14:	4604      	mov	r4, r0
 8009f16:	4628      	mov	r0, r5
 8009f18:	f000 fe04 	bl	800ab24 <__mcmp>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	f73f adeb 	bgt.w	8009af8 <_dtoa_r+0x428>
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f28:	ea6f 0b03 	mvn.w	fp, r3
 8009f2c:	f04f 0900 	mov.w	r9, #0
 8009f30:	4621      	mov	r1, r4
 8009f32:	4630      	mov	r0, r6
 8009f34:	f000 fbb4 	bl	800a6a0 <_Bfree>
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	f43f aea8 	beq.w	8009c8e <_dtoa_r+0x5be>
 8009f3e:	f1b9 0f00 	cmp.w	r9, #0
 8009f42:	d005      	beq.n	8009f50 <_dtoa_r+0x880>
 8009f44:	45b9      	cmp	r9, r7
 8009f46:	d003      	beq.n	8009f50 <_dtoa_r+0x880>
 8009f48:	4649      	mov	r1, r9
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f000 fba8 	bl	800a6a0 <_Bfree>
 8009f50:	4639      	mov	r1, r7
 8009f52:	4630      	mov	r0, r6
 8009f54:	f000 fba4 	bl	800a6a0 <_Bfree>
 8009f58:	e699      	b.n	8009c8e <_dtoa_r+0x5be>
 8009f5a:	2400      	movs	r4, #0
 8009f5c:	4627      	mov	r7, r4
 8009f5e:	e7e0      	b.n	8009f22 <_dtoa_r+0x852>
 8009f60:	46bb      	mov	fp, r7
 8009f62:	4604      	mov	r4, r0
 8009f64:	4607      	mov	r7, r0
 8009f66:	e5c7      	b.n	8009af8 <_dtoa_r+0x428>
 8009f68:	9b07      	ldr	r3, [sp, #28]
 8009f6a:	46ca      	mov	sl, r9
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 8100 	beq.w	800a172 <_dtoa_r+0xaa2>
 8009f72:	f1b8 0f00 	cmp.w	r8, #0
 8009f76:	dd05      	ble.n	8009f84 <_dtoa_r+0x8b4>
 8009f78:	4639      	mov	r1, r7
 8009f7a:	4642      	mov	r2, r8
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f000 fd61 	bl	800aa44 <__lshift>
 8009f82:	4607      	mov	r7, r0
 8009f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d05d      	beq.n	800a046 <_dtoa_r+0x976>
 8009f8a:	6879      	ldr	r1, [r7, #4]
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f000 fb47 	bl	800a620 <_Balloc>
 8009f92:	4680      	mov	r8, r0
 8009f94:	b928      	cbnz	r0, 8009fa2 <_dtoa_r+0x8d2>
 8009f96:	4b82      	ldr	r3, [pc, #520]	; (800a1a0 <_dtoa_r+0xad0>)
 8009f98:	4602      	mov	r2, r0
 8009f9a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f9e:	f7ff bbaf 	b.w	8009700 <_dtoa_r+0x30>
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	3202      	adds	r2, #2
 8009fa6:	0092      	lsls	r2, r2, #2
 8009fa8:	f107 010c 	add.w	r1, r7, #12
 8009fac:	300c      	adds	r0, #12
 8009fae:	f000 fb29 	bl	800a604 <memcpy>
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	4641      	mov	r1, r8
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f000 fd44 	bl	800aa44 <__lshift>
 8009fbc:	9b01      	ldr	r3, [sp, #4]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	9b01      	ldr	r3, [sp, #4]
 8009fc4:	4453      	add	r3, sl
 8009fc6:	9308      	str	r3, [sp, #32]
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	46b9      	mov	r9, r7
 8009fd0:	9307      	str	r3, [sp, #28]
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	9b04      	ldr	r3, [sp, #16]
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	4628      	mov	r0, r5
 8009fdc:	9302      	str	r3, [sp, #8]
 8009fde:	f7ff faec 	bl	80095ba <quorem>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	3330      	adds	r3, #48	; 0x30
 8009fe6:	9005      	str	r0, [sp, #20]
 8009fe8:	4649      	mov	r1, r9
 8009fea:	4628      	mov	r0, r5
 8009fec:	9309      	str	r3, [sp, #36]	; 0x24
 8009fee:	f000 fd99 	bl	800ab24 <__mcmp>
 8009ff2:	463a      	mov	r2, r7
 8009ff4:	4682      	mov	sl, r0
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f000 fdaf 	bl	800ab5c <__mdiff>
 8009ffe:	68c2      	ldr	r2, [r0, #12]
 800a000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a002:	4680      	mov	r8, r0
 800a004:	bb0a      	cbnz	r2, 800a04a <_dtoa_r+0x97a>
 800a006:	4601      	mov	r1, r0
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 fd8b 	bl	800ab24 <__mcmp>
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	4602      	mov	r2, r0
 800a012:	4641      	mov	r1, r8
 800a014:	4630      	mov	r0, r6
 800a016:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a01a:	f000 fb41 	bl	800a6a0 <_Bfree>
 800a01e:	9b06      	ldr	r3, [sp, #24]
 800a020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a022:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a026:	ea43 0102 	orr.w	r1, r3, r2
 800a02a:	9b07      	ldr	r3, [sp, #28]
 800a02c:	430b      	orrs	r3, r1
 800a02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a030:	d10d      	bne.n	800a04e <_dtoa_r+0x97e>
 800a032:	2b39      	cmp	r3, #57	; 0x39
 800a034:	d029      	beq.n	800a08a <_dtoa_r+0x9ba>
 800a036:	f1ba 0f00 	cmp.w	sl, #0
 800a03a:	dd01      	ble.n	800a040 <_dtoa_r+0x970>
 800a03c:	9b05      	ldr	r3, [sp, #20]
 800a03e:	3331      	adds	r3, #49	; 0x31
 800a040:	9a02      	ldr	r2, [sp, #8]
 800a042:	7013      	strb	r3, [r2, #0]
 800a044:	e774      	b.n	8009f30 <_dtoa_r+0x860>
 800a046:	4638      	mov	r0, r7
 800a048:	e7b8      	b.n	8009fbc <_dtoa_r+0x8ec>
 800a04a:	2201      	movs	r2, #1
 800a04c:	e7e1      	b.n	800a012 <_dtoa_r+0x942>
 800a04e:	f1ba 0f00 	cmp.w	sl, #0
 800a052:	db06      	blt.n	800a062 <_dtoa_r+0x992>
 800a054:	9906      	ldr	r1, [sp, #24]
 800a056:	ea41 0a0a 	orr.w	sl, r1, sl
 800a05a:	9907      	ldr	r1, [sp, #28]
 800a05c:	ea5a 0101 	orrs.w	r1, sl, r1
 800a060:	d120      	bne.n	800a0a4 <_dtoa_r+0x9d4>
 800a062:	2a00      	cmp	r2, #0
 800a064:	ddec      	ble.n	800a040 <_dtoa_r+0x970>
 800a066:	4629      	mov	r1, r5
 800a068:	2201      	movs	r2, #1
 800a06a:	4630      	mov	r0, r6
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	f000 fce9 	bl	800aa44 <__lshift>
 800a072:	4621      	mov	r1, r4
 800a074:	4605      	mov	r5, r0
 800a076:	f000 fd55 	bl	800ab24 <__mcmp>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	9b04      	ldr	r3, [sp, #16]
 800a07e:	dc02      	bgt.n	800a086 <_dtoa_r+0x9b6>
 800a080:	d1de      	bne.n	800a040 <_dtoa_r+0x970>
 800a082:	07da      	lsls	r2, r3, #31
 800a084:	d5dc      	bpl.n	800a040 <_dtoa_r+0x970>
 800a086:	2b39      	cmp	r3, #57	; 0x39
 800a088:	d1d8      	bne.n	800a03c <_dtoa_r+0x96c>
 800a08a:	9a02      	ldr	r2, [sp, #8]
 800a08c:	2339      	movs	r3, #57	; 0x39
 800a08e:	7013      	strb	r3, [r2, #0]
 800a090:	4643      	mov	r3, r8
 800a092:	4698      	mov	r8, r3
 800a094:	3b01      	subs	r3, #1
 800a096:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a09a:	2a39      	cmp	r2, #57	; 0x39
 800a09c:	d051      	beq.n	800a142 <_dtoa_r+0xa72>
 800a09e:	3201      	adds	r2, #1
 800a0a0:	701a      	strb	r2, [r3, #0]
 800a0a2:	e745      	b.n	8009f30 <_dtoa_r+0x860>
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	dd03      	ble.n	800a0b0 <_dtoa_r+0x9e0>
 800a0a8:	2b39      	cmp	r3, #57	; 0x39
 800a0aa:	d0ee      	beq.n	800a08a <_dtoa_r+0x9ba>
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	e7c7      	b.n	800a040 <_dtoa_r+0x970>
 800a0b0:	9a04      	ldr	r2, [sp, #16]
 800a0b2:	9908      	ldr	r1, [sp, #32]
 800a0b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a0b8:	428a      	cmp	r2, r1
 800a0ba:	d02b      	beq.n	800a114 <_dtoa_r+0xa44>
 800a0bc:	4629      	mov	r1, r5
 800a0be:	2300      	movs	r3, #0
 800a0c0:	220a      	movs	r2, #10
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f000 fb0e 	bl	800a6e4 <__multadd>
 800a0c8:	45b9      	cmp	r9, r7
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	f04f 0300 	mov.w	r3, #0
 800a0d0:	f04f 020a 	mov.w	r2, #10
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	d107      	bne.n	800a0ea <_dtoa_r+0xa1a>
 800a0da:	f000 fb03 	bl	800a6e4 <__multadd>
 800a0de:	4681      	mov	r9, r0
 800a0e0:	4607      	mov	r7, r0
 800a0e2:	9b04      	ldr	r3, [sp, #16]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	9304      	str	r3, [sp, #16]
 800a0e8:	e774      	b.n	8009fd4 <_dtoa_r+0x904>
 800a0ea:	f000 fafb 	bl	800a6e4 <__multadd>
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	4681      	mov	r9, r0
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f000 faf4 	bl	800a6e4 <__multadd>
 800a0fc:	4607      	mov	r7, r0
 800a0fe:	e7f0      	b.n	800a0e2 <_dtoa_r+0xa12>
 800a100:	f1ba 0f00 	cmp.w	sl, #0
 800a104:	9a01      	ldr	r2, [sp, #4]
 800a106:	bfcc      	ite	gt
 800a108:	46d0      	movgt	r8, sl
 800a10a:	f04f 0801 	movle.w	r8, #1
 800a10e:	4490      	add	r8, r2
 800a110:	f04f 0900 	mov.w	r9, #0
 800a114:	4629      	mov	r1, r5
 800a116:	2201      	movs	r2, #1
 800a118:	4630      	mov	r0, r6
 800a11a:	9302      	str	r3, [sp, #8]
 800a11c:	f000 fc92 	bl	800aa44 <__lshift>
 800a120:	4621      	mov	r1, r4
 800a122:	4605      	mov	r5, r0
 800a124:	f000 fcfe 	bl	800ab24 <__mcmp>
 800a128:	2800      	cmp	r0, #0
 800a12a:	dcb1      	bgt.n	800a090 <_dtoa_r+0x9c0>
 800a12c:	d102      	bne.n	800a134 <_dtoa_r+0xa64>
 800a12e:	9b02      	ldr	r3, [sp, #8]
 800a130:	07db      	lsls	r3, r3, #31
 800a132:	d4ad      	bmi.n	800a090 <_dtoa_r+0x9c0>
 800a134:	4643      	mov	r3, r8
 800a136:	4698      	mov	r8, r3
 800a138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a13c:	2a30      	cmp	r2, #48	; 0x30
 800a13e:	d0fa      	beq.n	800a136 <_dtoa_r+0xa66>
 800a140:	e6f6      	b.n	8009f30 <_dtoa_r+0x860>
 800a142:	9a01      	ldr	r2, [sp, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	d1a4      	bne.n	800a092 <_dtoa_r+0x9c2>
 800a148:	f10b 0b01 	add.w	fp, fp, #1
 800a14c:	2331      	movs	r3, #49	; 0x31
 800a14e:	e778      	b.n	800a042 <_dtoa_r+0x972>
 800a150:	4b14      	ldr	r3, [pc, #80]	; (800a1a4 <_dtoa_r+0xad4>)
 800a152:	f7ff bb27 	b.w	80097a4 <_dtoa_r+0xd4>
 800a156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f47f ab03 	bne.w	8009764 <_dtoa_r+0x94>
 800a15e:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <_dtoa_r+0xad8>)
 800a160:	f7ff bb20 	b.w	80097a4 <_dtoa_r+0xd4>
 800a164:	f1ba 0f00 	cmp.w	sl, #0
 800a168:	dc03      	bgt.n	800a172 <_dtoa_r+0xaa2>
 800a16a:	9b06      	ldr	r3, [sp, #24]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	f73f aec7 	bgt.w	8009f00 <_dtoa_r+0x830>
 800a172:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a176:	4621      	mov	r1, r4
 800a178:	4628      	mov	r0, r5
 800a17a:	f7ff fa1e 	bl	80095ba <quorem>
 800a17e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a182:	f808 3b01 	strb.w	r3, [r8], #1
 800a186:	9a01      	ldr	r2, [sp, #4]
 800a188:	eba8 0202 	sub.w	r2, r8, r2
 800a18c:	4592      	cmp	sl, r2
 800a18e:	ddb7      	ble.n	800a100 <_dtoa_r+0xa30>
 800a190:	4629      	mov	r1, r5
 800a192:	2300      	movs	r3, #0
 800a194:	220a      	movs	r2, #10
 800a196:	4630      	mov	r0, r6
 800a198:	f000 faa4 	bl	800a6e4 <__multadd>
 800a19c:	4605      	mov	r5, r0
 800a19e:	e7ea      	b.n	800a176 <_dtoa_r+0xaa6>
 800a1a0:	0800b3b8 	.word	0x0800b3b8
 800a1a4:	0800b315 	.word	0x0800b315
 800a1a8:	0800b339 	.word	0x0800b339

0800a1ac <__sflush_r>:
 800a1ac:	898a      	ldrh	r2, [r1, #12]
 800a1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	0710      	lsls	r0, r2, #28
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	d458      	bmi.n	800a26c <__sflush_r+0xc0>
 800a1ba:	684b      	ldr	r3, [r1, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dc05      	bgt.n	800a1cc <__sflush_r+0x20>
 800a1c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dc02      	bgt.n	800a1cc <__sflush_r+0x20>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1ce:	2e00      	cmp	r6, #0
 800a1d0:	d0f9      	beq.n	800a1c6 <__sflush_r+0x1a>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1d8:	682f      	ldr	r7, [r5, #0]
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	d032      	beq.n	800a244 <__sflush_r+0x98>
 800a1de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	075a      	lsls	r2, r3, #29
 800a1e4:	d505      	bpl.n	800a1f2 <__sflush_r+0x46>
 800a1e6:	6863      	ldr	r3, [r4, #4]
 800a1e8:	1ac0      	subs	r0, r0, r3
 800a1ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1ec:	b10b      	cbz	r3, 800a1f2 <__sflush_r+0x46>
 800a1ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1f0:	1ac0      	subs	r0, r0, r3
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1f8:	6a21      	ldr	r1, [r4, #32]
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	47b0      	blx	r6
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	d106      	bne.n	800a212 <__sflush_r+0x66>
 800a204:	6829      	ldr	r1, [r5, #0]
 800a206:	291d      	cmp	r1, #29
 800a208:	d82c      	bhi.n	800a264 <__sflush_r+0xb8>
 800a20a:	4a2a      	ldr	r2, [pc, #168]	; (800a2b4 <__sflush_r+0x108>)
 800a20c:	40ca      	lsrs	r2, r1
 800a20e:	07d6      	lsls	r6, r2, #31
 800a210:	d528      	bpl.n	800a264 <__sflush_r+0xb8>
 800a212:	2200      	movs	r2, #0
 800a214:	6062      	str	r2, [r4, #4]
 800a216:	04d9      	lsls	r1, r3, #19
 800a218:	6922      	ldr	r2, [r4, #16]
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	d504      	bpl.n	800a228 <__sflush_r+0x7c>
 800a21e:	1c42      	adds	r2, r0, #1
 800a220:	d101      	bne.n	800a226 <__sflush_r+0x7a>
 800a222:	682b      	ldr	r3, [r5, #0]
 800a224:	b903      	cbnz	r3, 800a228 <__sflush_r+0x7c>
 800a226:	6560      	str	r0, [r4, #84]	; 0x54
 800a228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a22a:	602f      	str	r7, [r5, #0]
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d0ca      	beq.n	800a1c6 <__sflush_r+0x1a>
 800a230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a234:	4299      	cmp	r1, r3
 800a236:	d002      	beq.n	800a23e <__sflush_r+0x92>
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 fd8b 	bl	800ad54 <_free_r>
 800a23e:	2000      	movs	r0, #0
 800a240:	6360      	str	r0, [r4, #52]	; 0x34
 800a242:	e7c1      	b.n	800a1c8 <__sflush_r+0x1c>
 800a244:	6a21      	ldr	r1, [r4, #32]
 800a246:	2301      	movs	r3, #1
 800a248:	4628      	mov	r0, r5
 800a24a:	47b0      	blx	r6
 800a24c:	1c41      	adds	r1, r0, #1
 800a24e:	d1c7      	bne.n	800a1e0 <__sflush_r+0x34>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0c4      	beq.n	800a1e0 <__sflush_r+0x34>
 800a256:	2b1d      	cmp	r3, #29
 800a258:	d001      	beq.n	800a25e <__sflush_r+0xb2>
 800a25a:	2b16      	cmp	r3, #22
 800a25c:	d101      	bne.n	800a262 <__sflush_r+0xb6>
 800a25e:	602f      	str	r7, [r5, #0]
 800a260:	e7b1      	b.n	800a1c6 <__sflush_r+0x1a>
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a268:	81a3      	strh	r3, [r4, #12]
 800a26a:	e7ad      	b.n	800a1c8 <__sflush_r+0x1c>
 800a26c:	690f      	ldr	r7, [r1, #16]
 800a26e:	2f00      	cmp	r7, #0
 800a270:	d0a9      	beq.n	800a1c6 <__sflush_r+0x1a>
 800a272:	0793      	lsls	r3, r2, #30
 800a274:	680e      	ldr	r6, [r1, #0]
 800a276:	bf08      	it	eq
 800a278:	694b      	ldreq	r3, [r1, #20]
 800a27a:	600f      	str	r7, [r1, #0]
 800a27c:	bf18      	it	ne
 800a27e:	2300      	movne	r3, #0
 800a280:	eba6 0807 	sub.w	r8, r6, r7
 800a284:	608b      	str	r3, [r1, #8]
 800a286:	f1b8 0f00 	cmp.w	r8, #0
 800a28a:	dd9c      	ble.n	800a1c6 <__sflush_r+0x1a>
 800a28c:	6a21      	ldr	r1, [r4, #32]
 800a28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a290:	4643      	mov	r3, r8
 800a292:	463a      	mov	r2, r7
 800a294:	4628      	mov	r0, r5
 800a296:	47b0      	blx	r6
 800a298:	2800      	cmp	r0, #0
 800a29a:	dc06      	bgt.n	800a2aa <__sflush_r+0xfe>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a8:	e78e      	b.n	800a1c8 <__sflush_r+0x1c>
 800a2aa:	4407      	add	r7, r0
 800a2ac:	eba8 0800 	sub.w	r8, r8, r0
 800a2b0:	e7e9      	b.n	800a286 <__sflush_r+0xda>
 800a2b2:	bf00      	nop
 800a2b4:	20400001 	.word	0x20400001

0800a2b8 <_fflush_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	690b      	ldr	r3, [r1, #16]
 800a2bc:	4605      	mov	r5, r0
 800a2be:	460c      	mov	r4, r1
 800a2c0:	b913      	cbnz	r3, 800a2c8 <_fflush_r+0x10>
 800a2c2:	2500      	movs	r5, #0
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	b118      	cbz	r0, 800a2d2 <_fflush_r+0x1a>
 800a2ca:	6983      	ldr	r3, [r0, #24]
 800a2cc:	b90b      	cbnz	r3, 800a2d2 <_fflush_r+0x1a>
 800a2ce:	f000 f887 	bl	800a3e0 <__sinit>
 800a2d2:	4b14      	ldr	r3, [pc, #80]	; (800a324 <_fflush_r+0x6c>)
 800a2d4:	429c      	cmp	r4, r3
 800a2d6:	d11b      	bne.n	800a310 <_fflush_r+0x58>
 800a2d8:	686c      	ldr	r4, [r5, #4]
 800a2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0ef      	beq.n	800a2c2 <_fflush_r+0xa>
 800a2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2e4:	07d0      	lsls	r0, r2, #31
 800a2e6:	d404      	bmi.n	800a2f2 <_fflush_r+0x3a>
 800a2e8:	0599      	lsls	r1, r3, #22
 800a2ea:	d402      	bmi.n	800a2f2 <_fflush_r+0x3a>
 800a2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ee:	f000 f91a 	bl	800a526 <__retarget_lock_acquire_recursive>
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	f7ff ff59 	bl	800a1ac <__sflush_r>
 800a2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2fc:	07da      	lsls	r2, r3, #31
 800a2fe:	4605      	mov	r5, r0
 800a300:	d4e0      	bmi.n	800a2c4 <_fflush_r+0xc>
 800a302:	89a3      	ldrh	r3, [r4, #12]
 800a304:	059b      	lsls	r3, r3, #22
 800a306:	d4dd      	bmi.n	800a2c4 <_fflush_r+0xc>
 800a308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a30a:	f000 f90d 	bl	800a528 <__retarget_lock_release_recursive>
 800a30e:	e7d9      	b.n	800a2c4 <_fflush_r+0xc>
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <_fflush_r+0x70>)
 800a312:	429c      	cmp	r4, r3
 800a314:	d101      	bne.n	800a31a <_fflush_r+0x62>
 800a316:	68ac      	ldr	r4, [r5, #8]
 800a318:	e7df      	b.n	800a2da <_fflush_r+0x22>
 800a31a:	4b04      	ldr	r3, [pc, #16]	; (800a32c <_fflush_r+0x74>)
 800a31c:	429c      	cmp	r4, r3
 800a31e:	bf08      	it	eq
 800a320:	68ec      	ldreq	r4, [r5, #12]
 800a322:	e7da      	b.n	800a2da <_fflush_r+0x22>
 800a324:	0800b3ec 	.word	0x0800b3ec
 800a328:	0800b40c 	.word	0x0800b40c
 800a32c:	0800b3cc 	.word	0x0800b3cc

0800a330 <std>:
 800a330:	2300      	movs	r3, #0
 800a332:	b510      	push	{r4, lr}
 800a334:	4604      	mov	r4, r0
 800a336:	e9c0 3300 	strd	r3, r3, [r0]
 800a33a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a33e:	6083      	str	r3, [r0, #8]
 800a340:	8181      	strh	r1, [r0, #12]
 800a342:	6643      	str	r3, [r0, #100]	; 0x64
 800a344:	81c2      	strh	r2, [r0, #14]
 800a346:	6183      	str	r3, [r0, #24]
 800a348:	4619      	mov	r1, r3
 800a34a:	2208      	movs	r2, #8
 800a34c:	305c      	adds	r0, #92	; 0x5c
 800a34e:	f7fe fac7 	bl	80088e0 <memset>
 800a352:	4b05      	ldr	r3, [pc, #20]	; (800a368 <std+0x38>)
 800a354:	6263      	str	r3, [r4, #36]	; 0x24
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <std+0x3c>)
 800a358:	62a3      	str	r3, [r4, #40]	; 0x28
 800a35a:	4b05      	ldr	r3, [pc, #20]	; (800a370 <std+0x40>)
 800a35c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a35e:	4b05      	ldr	r3, [pc, #20]	; (800a374 <std+0x44>)
 800a360:	6224      	str	r4, [r4, #32]
 800a362:	6323      	str	r3, [r4, #48]	; 0x30
 800a364:	bd10      	pop	{r4, pc}
 800a366:	bf00      	nop
 800a368:	0800afbd 	.word	0x0800afbd
 800a36c:	0800afdf 	.word	0x0800afdf
 800a370:	0800b017 	.word	0x0800b017
 800a374:	0800b03b 	.word	0x0800b03b

0800a378 <_cleanup_r>:
 800a378:	4901      	ldr	r1, [pc, #4]	; (800a380 <_cleanup_r+0x8>)
 800a37a:	f000 b8af 	b.w	800a4dc <_fwalk_reent>
 800a37e:	bf00      	nop
 800a380:	0800a2b9 	.word	0x0800a2b9

0800a384 <__sfmoreglue>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	2268      	movs	r2, #104	; 0x68
 800a388:	1e4d      	subs	r5, r1, #1
 800a38a:	4355      	muls	r5, r2
 800a38c:	460e      	mov	r6, r1
 800a38e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a392:	f000 fd4b 	bl	800ae2c <_malloc_r>
 800a396:	4604      	mov	r4, r0
 800a398:	b140      	cbz	r0, 800a3ac <__sfmoreglue+0x28>
 800a39a:	2100      	movs	r1, #0
 800a39c:	e9c0 1600 	strd	r1, r6, [r0]
 800a3a0:	300c      	adds	r0, #12
 800a3a2:	60a0      	str	r0, [r4, #8]
 800a3a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3a8:	f7fe fa9a 	bl	80088e0 <memset>
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}

0800a3b0 <__sfp_lock_acquire>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	; (800a3b8 <__sfp_lock_acquire+0x8>)
 800a3b2:	f000 b8b8 	b.w	800a526 <__retarget_lock_acquire_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	240002e1 	.word	0x240002e1

0800a3bc <__sfp_lock_release>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	; (800a3c4 <__sfp_lock_release+0x8>)
 800a3be:	f000 b8b3 	b.w	800a528 <__retarget_lock_release_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	240002e1 	.word	0x240002e1

0800a3c8 <__sinit_lock_acquire>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	; (800a3d0 <__sinit_lock_acquire+0x8>)
 800a3ca:	f000 b8ac 	b.w	800a526 <__retarget_lock_acquire_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	240002e2 	.word	0x240002e2

0800a3d4 <__sinit_lock_release>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	; (800a3dc <__sinit_lock_release+0x8>)
 800a3d6:	f000 b8a7 	b.w	800a528 <__retarget_lock_release_recursive>
 800a3da:	bf00      	nop
 800a3dc:	240002e2 	.word	0x240002e2

0800a3e0 <__sinit>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	f7ff fff0 	bl	800a3c8 <__sinit_lock_acquire>
 800a3e8:	69a3      	ldr	r3, [r4, #24]
 800a3ea:	b11b      	cbz	r3, 800a3f4 <__sinit+0x14>
 800a3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f0:	f7ff bff0 	b.w	800a3d4 <__sinit_lock_release>
 800a3f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3f8:	6523      	str	r3, [r4, #80]	; 0x50
 800a3fa:	4b13      	ldr	r3, [pc, #76]	; (800a448 <__sinit+0x68>)
 800a3fc:	4a13      	ldr	r2, [pc, #76]	; (800a44c <__sinit+0x6c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	62a2      	str	r2, [r4, #40]	; 0x28
 800a402:	42a3      	cmp	r3, r4
 800a404:	bf04      	itt	eq
 800a406:	2301      	moveq	r3, #1
 800a408:	61a3      	streq	r3, [r4, #24]
 800a40a:	4620      	mov	r0, r4
 800a40c:	f000 f820 	bl	800a450 <__sfp>
 800a410:	6060      	str	r0, [r4, #4]
 800a412:	4620      	mov	r0, r4
 800a414:	f000 f81c 	bl	800a450 <__sfp>
 800a418:	60a0      	str	r0, [r4, #8]
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 f818 	bl	800a450 <__sfp>
 800a420:	2200      	movs	r2, #0
 800a422:	60e0      	str	r0, [r4, #12]
 800a424:	2104      	movs	r1, #4
 800a426:	6860      	ldr	r0, [r4, #4]
 800a428:	f7ff ff82 	bl	800a330 <std>
 800a42c:	68a0      	ldr	r0, [r4, #8]
 800a42e:	2201      	movs	r2, #1
 800a430:	2109      	movs	r1, #9
 800a432:	f7ff ff7d 	bl	800a330 <std>
 800a436:	68e0      	ldr	r0, [r4, #12]
 800a438:	2202      	movs	r2, #2
 800a43a:	2112      	movs	r1, #18
 800a43c:	f7ff ff78 	bl	800a330 <std>
 800a440:	2301      	movs	r3, #1
 800a442:	61a3      	str	r3, [r4, #24]
 800a444:	e7d2      	b.n	800a3ec <__sinit+0xc>
 800a446:	bf00      	nop
 800a448:	0800b2f0 	.word	0x0800b2f0
 800a44c:	0800a379 	.word	0x0800a379

0800a450 <__sfp>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	4607      	mov	r7, r0
 800a454:	f7ff ffac 	bl	800a3b0 <__sfp_lock_acquire>
 800a458:	4b1e      	ldr	r3, [pc, #120]	; (800a4d4 <__sfp+0x84>)
 800a45a:	681e      	ldr	r6, [r3, #0]
 800a45c:	69b3      	ldr	r3, [r6, #24]
 800a45e:	b913      	cbnz	r3, 800a466 <__sfp+0x16>
 800a460:	4630      	mov	r0, r6
 800a462:	f7ff ffbd 	bl	800a3e0 <__sinit>
 800a466:	3648      	adds	r6, #72	; 0x48
 800a468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	d503      	bpl.n	800a478 <__sfp+0x28>
 800a470:	6833      	ldr	r3, [r6, #0]
 800a472:	b30b      	cbz	r3, 800a4b8 <__sfp+0x68>
 800a474:	6836      	ldr	r6, [r6, #0]
 800a476:	e7f7      	b.n	800a468 <__sfp+0x18>
 800a478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a47c:	b9d5      	cbnz	r5, 800a4b4 <__sfp+0x64>
 800a47e:	4b16      	ldr	r3, [pc, #88]	; (800a4d8 <__sfp+0x88>)
 800a480:	60e3      	str	r3, [r4, #12]
 800a482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a486:	6665      	str	r5, [r4, #100]	; 0x64
 800a488:	f000 f84c 	bl	800a524 <__retarget_lock_init_recursive>
 800a48c:	f7ff ff96 	bl	800a3bc <__sfp_lock_release>
 800a490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a498:	6025      	str	r5, [r4, #0]
 800a49a:	61a5      	str	r5, [r4, #24]
 800a49c:	2208      	movs	r2, #8
 800a49e:	4629      	mov	r1, r5
 800a4a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4a4:	f7fe fa1c 	bl	80088e0 <memset>
 800a4a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b4:	3468      	adds	r4, #104	; 0x68
 800a4b6:	e7d9      	b.n	800a46c <__sfp+0x1c>
 800a4b8:	2104      	movs	r1, #4
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	f7ff ff62 	bl	800a384 <__sfmoreglue>
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	6030      	str	r0, [r6, #0]
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d1d5      	bne.n	800a474 <__sfp+0x24>
 800a4c8:	f7ff ff78 	bl	800a3bc <__sfp_lock_release>
 800a4cc:	230c      	movs	r3, #12
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	e7ee      	b.n	800a4b0 <__sfp+0x60>
 800a4d2:	bf00      	nop
 800a4d4:	0800b2f0 	.word	0x0800b2f0
 800a4d8:	ffff0001 	.word	0xffff0001

0800a4dc <_fwalk_reent>:
 800a4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	4688      	mov	r8, r1
 800a4e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4e8:	2700      	movs	r7, #0
 800a4ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4ee:	f1b9 0901 	subs.w	r9, r9, #1
 800a4f2:	d505      	bpl.n	800a500 <_fwalk_reent+0x24>
 800a4f4:	6824      	ldr	r4, [r4, #0]
 800a4f6:	2c00      	cmp	r4, #0
 800a4f8:	d1f7      	bne.n	800a4ea <_fwalk_reent+0xe>
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a500:	89ab      	ldrh	r3, [r5, #12]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d907      	bls.n	800a516 <_fwalk_reent+0x3a>
 800a506:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a50a:	3301      	adds	r3, #1
 800a50c:	d003      	beq.n	800a516 <_fwalk_reent+0x3a>
 800a50e:	4629      	mov	r1, r5
 800a510:	4630      	mov	r0, r6
 800a512:	47c0      	blx	r8
 800a514:	4307      	orrs	r7, r0
 800a516:	3568      	adds	r5, #104	; 0x68
 800a518:	e7e9      	b.n	800a4ee <_fwalk_reent+0x12>
	...

0800a51c <_localeconv_r>:
 800a51c:	4800      	ldr	r0, [pc, #0]	; (800a520 <_localeconv_r+0x4>)
 800a51e:	4770      	bx	lr
 800a520:	24000164 	.word	0x24000164

0800a524 <__retarget_lock_init_recursive>:
 800a524:	4770      	bx	lr

0800a526 <__retarget_lock_acquire_recursive>:
 800a526:	4770      	bx	lr

0800a528 <__retarget_lock_release_recursive>:
 800a528:	4770      	bx	lr

0800a52a <__swhatbuf_r>:
 800a52a:	b570      	push	{r4, r5, r6, lr}
 800a52c:	460e      	mov	r6, r1
 800a52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a532:	2900      	cmp	r1, #0
 800a534:	b096      	sub	sp, #88	; 0x58
 800a536:	4614      	mov	r4, r2
 800a538:	461d      	mov	r5, r3
 800a53a:	da08      	bge.n	800a54e <__swhatbuf_r+0x24>
 800a53c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	602a      	str	r2, [r5, #0]
 800a544:	061a      	lsls	r2, r3, #24
 800a546:	d410      	bmi.n	800a56a <__swhatbuf_r+0x40>
 800a548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a54c:	e00e      	b.n	800a56c <__swhatbuf_r+0x42>
 800a54e:	466a      	mov	r2, sp
 800a550:	f000 fd9a 	bl	800b088 <_fstat_r>
 800a554:	2800      	cmp	r0, #0
 800a556:	dbf1      	blt.n	800a53c <__swhatbuf_r+0x12>
 800a558:	9a01      	ldr	r2, [sp, #4]
 800a55a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a55e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a562:	425a      	negs	r2, r3
 800a564:	415a      	adcs	r2, r3
 800a566:	602a      	str	r2, [r5, #0]
 800a568:	e7ee      	b.n	800a548 <__swhatbuf_r+0x1e>
 800a56a:	2340      	movs	r3, #64	; 0x40
 800a56c:	2000      	movs	r0, #0
 800a56e:	6023      	str	r3, [r4, #0]
 800a570:	b016      	add	sp, #88	; 0x58
 800a572:	bd70      	pop	{r4, r5, r6, pc}

0800a574 <__smakebuf_r>:
 800a574:	898b      	ldrh	r3, [r1, #12]
 800a576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a578:	079d      	lsls	r5, r3, #30
 800a57a:	4606      	mov	r6, r0
 800a57c:	460c      	mov	r4, r1
 800a57e:	d507      	bpl.n	800a590 <__smakebuf_r+0x1c>
 800a580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	2301      	movs	r3, #1
 800a58a:	6163      	str	r3, [r4, #20]
 800a58c:	b002      	add	sp, #8
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	ab01      	add	r3, sp, #4
 800a592:	466a      	mov	r2, sp
 800a594:	f7ff ffc9 	bl	800a52a <__swhatbuf_r>
 800a598:	9900      	ldr	r1, [sp, #0]
 800a59a:	4605      	mov	r5, r0
 800a59c:	4630      	mov	r0, r6
 800a59e:	f000 fc45 	bl	800ae2c <_malloc_r>
 800a5a2:	b948      	cbnz	r0, 800a5b8 <__smakebuf_r+0x44>
 800a5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a8:	059a      	lsls	r2, r3, #22
 800a5aa:	d4ef      	bmi.n	800a58c <__smakebuf_r+0x18>
 800a5ac:	f023 0303 	bic.w	r3, r3, #3
 800a5b0:	f043 0302 	orr.w	r3, r3, #2
 800a5b4:	81a3      	strh	r3, [r4, #12]
 800a5b6:	e7e3      	b.n	800a580 <__smakebuf_r+0xc>
 800a5b8:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <__smakebuf_r+0x7c>)
 800a5ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	6020      	str	r0, [r4, #0]
 800a5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c4:	81a3      	strh	r3, [r4, #12]
 800a5c6:	9b00      	ldr	r3, [sp, #0]
 800a5c8:	6163      	str	r3, [r4, #20]
 800a5ca:	9b01      	ldr	r3, [sp, #4]
 800a5cc:	6120      	str	r0, [r4, #16]
 800a5ce:	b15b      	cbz	r3, 800a5e8 <__smakebuf_r+0x74>
 800a5d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f000 fd69 	bl	800b0ac <_isatty_r>
 800a5da:	b128      	cbz	r0, 800a5e8 <__smakebuf_r+0x74>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	f023 0303 	bic.w	r3, r3, #3
 800a5e2:	f043 0301 	orr.w	r3, r3, #1
 800a5e6:	81a3      	strh	r3, [r4, #12]
 800a5e8:	89a0      	ldrh	r0, [r4, #12]
 800a5ea:	4305      	orrs	r5, r0
 800a5ec:	81a5      	strh	r5, [r4, #12]
 800a5ee:	e7cd      	b.n	800a58c <__smakebuf_r+0x18>
 800a5f0:	0800a379 	.word	0x0800a379

0800a5f4 <malloc>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	; (800a600 <malloc+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f000 bc17 	b.w	800ae2c <_malloc_r>
 800a5fe:	bf00      	nop
 800a600:	24000010 	.word	0x24000010

0800a604 <memcpy>:
 800a604:	440a      	add	r2, r1
 800a606:	4291      	cmp	r1, r2
 800a608:	f100 33ff 	add.w	r3, r0, #4294967295
 800a60c:	d100      	bne.n	800a610 <memcpy+0xc>
 800a60e:	4770      	bx	lr
 800a610:	b510      	push	{r4, lr}
 800a612:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a61a:	4291      	cmp	r1, r2
 800a61c:	d1f9      	bne.n	800a612 <memcpy+0xe>
 800a61e:	bd10      	pop	{r4, pc}

0800a620 <_Balloc>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a624:	4604      	mov	r4, r0
 800a626:	460d      	mov	r5, r1
 800a628:	b976      	cbnz	r6, 800a648 <_Balloc+0x28>
 800a62a:	2010      	movs	r0, #16
 800a62c:	f7ff ffe2 	bl	800a5f4 <malloc>
 800a630:	4602      	mov	r2, r0
 800a632:	6260      	str	r0, [r4, #36]	; 0x24
 800a634:	b920      	cbnz	r0, 800a640 <_Balloc+0x20>
 800a636:	4b18      	ldr	r3, [pc, #96]	; (800a698 <_Balloc+0x78>)
 800a638:	4818      	ldr	r0, [pc, #96]	; (800a69c <_Balloc+0x7c>)
 800a63a:	2166      	movs	r1, #102	; 0x66
 800a63c:	f7fe f8f6 	bl	800882c <__assert_func>
 800a640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a644:	6006      	str	r6, [r0, #0]
 800a646:	60c6      	str	r6, [r0, #12]
 800a648:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a64a:	68f3      	ldr	r3, [r6, #12]
 800a64c:	b183      	cbz	r3, 800a670 <_Balloc+0x50>
 800a64e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a656:	b9b8      	cbnz	r0, 800a688 <_Balloc+0x68>
 800a658:	2101      	movs	r1, #1
 800a65a:	fa01 f605 	lsl.w	r6, r1, r5
 800a65e:	1d72      	adds	r2, r6, #5
 800a660:	0092      	lsls	r2, r2, #2
 800a662:	4620      	mov	r0, r4
 800a664:	f000 fb60 	bl	800ad28 <_calloc_r>
 800a668:	b160      	cbz	r0, 800a684 <_Balloc+0x64>
 800a66a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a66e:	e00e      	b.n	800a68e <_Balloc+0x6e>
 800a670:	2221      	movs	r2, #33	; 0x21
 800a672:	2104      	movs	r1, #4
 800a674:	4620      	mov	r0, r4
 800a676:	f000 fb57 	bl	800ad28 <_calloc_r>
 800a67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a67c:	60f0      	str	r0, [r6, #12]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e4      	bne.n	800a64e <_Balloc+0x2e>
 800a684:	2000      	movs	r0, #0
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	6802      	ldr	r2, [r0, #0]
 800a68a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a68e:	2300      	movs	r3, #0
 800a690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a694:	e7f7      	b.n	800a686 <_Balloc+0x66>
 800a696:	bf00      	nop
 800a698:	0800b346 	.word	0x0800b346
 800a69c:	0800b42c 	.word	0x0800b42c

0800a6a0 <_Bfree>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	b976      	cbnz	r6, 800a6c8 <_Bfree+0x28>
 800a6aa:	2010      	movs	r0, #16
 800a6ac:	f7ff ffa2 	bl	800a5f4 <malloc>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	6268      	str	r0, [r5, #36]	; 0x24
 800a6b4:	b920      	cbnz	r0, 800a6c0 <_Bfree+0x20>
 800a6b6:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <_Bfree+0x3c>)
 800a6b8:	4809      	ldr	r0, [pc, #36]	; (800a6e0 <_Bfree+0x40>)
 800a6ba:	218a      	movs	r1, #138	; 0x8a
 800a6bc:	f7fe f8b6 	bl	800882c <__assert_func>
 800a6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c4:	6006      	str	r6, [r0, #0]
 800a6c6:	60c6      	str	r6, [r0, #12]
 800a6c8:	b13c      	cbz	r4, 800a6da <_Bfree+0x3a>
 800a6ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6cc:	6862      	ldr	r2, [r4, #4]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6d4:	6021      	str	r1, [r4, #0]
 800a6d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6da:	bd70      	pop	{r4, r5, r6, pc}
 800a6dc:	0800b346 	.word	0x0800b346
 800a6e0:	0800b42c 	.word	0x0800b42c

0800a6e4 <__multadd>:
 800a6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e8:	690d      	ldr	r5, [r1, #16]
 800a6ea:	4607      	mov	r7, r0
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	461e      	mov	r6, r3
 800a6f0:	f101 0c14 	add.w	ip, r1, #20
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	f8dc 3000 	ldr.w	r3, [ip]
 800a6fa:	b299      	uxth	r1, r3
 800a6fc:	fb02 6101 	mla	r1, r2, r1, r6
 800a700:	0c1e      	lsrs	r6, r3, #16
 800a702:	0c0b      	lsrs	r3, r1, #16
 800a704:	fb02 3306 	mla	r3, r2, r6, r3
 800a708:	b289      	uxth	r1, r1
 800a70a:	3001      	adds	r0, #1
 800a70c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a710:	4285      	cmp	r5, r0
 800a712:	f84c 1b04 	str.w	r1, [ip], #4
 800a716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a71a:	dcec      	bgt.n	800a6f6 <__multadd+0x12>
 800a71c:	b30e      	cbz	r6, 800a762 <__multadd+0x7e>
 800a71e:	68a3      	ldr	r3, [r4, #8]
 800a720:	42ab      	cmp	r3, r5
 800a722:	dc19      	bgt.n	800a758 <__multadd+0x74>
 800a724:	6861      	ldr	r1, [r4, #4]
 800a726:	4638      	mov	r0, r7
 800a728:	3101      	adds	r1, #1
 800a72a:	f7ff ff79 	bl	800a620 <_Balloc>
 800a72e:	4680      	mov	r8, r0
 800a730:	b928      	cbnz	r0, 800a73e <__multadd+0x5a>
 800a732:	4602      	mov	r2, r0
 800a734:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <__multadd+0x84>)
 800a736:	480d      	ldr	r0, [pc, #52]	; (800a76c <__multadd+0x88>)
 800a738:	21b5      	movs	r1, #181	; 0xb5
 800a73a:	f7fe f877 	bl	800882c <__assert_func>
 800a73e:	6922      	ldr	r2, [r4, #16]
 800a740:	3202      	adds	r2, #2
 800a742:	f104 010c 	add.w	r1, r4, #12
 800a746:	0092      	lsls	r2, r2, #2
 800a748:	300c      	adds	r0, #12
 800a74a:	f7ff ff5b 	bl	800a604 <memcpy>
 800a74e:	4621      	mov	r1, r4
 800a750:	4638      	mov	r0, r7
 800a752:	f7ff ffa5 	bl	800a6a0 <_Bfree>
 800a756:	4644      	mov	r4, r8
 800a758:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a75c:	3501      	adds	r5, #1
 800a75e:	615e      	str	r6, [r3, #20]
 800a760:	6125      	str	r5, [r4, #16]
 800a762:	4620      	mov	r0, r4
 800a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a768:	0800b3b8 	.word	0x0800b3b8
 800a76c:	0800b42c 	.word	0x0800b42c

0800a770 <__hi0bits>:
 800a770:	0c03      	lsrs	r3, r0, #16
 800a772:	041b      	lsls	r3, r3, #16
 800a774:	b9d3      	cbnz	r3, 800a7ac <__hi0bits+0x3c>
 800a776:	0400      	lsls	r0, r0, #16
 800a778:	2310      	movs	r3, #16
 800a77a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a77e:	bf04      	itt	eq
 800a780:	0200      	lsleq	r0, r0, #8
 800a782:	3308      	addeq	r3, #8
 800a784:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a788:	bf04      	itt	eq
 800a78a:	0100      	lsleq	r0, r0, #4
 800a78c:	3304      	addeq	r3, #4
 800a78e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a792:	bf04      	itt	eq
 800a794:	0080      	lsleq	r0, r0, #2
 800a796:	3302      	addeq	r3, #2
 800a798:	2800      	cmp	r0, #0
 800a79a:	db05      	blt.n	800a7a8 <__hi0bits+0x38>
 800a79c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7a0:	f103 0301 	add.w	r3, r3, #1
 800a7a4:	bf08      	it	eq
 800a7a6:	2320      	moveq	r3, #32
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	4770      	bx	lr
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	e7e4      	b.n	800a77a <__hi0bits+0xa>

0800a7b0 <__lo0bits>:
 800a7b0:	6803      	ldr	r3, [r0, #0]
 800a7b2:	f013 0207 	ands.w	r2, r3, #7
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	d00b      	beq.n	800a7d2 <__lo0bits+0x22>
 800a7ba:	07da      	lsls	r2, r3, #31
 800a7bc:	d423      	bmi.n	800a806 <__lo0bits+0x56>
 800a7be:	0798      	lsls	r0, r3, #30
 800a7c0:	bf49      	itett	mi
 800a7c2:	085b      	lsrmi	r3, r3, #1
 800a7c4:	089b      	lsrpl	r3, r3, #2
 800a7c6:	2001      	movmi	r0, #1
 800a7c8:	600b      	strmi	r3, [r1, #0]
 800a7ca:	bf5c      	itt	pl
 800a7cc:	600b      	strpl	r3, [r1, #0]
 800a7ce:	2002      	movpl	r0, #2
 800a7d0:	4770      	bx	lr
 800a7d2:	b298      	uxth	r0, r3
 800a7d4:	b9a8      	cbnz	r0, 800a802 <__lo0bits+0x52>
 800a7d6:	0c1b      	lsrs	r3, r3, #16
 800a7d8:	2010      	movs	r0, #16
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	b90a      	cbnz	r2, 800a7e2 <__lo0bits+0x32>
 800a7de:	3008      	adds	r0, #8
 800a7e0:	0a1b      	lsrs	r3, r3, #8
 800a7e2:	071a      	lsls	r2, r3, #28
 800a7e4:	bf04      	itt	eq
 800a7e6:	091b      	lsreq	r3, r3, #4
 800a7e8:	3004      	addeq	r0, #4
 800a7ea:	079a      	lsls	r2, r3, #30
 800a7ec:	bf04      	itt	eq
 800a7ee:	089b      	lsreq	r3, r3, #2
 800a7f0:	3002      	addeq	r0, #2
 800a7f2:	07da      	lsls	r2, r3, #31
 800a7f4:	d403      	bmi.n	800a7fe <__lo0bits+0x4e>
 800a7f6:	085b      	lsrs	r3, r3, #1
 800a7f8:	f100 0001 	add.w	r0, r0, #1
 800a7fc:	d005      	beq.n	800a80a <__lo0bits+0x5a>
 800a7fe:	600b      	str	r3, [r1, #0]
 800a800:	4770      	bx	lr
 800a802:	4610      	mov	r0, r2
 800a804:	e7e9      	b.n	800a7da <__lo0bits+0x2a>
 800a806:	2000      	movs	r0, #0
 800a808:	4770      	bx	lr
 800a80a:	2020      	movs	r0, #32
 800a80c:	4770      	bx	lr
	...

0800a810 <__i2b>:
 800a810:	b510      	push	{r4, lr}
 800a812:	460c      	mov	r4, r1
 800a814:	2101      	movs	r1, #1
 800a816:	f7ff ff03 	bl	800a620 <_Balloc>
 800a81a:	4602      	mov	r2, r0
 800a81c:	b928      	cbnz	r0, 800a82a <__i2b+0x1a>
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <__i2b+0x24>)
 800a820:	4805      	ldr	r0, [pc, #20]	; (800a838 <__i2b+0x28>)
 800a822:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a826:	f7fe f801 	bl	800882c <__assert_func>
 800a82a:	2301      	movs	r3, #1
 800a82c:	6144      	str	r4, [r0, #20]
 800a82e:	6103      	str	r3, [r0, #16]
 800a830:	bd10      	pop	{r4, pc}
 800a832:	bf00      	nop
 800a834:	0800b3b8 	.word	0x0800b3b8
 800a838:	0800b42c 	.word	0x0800b42c

0800a83c <__multiply>:
 800a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	4691      	mov	r9, r2
 800a842:	690a      	ldr	r2, [r1, #16]
 800a844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a848:	429a      	cmp	r2, r3
 800a84a:	bfb8      	it	lt
 800a84c:	460b      	movlt	r3, r1
 800a84e:	460c      	mov	r4, r1
 800a850:	bfbc      	itt	lt
 800a852:	464c      	movlt	r4, r9
 800a854:	4699      	movlt	r9, r3
 800a856:	6927      	ldr	r7, [r4, #16]
 800a858:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a85c:	68a3      	ldr	r3, [r4, #8]
 800a85e:	6861      	ldr	r1, [r4, #4]
 800a860:	eb07 060a 	add.w	r6, r7, sl
 800a864:	42b3      	cmp	r3, r6
 800a866:	b085      	sub	sp, #20
 800a868:	bfb8      	it	lt
 800a86a:	3101      	addlt	r1, #1
 800a86c:	f7ff fed8 	bl	800a620 <_Balloc>
 800a870:	b930      	cbnz	r0, 800a880 <__multiply+0x44>
 800a872:	4602      	mov	r2, r0
 800a874:	4b44      	ldr	r3, [pc, #272]	; (800a988 <__multiply+0x14c>)
 800a876:	4845      	ldr	r0, [pc, #276]	; (800a98c <__multiply+0x150>)
 800a878:	f240 115d 	movw	r1, #349	; 0x15d
 800a87c:	f7fd ffd6 	bl	800882c <__assert_func>
 800a880:	f100 0514 	add.w	r5, r0, #20
 800a884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a888:	462b      	mov	r3, r5
 800a88a:	2200      	movs	r2, #0
 800a88c:	4543      	cmp	r3, r8
 800a88e:	d321      	bcc.n	800a8d4 <__multiply+0x98>
 800a890:	f104 0314 	add.w	r3, r4, #20
 800a894:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a898:	f109 0314 	add.w	r3, r9, #20
 800a89c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8a0:	9202      	str	r2, [sp, #8]
 800a8a2:	1b3a      	subs	r2, r7, r4
 800a8a4:	3a15      	subs	r2, #21
 800a8a6:	f022 0203 	bic.w	r2, r2, #3
 800a8aa:	3204      	adds	r2, #4
 800a8ac:	f104 0115 	add.w	r1, r4, #21
 800a8b0:	428f      	cmp	r7, r1
 800a8b2:	bf38      	it	cc
 800a8b4:	2204      	movcc	r2, #4
 800a8b6:	9201      	str	r2, [sp, #4]
 800a8b8:	9a02      	ldr	r2, [sp, #8]
 800a8ba:	9303      	str	r3, [sp, #12]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d80c      	bhi.n	800a8da <__multiply+0x9e>
 800a8c0:	2e00      	cmp	r6, #0
 800a8c2:	dd03      	ble.n	800a8cc <__multiply+0x90>
 800a8c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d05a      	beq.n	800a982 <__multiply+0x146>
 800a8cc:	6106      	str	r6, [r0, #16]
 800a8ce:	b005      	add	sp, #20
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d4:	f843 2b04 	str.w	r2, [r3], #4
 800a8d8:	e7d8      	b.n	800a88c <__multiply+0x50>
 800a8da:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8de:	f1ba 0f00 	cmp.w	sl, #0
 800a8e2:	d024      	beq.n	800a92e <__multiply+0xf2>
 800a8e4:	f104 0e14 	add.w	lr, r4, #20
 800a8e8:	46a9      	mov	r9, r5
 800a8ea:	f04f 0c00 	mov.w	ip, #0
 800a8ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8f2:	f8d9 1000 	ldr.w	r1, [r9]
 800a8f6:	fa1f fb82 	uxth.w	fp, r2
 800a8fa:	b289      	uxth	r1, r1
 800a8fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a900:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a904:	f8d9 2000 	ldr.w	r2, [r9]
 800a908:	4461      	add	r1, ip
 800a90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a90e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a916:	b289      	uxth	r1, r1
 800a918:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a91c:	4577      	cmp	r7, lr
 800a91e:	f849 1b04 	str.w	r1, [r9], #4
 800a922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a926:	d8e2      	bhi.n	800a8ee <__multiply+0xb2>
 800a928:	9a01      	ldr	r2, [sp, #4]
 800a92a:	f845 c002 	str.w	ip, [r5, r2]
 800a92e:	9a03      	ldr	r2, [sp, #12]
 800a930:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a934:	3304      	adds	r3, #4
 800a936:	f1b9 0f00 	cmp.w	r9, #0
 800a93a:	d020      	beq.n	800a97e <__multiply+0x142>
 800a93c:	6829      	ldr	r1, [r5, #0]
 800a93e:	f104 0c14 	add.w	ip, r4, #20
 800a942:	46ae      	mov	lr, r5
 800a944:	f04f 0a00 	mov.w	sl, #0
 800a948:	f8bc b000 	ldrh.w	fp, [ip]
 800a94c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a950:	fb09 220b 	mla	r2, r9, fp, r2
 800a954:	4492      	add	sl, r2
 800a956:	b289      	uxth	r1, r1
 800a958:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a95c:	f84e 1b04 	str.w	r1, [lr], #4
 800a960:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a964:	f8be 1000 	ldrh.w	r1, [lr]
 800a968:	0c12      	lsrs	r2, r2, #16
 800a96a:	fb09 1102 	mla	r1, r9, r2, r1
 800a96e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a972:	4567      	cmp	r7, ip
 800a974:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a978:	d8e6      	bhi.n	800a948 <__multiply+0x10c>
 800a97a:	9a01      	ldr	r2, [sp, #4]
 800a97c:	50a9      	str	r1, [r5, r2]
 800a97e:	3504      	adds	r5, #4
 800a980:	e79a      	b.n	800a8b8 <__multiply+0x7c>
 800a982:	3e01      	subs	r6, #1
 800a984:	e79c      	b.n	800a8c0 <__multiply+0x84>
 800a986:	bf00      	nop
 800a988:	0800b3b8 	.word	0x0800b3b8
 800a98c:	0800b42c 	.word	0x0800b42c

0800a990 <__pow5mult>:
 800a990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a994:	4615      	mov	r5, r2
 800a996:	f012 0203 	ands.w	r2, r2, #3
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	d007      	beq.n	800a9b0 <__pow5mult+0x20>
 800a9a0:	4c25      	ldr	r4, [pc, #148]	; (800aa38 <__pow5mult+0xa8>)
 800a9a2:	3a01      	subs	r2, #1
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9aa:	f7ff fe9b 	bl	800a6e4 <__multadd>
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	10ad      	asrs	r5, r5, #2
 800a9b2:	d03d      	beq.n	800aa30 <__pow5mult+0xa0>
 800a9b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9b6:	b97c      	cbnz	r4, 800a9d8 <__pow5mult+0x48>
 800a9b8:	2010      	movs	r0, #16
 800a9ba:	f7ff fe1b 	bl	800a5f4 <malloc>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	6270      	str	r0, [r6, #36]	; 0x24
 800a9c2:	b928      	cbnz	r0, 800a9d0 <__pow5mult+0x40>
 800a9c4:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <__pow5mult+0xac>)
 800a9c6:	481e      	ldr	r0, [pc, #120]	; (800aa40 <__pow5mult+0xb0>)
 800a9c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9cc:	f7fd ff2e 	bl	800882c <__assert_func>
 800a9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9d4:	6004      	str	r4, [r0, #0]
 800a9d6:	60c4      	str	r4, [r0, #12]
 800a9d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9e0:	b94c      	cbnz	r4, 800a9f6 <__pow5mult+0x66>
 800a9e2:	f240 2171 	movw	r1, #625	; 0x271
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff ff12 	bl	800a810 <__i2b>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	6003      	str	r3, [r0, #0]
 800a9f6:	f04f 0900 	mov.w	r9, #0
 800a9fa:	07eb      	lsls	r3, r5, #31
 800a9fc:	d50a      	bpl.n	800aa14 <__pow5mult+0x84>
 800a9fe:	4639      	mov	r1, r7
 800aa00:	4622      	mov	r2, r4
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ff1a 	bl	800a83c <__multiply>
 800aa08:	4639      	mov	r1, r7
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f7ff fe47 	bl	800a6a0 <_Bfree>
 800aa12:	4647      	mov	r7, r8
 800aa14:	106d      	asrs	r5, r5, #1
 800aa16:	d00b      	beq.n	800aa30 <__pow5mult+0xa0>
 800aa18:	6820      	ldr	r0, [r4, #0]
 800aa1a:	b938      	cbnz	r0, 800aa2c <__pow5mult+0x9c>
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4630      	mov	r0, r6
 800aa22:	f7ff ff0b 	bl	800a83c <__multiply>
 800aa26:	6020      	str	r0, [r4, #0]
 800aa28:	f8c0 9000 	str.w	r9, [r0]
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	e7e4      	b.n	800a9fa <__pow5mult+0x6a>
 800aa30:	4638      	mov	r0, r7
 800aa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa36:	bf00      	nop
 800aa38:	0800b578 	.word	0x0800b578
 800aa3c:	0800b346 	.word	0x0800b346
 800aa40:	0800b42c 	.word	0x0800b42c

0800aa44 <__lshift>:
 800aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	460c      	mov	r4, r1
 800aa4a:	6849      	ldr	r1, [r1, #4]
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa52:	68a3      	ldr	r3, [r4, #8]
 800aa54:	4607      	mov	r7, r0
 800aa56:	4691      	mov	r9, r2
 800aa58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa5c:	f108 0601 	add.w	r6, r8, #1
 800aa60:	42b3      	cmp	r3, r6
 800aa62:	db0b      	blt.n	800aa7c <__lshift+0x38>
 800aa64:	4638      	mov	r0, r7
 800aa66:	f7ff fddb 	bl	800a620 <_Balloc>
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	b948      	cbnz	r0, 800aa82 <__lshift+0x3e>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	4b2a      	ldr	r3, [pc, #168]	; (800ab1c <__lshift+0xd8>)
 800aa72:	482b      	ldr	r0, [pc, #172]	; (800ab20 <__lshift+0xdc>)
 800aa74:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa78:	f7fd fed8 	bl	800882c <__assert_func>
 800aa7c:	3101      	adds	r1, #1
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	e7ee      	b.n	800aa60 <__lshift+0x1c>
 800aa82:	2300      	movs	r3, #0
 800aa84:	f100 0114 	add.w	r1, r0, #20
 800aa88:	f100 0210 	add.w	r2, r0, #16
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	4553      	cmp	r3, sl
 800aa90:	db37      	blt.n	800ab02 <__lshift+0xbe>
 800aa92:	6920      	ldr	r0, [r4, #16]
 800aa94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa98:	f104 0314 	add.w	r3, r4, #20
 800aa9c:	f019 091f 	ands.w	r9, r9, #31
 800aaa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aaa4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aaa8:	d02f      	beq.n	800ab0a <__lshift+0xc6>
 800aaaa:	f1c9 0e20 	rsb	lr, r9, #32
 800aaae:	468a      	mov	sl, r1
 800aab0:	f04f 0c00 	mov.w	ip, #0
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	fa02 f209 	lsl.w	r2, r2, r9
 800aaba:	ea42 020c 	orr.w	r2, r2, ip
 800aabe:	f84a 2b04 	str.w	r2, [sl], #4
 800aac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac6:	4298      	cmp	r0, r3
 800aac8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aacc:	d8f2      	bhi.n	800aab4 <__lshift+0x70>
 800aace:	1b03      	subs	r3, r0, r4
 800aad0:	3b15      	subs	r3, #21
 800aad2:	f023 0303 	bic.w	r3, r3, #3
 800aad6:	3304      	adds	r3, #4
 800aad8:	f104 0215 	add.w	r2, r4, #21
 800aadc:	4290      	cmp	r0, r2
 800aade:	bf38      	it	cc
 800aae0:	2304      	movcc	r3, #4
 800aae2:	f841 c003 	str.w	ip, [r1, r3]
 800aae6:	f1bc 0f00 	cmp.w	ip, #0
 800aaea:	d001      	beq.n	800aaf0 <__lshift+0xac>
 800aaec:	f108 0602 	add.w	r6, r8, #2
 800aaf0:	3e01      	subs	r6, #1
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	612e      	str	r6, [r5, #16]
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	f7ff fdd2 	bl	800a6a0 <_Bfree>
 800aafc:	4628      	mov	r0, r5
 800aafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab02:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab06:	3301      	adds	r3, #1
 800ab08:	e7c1      	b.n	800aa8e <__lshift+0x4a>
 800ab0a:	3904      	subs	r1, #4
 800ab0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab10:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab14:	4298      	cmp	r0, r3
 800ab16:	d8f9      	bhi.n	800ab0c <__lshift+0xc8>
 800ab18:	e7ea      	b.n	800aaf0 <__lshift+0xac>
 800ab1a:	bf00      	nop
 800ab1c:	0800b3b8 	.word	0x0800b3b8
 800ab20:	0800b42c 	.word	0x0800b42c

0800ab24 <__mcmp>:
 800ab24:	b530      	push	{r4, r5, lr}
 800ab26:	6902      	ldr	r2, [r0, #16]
 800ab28:	690c      	ldr	r4, [r1, #16]
 800ab2a:	1b12      	subs	r2, r2, r4
 800ab2c:	d10e      	bne.n	800ab4c <__mcmp+0x28>
 800ab2e:	f100 0314 	add.w	r3, r0, #20
 800ab32:	3114      	adds	r1, #20
 800ab34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab44:	42a5      	cmp	r5, r4
 800ab46:	d003      	beq.n	800ab50 <__mcmp+0x2c>
 800ab48:	d305      	bcc.n	800ab56 <__mcmp+0x32>
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	bd30      	pop	{r4, r5, pc}
 800ab50:	4283      	cmp	r3, r0
 800ab52:	d3f3      	bcc.n	800ab3c <__mcmp+0x18>
 800ab54:	e7fa      	b.n	800ab4c <__mcmp+0x28>
 800ab56:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5a:	e7f7      	b.n	800ab4c <__mcmp+0x28>

0800ab5c <__mdiff>:
 800ab5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	460c      	mov	r4, r1
 800ab62:	4606      	mov	r6, r0
 800ab64:	4611      	mov	r1, r2
 800ab66:	4620      	mov	r0, r4
 800ab68:	4690      	mov	r8, r2
 800ab6a:	f7ff ffdb 	bl	800ab24 <__mcmp>
 800ab6e:	1e05      	subs	r5, r0, #0
 800ab70:	d110      	bne.n	800ab94 <__mdiff+0x38>
 800ab72:	4629      	mov	r1, r5
 800ab74:	4630      	mov	r0, r6
 800ab76:	f7ff fd53 	bl	800a620 <_Balloc>
 800ab7a:	b930      	cbnz	r0, 800ab8a <__mdiff+0x2e>
 800ab7c:	4b3a      	ldr	r3, [pc, #232]	; (800ac68 <__mdiff+0x10c>)
 800ab7e:	4602      	mov	r2, r0
 800ab80:	f240 2132 	movw	r1, #562	; 0x232
 800ab84:	4839      	ldr	r0, [pc, #228]	; (800ac6c <__mdiff+0x110>)
 800ab86:	f7fd fe51 	bl	800882c <__assert_func>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	bfa4      	itt	ge
 800ab96:	4643      	movge	r3, r8
 800ab98:	46a0      	movge	r8, r4
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aba0:	bfa6      	itte	ge
 800aba2:	461c      	movge	r4, r3
 800aba4:	2500      	movge	r5, #0
 800aba6:	2501      	movlt	r5, #1
 800aba8:	f7ff fd3a 	bl	800a620 <_Balloc>
 800abac:	b920      	cbnz	r0, 800abb8 <__mdiff+0x5c>
 800abae:	4b2e      	ldr	r3, [pc, #184]	; (800ac68 <__mdiff+0x10c>)
 800abb0:	4602      	mov	r2, r0
 800abb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abb6:	e7e5      	b.n	800ab84 <__mdiff+0x28>
 800abb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abbc:	6926      	ldr	r6, [r4, #16]
 800abbe:	60c5      	str	r5, [r0, #12]
 800abc0:	f104 0914 	add.w	r9, r4, #20
 800abc4:	f108 0514 	add.w	r5, r8, #20
 800abc8:	f100 0e14 	add.w	lr, r0, #20
 800abcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abd4:	f108 0210 	add.w	r2, r8, #16
 800abd8:	46f2      	mov	sl, lr
 800abda:	2100      	movs	r1, #0
 800abdc:	f859 3b04 	ldr.w	r3, [r9], #4
 800abe0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abe4:	fa1f f883 	uxth.w	r8, r3
 800abe8:	fa11 f18b 	uxtah	r1, r1, fp
 800abec:	0c1b      	lsrs	r3, r3, #16
 800abee:	eba1 0808 	sub.w	r8, r1, r8
 800abf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abfa:	fa1f f888 	uxth.w	r8, r8
 800abfe:	1419      	asrs	r1, r3, #16
 800ac00:	454e      	cmp	r6, r9
 800ac02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac06:	f84a 3b04 	str.w	r3, [sl], #4
 800ac0a:	d8e7      	bhi.n	800abdc <__mdiff+0x80>
 800ac0c:	1b33      	subs	r3, r6, r4
 800ac0e:	3b15      	subs	r3, #21
 800ac10:	f023 0303 	bic.w	r3, r3, #3
 800ac14:	3304      	adds	r3, #4
 800ac16:	3415      	adds	r4, #21
 800ac18:	42a6      	cmp	r6, r4
 800ac1a:	bf38      	it	cc
 800ac1c:	2304      	movcc	r3, #4
 800ac1e:	441d      	add	r5, r3
 800ac20:	4473      	add	r3, lr
 800ac22:	469e      	mov	lr, r3
 800ac24:	462e      	mov	r6, r5
 800ac26:	4566      	cmp	r6, ip
 800ac28:	d30e      	bcc.n	800ac48 <__mdiff+0xec>
 800ac2a:	f10c 0203 	add.w	r2, ip, #3
 800ac2e:	1b52      	subs	r2, r2, r5
 800ac30:	f022 0203 	bic.w	r2, r2, #3
 800ac34:	3d03      	subs	r5, #3
 800ac36:	45ac      	cmp	ip, r5
 800ac38:	bf38      	it	cc
 800ac3a:	2200      	movcc	r2, #0
 800ac3c:	441a      	add	r2, r3
 800ac3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac42:	b17b      	cbz	r3, 800ac64 <__mdiff+0x108>
 800ac44:	6107      	str	r7, [r0, #16]
 800ac46:	e7a3      	b.n	800ab90 <__mdiff+0x34>
 800ac48:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac4c:	fa11 f288 	uxtah	r2, r1, r8
 800ac50:	1414      	asrs	r4, r2, #16
 800ac52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac56:	b292      	uxth	r2, r2
 800ac58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac5c:	f84e 2b04 	str.w	r2, [lr], #4
 800ac60:	1421      	asrs	r1, r4, #16
 800ac62:	e7e0      	b.n	800ac26 <__mdiff+0xca>
 800ac64:	3f01      	subs	r7, #1
 800ac66:	e7ea      	b.n	800ac3e <__mdiff+0xe2>
 800ac68:	0800b3b8 	.word	0x0800b3b8
 800ac6c:	0800b42c 	.word	0x0800b42c

0800ac70 <__d2b>:
 800ac70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac74:	4689      	mov	r9, r1
 800ac76:	2101      	movs	r1, #1
 800ac78:	ec57 6b10 	vmov	r6, r7, d0
 800ac7c:	4690      	mov	r8, r2
 800ac7e:	f7ff fccf 	bl	800a620 <_Balloc>
 800ac82:	4604      	mov	r4, r0
 800ac84:	b930      	cbnz	r0, 800ac94 <__d2b+0x24>
 800ac86:	4602      	mov	r2, r0
 800ac88:	4b25      	ldr	r3, [pc, #148]	; (800ad20 <__d2b+0xb0>)
 800ac8a:	4826      	ldr	r0, [pc, #152]	; (800ad24 <__d2b+0xb4>)
 800ac8c:	f240 310a 	movw	r1, #778	; 0x30a
 800ac90:	f7fd fdcc 	bl	800882c <__assert_func>
 800ac94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac9c:	bb35      	cbnz	r5, 800acec <__d2b+0x7c>
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	d028      	beq.n	800acf6 <__d2b+0x86>
 800aca4:	4668      	mov	r0, sp
 800aca6:	9600      	str	r6, [sp, #0]
 800aca8:	f7ff fd82 	bl	800a7b0 <__lo0bits>
 800acac:	9900      	ldr	r1, [sp, #0]
 800acae:	b300      	cbz	r0, 800acf2 <__d2b+0x82>
 800acb0:	9a01      	ldr	r2, [sp, #4]
 800acb2:	f1c0 0320 	rsb	r3, r0, #32
 800acb6:	fa02 f303 	lsl.w	r3, r2, r3
 800acba:	430b      	orrs	r3, r1
 800acbc:	40c2      	lsrs	r2, r0
 800acbe:	6163      	str	r3, [r4, #20]
 800acc0:	9201      	str	r2, [sp, #4]
 800acc2:	9b01      	ldr	r3, [sp, #4]
 800acc4:	61a3      	str	r3, [r4, #24]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bf14      	ite	ne
 800acca:	2202      	movne	r2, #2
 800accc:	2201      	moveq	r2, #1
 800acce:	6122      	str	r2, [r4, #16]
 800acd0:	b1d5      	cbz	r5, 800ad08 <__d2b+0x98>
 800acd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acd6:	4405      	add	r5, r0
 800acd8:	f8c9 5000 	str.w	r5, [r9]
 800acdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ace0:	f8c8 0000 	str.w	r0, [r8]
 800ace4:	4620      	mov	r0, r4
 800ace6:	b003      	add	sp, #12
 800ace8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acf0:	e7d5      	b.n	800ac9e <__d2b+0x2e>
 800acf2:	6161      	str	r1, [r4, #20]
 800acf4:	e7e5      	b.n	800acc2 <__d2b+0x52>
 800acf6:	a801      	add	r0, sp, #4
 800acf8:	f7ff fd5a 	bl	800a7b0 <__lo0bits>
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	6163      	str	r3, [r4, #20]
 800ad00:	2201      	movs	r2, #1
 800ad02:	6122      	str	r2, [r4, #16]
 800ad04:	3020      	adds	r0, #32
 800ad06:	e7e3      	b.n	800acd0 <__d2b+0x60>
 800ad08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad10:	f8c9 0000 	str.w	r0, [r9]
 800ad14:	6918      	ldr	r0, [r3, #16]
 800ad16:	f7ff fd2b 	bl	800a770 <__hi0bits>
 800ad1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad1e:	e7df      	b.n	800ace0 <__d2b+0x70>
 800ad20:	0800b3b8 	.word	0x0800b3b8
 800ad24:	0800b42c 	.word	0x0800b42c

0800ad28 <_calloc_r>:
 800ad28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad2a:	fba1 2402 	umull	r2, r4, r1, r2
 800ad2e:	b94c      	cbnz	r4, 800ad44 <_calloc_r+0x1c>
 800ad30:	4611      	mov	r1, r2
 800ad32:	9201      	str	r2, [sp, #4]
 800ad34:	f000 f87a 	bl	800ae2c <_malloc_r>
 800ad38:	9a01      	ldr	r2, [sp, #4]
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	b930      	cbnz	r0, 800ad4c <_calloc_r+0x24>
 800ad3e:	4628      	mov	r0, r5
 800ad40:	b003      	add	sp, #12
 800ad42:	bd30      	pop	{r4, r5, pc}
 800ad44:	220c      	movs	r2, #12
 800ad46:	6002      	str	r2, [r0, #0]
 800ad48:	2500      	movs	r5, #0
 800ad4a:	e7f8      	b.n	800ad3e <_calloc_r+0x16>
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	f7fd fdc7 	bl	80088e0 <memset>
 800ad52:	e7f4      	b.n	800ad3e <_calloc_r+0x16>

0800ad54 <_free_r>:
 800ad54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad56:	2900      	cmp	r1, #0
 800ad58:	d044      	beq.n	800ade4 <_free_r+0x90>
 800ad5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad5e:	9001      	str	r0, [sp, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f1a1 0404 	sub.w	r4, r1, #4
 800ad66:	bfb8      	it	lt
 800ad68:	18e4      	addlt	r4, r4, r3
 800ad6a:	f000 f9d3 	bl	800b114 <__malloc_lock>
 800ad6e:	4a1e      	ldr	r2, [pc, #120]	; (800ade8 <_free_r+0x94>)
 800ad70:	9801      	ldr	r0, [sp, #4]
 800ad72:	6813      	ldr	r3, [r2, #0]
 800ad74:	b933      	cbnz	r3, 800ad84 <_free_r+0x30>
 800ad76:	6063      	str	r3, [r4, #4]
 800ad78:	6014      	str	r4, [r2, #0]
 800ad7a:	b003      	add	sp, #12
 800ad7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad80:	f000 b9ce 	b.w	800b120 <__malloc_unlock>
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	d908      	bls.n	800ad9a <_free_r+0x46>
 800ad88:	6825      	ldr	r5, [r4, #0]
 800ad8a:	1961      	adds	r1, r4, r5
 800ad8c:	428b      	cmp	r3, r1
 800ad8e:	bf01      	itttt	eq
 800ad90:	6819      	ldreq	r1, [r3, #0]
 800ad92:	685b      	ldreq	r3, [r3, #4]
 800ad94:	1949      	addeq	r1, r1, r5
 800ad96:	6021      	streq	r1, [r4, #0]
 800ad98:	e7ed      	b.n	800ad76 <_free_r+0x22>
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	b10b      	cbz	r3, 800ada4 <_free_r+0x50>
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	d9fa      	bls.n	800ad9a <_free_r+0x46>
 800ada4:	6811      	ldr	r1, [r2, #0]
 800ada6:	1855      	adds	r5, r2, r1
 800ada8:	42a5      	cmp	r5, r4
 800adaa:	d10b      	bne.n	800adc4 <_free_r+0x70>
 800adac:	6824      	ldr	r4, [r4, #0]
 800adae:	4421      	add	r1, r4
 800adb0:	1854      	adds	r4, r2, r1
 800adb2:	42a3      	cmp	r3, r4
 800adb4:	6011      	str	r1, [r2, #0]
 800adb6:	d1e0      	bne.n	800ad7a <_free_r+0x26>
 800adb8:	681c      	ldr	r4, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	6053      	str	r3, [r2, #4]
 800adbe:	4421      	add	r1, r4
 800adc0:	6011      	str	r1, [r2, #0]
 800adc2:	e7da      	b.n	800ad7a <_free_r+0x26>
 800adc4:	d902      	bls.n	800adcc <_free_r+0x78>
 800adc6:	230c      	movs	r3, #12
 800adc8:	6003      	str	r3, [r0, #0]
 800adca:	e7d6      	b.n	800ad7a <_free_r+0x26>
 800adcc:	6825      	ldr	r5, [r4, #0]
 800adce:	1961      	adds	r1, r4, r5
 800add0:	428b      	cmp	r3, r1
 800add2:	bf04      	itt	eq
 800add4:	6819      	ldreq	r1, [r3, #0]
 800add6:	685b      	ldreq	r3, [r3, #4]
 800add8:	6063      	str	r3, [r4, #4]
 800adda:	bf04      	itt	eq
 800addc:	1949      	addeq	r1, r1, r5
 800adde:	6021      	streq	r1, [r4, #0]
 800ade0:	6054      	str	r4, [r2, #4]
 800ade2:	e7ca      	b.n	800ad7a <_free_r+0x26>
 800ade4:	b003      	add	sp, #12
 800ade6:	bd30      	pop	{r4, r5, pc}
 800ade8:	240002e4 	.word	0x240002e4

0800adec <sbrk_aligned>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	4e0e      	ldr	r6, [pc, #56]	; (800ae28 <sbrk_aligned+0x3c>)
 800adf0:	460c      	mov	r4, r1
 800adf2:	6831      	ldr	r1, [r6, #0]
 800adf4:	4605      	mov	r5, r0
 800adf6:	b911      	cbnz	r1, 800adfe <sbrk_aligned+0x12>
 800adf8:	f000 f88c 	bl	800af14 <_sbrk_r>
 800adfc:	6030      	str	r0, [r6, #0]
 800adfe:	4621      	mov	r1, r4
 800ae00:	4628      	mov	r0, r5
 800ae02:	f000 f887 	bl	800af14 <_sbrk_r>
 800ae06:	1c43      	adds	r3, r0, #1
 800ae08:	d00a      	beq.n	800ae20 <sbrk_aligned+0x34>
 800ae0a:	1cc4      	adds	r4, r0, #3
 800ae0c:	f024 0403 	bic.w	r4, r4, #3
 800ae10:	42a0      	cmp	r0, r4
 800ae12:	d007      	beq.n	800ae24 <sbrk_aligned+0x38>
 800ae14:	1a21      	subs	r1, r4, r0
 800ae16:	4628      	mov	r0, r5
 800ae18:	f000 f87c 	bl	800af14 <_sbrk_r>
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d101      	bne.n	800ae24 <sbrk_aligned+0x38>
 800ae20:	f04f 34ff 	mov.w	r4, #4294967295
 800ae24:	4620      	mov	r0, r4
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	240002e8 	.word	0x240002e8

0800ae2c <_malloc_r>:
 800ae2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae30:	1ccd      	adds	r5, r1, #3
 800ae32:	f025 0503 	bic.w	r5, r5, #3
 800ae36:	3508      	adds	r5, #8
 800ae38:	2d0c      	cmp	r5, #12
 800ae3a:	bf38      	it	cc
 800ae3c:	250c      	movcc	r5, #12
 800ae3e:	2d00      	cmp	r5, #0
 800ae40:	4607      	mov	r7, r0
 800ae42:	db01      	blt.n	800ae48 <_malloc_r+0x1c>
 800ae44:	42a9      	cmp	r1, r5
 800ae46:	d905      	bls.n	800ae54 <_malloc_r+0x28>
 800ae48:	230c      	movs	r3, #12
 800ae4a:	603b      	str	r3, [r7, #0]
 800ae4c:	2600      	movs	r6, #0
 800ae4e:	4630      	mov	r0, r6
 800ae50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae54:	4e2e      	ldr	r6, [pc, #184]	; (800af10 <_malloc_r+0xe4>)
 800ae56:	f000 f95d 	bl	800b114 <__malloc_lock>
 800ae5a:	6833      	ldr	r3, [r6, #0]
 800ae5c:	461c      	mov	r4, r3
 800ae5e:	bb34      	cbnz	r4, 800aeae <_malloc_r+0x82>
 800ae60:	4629      	mov	r1, r5
 800ae62:	4638      	mov	r0, r7
 800ae64:	f7ff ffc2 	bl	800adec <sbrk_aligned>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	d14d      	bne.n	800af0a <_malloc_r+0xde>
 800ae6e:	6834      	ldr	r4, [r6, #0]
 800ae70:	4626      	mov	r6, r4
 800ae72:	2e00      	cmp	r6, #0
 800ae74:	d140      	bne.n	800aef8 <_malloc_r+0xcc>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	eb04 0803 	add.w	r8, r4, r3
 800ae80:	f000 f848 	bl	800af14 <_sbrk_r>
 800ae84:	4580      	cmp	r8, r0
 800ae86:	d13a      	bne.n	800aefe <_malloc_r+0xd2>
 800ae88:	6821      	ldr	r1, [r4, #0]
 800ae8a:	3503      	adds	r5, #3
 800ae8c:	1a6d      	subs	r5, r5, r1
 800ae8e:	f025 0503 	bic.w	r5, r5, #3
 800ae92:	3508      	adds	r5, #8
 800ae94:	2d0c      	cmp	r5, #12
 800ae96:	bf38      	it	cc
 800ae98:	250c      	movcc	r5, #12
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	f7ff ffa5 	bl	800adec <sbrk_aligned>
 800aea2:	3001      	adds	r0, #1
 800aea4:	d02b      	beq.n	800aefe <_malloc_r+0xd2>
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	442b      	add	r3, r5
 800aeaa:	6023      	str	r3, [r4, #0]
 800aeac:	e00e      	b.n	800aecc <_malloc_r+0xa0>
 800aeae:	6822      	ldr	r2, [r4, #0]
 800aeb0:	1b52      	subs	r2, r2, r5
 800aeb2:	d41e      	bmi.n	800aef2 <_malloc_r+0xc6>
 800aeb4:	2a0b      	cmp	r2, #11
 800aeb6:	d916      	bls.n	800aee6 <_malloc_r+0xba>
 800aeb8:	1961      	adds	r1, r4, r5
 800aeba:	42a3      	cmp	r3, r4
 800aebc:	6025      	str	r5, [r4, #0]
 800aebe:	bf18      	it	ne
 800aec0:	6059      	strne	r1, [r3, #4]
 800aec2:	6863      	ldr	r3, [r4, #4]
 800aec4:	bf08      	it	eq
 800aec6:	6031      	streq	r1, [r6, #0]
 800aec8:	5162      	str	r2, [r4, r5]
 800aeca:	604b      	str	r3, [r1, #4]
 800aecc:	4638      	mov	r0, r7
 800aece:	f104 060b 	add.w	r6, r4, #11
 800aed2:	f000 f925 	bl	800b120 <__malloc_unlock>
 800aed6:	f026 0607 	bic.w	r6, r6, #7
 800aeda:	1d23      	adds	r3, r4, #4
 800aedc:	1af2      	subs	r2, r6, r3
 800aede:	d0b6      	beq.n	800ae4e <_malloc_r+0x22>
 800aee0:	1b9b      	subs	r3, r3, r6
 800aee2:	50a3      	str	r3, [r4, r2]
 800aee4:	e7b3      	b.n	800ae4e <_malloc_r+0x22>
 800aee6:	6862      	ldr	r2, [r4, #4]
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	bf0c      	ite	eq
 800aeec:	6032      	streq	r2, [r6, #0]
 800aeee:	605a      	strne	r2, [r3, #4]
 800aef0:	e7ec      	b.n	800aecc <_malloc_r+0xa0>
 800aef2:	4623      	mov	r3, r4
 800aef4:	6864      	ldr	r4, [r4, #4]
 800aef6:	e7b2      	b.n	800ae5e <_malloc_r+0x32>
 800aef8:	4634      	mov	r4, r6
 800aefa:	6876      	ldr	r6, [r6, #4]
 800aefc:	e7b9      	b.n	800ae72 <_malloc_r+0x46>
 800aefe:	230c      	movs	r3, #12
 800af00:	603b      	str	r3, [r7, #0]
 800af02:	4638      	mov	r0, r7
 800af04:	f000 f90c 	bl	800b120 <__malloc_unlock>
 800af08:	e7a1      	b.n	800ae4e <_malloc_r+0x22>
 800af0a:	6025      	str	r5, [r4, #0]
 800af0c:	e7de      	b.n	800aecc <_malloc_r+0xa0>
 800af0e:	bf00      	nop
 800af10:	240002e4 	.word	0x240002e4

0800af14 <_sbrk_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d06      	ldr	r5, [pc, #24]	; (800af30 <_sbrk_r+0x1c>)
 800af18:	2300      	movs	r3, #0
 800af1a:	4604      	mov	r4, r0
 800af1c:	4608      	mov	r0, r1
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	f7f6 fd3c 	bl	800199c <_sbrk>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_sbrk_r+0x1a>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_sbrk_r+0x1a>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	240002ec 	.word	0x240002ec

0800af34 <_raise_r>:
 800af34:	291f      	cmp	r1, #31
 800af36:	b538      	push	{r3, r4, r5, lr}
 800af38:	4604      	mov	r4, r0
 800af3a:	460d      	mov	r5, r1
 800af3c:	d904      	bls.n	800af48 <_raise_r+0x14>
 800af3e:	2316      	movs	r3, #22
 800af40:	6003      	str	r3, [r0, #0]
 800af42:	f04f 30ff 	mov.w	r0, #4294967295
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af4a:	b112      	cbz	r2, 800af52 <_raise_r+0x1e>
 800af4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af50:	b94b      	cbnz	r3, 800af66 <_raise_r+0x32>
 800af52:	4620      	mov	r0, r4
 800af54:	f000 f830 	bl	800afb8 <_getpid_r>
 800af58:	462a      	mov	r2, r5
 800af5a:	4601      	mov	r1, r0
 800af5c:	4620      	mov	r0, r4
 800af5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af62:	f000 b817 	b.w	800af94 <_kill_r>
 800af66:	2b01      	cmp	r3, #1
 800af68:	d00a      	beq.n	800af80 <_raise_r+0x4c>
 800af6a:	1c59      	adds	r1, r3, #1
 800af6c:	d103      	bne.n	800af76 <_raise_r+0x42>
 800af6e:	2316      	movs	r3, #22
 800af70:	6003      	str	r3, [r0, #0]
 800af72:	2001      	movs	r0, #1
 800af74:	e7e7      	b.n	800af46 <_raise_r+0x12>
 800af76:	2400      	movs	r4, #0
 800af78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af7c:	4628      	mov	r0, r5
 800af7e:	4798      	blx	r3
 800af80:	2000      	movs	r0, #0
 800af82:	e7e0      	b.n	800af46 <_raise_r+0x12>

0800af84 <raise>:
 800af84:	4b02      	ldr	r3, [pc, #8]	; (800af90 <raise+0xc>)
 800af86:	4601      	mov	r1, r0
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	f7ff bfd3 	b.w	800af34 <_raise_r>
 800af8e:	bf00      	nop
 800af90:	24000010 	.word	0x24000010

0800af94 <_kill_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	4d07      	ldr	r5, [pc, #28]	; (800afb4 <_kill_r+0x20>)
 800af98:	2300      	movs	r3, #0
 800af9a:	4604      	mov	r4, r0
 800af9c:	4608      	mov	r0, r1
 800af9e:	4611      	mov	r1, r2
 800afa0:	602b      	str	r3, [r5, #0]
 800afa2:	f7f6 fc74 	bl	800188e <_kill>
 800afa6:	1c43      	adds	r3, r0, #1
 800afa8:	d102      	bne.n	800afb0 <_kill_r+0x1c>
 800afaa:	682b      	ldr	r3, [r5, #0]
 800afac:	b103      	cbz	r3, 800afb0 <_kill_r+0x1c>
 800afae:	6023      	str	r3, [r4, #0]
 800afb0:	bd38      	pop	{r3, r4, r5, pc}
 800afb2:	bf00      	nop
 800afb4:	240002ec 	.word	0x240002ec

0800afb8 <_getpid_r>:
 800afb8:	f7f6 bc61 	b.w	800187e <_getpid>

0800afbc <__sread>:
 800afbc:	b510      	push	{r4, lr}
 800afbe:	460c      	mov	r4, r1
 800afc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc4:	f000 f8b2 	bl	800b12c <_read_r>
 800afc8:	2800      	cmp	r0, #0
 800afca:	bfab      	itete	ge
 800afcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afce:	89a3      	ldrhlt	r3, [r4, #12]
 800afd0:	181b      	addge	r3, r3, r0
 800afd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afd6:	bfac      	ite	ge
 800afd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800afda:	81a3      	strhlt	r3, [r4, #12]
 800afdc:	bd10      	pop	{r4, pc}

0800afde <__swrite>:
 800afde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe2:	461f      	mov	r7, r3
 800afe4:	898b      	ldrh	r3, [r1, #12]
 800afe6:	05db      	lsls	r3, r3, #23
 800afe8:	4605      	mov	r5, r0
 800afea:	460c      	mov	r4, r1
 800afec:	4616      	mov	r6, r2
 800afee:	d505      	bpl.n	800affc <__swrite+0x1e>
 800aff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff4:	2302      	movs	r3, #2
 800aff6:	2200      	movs	r2, #0
 800aff8:	f000 f868 	bl	800b0cc <_lseek_r>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b006:	81a3      	strh	r3, [r4, #12]
 800b008:	4632      	mov	r2, r6
 800b00a:	463b      	mov	r3, r7
 800b00c:	4628      	mov	r0, r5
 800b00e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b012:	f000 b817 	b.w	800b044 <_write_r>

0800b016 <__sseek>:
 800b016:	b510      	push	{r4, lr}
 800b018:	460c      	mov	r4, r1
 800b01a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b01e:	f000 f855 	bl	800b0cc <_lseek_r>
 800b022:	1c43      	adds	r3, r0, #1
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	bf15      	itete	ne
 800b028:	6560      	strne	r0, [r4, #84]	; 0x54
 800b02a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b02e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b032:	81a3      	strheq	r3, [r4, #12]
 800b034:	bf18      	it	ne
 800b036:	81a3      	strhne	r3, [r4, #12]
 800b038:	bd10      	pop	{r4, pc}

0800b03a <__sclose>:
 800b03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03e:	f000 b813 	b.w	800b068 <_close_r>
	...

0800b044 <_write_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	4d07      	ldr	r5, [pc, #28]	; (800b064 <_write_r+0x20>)
 800b048:	4604      	mov	r4, r0
 800b04a:	4608      	mov	r0, r1
 800b04c:	4611      	mov	r1, r2
 800b04e:	2200      	movs	r2, #0
 800b050:	602a      	str	r2, [r5, #0]
 800b052:	461a      	mov	r2, r3
 800b054:	f7f6 fc52 	bl	80018fc <_write>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	d102      	bne.n	800b062 <_write_r+0x1e>
 800b05c:	682b      	ldr	r3, [r5, #0]
 800b05e:	b103      	cbz	r3, 800b062 <_write_r+0x1e>
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	bd38      	pop	{r3, r4, r5, pc}
 800b064:	240002ec 	.word	0x240002ec

0800b068 <_close_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4d06      	ldr	r5, [pc, #24]	; (800b084 <_close_r+0x1c>)
 800b06c:	2300      	movs	r3, #0
 800b06e:	4604      	mov	r4, r0
 800b070:	4608      	mov	r0, r1
 800b072:	602b      	str	r3, [r5, #0]
 800b074:	f7f6 fc5e 	bl	8001934 <_close>
 800b078:	1c43      	adds	r3, r0, #1
 800b07a:	d102      	bne.n	800b082 <_close_r+0x1a>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	b103      	cbz	r3, 800b082 <_close_r+0x1a>
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	240002ec 	.word	0x240002ec

0800b088 <_fstat_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d07      	ldr	r5, [pc, #28]	; (800b0a8 <_fstat_r+0x20>)
 800b08c:	2300      	movs	r3, #0
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	4611      	mov	r1, r2
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	f7f6 fc59 	bl	800194c <_fstat>
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	d102      	bne.n	800b0a4 <_fstat_r+0x1c>
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	b103      	cbz	r3, 800b0a4 <_fstat_r+0x1c>
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	bf00      	nop
 800b0a8:	240002ec 	.word	0x240002ec

0800b0ac <_isatty_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4d06      	ldr	r5, [pc, #24]	; (800b0c8 <_isatty_r+0x1c>)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	602b      	str	r3, [r5, #0]
 800b0b8:	f7f6 fc58 	bl	800196c <_isatty>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d102      	bne.n	800b0c6 <_isatty_r+0x1a>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b103      	cbz	r3, 800b0c6 <_isatty_r+0x1a>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	240002ec 	.word	0x240002ec

0800b0cc <_lseek_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4d07      	ldr	r5, [pc, #28]	; (800b0ec <_lseek_r+0x20>)
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	4608      	mov	r0, r1
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	602a      	str	r2, [r5, #0]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	f7f6 fc51 	bl	8001982 <_lseek>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_lseek_r+0x1e>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_lseek_r+0x1e>
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	240002ec 	.word	0x240002ec

0800b0f0 <__ascii_mbtowc>:
 800b0f0:	b082      	sub	sp, #8
 800b0f2:	b901      	cbnz	r1, 800b0f6 <__ascii_mbtowc+0x6>
 800b0f4:	a901      	add	r1, sp, #4
 800b0f6:	b142      	cbz	r2, 800b10a <__ascii_mbtowc+0x1a>
 800b0f8:	b14b      	cbz	r3, 800b10e <__ascii_mbtowc+0x1e>
 800b0fa:	7813      	ldrb	r3, [r2, #0]
 800b0fc:	600b      	str	r3, [r1, #0]
 800b0fe:	7812      	ldrb	r2, [r2, #0]
 800b100:	1e10      	subs	r0, r2, #0
 800b102:	bf18      	it	ne
 800b104:	2001      	movne	r0, #1
 800b106:	b002      	add	sp, #8
 800b108:	4770      	bx	lr
 800b10a:	4610      	mov	r0, r2
 800b10c:	e7fb      	b.n	800b106 <__ascii_mbtowc+0x16>
 800b10e:	f06f 0001 	mvn.w	r0, #1
 800b112:	e7f8      	b.n	800b106 <__ascii_mbtowc+0x16>

0800b114 <__malloc_lock>:
 800b114:	4801      	ldr	r0, [pc, #4]	; (800b11c <__malloc_lock+0x8>)
 800b116:	f7ff ba06 	b.w	800a526 <__retarget_lock_acquire_recursive>
 800b11a:	bf00      	nop
 800b11c:	240002e0 	.word	0x240002e0

0800b120 <__malloc_unlock>:
 800b120:	4801      	ldr	r0, [pc, #4]	; (800b128 <__malloc_unlock+0x8>)
 800b122:	f7ff ba01 	b.w	800a528 <__retarget_lock_release_recursive>
 800b126:	bf00      	nop
 800b128:	240002e0 	.word	0x240002e0

0800b12c <_read_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d07      	ldr	r5, [pc, #28]	; (800b14c <_read_r+0x20>)
 800b130:	4604      	mov	r4, r0
 800b132:	4608      	mov	r0, r1
 800b134:	4611      	mov	r1, r2
 800b136:	2200      	movs	r2, #0
 800b138:	602a      	str	r2, [r5, #0]
 800b13a:	461a      	mov	r2, r3
 800b13c:	f7f6 fbc1 	bl	80018c2 <_read>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d102      	bne.n	800b14a <_read_r+0x1e>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	b103      	cbz	r3, 800b14a <_read_r+0x1e>
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	240002ec 	.word	0x240002ec

0800b150 <__ascii_wctomb>:
 800b150:	b149      	cbz	r1, 800b166 <__ascii_wctomb+0x16>
 800b152:	2aff      	cmp	r2, #255	; 0xff
 800b154:	bf85      	ittet	hi
 800b156:	238a      	movhi	r3, #138	; 0x8a
 800b158:	6003      	strhi	r3, [r0, #0]
 800b15a:	700a      	strbls	r2, [r1, #0]
 800b15c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b160:	bf98      	it	ls
 800b162:	2001      	movls	r0, #1
 800b164:	4770      	bx	lr
 800b166:	4608      	mov	r0, r1
 800b168:	4770      	bx	lr
	...

0800b16c <_init>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	bf00      	nop
 800b170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b172:	bc08      	pop	{r3}
 800b174:	469e      	mov	lr, r3
 800b176:	4770      	bx	lr

0800b178 <_fini>:
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17a:	bf00      	nop
 800b17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17e:	bc08      	pop	{r3}
 800b180:	469e      	mov	lr, r3
 800b182:	4770      	bx	lr

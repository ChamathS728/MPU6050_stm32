
mpu6050_v1_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6dc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800a990  0800a990  0001a990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aea0  0800aea0  0001aea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aea8  0800aea8  0001aea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aeac  0800aeac  0001aeac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800aeb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000110  240001e0  0800b090  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002f0  0800b090  000202f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015137  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000265f  00000000  00000000  00035345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f10  00000000  00000000  000379a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e28  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003043d  00000000  00000000  000396e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001555e  00000000  00000000  00069b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136703  00000000  00000000  0007f07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b577e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ea0  00000000  00000000  001b57d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a974 	.word	0x0800a974

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800a974 	.word	0x0800a974

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MPU6050_wakeup>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef MPU6050_wakeup(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af04      	add	r7, sp, #16
  // Write 0's to the PWR_MGMT_1 register to wake it up
  // It sets clock source as internal 8MHz clock, and it is woken up
  uint8_t zero = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef res = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &zero, sizeof(zero), TIMEOUT_DEFAULT);
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	2301      	movs	r3, #1
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	1dbb      	adds	r3, r7, #6
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	226b      	movs	r2, #107	; 0x6b
 80006c0:	21d0      	movs	r1, #208	; 0xd0
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MPU6050_wakeup+0x34>)
 80006c4:	f002 fbda 	bl	8002e7c <HAL_I2C_Mem_Write>
 80006c8:	4603      	mov	r3, r0
 80006ca:	71fb      	strb	r3, [r7, #7]

  return res;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	240001fc 	.word	0x240001fc

080006dc <MPU6050_set_pwr_mgmt>:

HAL_StatusTypeDef MPU6050_set_pwr_mgmt(int dev_rst, int sleep, int cycle, int temp_dis, int clksel) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af04      	add	r7, sp, #16
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	603b      	str	r3, [r7, #0]
  // Assumption is that the first 4 inputs are 1 bit (0 or 1), and clksel is 3 bit (0 to 7)
  assert(dev_rst >= 0 && dev_rst <= 1);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db02      	blt.n	80006f6 <MPU6050_set_pwr_mgmt+0x1a>
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	dd05      	ble.n	8000702 <MPU6050_set_pwr_mgmt+0x26>
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <MPU6050_set_pwr_mgmt+0xe0>)
 80006f8:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <MPU6050_set_pwr_mgmt+0xe4>)
 80006fa:	2196      	movs	r1, #150	; 0x96
 80006fc:	4831      	ldr	r0, [pc, #196]	; (80007c4 <MPU6050_set_pwr_mgmt+0xe8>)
 80006fe:	f007 facf 	bl	8007ca0 <__assert_func>
  assert(sleep >= 0 && sleep <= 1);
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	2b00      	cmp	r3, #0
 8000706:	db02      	blt.n	800070e <MPU6050_set_pwr_mgmt+0x32>
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b01      	cmp	r3, #1
 800070c:	dd05      	ble.n	800071a <MPU6050_set_pwr_mgmt+0x3e>
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <MPU6050_set_pwr_mgmt+0xec>)
 8000710:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <MPU6050_set_pwr_mgmt+0xe4>)
 8000712:	2197      	movs	r1, #151	; 0x97
 8000714:	482b      	ldr	r0, [pc, #172]	; (80007c4 <MPU6050_set_pwr_mgmt+0xe8>)
 8000716:	f007 fac3 	bl	8007ca0 <__assert_func>
  assert(cycle >= 0 && cycle <= 1);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db02      	blt.n	8000726 <MPU6050_set_pwr_mgmt+0x4a>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b01      	cmp	r3, #1
 8000724:	dd05      	ble.n	8000732 <MPU6050_set_pwr_mgmt+0x56>
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <MPU6050_set_pwr_mgmt+0xf0>)
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <MPU6050_set_pwr_mgmt+0xe4>)
 800072a:	2198      	movs	r1, #152	; 0x98
 800072c:	4825      	ldr	r0, [pc, #148]	; (80007c4 <MPU6050_set_pwr_mgmt+0xe8>)
 800072e:	f007 fab7 	bl	8007ca0 <__assert_func>
  assert(temp_dis >= 0 && temp_dis <= 1);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db02      	blt.n	800073e <MPU6050_set_pwr_mgmt+0x62>
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	dd05      	ble.n	800074a <MPU6050_set_pwr_mgmt+0x6e>
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <MPU6050_set_pwr_mgmt+0xf4>)
 8000740:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <MPU6050_set_pwr_mgmt+0xe4>)
 8000742:	2199      	movs	r1, #153	; 0x99
 8000744:	481f      	ldr	r0, [pc, #124]	; (80007c4 <MPU6050_set_pwr_mgmt+0xe8>)
 8000746:	f007 faab 	bl	8007ca0 <__assert_func>
  assert(clksel >= 0 && clksel <= 7);
 800074a:	6a3b      	ldr	r3, [r7, #32]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db02      	blt.n	8000756 <MPU6050_set_pwr_mgmt+0x7a>
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	2b07      	cmp	r3, #7
 8000754:	dd05      	ble.n	8000762 <MPU6050_set_pwr_mgmt+0x86>
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MPU6050_set_pwr_mgmt+0xf8>)
 8000758:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <MPU6050_set_pwr_mgmt+0xe4>)
 800075a:	219a      	movs	r1, #154	; 0x9a
 800075c:	4819      	ldr	r0, [pc, #100]	; (80007c4 <MPU6050_set_pwr_mgmt+0xe8>)
 800075e:	f007 fa9f 	bl	8007ca0 <__assert_func>

  // Create bit string to put into the register
  uint8_t res =  0 | (dev_rst << 7) | (sleep << 6) | (cycle << 5) | (temp_dis << 3) | clksel;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	01db      	lsls	r3, r3, #7
 8000766:	b25a      	sxtb	r2, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	019b      	lsls	r3, r3, #6
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b25a      	sxtb	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	015b      	lsls	r3, r3, #5
 8000776:	b25b      	sxtb	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b25a      	sxtb	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	b25b      	sxtb	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b25a      	sxtb	r2, r3
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4313      	orrs	r3, r2
 800078c:	b25b      	sxtb	r3, r3
 800078e:	b2db      	uxtb	r3, r3
 8000790:	75bb      	strb	r3, [r7, #22]
  
  // Write to the register over I2C
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	2301      	movs	r3, #1
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	f107 0316 	add.w	r3, r7, #22
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	226b      	movs	r2, #107	; 0x6b
 80007a6:	21d0      	movs	r1, #208	; 0xd0
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MPU6050_set_pwr_mgmt+0xfc>)
 80007aa:	f002 fb67 	bl	8002e7c <HAL_I2C_Mem_Write>
 80007ae:	4603      	mov	r3, r0
 80007b0:	75fb      	strb	r3, [r7, #23]

  return result;
 80007b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	0800a990 	.word	0x0800a990
 80007c0:	0800aa5c 	.word	0x0800aa5c
 80007c4:	0800a9b0 	.word	0x0800a9b0
 80007c8:	0800a9c4 	.word	0x0800a9c4
 80007cc:	0800a9e0 	.word	0x0800a9e0
 80007d0:	0800a9fc 	.word	0x0800a9fc
 80007d4:	0800aa1c 	.word	0x0800aa1c
 80007d8:	240001fc 	.word	0x240001fc

080007dc <MPU6050_set_dlpf>:

HAL_StatusTypeDef MPU6050_set_dlpf(uint8_t* dlpf, MPU6050* mpu6050) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af04      	add	r7, sp, #16
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  /*
  Just set DLPF_CFG = 001 (so register )
  */

  // Ensure that dlpf is a number between 0 and 7
  assert((*dlpf >= 0) && (*dlpf <= 7));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	d905      	bls.n	80007fa <MPU6050_set_dlpf+0x1e>
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MPU6050_set_dlpf+0x50>)
 80007f0:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <MPU6050_set_dlpf+0x54>)
 80007f2:	21ab      	movs	r1, #171	; 0xab
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <MPU6050_set_dlpf+0x58>)
 80007f6:	f007 fa53 	bl	8007ca0 <__assert_func>
  // assert(*dlpf >= 0);
  // assert(*dlpf <= 7);

  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, DLPF, I2C_MEMADD_SIZE_8BIT, dlpf, sizeof(*dlpf), TIMEOUT_DEFAULT);
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	9302      	str	r3, [sp, #8]
 8000800:	2301      	movs	r3, #1
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2301      	movs	r3, #1
 800080a:	221a      	movs	r2, #26
 800080c:	21d0      	movs	r1, #208	; 0xd0
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <MPU6050_set_dlpf+0x5c>)
 8000810:	f002 fb34 	bl	8002e7c <HAL_I2C_Mem_Write>
 8000814:	4603      	mov	r3, r0
 8000816:	73fb      	strb	r3, [r7, #15]
  
  // Store the dlpf number in the struct
  mpu6050->dlpf = *dlpf;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	775a      	strb	r2, [r3, #29]
  return result;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	0800aa38 	.word	0x0800aa38
 8000830:	0800aa74 	.word	0x0800aa74
 8000834:	0800a9b0 	.word	0x0800a9b0
 8000838:	240001fc 	.word	0x240001fc

0800083c <MPU6050_set_sample_rate>:

// REVIEW - Maths behind the smplrt_div_input may not be good due to division.
HAL_StatusTypeDef MPU6050_set_sample_rate(uint8_t* freq_ptr, MPU6050* mpu650_obj) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af04      	add	r7, sp, #16
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]

  We need to calculate what needs to go into the SMPLRT_DIV register to get the desired frequency
  This also assumes that the gyro output rate is at 1kHz
  */
  
  uint8_t smplrt_div_input = (mpu650_obj->gyro_smplrt)/(*freq_ptr) - 1;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	7f1a      	ldrb	r2, [r3, #28]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	3b01      	subs	r3, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	73bb      	strb	r3, [r7, #14]

  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &smplrt_div_input, sizeof(smplrt_div_input), TIMEOUT_DEFAULT);
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2301      	movs	r3, #1
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	f107 030e 	add.w	r3, r7, #14
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	2219      	movs	r2, #25
 800086e:	21d0      	movs	r1, #208	; 0xd0
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <MPU6050_set_sample_rate+0x50>)
 8000872:	f002 fb03 	bl	8002e7c <HAL_I2C_Mem_Write>
 8000876:	4603      	mov	r3, r0
 8000878:	73fb      	strb	r3, [r7, #15]
  
  // Store the new sample rate divider in the struct
  mpu650_obj->gyro_smplrt = *freq_ptr;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	771a      	strb	r2, [r3, #28]
  return result;
 8000882:	7bfb      	ldrb	r3, [r7, #15]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	240001fc 	.word	0x240001fc

08000890 <MPU6050_set_gyro_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_gyro_FSR(Gyro_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af04      	add	r7, sp, #16
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d822      	bhi.n	80008e8 <MPU6050_set_gyro_FSR+0x58>
 80008a2:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <MPU6050_set_gyro_FSR+0x18>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	080008c5 	.word	0x080008c5
 80008b0:	080008d1 	.word	0x080008d1
 80008b4:	080008dd 	.word	0x080008dd
    // For each possibility, set the correct data to be written and store the setting away
    // Left shift data bits by 3 so that we only overwrite bits 4 and 3
    case GYRO_FSR_250:
      pData = (0 << 3);
 80008b8:	2300      	movs	r3, #0
 80008ba:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_250;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	2200      	movs	r2, #0
 80008c0:	779a      	strb	r2, [r3, #30]
      break;
 80008c2:	e011      	b.n	80008e8 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_500:
      pData = (1 << 3);
 80008c4:	2308      	movs	r3, #8
 80008c6:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_500;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	2201      	movs	r2, #1
 80008cc:	779a      	strb	r2, [r3, #30]
      break;
 80008ce:	e00b      	b.n	80008e8 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_1000:
      pData = (2 << 3);
 80008d0:	2310      	movs	r3, #16
 80008d2:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_1000;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2202      	movs	r2, #2
 80008d8:	779a      	strb	r2, [r3, #30]
      break;
 80008da:	e005      	b.n	80008e8 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_2000:
      pData = (3 << 3);
 80008dc:	2318      	movs	r3, #24
 80008de:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_2000;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	2203      	movs	r2, #3
 80008e4:	779a      	strb	r2, [r3, #30]
      break;
 80008e6:	bf00      	nop
  }
  
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	9302      	str	r3, [sp, #8]
 80008ee:	2301      	movs	r3, #1
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	f107 030e 	add.w	r3, r7, #14
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2301      	movs	r3, #1
 80008fa:	221b      	movs	r2, #27
 80008fc:	21d0      	movs	r1, #208	; 0xd0
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MPU6050_set_gyro_FSR+0x84>)
 8000900:	f002 fabc 	bl	8002e7c <HAL_I2C_Mem_Write>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
  return result;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	240001fc 	.word	0x240001fc

08000918 <MPU6050_set_accel_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_accel_FSR(Accel_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af04      	add	r7, sp, #16
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b03      	cmp	r3, #3
 8000928:	d822      	bhi.n	8000970 <MPU6050_set_accel_FSR+0x58>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <MPU6050_set_accel_FSR+0x18>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	08000941 	.word	0x08000941
 8000934:	0800094d 	.word	0x0800094d
 8000938:	08000959 	.word	0x08000959
 800093c:	08000965 	.word	0x08000965
    case ACCEL_FSR_2g:
      pData = (0 << 3);
 8000940:	2300      	movs	r3, #0
 8000942:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_2g;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	77da      	strb	r2, [r3, #31]
      break;
 800094a:	e011      	b.n	8000970 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_4g:
      pData = (1 << 3);
 800094c:	2308      	movs	r3, #8
 800094e:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_4g;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2201      	movs	r2, #1
 8000954:	77da      	strb	r2, [r3, #31]
      break;
 8000956:	e00b      	b.n	8000970 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_8g:
      pData = (2 << 3);
 8000958:	2310      	movs	r3, #16
 800095a:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_8g;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2202      	movs	r2, #2
 8000960:	77da      	strb	r2, [r3, #31]
      break;
 8000962:	e005      	b.n	8000970 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_16g:
      pData = (3 << 3);
 8000964:	2318      	movs	r3, #24
 8000966:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_16g;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2203      	movs	r2, #3
 800096c:	77da      	strb	r2, [r3, #31]
      break;
 800096e:	bf00      	nop
  }
  
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
 8000970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	2301      	movs	r3, #1
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	f107 030e 	add.w	r3, r7, #14
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2301      	movs	r3, #1
 8000982:	221c      	movs	r2, #28
 8000984:	21d0      	movs	r1, #208	; 0xd0
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MPU6050_set_accel_FSR+0x84>)
 8000988:	f002 fa78 	bl	8002e7c <HAL_I2C_Mem_Write>
 800098c:	4603      	mov	r3, r0
 800098e:	73fb      	strb	r3, [r7, #15]
  return result;  
 8000990:	7bfb      	ldrb	r3, [r7, #15]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	240001fc 	.word	0x240001fc

080009a0 <MPU6050_FIFO_enable>:


HAL_StatusTypeDef MPU6050_FIFO_enable(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af04      	add	r7, sp, #16
  // Write a 1 to bit 6 of register 0x6A
  uint8_t res = (1 << 6);
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	71bb      	strb	r3, [r7, #6]

  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	9302      	str	r3, [sp, #8]
 80009b0:	2301      	movs	r3, #1
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2301      	movs	r3, #1
 80009ba:	226a      	movs	r2, #106	; 0x6a
 80009bc:	21d0      	movs	r1, #208	; 0xd0
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MPU6050_FIFO_enable+0x34>)
 80009c0:	f002 fa5c 	bl	8002e7c <HAL_I2C_Mem_Write>
 80009c4:	4603      	mov	r3, r0
 80009c6:	71fb      	strb	r3, [r7, #7]
  return result;
 80009c8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	240001fc 	.word	0x240001fc

080009d8 <MPU6050_FIFO_reset>:

HAL_StatusTypeDef MPU6050_FIFO_reset(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af04      	add	r7, sp, #16
  // Assumes that MPU6050 FIFO buffer is enabled. FIFO enable bit is driven low ONLY when MPU is power cycled (turned off and back on)
  // Write a 2 to bit 2 of register 0x6A -> this gets written to 0 once FIFO is reset anyway
  uint8_t res = (1 << 2);
 80009de:	2304      	movs	r3, #4
 80009e0:	71bb      	strb	r3, [r7, #6]

  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	2301      	movs	r3, #1
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	1dbb      	adds	r3, r7, #6
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	226a      	movs	r2, #106	; 0x6a
 80009f4:	21d0      	movs	r1, #208	; 0xd0
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MPU6050_FIFO_reset+0x34>)
 80009f8:	f002 fa40 	bl	8002e7c <HAL_I2C_Mem_Write>
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]
  return result;  
 8000a00:	79fb      	ldrb	r3, [r7, #7]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	240001fc 	.word	0x240001fc

08000a10 <MPU6050_init>:

HAL_StatusTypeDef MPU6050_init(MPU6050* mpu6050_ptr, uint8_t* dlpf, uint8_t* smpl_frq, Gyro_FSR_SEL_TypeDef gyro_setting, Accel_FSR_SEL_TypeDef accel_setting) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af04      	add	r7, sp, #16
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	70fb      	strb	r3, [r7, #3]
  // Check that we have the correct device by checking its address
  uint8_t check = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	75bb      	strb	r3, [r7, #22]
  // uint8_t check[4];
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &check, sizeof(check), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &check, sizeof(check), TIMEOUT_DEFAULT);
 8000a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	f107 0316 	add.w	r3, r7, #22
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2301      	movs	r3, #1
 8000a34:	2275      	movs	r2, #117	; 0x75
 8000a36:	21d0      	movs	r1, #208	; 0xd0
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <MPU6050_init+0x74>)
 8000a3a:	f002 fb33 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	75fb      	strb	r3, [r7, #23]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, 1, check, 1, 1000);

  if (result == HAL_OK && check == 0x68) { //check == 0x68
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d117      	bne.n	8000a78 <MPU6050_init+0x68>
 8000a48:	7dbb      	ldrb	r3, [r7, #22]
 8000a4a:	2b68      	cmp	r3, #104	; 0x68
 8000a4c:	d114      	bne.n	8000a78 <MPU6050_init+0x68>
    // Device is identified as the MPU6050 yay -> Wake it up
    MPU6050_wakeup();
 8000a4e:	f7ff fe29 	bl	80006a4 <MPU6050_wakeup>

    // Configure DLPF_CFG and store away settings
    MPU6050_set_dlpf(dlpf, mpu6050_ptr);
 8000a52:	68f9      	ldr	r1, [r7, #12]
 8000a54:	68b8      	ldr	r0, [r7, #8]
 8000a56:	f7ff fec1 	bl	80007dc <MPU6050_set_dlpf>

    // Configure the gyro sample rate and store away settings
    MPU6050_set_sample_rate(smpl_frq, mpu6050_ptr);
 8000a5a:	68f9      	ldr	r1, [r7, #12]
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff feed 	bl	800083c <MPU6050_set_sample_rate>

    // Set the full scale range for the gyroscope and accelerometer
    MPU6050_set_gyro_FSR(gyro_setting, mpu6050_ptr);
 8000a62:	78fb      	ldrb	r3, [r7, #3]
 8000a64:	68f9      	ldr	r1, [r7, #12]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff12 	bl	8000890 <MPU6050_set_gyro_FSR>
    MPU6050_set_accel_FSR(accel_setting, mpu6050_ptr);
 8000a6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a70:	68f9      	ldr	r1, [r7, #12]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff50 	bl	8000918 <MPU6050_set_accel_FSR>
  }

  return result;
 8000a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	240001fc 	.word	0x240001fc

08000a88 <MPU6050_read_gyro_reg>:
  mpu6050->temp = (float) temp / 340.0 + 36.53; 

  return result;
}
/******************************************************************/
HAL_StatusTypeDef MPU6050_read_gyro_reg(MPU6050* mpu6050) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	6078      	str	r0, [r7, #4]
  // Initialise temporary variables
  int16_t gx_raw = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	82fb      	strh	r3, [r7, #22]
  int16_t gy_raw = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	82bb      	strh	r3, [r7, #20]
  int16_t gz_raw = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	827b      	strh	r3, [r7, #18]

  int8_t g_raw_H = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	743b      	strb	r3, [r7, #16]
  int8_t g_raw_L = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]

  // Read X gyro registers and store the raw gyroscope value away
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
 8000aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa8:	9302      	str	r3, [sp, #8]
 8000aaa:	2301      	movs	r3, #1
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	2243      	movs	r2, #67	; 0x43
 8000ab8:	21d0      	movs	r1, #208	; 0xd0
 8000aba:	48a3      	ldr	r0, [pc, #652]	; (8000d48 <MPU6050_read_gyro_reg+0x2c0>)
 8000abc:	f002 faf2 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	747b      	strb	r3, [r7, #17]
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_XOUT_L, I2C_MEMADD_SIZE_8BIT, &g_raw_L, sizeof(g_raw_L), TIMEOUT_DEFAULT);
 8000ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	2301      	movs	r3, #1
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	f107 030f 	add.w	r3, r7, #15
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	2244      	movs	r2, #68	; 0x44
 8000ad8:	21d0      	movs	r1, #208	; 0xd0
 8000ada:	489b      	ldr	r0, [pc, #620]	; (8000d48 <MPU6050_read_gyro_reg+0x2c0>)
 8000adc:	f002 fae2 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	747b      	strb	r3, [r7, #17]
  gx_raw = (g_raw_H << 8) | (g_raw_L);
 8000ae4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	b21a      	sxth	r2, r3
 8000aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	4313      	orrs	r3, r2
 8000af4:	82fb      	strh	r3, [r7, #22]

  // Read Y gyro registers and store the raw gyroscope value away
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_YOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2301      	movs	r3, #1
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	2245      	movs	r2, #69	; 0x45
 8000b0a:	21d0      	movs	r1, #208	; 0xd0
 8000b0c:	488e      	ldr	r0, [pc, #568]	; (8000d48 <MPU6050_read_gyro_reg+0x2c0>)
 8000b0e:	f002 fac9 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000b12:	4603      	mov	r3, r0
 8000b14:	747b      	strb	r3, [r7, #17]
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_YOUT_L, I2C_MEMADD_SIZE_8BIT, &g_raw_L, sizeof(g_raw_L), TIMEOUT_DEFAULT);
 8000b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f107 030f 	add.w	r3, r7, #15
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	2246      	movs	r2, #70	; 0x46
 8000b2a:	21d0      	movs	r1, #208	; 0xd0
 8000b2c:	4886      	ldr	r0, [pc, #536]	; (8000d48 <MPU6050_read_gyro_reg+0x2c0>)
 8000b2e:	f002 fab9 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000b32:	4603      	mov	r3, r0
 8000b34:	747b      	strb	r3, [r7, #17]
  gy_raw = (g_raw_H << 8) | (g_raw_L);
 8000b36:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	b21a      	sxth	r2, r3
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	82bb      	strh	r3, [r7, #20]

  // Read Z gyro registers and store the raw gyroscope value away
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_ZOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
 8000b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	2247      	movs	r2, #71	; 0x47
 8000b5c:	21d0      	movs	r1, #208	; 0xd0
 8000b5e:	487a      	ldr	r0, [pc, #488]	; (8000d48 <MPU6050_read_gyro_reg+0x2c0>)
 8000b60:	f002 faa0 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000b64:	4603      	mov	r3, r0
 8000b66:	747b      	strb	r3, [r7, #17]
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_ZOUT_L, I2C_MEMADD_SIZE_8BIT, &g_raw_L, sizeof(g_raw_L), TIMEOUT_DEFAULT);
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	f107 030f 	add.w	r3, r7, #15
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	2248      	movs	r2, #72	; 0x48
 8000b7c:	21d0      	movs	r1, #208	; 0xd0
 8000b7e:	4872      	ldr	r0, [pc, #456]	; (8000d48 <MPU6050_read_gyro_reg+0x2c0>)
 8000b80:	f002 fa90 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000b84:	4603      	mov	r3, r0
 8000b86:	747b      	strb	r3, [r7, #17]
  gz_raw = (g_raw_H << 8) | (g_raw_L);
 8000b88:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	827b      	strh	r3, [r7, #18]

  // Rescale raw readings according to gyro FSR
  switch(mpu6050->gyro_FSR) {
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7f9b      	ldrb	r3, [r3, #30]
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	f200 80c4 	bhi.w	8000d2c <MPU6050_read_gyro_reg+0x2a4>
 8000ba4:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <MPU6050_read_gyro_reg+0x124>)
 8000ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000baa:	bf00      	nop
 8000bac:	08000bbd 	.word	0x08000bbd
 8000bb0:	08000c0d 	.word	0x08000c0d
 8000bb4:	08000c5d 	.word	0x08000c5d
 8000bb8:	08000cc5 	.word	0x08000cc5
    case GYRO_FSR_250:
      mpu6050->gx = ((float) gx_raw) / 131.0;
 8000bbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc8:	eddf 6a60 	vldr	s13, [pc, #384]	; 8000d4c <MPU6050_read_gyro_reg+0x2c4>
 8000bcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->gy = ((float) gy_raw) / 131.0;
 8000bd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be2:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8000d4c <MPU6050_read_gyro_reg+0x2c4>
 8000be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->gz = ((float) gz_raw) / 131.0;
 8000bf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000bf4:	ee07 3a90 	vmov	s15, r3
 8000bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bfc:	eddf 6a53 	vldr	s13, [pc, #332]	; 8000d4c <MPU6050_read_gyro_reg+0x2c4>
 8000c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000c0a:	e08f      	b.n	8000d2c <MPU6050_read_gyro_reg+0x2a4>
    case GYRO_FSR_500:
      mpu6050->gx = ((float) gx_raw) / 65.5;
 8000c0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c18:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000d50 <MPU6050_read_gyro_reg+0x2c8>
 8000c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->gy = ((float) gy_raw) / 65.5;
 8000c26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c32:	eddf 6a47 	vldr	s13, [pc, #284]	; 8000d50 <MPU6050_read_gyro_reg+0x2c8>
 8000c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->gz = ((float) gz_raw) / 65.5;
 8000c40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c4c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000d50 <MPU6050_read_gyro_reg+0x2c8>
 8000c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000c5a:	e067      	b.n	8000d2c <MPU6050_read_gyro_reg+0x2a4>
    case GYRO_FSR_1000:
      mpu6050->gx = ((float) gx_raw) / 32.8;
 8000c5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c60:	ee07 3a90 	vmov	s15, r3
 8000c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c68:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c6c:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000d38 <MPU6050_read_gyro_reg+0x2b0>
 8000c70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->gy = ((float) gy_raw) / 32.8;
 8000c7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c8e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8000d38 <MPU6050_read_gyro_reg+0x2b0>
 8000c92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->gz = ((float) gz_raw) / 32.8;
 8000ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cb0:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000d38 <MPU6050_read_gyro_reg+0x2b0>
 8000cb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000cc2:	e033      	b.n	8000d2c <MPU6050_read_gyro_reg+0x2a4>
    case GYRO_FSR_2000:
      mpu6050->gx = ((float) gx_raw) / 16.4;
 8000cc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cd4:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8000d40 <MPU6050_read_gyro_reg+0x2b8>
 8000cd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->gy = ((float) gy_raw) / 16.4;
 8000ce6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cf6:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000d40 <MPU6050_read_gyro_reg+0x2b8>
 8000cfa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->gz = ((float) gz_raw) / 16.4;
 8000d08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d0c:	ee07 3a90 	vmov	s15, r3
 8000d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d14:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d18:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000d40 <MPU6050_read_gyro_reg+0x2b8>
 8000d1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000d2a:	bf00      	nop
  }

  return result;
 8000d2c:	7c7b      	ldrb	r3, [r7, #17]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	66666666 	.word	0x66666666
 8000d3c:	40406666 	.word	0x40406666
 8000d40:	66666666 	.word	0x66666666
 8000d44:	40306666 	.word	0x40306666
 8000d48:	240001fc 	.word	0x240001fc
 8000d4c:	43030000 	.word	0x43030000
 8000d50:	42830000 	.word	0x42830000

08000d54 <MPU6050_read_accel_reg>:

HAL_StatusTypeDef MPU6050_read_accel_reg(MPU6050* mpu6050) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af04      	add	r7, sp, #16
 8000d5a:	6078      	str	r0, [r7, #4]
  // Initialise temporary variables
  int16_t ax_raw = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	82fb      	strh	r3, [r7, #22]
  int16_t ay_raw = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	82bb      	strh	r3, [r7, #20]
  int16_t az_raw = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	827b      	strh	r3, [r7, #18]

  int8_t a_raw_H = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	743b      	strb	r3, [r7, #16]
  int8_t a_raw_L = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]

  // Read X accel registers and store the raw acceleration value away
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, &a_raw_H, sizeof(a_raw_H), TIMEOUT_DEFAULT);
 8000d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2301      	movs	r3, #1
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	223b      	movs	r2, #59	; 0x3b
 8000d84:	21d0      	movs	r1, #208	; 0xd0
 8000d86:	4893      	ldr	r0, [pc, #588]	; (8000fd4 <MPU6050_read_accel_reg+0x280>)
 8000d88:	f002 f98c 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	747b      	strb	r3, [r7, #17]
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_XOUT_L, I2C_MEMADD_SIZE_8BIT, &a_raw_L, sizeof(a_raw_L), TIMEOUT_DEFAULT);
 8000d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d94:	9302      	str	r3, [sp, #8]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	f107 030f 	add.w	r3, r7, #15
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	223c      	movs	r2, #60	; 0x3c
 8000da4:	21d0      	movs	r1, #208	; 0xd0
 8000da6:	488b      	ldr	r0, [pc, #556]	; (8000fd4 <MPU6050_read_accel_reg+0x280>)
 8000da8:	f002 f97c 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000dac:	4603      	mov	r3, r0
 8000dae:	747b      	strb	r3, [r7, #17]
  ax_raw = (a_raw_H << 8) | (a_raw_L);
 8000db0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	82fb      	strh	r3, [r7, #22]

  // Read Y accel registers and store the raw acceleration value away
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_YOUT_H, I2C_MEMADD_SIZE_8BIT, &a_raw_H, sizeof(a_raw_H), TIMEOUT_DEFAULT);
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	223d      	movs	r2, #61	; 0x3d
 8000dd6:	21d0      	movs	r1, #208	; 0xd0
 8000dd8:	487e      	ldr	r0, [pc, #504]	; (8000fd4 <MPU6050_read_accel_reg+0x280>)
 8000dda:	f002 f963 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000dde:	4603      	mov	r3, r0
 8000de0:	747b      	strb	r3, [r7, #17]
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_YOUT_L, I2C_MEMADD_SIZE_8BIT, &a_raw_L, sizeof(a_raw_L), TIMEOUT_DEFAULT);
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	f107 030f 	add.w	r3, r7, #15
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2301      	movs	r3, #1
 8000df4:	223e      	movs	r2, #62	; 0x3e
 8000df6:	21d0      	movs	r1, #208	; 0xd0
 8000df8:	4876      	ldr	r0, [pc, #472]	; (8000fd4 <MPU6050_read_accel_reg+0x280>)
 8000dfa:	f002 f953 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	747b      	strb	r3, [r7, #17]
  ay_raw = (a_raw_H << 8) | (a_raw_L);
 8000e02:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	82bb      	strh	r3, [r7, #20]

  // Read Z accel registers and store the raw acceleration value away
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_ZOUT_H, I2C_MEMADD_SIZE_8BIT, &a_raw_H, sizeof(a_raw_H), TIMEOUT_DEFAULT);
 8000e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	223f      	movs	r2, #63	; 0x3f
 8000e28:	21d0      	movs	r1, #208	; 0xd0
 8000e2a:	486a      	ldr	r0, [pc, #424]	; (8000fd4 <MPU6050_read_accel_reg+0x280>)
 8000e2c:	f002 f93a 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000e30:	4603      	mov	r3, r0
 8000e32:	747b      	strb	r3, [r7, #17]
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_ZOUT_L, I2C_MEMADD_SIZE_8BIT, &a_raw_L, sizeof(a_raw_L), TIMEOUT_DEFAULT);
 8000e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	f107 030f 	add.w	r3, r7, #15
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2301      	movs	r3, #1
 8000e46:	2240      	movs	r2, #64	; 0x40
 8000e48:	21d0      	movs	r1, #208	; 0xd0
 8000e4a:	4862      	ldr	r0, [pc, #392]	; (8000fd4 <MPU6050_read_accel_reg+0x280>)
 8000e4c:	f002 f92a 	bl	80030a4 <HAL_I2C_Mem_Read>
 8000e50:	4603      	mov	r3, r0
 8000e52:	747b      	strb	r3, [r7, #17]
  az_raw = (a_raw_H << 8) | (a_raw_L);
 8000e54:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	827b      	strh	r3, [r7, #18]

  // Rescale them according to accel FSR
  switch(mpu6050->accel_FSR) {
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7fdb      	ldrb	r3, [r3, #31]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	f200 80ac 	bhi.w	8000fc8 <MPU6050_read_accel_reg+0x274>
 8000e70:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <MPU6050_read_accel_reg+0x124>)
 8000e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e76:	bf00      	nop
 8000e78:	08000e89 	.word	0x08000e89
 8000e7c:	08000ed9 	.word	0x08000ed9
 8000e80:	08000f29 	.word	0x08000f29
 8000e84:	08000f79 	.word	0x08000f79
    case ACCEL_FSR_2g:
      mpu6050->ax = ((float) ax_raw) / 16384.0;
 8000e88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e94:	eddf 6a50 	vldr	s13, [pc, #320]	; 8000fd8 <MPU6050_read_accel_reg+0x284>
 8000e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	edc3 7a00 	vstr	s15, [r3]
      mpu6050->ay = ((float) ay_raw) / 16384.0;
 8000ea2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eae:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8000fd8 <MPU6050_read_accel_reg+0x284>
 8000eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	edc3 7a01 	vstr	s15, [r3, #4]
      mpu6050->az = ((float) az_raw) / 16384.0;
 8000ebc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ec8:	eddf 6a43 	vldr	s13, [pc, #268]	; 8000fd8 <MPU6050_read_accel_reg+0x284>
 8000ecc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	edc3 7a02 	vstr	s15, [r3, #8]
      break;
 8000ed6:	e077      	b.n	8000fc8 <MPU6050_read_accel_reg+0x274>
    case ACCEL_FSR_4g:
      mpu6050->ax = ((float) ax_raw) / 8192.0;
 8000ed8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000fdc <MPU6050_read_accel_reg+0x288>
 8000ee8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	edc3 7a00 	vstr	s15, [r3]
      mpu6050->ay = ((float) ay_raw) / 8192.0;
 8000ef2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efe:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000fdc <MPU6050_read_accel_reg+0x288>
 8000f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	edc3 7a01 	vstr	s15, [r3, #4]
      mpu6050->az = ((float) az_raw) / 8192.0;
 8000f0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f18:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000fdc <MPU6050_read_accel_reg+0x288>
 8000f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	edc3 7a02 	vstr	s15, [r3, #8]
      break;
 8000f26:	e04f      	b.n	8000fc8 <MPU6050_read_accel_reg+0x274>
    case ACCEL_FSR_8g:
      mpu6050->ax = ((float) ax_raw) / 4096.0;
 8000f28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f34:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000fe0 <MPU6050_read_accel_reg+0x28c>
 8000f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	edc3 7a00 	vstr	s15, [r3]
      mpu6050->ay = ((float) ay_raw) / 4096.0;
 8000f42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f4e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000fe0 <MPU6050_read_accel_reg+0x28c>
 8000f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	edc3 7a01 	vstr	s15, [r3, #4]
      mpu6050->az = ((float) az_raw) / 4096.0;
 8000f5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f60:	ee07 3a90 	vmov	s15, r3
 8000f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f68:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000fe0 <MPU6050_read_accel_reg+0x28c>
 8000f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	edc3 7a02 	vstr	s15, [r3, #8]
      break;
 8000f76:	e027      	b.n	8000fc8 <MPU6050_read_accel_reg+0x274>
    case ACCEL_FSR_16g:
      mpu6050->ax = ((float) ax_raw) / 2048.0;
 8000f78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f84:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000fe4 <MPU6050_read_accel_reg+0x290>
 8000f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edc3 7a00 	vstr	s15, [r3]
      mpu6050->ay = ((float) ay_raw) / 2048.0;
 8000f92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f9e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000fe4 <MPU6050_read_accel_reg+0x290>
 8000fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edc3 7a01 	vstr	s15, [r3, #4]
      mpu6050->az = ((float) az_raw) / 2048.0;
 8000fac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000fe4 <MPU6050_read_accel_reg+0x290>
 8000fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a02 	vstr	s15, [r3, #8]
      break;
 8000fc6:	bf00      	nop
  }

  return result;
 8000fc8:	7c7b      	ldrb	r3, [r7, #17]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	240001fc 	.word	0x240001fc
 8000fd8:	46800000 	.word	0x46800000
 8000fdc:	46000000 	.word	0x46000000
 8000fe0:	45800000 	.word	0x45800000
 8000fe4:	45000000 	.word	0x45000000

08000fe8 <MPU6050_read_temp_reg>:

HAL_StatusTypeDef MPU6050_read_temp_reg(MPU6050* mpu6050) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	6078      	str	r0, [r7, #4]
  int16_t raw_temp = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	81fb      	strh	r3, [r7, #14]

  int8_t temp_H = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	733b      	strb	r3, [r7, #12]
  int8_t temp_L = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, &temp_H, sizeof(temp_H), TIMEOUT_DEFAULT);
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2301      	movs	r3, #1
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2241      	movs	r2, #65	; 0x41
 8001010:	21d0      	movs	r1, #208	; 0xd0
 8001012:	4821      	ldr	r0, [pc, #132]	; (8001098 <MPU6050_read_temp_reg+0xb0>)
 8001014:	f002 f846 	bl	80030a4 <HAL_I2C_Mem_Read>
 8001018:	4603      	mov	r3, r0
 800101a:	737b      	strb	r3, [r7, #13]
  result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, &temp_L, sizeof(temp_L), TIMEOUT_DEFAULT);
 800101c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2301      	movs	r3, #1
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	f107 030b 	add.w	r3, r7, #11
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	2242      	movs	r2, #66	; 0x42
 8001030:	21d0      	movs	r1, #208	; 0xd0
 8001032:	4819      	ldr	r0, [pc, #100]	; (8001098 <MPU6050_read_temp_reg+0xb0>)
 8001034:	f002 f836 	bl	80030a4 <HAL_I2C_Mem_Read>
 8001038:	4603      	mov	r3, r0
 800103a:	737b      	strb	r3, [r7, #13]
  raw_temp = (temp_H << 8) | (temp_L);
 800103c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	81fb      	strh	r3, [r7, #14]

  // Fix the readings to be in celsius
  mpu6050->temp = ((float) raw_temp)/340.0 + 36.53;
 800104e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800105e:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001088 <MPU6050_read_temp_reg+0xa0>
 8001062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001066:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001090 <MPU6050_read_temp_reg+0xa8>
 800106a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800106e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	edc3 7a06 	vstr	s15, [r3, #24]

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	f3af 8000 	nop.w
 8001088:	00000000 	.word	0x00000000
 800108c:	40754000 	.word	0x40754000
 8001090:	0a3d70a4 	.word	0x0a3d70a4
 8001094:	404243d7 	.word	0x404243d7
 8001098:	240001fc 	.word	0x240001fc

0800109c <print_float_UART>:

HAL_StatusTypeDef print_float_UART(float* value, UART_HandleTypeDef* huart) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  // Set up buffer
  uint8_t transmit_buff[64];

  // Put value into the buffer as a string so we can read it properly
  sprintf((char*)transmit_buff, "%f\n", value);
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	490d      	ldr	r1, [pc, #52]	; (80010e4 <print_float_UART+0x48>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 fbf4 	bl	800889c <siprintf>

  // Print over UART
  HAL_StatusTypeDef result = HAL_UART_Transmit(huart, transmit_buff, strlen((char*)transmit_buff), HAL_MAX_DELAY);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f919 	bl	80002f0 <strlen>
 80010be:	4603      	mov	r3, r0
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f107 010c 	add.w	r1, r7, #12
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	6838      	ldr	r0, [r7, #0]
 80010cc:	f004 ffaa 	bl	8006024 <HAL_UART_Transmit>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  return result;
 80010d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3750      	adds	r7, #80	; 0x50
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800aa58 	.word	0x0800aa58

080010e8 <MPU6050_print_readings_UART>:

HAL_StatusTypeDef MPU6050_print_readings_UART(MPU6050* mpu6050, UART_HandleTypeDef* huart) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  // Loop through all the readings and print as appropriate
  HAL_StatusTypeDef result = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
  
  result = print_float_UART(&(mpu6050->ax), huart);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffce 	bl	800109c <print_float_UART>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
  result = print_float_UART(&(mpu6050->ay), huart);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3304      	adds	r3, #4
 8001108:	6839      	ldr	r1, [r7, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffc6 	bl	800109c <print_float_UART>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
  result = print_float_UART(&(mpu6050->az), huart);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3308      	adds	r3, #8
 8001118:	6839      	ldr	r1, [r7, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ffbe 	bl	800109c <print_float_UART>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]

  result = print_float_UART(&(mpu6050->gx), huart);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	330c      	adds	r3, #12
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ffb6 	bl	800109c <print_float_UART>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
  result = print_float_UART(&(mpu6050->gy), huart);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3310      	adds	r3, #16
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffae 	bl	800109c <print_float_UART>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]
  result = print_float_UART(&(mpu6050->gz), huart);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3314      	adds	r3, #20
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ffa6 	bl	800109c <print_float_UART>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]

  result = print_float_UART(&(mpu6050->temp), huart);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3318      	adds	r3, #24
 8001158:	6839      	ldr	r1, [r7, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff9e 	bl	800109c <print_float_UART>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]

  return result;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f000 fcfd 	bl	8001b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117a:	f000 f847 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117e:	f000 f94f 	bl	8001420 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001182:	f000 f8f9 	bl	8001378 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001186:	f000 f943 	bl	8001410 <MX_USB_OTG_HS_USB_Init>
  MX_I2C4_Init();
 800118a:	f000 f8b5 	bl	80012f8 <MX_I2C4_Init>

  // Run the MPU init
  MPU6050 mpu6050;
  
  // Wake up the MPU6050 as well
  MPU6050_wakeup();
 800118e:	f7ff fa89 	bl	80006a4 <MPU6050_wakeup>

  // Initialise the MPU6050
  uint8_t dlpf = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	71fb      	strb	r3, [r7, #7]
  uint8_t smplfrq = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	71bb      	strb	r3, [r7, #6]
  MPU6050_init(&mpu6050, &dlpf, &smplfrq, GYRO_FSR_250, ACCEL_FSR_2g);
 800119a:	1dba      	adds	r2, r7, #6
 800119c:	1df9      	adds	r1, r7, #7
 800119e:	f107 0008 	add.w	r0, r7, #8
 80011a2:	2300      	movs	r3, #0
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	f7ff fc32 	bl	8000a10 <MPU6050_init>
  MPU6050_set_pwr_mgmt(0, 0, 0, 0, 1);
 80011ac:	2301      	movs	r3, #1
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fa90 	bl	80006dc <MPU6050_set_pwr_mgmt>

  // Enable the FIFO buffer
  MPU6050_FIFO_enable();
 80011bc:	f7ff fbf0 	bl	80009a0 <MPU6050_FIFO_enable>
  // Reset it as well so that it can be burst read or something -> https://stackoverflow.com/questions/60419390/mpu-6050-correctly-reading-data-from-the-fifo-register
  MPU6050_FIFO_reset();
 80011c0:	f7ff fc0a 	bl	80009d8 <MPU6050_FIFO_reset>
  MPU6050_FIFO_enable();
 80011c4:	f7ff fbec 	bl	80009a0 <MPU6050_FIFO_enable>
    // MPU6050_read_accel_fifo(&mpu6050);
    // HAL_Delay(100); // Delays in between just for timing??
    // MPU6050_read_temp_fifo(&mpu6050);
    // HAL_Delay(100); // Delays in between just for timing??

    MPU6050_read_gyro_reg(&mpu6050);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fc5b 	bl	8000a88 <MPU6050_read_gyro_reg>
    HAL_Delay(100); // Delays in between just for timing??
 80011d2:	2064      	movs	r0, #100	; 0x64
 80011d4:	f000 fd60 	bl	8001c98 <HAL_Delay>
    MPU6050_read_accel_reg(&mpu6050);
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fdb9 	bl	8000d54 <MPU6050_read_accel_reg>
    HAL_Delay(100); // Delays in between just for timing??
 80011e2:	2064      	movs	r0, #100	; 0x64
 80011e4:	f000 fd58 	bl	8001c98 <HAL_Delay>
    MPU6050_read_temp_reg(&mpu6050);
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fefb 	bl	8000fe8 <MPU6050_read_temp_reg>
    HAL_Delay(100); // Delays in between just for timing??
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f000 fd50 	bl	8001c98 <HAL_Delay>

    
    // Stuff below here for printing to serial
    MPU6050_print_readings_UART(&mpu6050, &huart3);
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4902      	ldr	r1, [pc, #8]	; (8001208 <main+0x98>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff72 	bl	80010e8 <MPU6050_print_readings_UART>
    MPU6050_read_gyro_reg(&mpu6050);
 8001204:	e7e0      	b.n	80011c8 <main+0x58>
 8001206:	bf00      	nop
 8001208:	24000248 	.word	0x24000248

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09c      	sub	sp, #112	; 0x70
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	224c      	movs	r2, #76	; 0x4c
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f006 fd9a 	bl	8007d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2220      	movs	r2, #32
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f006 fd94 	bl	8007d54 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <SystemClock_Config+0xe4>)
 800122e:	f04f 32ff 	mov.w	r2, #4294967295
 8001232:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001236:	2004      	movs	r0, #4
 8001238:	f002 fb8c 	bl	8003954 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800123c:	2300      	movs	r3, #0
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <SystemClock_Config+0xe8>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <SystemClock_Config+0xe8>)
 8001246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <SystemClock_Config+0xe8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001258:	bf00      	nop
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <SystemClock_Config+0xe8>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001266:	d1f8      	bne.n	800125a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001268:	2321      	movs	r3, #33	; 0x21
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800126c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001272:	2301      	movs	r3, #1
 8001274:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127a:	2302      	movs	r3, #2
 800127c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001282:	2346      	movs	r3, #70	; 0x46
 8001284:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001286:	2302      	movs	r3, #2
 8001288:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800128a:	2304      	movs	r3, #4
 800128c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800128e:	2302      	movs	r3, #2
 8001290:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001292:	230c      	movs	r3, #12
 8001294:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001296:	2300      	movs	r3, #0
 8001298:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fbb0 	bl	8003a08 <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ae:	f000 f9d1 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	233f      	movs	r3, #63	; 0x3f
 80012b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b6:	2303      	movs	r3, #3
 80012b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012c2:	2340      	movs	r3, #64	; 0x40
 80012c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012c6:	2340      	movs	r3, #64	; 0x40
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2107      	movs	r1, #7
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 ff99 	bl	8004210 <HAL_RCC_ClockConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80012e4:	f000 f9b6 	bl	8001654 <Error_Handler>
  }
}
 80012e8:	bf00      	nop
 80012ea:	3770      	adds	r7, #112	; 0x70
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58024800 	.word	0x58024800

080012f8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_I2C4_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <MX_I2C4_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_I2C4_Init+0x74>)
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <MX_I2C4_Init+0x7c>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_I2C4_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_I2C4_Init+0x74>)
 8001310:	2201      	movs	r2, #1
 8001312:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_I2C4_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_I2C4_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_I2C4_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_I2C4_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_I2C4_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001332:	480e      	ldr	r0, [pc, #56]	; (800136c <MX_I2C4_Init+0x74>)
 8001334:	f001 fd12 	bl	8002d5c <HAL_I2C_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800133e:	f000 f989 	bl	8001654 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <MX_I2C4_Init+0x74>)
 8001346:	f002 fa6d 	bl	8003824 <HAL_I2CEx_ConfigAnalogFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001350:	f000 f980 	bl	8001654 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_I2C4_Init+0x74>)
 8001358:	f002 faaf 	bl	80038ba <HAL_I2CEx_ConfigDigitalFilter>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001362:	f000 f977 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	240001fc 	.word	0x240001fc
 8001370:	58001c00 	.word	0x58001c00
 8001374:	20b0ccff 	.word	0x20b0ccff

08001378 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <MX_USART3_UART_Init+0x90>)
 800137e:	4a23      	ldr	r2, [pc, #140]	; (800140c <MX_USART3_UART_Init+0x94>)
 8001380:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_USART3_UART_Init+0x90>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_USART3_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_USART3_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_USART3_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_USART3_UART_Init+0x90>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_USART3_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_USART3_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_USART3_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_USART3_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_USART3_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013c0:	4811      	ldr	r0, [pc, #68]	; (8001408 <MX_USART3_UART_Init+0x90>)
 80013c2:	f004 fddf 	bl	8005f84 <HAL_UART_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013cc:	f000 f942 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d0:	2100      	movs	r1, #0
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_USART3_UART_Init+0x90>)
 80013d4:	f006 fb9a 	bl	8007b0c <HAL_UARTEx_SetTxFifoThreshold>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013de:	f000 f939 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e2:	2100      	movs	r1, #0
 80013e4:	4808      	ldr	r0, [pc, #32]	; (8001408 <MX_USART3_UART_Init+0x90>)
 80013e6:	f006 fbcf 	bl	8007b88 <HAL_UARTEx_SetRxFifoThreshold>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013f0:	f000 f930 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_USART3_UART_Init+0x90>)
 80013f6:	f006 fb50 	bl	8007a9a <HAL_UARTEx_DisableFifoMode>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001400:	f000 f928 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24000248 	.word	0x24000248
 800140c:	40004800 	.word	0x40004800

08001410 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b80      	ldr	r3, [pc, #512]	; (8001638 <MX_GPIO_Init+0x218>)
 8001438:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800143c:	4a7e      	ldr	r2, [pc, #504]	; (8001638 <MX_GPIO_Init+0x218>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001446:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <MX_GPIO_Init+0x218>)
 8001448:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	623b      	str	r3, [r7, #32]
 8001452:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001454:	4b78      	ldr	r3, [pc, #480]	; (8001638 <MX_GPIO_Init+0x218>)
 8001456:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800145a:	4a77      	ldr	r2, [pc, #476]	; (8001638 <MX_GPIO_Init+0x218>)
 800145c:	f043 0320 	orr.w	r3, r3, #32
 8001460:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001464:	4b74      	ldr	r3, [pc, #464]	; (8001638 <MX_GPIO_Init+0x218>)
 8001466:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001472:	4b71      	ldr	r3, [pc, #452]	; (8001638 <MX_GPIO_Init+0x218>)
 8001474:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001478:	4a6f      	ldr	r2, [pc, #444]	; (8001638 <MX_GPIO_Init+0x218>)
 800147a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800147e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001482:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <MX_GPIO_Init+0x218>)
 8001484:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	4b69      	ldr	r3, [pc, #420]	; (8001638 <MX_GPIO_Init+0x218>)
 8001492:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001496:	4a68      	ldr	r2, [pc, #416]	; (8001638 <MX_GPIO_Init+0x218>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014a0:	4b65      	ldr	r3, [pc, #404]	; (8001638 <MX_GPIO_Init+0x218>)
 80014a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	4b62      	ldr	r3, [pc, #392]	; (8001638 <MX_GPIO_Init+0x218>)
 80014b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014b4:	4a60      	ldr	r2, [pc, #384]	; (8001638 <MX_GPIO_Init+0x218>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014be:	4b5e      	ldr	r3, [pc, #376]	; (8001638 <MX_GPIO_Init+0x218>)
 80014c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014cc:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <MX_GPIO_Init+0x218>)
 80014ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014d2:	4a59      	ldr	r2, [pc, #356]	; (8001638 <MX_GPIO_Init+0x218>)
 80014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014dc:	4b56      	ldr	r3, [pc, #344]	; (8001638 <MX_GPIO_Init+0x218>)
 80014de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b53      	ldr	r3, [pc, #332]	; (8001638 <MX_GPIO_Init+0x218>)
 80014ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014f0:	4a51      	ldr	r2, [pc, #324]	; (8001638 <MX_GPIO_Init+0x218>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014fa:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <MX_GPIO_Init+0x218>)
 80014fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001508:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <MX_GPIO_Init+0x218>)
 800150a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800150e:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <MX_GPIO_Init+0x218>)
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001518:	4b47      	ldr	r3, [pc, #284]	; (8001638 <MX_GPIO_Init+0x218>)
 800151a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	4843      	ldr	r0, [pc, #268]	; (800163c <MX_GPIO_Init+0x21c>)
 800152e:	f001 fbfb 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f244 0101 	movw	r1, #16385	; 0x4001
 8001538:	4841      	ldr	r0, [pc, #260]	; (8001640 <MX_GPIO_Init+0x220>)
 800153a:	f001 fbf5 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2102      	movs	r1, #2
 8001542:	4840      	ldr	r0, [pc, #256]	; (8001644 <MX_GPIO_Init+0x224>)
 8001544:	f001 fbf0 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	483a      	ldr	r0, [pc, #232]	; (8001648 <MX_GPIO_Init+0x228>)
 800155e:	f001 fa33 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	4830      	ldr	r0, [pc, #192]	; (800163c <MX_GPIO_Init+0x21c>)
 800157c:	f001 fa24 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001580:	f244 0301 	movw	r3, #16385	; 0x4001
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	4829      	ldr	r0, [pc, #164]	; (8001640 <MX_GPIO_Init+0x220>)
 800159a:	f001 fa15 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	4826      	ldr	r0, [pc, #152]	; (800164c <MX_GPIO_Init+0x22c>)
 80015b4:	f001 fa08 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80015b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ca:	4619      	mov	r1, r3
 80015cc:	4820      	ldr	r0, [pc, #128]	; (8001650 <MX_GPIO_Init+0x230>)
 80015ce:	f001 f9fb 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80015d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80015e4:	230a      	movs	r3, #10
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4818      	ldr	r0, [pc, #96]	; (8001650 <MX_GPIO_Init+0x230>)
 80015f0:	f001 f9ea 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80015f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	4810      	ldr	r0, [pc, #64]	; (8001650 <MX_GPIO_Init+0x230>)
 800160e:	f001 f9db 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001612:	2302      	movs	r3, #2
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_GPIO_Init+0x224>)
 800162a:	f001 f9cd 	bl	80029c8 <HAL_GPIO_Init>

}
 800162e:	bf00      	nop
 8001630:	3738      	adds	r7, #56	; 0x38
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	58024400 	.word	0x58024400
 800163c:	58021400 	.word	0x58021400
 8001640:	58020400 	.word	0x58020400
 8001644:	58021000 	.word	0x58021000
 8001648:	58020800 	.word	0x58020800
 800164c:	58021800 	.word	0x58021800
 8001650:	58020000 	.word	0x58020000

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_MspInit+0x30>)
 8001668:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x30>)
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x30>)
 8001678:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	58024400 	.word	0x58024400

08001694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0b8      	sub	sp, #224	; 0xe0
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	22b8      	movs	r2, #184	; 0xb8
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f006 fb4d 	bl	8007d54 <memset>
  if(hi2c->Instance==I2C4)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a25      	ldr	r2, [pc, #148]	; (8001754 <HAL_I2C_MspInit+0xc0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d142      	bne.n	800174a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80016c4:	2310      	movs	r3, #16
 80016c6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 f928 	bl	8004928 <HAL_RCCEx_PeriphCLKConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016de:	f7ff ffb9 	bl	8001654 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_I2C_MspInit+0xc4>)
 80016e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <HAL_I2C_MspInit+0xc4>)
 80016ea:	f043 0320 	orr.w	r3, r3, #32
 80016ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_I2C_MspInit+0xc4>)
 80016f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001700:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001708:	2312      	movs	r3, #18
 800170a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800171a:	2304      	movs	r3, #4
 800171c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001720:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001724:	4619      	mov	r1, r3
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <HAL_I2C_MspInit+0xc8>)
 8001728:	f001 f94e 	bl	80029c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_I2C_MspInit+0xc4>)
 800172e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_I2C_MspInit+0xc4>)
 8001734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001738:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_I2C_MspInit+0xc4>)
 800173e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	37e0      	adds	r7, #224	; 0xe0
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	58001c00 	.word	0x58001c00
 8001758:	58024400 	.word	0x58024400
 800175c:	58021400 	.word	0x58021400

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0b8      	sub	sp, #224	; 0xe0
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	22b8      	movs	r2, #184	; 0xb8
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f006 fae7 	bl	8007d54 <memset>
  if(huart->Instance==USART3)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a29      	ldr	r2, [pc, #164]	; (8001830 <HAL_UART_MspInit+0xd0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d14a      	bne.n	8001826 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001790:	2302      	movs	r3, #2
 8001792:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 f8c2 	bl	8004928 <HAL_RCCEx_PeriphCLKConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017aa:	f7ff ff53 	bl	8001654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_UART_MspInit+0xd4>)
 80017b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017b4:	4a1f      	ldr	r2, [pc, #124]	; (8001834 <HAL_UART_MspInit+0xd4>)
 80017b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ba:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_UART_MspInit+0xd4>)
 80017c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_UART_MspInit+0xd4>)
 80017ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017d2:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_UART_MspInit+0xd4>)
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_UART_MspInit+0xd4>)
 80017de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001804:	2307      	movs	r3, #7
 8001806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800180e:	4619      	mov	r1, r3
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <HAL_UART_MspInit+0xd8>)
 8001812:	f001 f8d9 	bl	80029c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2027      	movs	r0, #39	; 0x27
 800181c:	f000 fb3b 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001820:	2027      	movs	r0, #39	; 0x27
 8001822:	f000 fb52 	bl	8001eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	37e0      	adds	r7, #224	; 0xe0
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40004800 	.word	0x40004800
 8001834:	58024400 	.word	0x58024400
 8001838:	58020c00 	.word	0x58020c00

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 f9e6 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <USART3_IRQHandler+0x10>)
 8001896:	f004 fc5b 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000248 	.word	0x24000248

080018a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	return 1;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_kill>:

int _kill(int pid, int sig)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018be:	f006 fa0d 	bl	8007cdc <__errno>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2216      	movs	r2, #22
 80018c6:	601a      	str	r2, [r3, #0]
	return -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_exit>:

void _exit (int status)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ffe7 	bl	80018b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018e6:	e7fe      	b.n	80018e6 <_exit+0x12>

080018e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e00a      	b.n	8001910 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018fa:	f3af 8000 	nop.w
 80018fe:	4601      	mov	r1, r0
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	b2ca      	uxtb	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	dbf0      	blt.n	80018fa <_read+0x12>
	}

return len;
 8001918:	687b      	ldr	r3, [r7, #4]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e009      	b.n	8001948 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	dbf1      	blt.n	8001934 <_write+0x12>
	}
	return len;
 8001950:	687b      	ldr	r3, [r7, #4]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_close>:

int _close(int file)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	return -1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001982:	605a      	str	r2, [r3, #4]
	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_isatty>:

int _isatty(int file)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	return 1;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d207      	bcs.n	8001a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f4:	f006 f972 	bl	8007cdc <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	220c      	movs	r2, #12
 80019fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e009      	b.n	8001a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <_sbrk+0x64>)
 8001a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	24100000 	.word	0x24100000
 8001a24:	00000400 	.word	0x00000400
 8001a28:	240002d8 	.word	0x240002d8
 8001a2c:	240002f0 	.word	0x240002f0

08001a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <SystemInit+0xd0>)
 8001a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3a:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <SystemInit+0xd0>)
 8001a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a44:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <SystemInit+0xd4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d807      	bhi.n	8001a60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a50:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <SystemInit+0xd4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 030f 	bic.w	r3, r3, #15
 8001a58:	4a2a      	ldr	r2, [pc, #168]	; (8001b04 <SystemInit+0xd4>)
 8001a5a:	f043 0303 	orr.w	r3, r3, #3
 8001a5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <SystemInit+0xd8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a28      	ldr	r2, [pc, #160]	; (8001b08 <SystemInit+0xd8>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <SystemInit+0xd8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <SystemInit+0xd8>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4924      	ldr	r1, [pc, #144]	; (8001b08 <SystemInit+0xd8>)
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <SystemInit+0xdc>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <SystemInit+0xd4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <SystemInit+0xd4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 030f 	bic.w	r3, r3, #15
 8001a92:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <SystemInit+0xd4>)
 8001a94:	f043 0303 	orr.w	r3, r3, #3
 8001a98:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <SystemInit+0xd8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <SystemInit+0xd8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <SystemInit+0xd8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <SystemInit+0xd8>)
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <SystemInit+0xe0>)
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <SystemInit+0xd8>)
 8001ab4:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <SystemInit+0xe4>)
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <SystemInit+0xd8>)
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <SystemInit+0xe8>)
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <SystemInit+0xd8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <SystemInit+0xd8>)
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <SystemInit+0xe8>)
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <SystemInit+0xd8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <SystemInit+0xd8>)
 8001ad2:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <SystemInit+0xe8>)
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <SystemInit+0xd8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <SystemInit+0xd8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <SystemInit+0xd8>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <SystemInit+0xd8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <SystemInit+0xec>)
 8001af0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001af4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00
 8001b04:	52002000 	.word	0x52002000
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b10:	02020200 	.word	0x02020200
 8001b14:	01ff0000 	.word	0x01ff0000
 8001b18:	01010280 	.word	0x01010280
 8001b1c:	52004000 	.word	0x52004000

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b24:	f7ff ff84 	bl	8001a30 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2a:	490d      	ldr	r1, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b40:	4c0a      	ldr	r4, [pc, #40]	; (8001b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f006 f8dd 	bl	8007d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7ff fb0d 	bl	8001170 <main>
  bx  lr
 8001b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001b5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b60:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001b64:	0800aeb0 	.word	0x0800aeb0
  ldr r2, =_sbss
 8001b68:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001b6c:	240002f0 	.word	0x240002f0

08001b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC_IRQHandler>
	...

08001b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	f000 f980 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b80:	f002 fcfc 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_Init+0x68>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	4913      	ldr	r1, [pc, #76]	; (8001be0 <HAL_Init+0x6c>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_Init+0x68>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_Init+0x6c>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_Init+0x70>)
 8001bb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_Init+0x74>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 f814 	bl	8001bec <HAL_InitTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e002      	b.n	8001bd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bce:	f7ff fd47 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	0800aa88 	.word	0x0800aa88
 8001be4:	24000004 	.word	0x24000004
 8001be8:	24000000 	.word	0x24000000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_InitTick+0x60>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e021      	b.n	8001c44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_InitTick+0x64>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_InitTick+0x60>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f965 	bl	8001ee6 <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f000 f92f 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_InitTick+0x68>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2400000c 	.word	0x2400000c
 8001c50:	24000000 	.word	0x24000000
 8001c54:	24000008 	.word	0x24000008

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2400000c 	.word	0x2400000c
 8001c7c:	240002dc 	.word	0x240002dc

08001c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	240002dc 	.word	0x240002dc

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2400000c 	.word	0x2400000c

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x40>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00
 8001d24:	05fa0000 	.word	0x05fa0000

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea4:	f7ff ff40 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f7ff ff90 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff5f 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff33 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffa4 	bl	8001e3c <SysTick_Config>
 8001ef4:	4603      	mov	r3, r0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff feba 	bl	8001c80 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e2dc      	b.n	80024d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d008      	beq.n	8001f36 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e2cd      	b.n	80024d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a76      	ldr	r2, [pc, #472]	; (8002114 <HAL_DMA_Abort+0x214>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d04a      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a74      	ldr	r2, [pc, #464]	; (8002118 <HAL_DMA_Abort+0x218>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d045      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a73      	ldr	r2, [pc, #460]	; (800211c <HAL_DMA_Abort+0x21c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d040      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a71      	ldr	r2, [pc, #452]	; (8002120 <HAL_DMA_Abort+0x220>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d03b      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a70      	ldr	r2, [pc, #448]	; (8002124 <HAL_DMA_Abort+0x224>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d036      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <HAL_DMA_Abort+0x228>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d031      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6d      	ldr	r2, [pc, #436]	; (800212c <HAL_DMA_Abort+0x22c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d02c      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a6b      	ldr	r2, [pc, #428]	; (8002130 <HAL_DMA_Abort+0x230>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d027      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6a      	ldr	r2, [pc, #424]	; (8002134 <HAL_DMA_Abort+0x234>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d022      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a68      	ldr	r2, [pc, #416]	; (8002138 <HAL_DMA_Abort+0x238>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01d      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a67      	ldr	r2, [pc, #412]	; (800213c <HAL_DMA_Abort+0x23c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d018      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a65      	ldr	r2, [pc, #404]	; (8002140 <HAL_DMA_Abort+0x240>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a64      	ldr	r2, [pc, #400]	; (8002144 <HAL_DMA_Abort+0x244>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a62      	ldr	r2, [pc, #392]	; (8002148 <HAL_DMA_Abort+0x248>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a61      	ldr	r2, [pc, #388]	; (800214c <HAL_DMA_Abort+0x24c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_DMA_Abort+0xd6>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a5f      	ldr	r2, [pc, #380]	; (8002150 <HAL_DMA_Abort+0x250>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_DMA_Abort+0xda>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_DMA_Abort+0xdc>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 021e 	bic.w	r2, r2, #30
 8001fee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ffe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e00a      	b.n	800201e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 020e 	bic.w	r2, r2, #14
 8002016:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <HAL_DMA_Abort+0x214>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d072      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a3a      	ldr	r2, [pc, #232]	; (8002118 <HAL_DMA_Abort+0x218>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d06d      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a39      	ldr	r2, [pc, #228]	; (800211c <HAL_DMA_Abort+0x21c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d068      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a37      	ldr	r2, [pc, #220]	; (8002120 <HAL_DMA_Abort+0x220>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d063      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a36      	ldr	r2, [pc, #216]	; (8002124 <HAL_DMA_Abort+0x224>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d05e      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_DMA_Abort+0x228>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d059      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a33      	ldr	r2, [pc, #204]	; (800212c <HAL_DMA_Abort+0x22c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d054      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a31      	ldr	r2, [pc, #196]	; (8002130 <HAL_DMA_Abort+0x230>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d04f      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a30      	ldr	r2, [pc, #192]	; (8002134 <HAL_DMA_Abort+0x234>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d04a      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <HAL_DMA_Abort+0x238>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d045      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a2d      	ldr	r2, [pc, #180]	; (800213c <HAL_DMA_Abort+0x23c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d040      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <HAL_DMA_Abort+0x240>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d03b      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a2a      	ldr	r2, [pc, #168]	; (8002144 <HAL_DMA_Abort+0x244>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d036      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_DMA_Abort+0x248>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d031      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a27      	ldr	r2, [pc, #156]	; (800214c <HAL_DMA_Abort+0x24c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d02c      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a25      	ldr	r2, [pc, #148]	; (8002150 <HAL_DMA_Abort+0x250>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d027      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a24      	ldr	r2, [pc, #144]	; (8002154 <HAL_DMA_Abort+0x254>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d022      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a22      	ldr	r2, [pc, #136]	; (8002158 <HAL_DMA_Abort+0x258>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01d      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_DMA_Abort+0x25c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d018      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_DMA_Abort+0x260>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_DMA_Abort+0x264>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00e      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <HAL_DMA_Abort+0x268>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d009      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1b      	ldr	r2, [pc, #108]	; (800216c <HAL_DMA_Abort+0x26c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d004      	beq.n	800210e <HAL_DMA_Abort+0x20e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <HAL_DMA_Abort+0x270>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d132      	bne.n	8002174 <HAL_DMA_Abort+0x274>
 800210e:	2301      	movs	r3, #1
 8002110:	e031      	b.n	8002176 <HAL_DMA_Abort+0x276>
 8002112:	bf00      	nop
 8002114:	40020010 	.word	0x40020010
 8002118:	40020028 	.word	0x40020028
 800211c:	40020040 	.word	0x40020040
 8002120:	40020058 	.word	0x40020058
 8002124:	40020070 	.word	0x40020070
 8002128:	40020088 	.word	0x40020088
 800212c:	400200a0 	.word	0x400200a0
 8002130:	400200b8 	.word	0x400200b8
 8002134:	40020410 	.word	0x40020410
 8002138:	40020428 	.word	0x40020428
 800213c:	40020440 	.word	0x40020440
 8002140:	40020458 	.word	0x40020458
 8002144:	40020470 	.word	0x40020470
 8002148:	40020488 	.word	0x40020488
 800214c:	400204a0 	.word	0x400204a0
 8002150:	400204b8 	.word	0x400204b8
 8002154:	58025408 	.word	0x58025408
 8002158:	5802541c 	.word	0x5802541c
 800215c:	58025430 	.word	0x58025430
 8002160:	58025444 	.word	0x58025444
 8002164:	58025458 	.word	0x58025458
 8002168:	5802546c 	.word	0x5802546c
 800216c:	58025480 	.word	0x58025480
 8002170:	58025494 	.word	0x58025494
 8002174:	2300      	movs	r3, #0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d007      	beq.n	800218a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002188:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6d      	ldr	r2, [pc, #436]	; (8002344 <HAL_DMA_Abort+0x444>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d04a      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a6b      	ldr	r2, [pc, #428]	; (8002348 <HAL_DMA_Abort+0x448>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d045      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6a      	ldr	r2, [pc, #424]	; (800234c <HAL_DMA_Abort+0x44c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d040      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a68      	ldr	r2, [pc, #416]	; (8002350 <HAL_DMA_Abort+0x450>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d03b      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a67      	ldr	r2, [pc, #412]	; (8002354 <HAL_DMA_Abort+0x454>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d036      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a65      	ldr	r2, [pc, #404]	; (8002358 <HAL_DMA_Abort+0x458>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d031      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a64      	ldr	r2, [pc, #400]	; (800235c <HAL_DMA_Abort+0x45c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d02c      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a62      	ldr	r2, [pc, #392]	; (8002360 <HAL_DMA_Abort+0x460>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d027      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a61      	ldr	r2, [pc, #388]	; (8002364 <HAL_DMA_Abort+0x464>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d022      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a5f      	ldr	r2, [pc, #380]	; (8002368 <HAL_DMA_Abort+0x468>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01d      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a5e      	ldr	r2, [pc, #376]	; (800236c <HAL_DMA_Abort+0x46c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d018      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <HAL_DMA_Abort+0x470>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5b      	ldr	r2, [pc, #364]	; (8002374 <HAL_DMA_Abort+0x474>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00e      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a59      	ldr	r2, [pc, #356]	; (8002378 <HAL_DMA_Abort+0x478>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d009      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a58      	ldr	r2, [pc, #352]	; (800237c <HAL_DMA_Abort+0x47c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d004      	beq.n	800222a <HAL_DMA_Abort+0x32a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a56      	ldr	r2, [pc, #344]	; (8002380 <HAL_DMA_Abort+0x480>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <HAL_DMA_Abort+0x33c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e007      	b.n	800224c <HAL_DMA_Abort+0x34c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800224c:	e013      	b.n	8002276 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800224e:	f7ff fd17 	bl	8001c80 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b05      	cmp	r3, #5
 800225a:	d90c      	bls.n	8002276 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e12d      	b.n	80024d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e5      	bne.n	800224e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <HAL_DMA_Abort+0x444>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d04a      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <HAL_DMA_Abort+0x448>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d045      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2c      	ldr	r2, [pc, #176]	; (800234c <HAL_DMA_Abort+0x44c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d040      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2a      	ldr	r2, [pc, #168]	; (8002350 <HAL_DMA_Abort+0x450>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d03b      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a29      	ldr	r2, [pc, #164]	; (8002354 <HAL_DMA_Abort+0x454>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d036      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <HAL_DMA_Abort+0x458>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d031      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_DMA_Abort+0x45c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d02c      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_DMA_Abort+0x460>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d027      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <HAL_DMA_Abort+0x464>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d022      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_DMA_Abort+0x468>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01d      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a20      	ldr	r2, [pc, #128]	; (800236c <HAL_DMA_Abort+0x46c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d018      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <HAL_DMA_Abort+0x470>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_DMA_Abort+0x474>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00e      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <HAL_DMA_Abort+0x478>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d009      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1a      	ldr	r2, [pc, #104]	; (800237c <HAL_DMA_Abort+0x47c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d004      	beq.n	8002322 <HAL_DMA_Abort+0x422>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a18      	ldr	r2, [pc, #96]	; (8002380 <HAL_DMA_Abort+0x480>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_DMA_Abort+0x426>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_DMA_Abort+0x428>
 8002326:	2300      	movs	r3, #0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d02b      	beq.n	8002384 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	223f      	movs	r2, #63	; 0x3f
 800233c:	409a      	lsls	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	e02a      	b.n	800239a <HAL_DMA_Abort+0x49a>
 8002344:	40020010 	.word	0x40020010
 8002348:	40020028 	.word	0x40020028
 800234c:	40020040 	.word	0x40020040
 8002350:	40020058 	.word	0x40020058
 8002354:	40020070 	.word	0x40020070
 8002358:	40020088 	.word	0x40020088
 800235c:	400200a0 	.word	0x400200a0
 8002360:	400200b8 	.word	0x400200b8
 8002364:	40020410 	.word	0x40020410
 8002368:	40020428 	.word	0x40020428
 800236c:	40020440 	.word	0x40020440
 8002370:	40020458 	.word	0x40020458
 8002374:	40020470 	.word	0x40020470
 8002378:	40020488 	.word	0x40020488
 800237c:	400204a0 	.word	0x400204a0
 8002380:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2201      	movs	r2, #1
 8002394:	409a      	lsls	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a4f      	ldr	r2, [pc, #316]	; (80024dc <HAL_DMA_Abort+0x5dc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d072      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a4d      	ldr	r2, [pc, #308]	; (80024e0 <HAL_DMA_Abort+0x5e0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d06d      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a4c      	ldr	r2, [pc, #304]	; (80024e4 <HAL_DMA_Abort+0x5e4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d068      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a4a      	ldr	r2, [pc, #296]	; (80024e8 <HAL_DMA_Abort+0x5e8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d063      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a49      	ldr	r2, [pc, #292]	; (80024ec <HAL_DMA_Abort+0x5ec>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d05e      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a47      	ldr	r2, [pc, #284]	; (80024f0 <HAL_DMA_Abort+0x5f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d059      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a46      	ldr	r2, [pc, #280]	; (80024f4 <HAL_DMA_Abort+0x5f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d054      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a44      	ldr	r2, [pc, #272]	; (80024f8 <HAL_DMA_Abort+0x5f8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d04f      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a43      	ldr	r2, [pc, #268]	; (80024fc <HAL_DMA_Abort+0x5fc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d04a      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a41      	ldr	r2, [pc, #260]	; (8002500 <HAL_DMA_Abort+0x600>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d045      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a40      	ldr	r2, [pc, #256]	; (8002504 <HAL_DMA_Abort+0x604>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d040      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3e      	ldr	r2, [pc, #248]	; (8002508 <HAL_DMA_Abort+0x608>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d03b      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a3d      	ldr	r2, [pc, #244]	; (800250c <HAL_DMA_Abort+0x60c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d036      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <HAL_DMA_Abort+0x610>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d031      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <HAL_DMA_Abort+0x614>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d02c      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a38      	ldr	r2, [pc, #224]	; (8002518 <HAL_DMA_Abort+0x618>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d027      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a37      	ldr	r2, [pc, #220]	; (800251c <HAL_DMA_Abort+0x61c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d022      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a35      	ldr	r2, [pc, #212]	; (8002520 <HAL_DMA_Abort+0x620>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01d      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a34      	ldr	r2, [pc, #208]	; (8002524 <HAL_DMA_Abort+0x624>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d018      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a32      	ldr	r2, [pc, #200]	; (8002528 <HAL_DMA_Abort+0x628>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a31      	ldr	r2, [pc, #196]	; (800252c <HAL_DMA_Abort+0x62c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00e      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <HAL_DMA_Abort+0x630>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <HAL_DMA_Abort+0x634>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_DMA_Abort+0x58a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <HAL_DMA_Abort+0x638>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_DMA_Abort+0x58e>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_DMA_Abort+0x590>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d015      	beq.n	80024c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800249c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40020010 	.word	0x40020010
 80024e0:	40020028 	.word	0x40020028
 80024e4:	40020040 	.word	0x40020040
 80024e8:	40020058 	.word	0x40020058
 80024ec:	40020070 	.word	0x40020070
 80024f0:	40020088 	.word	0x40020088
 80024f4:	400200a0 	.word	0x400200a0
 80024f8:	400200b8 	.word	0x400200b8
 80024fc:	40020410 	.word	0x40020410
 8002500:	40020428 	.word	0x40020428
 8002504:	40020440 	.word	0x40020440
 8002508:	40020458 	.word	0x40020458
 800250c:	40020470 	.word	0x40020470
 8002510:	40020488 	.word	0x40020488
 8002514:	400204a0 	.word	0x400204a0
 8002518:	400204b8 	.word	0x400204b8
 800251c:	58025408 	.word	0x58025408
 8002520:	5802541c 	.word	0x5802541c
 8002524:	58025430 	.word	0x58025430
 8002528:	58025444 	.word	0x58025444
 800252c:	58025458 	.word	0x58025458
 8002530:	5802546c 	.word	0x5802546c
 8002534:	58025480 	.word	0x58025480
 8002538:	58025494 	.word	0x58025494

0800253c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e237      	b.n	80029be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d004      	beq.n	8002564 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e22c      	b.n	80029be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5c      	ldr	r2, [pc, #368]	; (80026dc <HAL_DMA_Abort_IT+0x1a0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d04a      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5b      	ldr	r2, [pc, #364]	; (80026e0 <HAL_DMA_Abort_IT+0x1a4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d045      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a59      	ldr	r2, [pc, #356]	; (80026e4 <HAL_DMA_Abort_IT+0x1a8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d040      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_DMA_Abort_IT+0x1ac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d03b      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a56      	ldr	r2, [pc, #344]	; (80026ec <HAL_DMA_Abort_IT+0x1b0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d036      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <HAL_DMA_Abort_IT+0x1b4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d031      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a53      	ldr	r2, [pc, #332]	; (80026f4 <HAL_DMA_Abort_IT+0x1b8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02c      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a52      	ldr	r2, [pc, #328]	; (80026f8 <HAL_DMA_Abort_IT+0x1bc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d027      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a50      	ldr	r2, [pc, #320]	; (80026fc <HAL_DMA_Abort_IT+0x1c0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a4f      	ldr	r2, [pc, #316]	; (8002700 <HAL_DMA_Abort_IT+0x1c4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d01d      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a4d      	ldr	r2, [pc, #308]	; (8002704 <HAL_DMA_Abort_IT+0x1c8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <HAL_DMA_Abort_IT+0x1cc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a4a      	ldr	r2, [pc, #296]	; (800270c <HAL_DMA_Abort_IT+0x1d0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a49      	ldr	r2, [pc, #292]	; (8002710 <HAL_DMA_Abort_IT+0x1d4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_DMA_Abort_IT+0x1d8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_DMA_Abort_IT+0x1dc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_DMA_Abort_IT+0xcc>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_DMA_Abort_IT+0xce>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8086 	beq.w	800271c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2204      	movs	r2, #4
 8002614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a2f      	ldr	r2, [pc, #188]	; (80026dc <HAL_DMA_Abort_IT+0x1a0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d04a      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2e      	ldr	r2, [pc, #184]	; (80026e0 <HAL_DMA_Abort_IT+0x1a4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d045      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2c      	ldr	r2, [pc, #176]	; (80026e4 <HAL_DMA_Abort_IT+0x1a8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d040      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2b      	ldr	r2, [pc, #172]	; (80026e8 <HAL_DMA_Abort_IT+0x1ac>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d03b      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a29      	ldr	r2, [pc, #164]	; (80026ec <HAL_DMA_Abort_IT+0x1b0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d036      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <HAL_DMA_Abort_IT+0x1b4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d031      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <HAL_DMA_Abort_IT+0x1b8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d02c      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a25      	ldr	r2, [pc, #148]	; (80026f8 <HAL_DMA_Abort_IT+0x1bc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d027      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a23      	ldr	r2, [pc, #140]	; (80026fc <HAL_DMA_Abort_IT+0x1c0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d022      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a22      	ldr	r2, [pc, #136]	; (8002700 <HAL_DMA_Abort_IT+0x1c4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d01d      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <HAL_DMA_Abort_IT+0x1c8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d018      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_DMA_Abort_IT+0x1cc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d013      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1d      	ldr	r2, [pc, #116]	; (800270c <HAL_DMA_Abort_IT+0x1d0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00e      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <HAL_DMA_Abort_IT+0x1d4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d009      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <HAL_DMA_Abort_IT+0x1d8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d004      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x17c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_DMA_Abort_IT+0x1dc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d108      	bne.n	80026ca <HAL_DMA_Abort_IT+0x18e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e178      	b.n	80029bc <HAL_DMA_Abort_IT+0x480>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e16f      	b.n	80029bc <HAL_DMA_Abort_IT+0x480>
 80026dc:	40020010 	.word	0x40020010
 80026e0:	40020028 	.word	0x40020028
 80026e4:	40020040 	.word	0x40020040
 80026e8:	40020058 	.word	0x40020058
 80026ec:	40020070 	.word	0x40020070
 80026f0:	40020088 	.word	0x40020088
 80026f4:	400200a0 	.word	0x400200a0
 80026f8:	400200b8 	.word	0x400200b8
 80026fc:	40020410 	.word	0x40020410
 8002700:	40020428 	.word	0x40020428
 8002704:	40020440 	.word	0x40020440
 8002708:	40020458 	.word	0x40020458
 800270c:	40020470 	.word	0x40020470
 8002710:	40020488 	.word	0x40020488
 8002714:	400204a0 	.word	0x400204a0
 8002718:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 020e 	bic.w	r2, r2, #14
 800272a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a6c      	ldr	r2, [pc, #432]	; (80028e4 <HAL_DMA_Abort_IT+0x3a8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d04a      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6b      	ldr	r2, [pc, #428]	; (80028e8 <HAL_DMA_Abort_IT+0x3ac>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d045      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a69      	ldr	r2, [pc, #420]	; (80028ec <HAL_DMA_Abort_IT+0x3b0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d040      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_DMA_Abort_IT+0x3b4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d03b      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a66      	ldr	r2, [pc, #408]	; (80028f4 <HAL_DMA_Abort_IT+0x3b8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d036      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a65      	ldr	r2, [pc, #404]	; (80028f8 <HAL_DMA_Abort_IT+0x3bc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d031      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a63      	ldr	r2, [pc, #396]	; (80028fc <HAL_DMA_Abort_IT+0x3c0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02c      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a62      	ldr	r2, [pc, #392]	; (8002900 <HAL_DMA_Abort_IT+0x3c4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d027      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a60      	ldr	r2, [pc, #384]	; (8002904 <HAL_DMA_Abort_IT+0x3c8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d022      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5f      	ldr	r2, [pc, #380]	; (8002908 <HAL_DMA_Abort_IT+0x3cc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d01d      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5d      	ldr	r2, [pc, #372]	; (800290c <HAL_DMA_Abort_IT+0x3d0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d018      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5c      	ldr	r2, [pc, #368]	; (8002910 <HAL_DMA_Abort_IT+0x3d4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d013      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a5a      	ldr	r2, [pc, #360]	; (8002914 <HAL_DMA_Abort_IT+0x3d8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00e      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a59      	ldr	r2, [pc, #356]	; (8002918 <HAL_DMA_Abort_IT+0x3dc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d009      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a57      	ldr	r2, [pc, #348]	; (800291c <HAL_DMA_Abort_IT+0x3e0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_DMA_Abort_IT+0x290>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a56      	ldr	r2, [pc, #344]	; (8002920 <HAL_DMA_Abort_IT+0x3e4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d108      	bne.n	80027de <HAL_DMA_Abort_IT+0x2a2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e007      	b.n	80027ee <HAL_DMA_Abort_IT+0x2b2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3c      	ldr	r2, [pc, #240]	; (80028e4 <HAL_DMA_Abort_IT+0x3a8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d072      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a3a      	ldr	r2, [pc, #232]	; (80028e8 <HAL_DMA_Abort_IT+0x3ac>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d06d      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a39      	ldr	r2, [pc, #228]	; (80028ec <HAL_DMA_Abort_IT+0x3b0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d068      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a37      	ldr	r2, [pc, #220]	; (80028f0 <HAL_DMA_Abort_IT+0x3b4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d063      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a36      	ldr	r2, [pc, #216]	; (80028f4 <HAL_DMA_Abort_IT+0x3b8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d05e      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <HAL_DMA_Abort_IT+0x3bc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d059      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a33      	ldr	r2, [pc, #204]	; (80028fc <HAL_DMA_Abort_IT+0x3c0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d054      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a31      	ldr	r2, [pc, #196]	; (8002900 <HAL_DMA_Abort_IT+0x3c4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d04f      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a30      	ldr	r2, [pc, #192]	; (8002904 <HAL_DMA_Abort_IT+0x3c8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d04a      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a2e      	ldr	r2, [pc, #184]	; (8002908 <HAL_DMA_Abort_IT+0x3cc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d045      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a2d      	ldr	r2, [pc, #180]	; (800290c <HAL_DMA_Abort_IT+0x3d0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d040      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2b      	ldr	r2, [pc, #172]	; (8002910 <HAL_DMA_Abort_IT+0x3d4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d03b      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <HAL_DMA_Abort_IT+0x3d8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d036      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a28      	ldr	r2, [pc, #160]	; (8002918 <HAL_DMA_Abort_IT+0x3dc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d031      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_DMA_Abort_IT+0x3e0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d02c      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a25      	ldr	r2, [pc, #148]	; (8002920 <HAL_DMA_Abort_IT+0x3e4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d027      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a24      	ldr	r2, [pc, #144]	; (8002924 <HAL_DMA_Abort_IT+0x3e8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d022      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_DMA_Abort_IT+0x3ec>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01d      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a21      	ldr	r2, [pc, #132]	; (800292c <HAL_DMA_Abort_IT+0x3f0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d018      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_DMA_Abort_IT+0x3f4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_DMA_Abort_IT+0x3f8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00e      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_DMA_Abort_IT+0x3fc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_DMA_Abort_IT+0x400>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_DMA_Abort_IT+0x3a2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <HAL_DMA_Abort_IT+0x404>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d132      	bne.n	8002944 <HAL_DMA_Abort_IT+0x408>
 80028de:	2301      	movs	r3, #1
 80028e0:	e031      	b.n	8002946 <HAL_DMA_Abort_IT+0x40a>
 80028e2:	bf00      	nop
 80028e4:	40020010 	.word	0x40020010
 80028e8:	40020028 	.word	0x40020028
 80028ec:	40020040 	.word	0x40020040
 80028f0:	40020058 	.word	0x40020058
 80028f4:	40020070 	.word	0x40020070
 80028f8:	40020088 	.word	0x40020088
 80028fc:	400200a0 	.word	0x400200a0
 8002900:	400200b8 	.word	0x400200b8
 8002904:	40020410 	.word	0x40020410
 8002908:	40020428 	.word	0x40020428
 800290c:	40020440 	.word	0x40020440
 8002910:	40020458 	.word	0x40020458
 8002914:	40020470 	.word	0x40020470
 8002918:	40020488 	.word	0x40020488
 800291c:	400204a0 	.word	0x400204a0
 8002920:	400204b8 	.word	0x400204b8
 8002924:	58025408 	.word	0x58025408
 8002928:	5802541c 	.word	0x5802541c
 800292c:	58025430 	.word	0x58025430
 8002930:	58025444 	.word	0x58025444
 8002934:	58025458 	.word	0x58025458
 8002938:	5802546c 	.word	0x5802546c
 800293c:	58025480 	.word	0x58025480
 8002940:	58025494 	.word	0x58025494
 8002944:	2300      	movs	r3, #0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002958:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	2201      	movs	r2, #1
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002978:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002990:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800299a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029d6:	4b89      	ldr	r3, [pc, #548]	; (8002bfc <HAL_GPIO_Init+0x234>)
 80029d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029da:	e194      	b.n	8002d06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8186 	beq.w	8002d00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d005      	beq.n	8002a0c <HAL_GPIO_Init+0x44>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d130      	bne.n	8002a6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a42:	2201      	movs	r2, #1
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 0201 	and.w	r2, r3, #1
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d017      	beq.n	8002aaa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d123      	bne.n	8002afe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	220f      	movs	r2, #15
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	69b9      	ldr	r1, [r7, #24]
 8002afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0203 	and.w	r2, r3, #3
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80e0 	beq.w	8002d00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_GPIO_Init+0x238>)
 8002b42:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b46:	4a2e      	ldr	r2, [pc, #184]	; (8002c00 <HAL_GPIO_Init+0x238>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002b50:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_GPIO_Init+0x238>)
 8002b52:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b5e:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <HAL_GPIO_Init+0x23c>)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	220f      	movs	r2, #15
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_GPIO_Init+0x240>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d052      	beq.n	8002c30 <HAL_GPIO_Init+0x268>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <HAL_GPIO_Init+0x244>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d031      	beq.n	8002bf6 <HAL_GPIO_Init+0x22e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <HAL_GPIO_Init+0x248>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d02b      	beq.n	8002bf2 <HAL_GPIO_Init+0x22a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <HAL_GPIO_Init+0x24c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d025      	beq.n	8002bee <HAL_GPIO_Init+0x226>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <HAL_GPIO_Init+0x250>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <HAL_GPIO_Init+0x222>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_GPIO_Init+0x254>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d019      	beq.n	8002be6 <HAL_GPIO_Init+0x21e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <HAL_GPIO_Init+0x258>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x21a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_GPIO_Init+0x25c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x216>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <HAL_GPIO_Init+0x260>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x212>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_GPIO_Init+0x264>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x20e>
 8002bd2:	2309      	movs	r3, #9
 8002bd4:	e02d      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002bd6:	230a      	movs	r3, #10
 8002bd8:	e02b      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002bda:	2308      	movs	r3, #8
 8002bdc:	e029      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002bde:	2307      	movs	r3, #7
 8002be0:	e027      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002be2:	2306      	movs	r3, #6
 8002be4:	e025      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002be6:	2305      	movs	r3, #5
 8002be8:	e023      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002bea:	2304      	movs	r3, #4
 8002bec:	e021      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e01f      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e01d      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e01b      	b.n	8002c32 <HAL_GPIO_Init+0x26a>
 8002bfa:	bf00      	nop
 8002bfc:	58000080 	.word	0x58000080
 8002c00:	58024400 	.word	0x58024400
 8002c04:	58000400 	.word	0x58000400
 8002c08:	58020000 	.word	0x58020000
 8002c0c:	58020400 	.word	0x58020400
 8002c10:	58020800 	.word	0x58020800
 8002c14:	58020c00 	.word	0x58020c00
 8002c18:	58021000 	.word	0x58021000
 8002c1c:	58021400 	.word	0x58021400
 8002c20:	58021800 	.word	0x58021800
 8002c24:	58021c00 	.word	0x58021c00
 8002c28:	58022000 	.word	0x58022000
 8002c2c:	58022400 	.word	0x58022400
 8002c30:	2300      	movs	r3, #0
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	f002 0203 	and.w	r2, r2, #3
 8002c38:	0092      	lsls	r2, r2, #2
 8002c3a:	4093      	lsls	r3, r2
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c42:	4938      	ldr	r1, [pc, #224]	; (8002d24 <HAL_GPIO_Init+0x35c>)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	3302      	adds	r3, #2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	3301      	adds	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f ae63 	bne.w	80029dc <HAL_GPIO_Init+0x14>
  }
}
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
 8002d1a:	3724      	adds	r7, #36	; 0x24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	58000400 	.word	0x58000400

08002d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
 8002d34:	4613      	mov	r3, r2
 8002d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d38:	787b      	ldrb	r3, [r7, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d44:	e003      	b.n	8002d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	041a      	lsls	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	619a      	str	r2, [r3, #24]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07f      	b.n	8002e6e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe fc86 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2224      	movs	r2, #36	; 0x24
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d107      	bne.n	8002dd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	e006      	b.n	8002de4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002de2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d104      	bne.n	8002df6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002df4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_I2C_Init+0x11c>)
 8002e02:	430b      	orrs	r3, r1
 8002e04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69d9      	ldr	r1, [r3, #28]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	02008000 	.word	0x02008000

08002e7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	813b      	strh	r3, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	f040 80f9 	bne.w	8003096 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_I2C_Mem_Write+0x34>
 8002eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0ed      	b.n	8003098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_I2C_Mem_Write+0x4e>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0e6      	b.n	8003098 <HAL_I2C_Mem_Write+0x21c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ed2:	f7fe fed5 	bl	8001c80 <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2319      	movs	r3, #25
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fac3 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0d1      	b.n	8003098 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2221      	movs	r2, #33	; 0x21
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2240      	movs	r2, #64	; 0x40
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a3a      	ldr	r2, [r7, #32]
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f1c:	88f8      	ldrh	r0, [r7, #6]
 8002f1e:	893a      	ldrh	r2, [r7, #8]
 8002f20:	8979      	ldrh	r1, [r7, #10]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f9d3 	bl	80032d8 <I2C_RequestMemoryWrite>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0a9      	b.n	8003098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2bff      	cmp	r3, #255	; 0xff
 8002f4c:	d90e      	bls.n	8002f6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	22ff      	movs	r2, #255	; 0xff
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	8979      	ldrh	r1, [r7, #10]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fc2b 	bl	80037c0 <I2C_TransferConfig>
 8002f6a:	e00f      	b.n	8002f8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	8979      	ldrh	r1, [r7, #10]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fc1a 	bl	80037c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 faad 	bl	80034f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e07b      	b.n	8003098 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d034      	beq.n	8003044 <HAL_I2C_Mem_Write+0x1c8>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d130      	bne.n	8003044 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fa3f 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e04d      	b.n	8003098 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	2bff      	cmp	r3, #255	; 0xff
 8003004:	d90e      	bls.n	8003024 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	b2da      	uxtb	r2, r3
 8003012:	8979      	ldrh	r1, [r7, #10]
 8003014:	2300      	movs	r3, #0
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fbcf 	bl	80037c0 <I2C_TransferConfig>
 8003022:	e00f      	b.n	8003044 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	b2da      	uxtb	r2, r3
 8003034:	8979      	ldrh	r1, [r7, #10]
 8003036:	2300      	movs	r3, #0
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fbbe 	bl	80037c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d19e      	bne.n	8002f8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa8c 	bl	8003570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e01a      	b.n	8003098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2220      	movs	r2, #32
 8003068:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_I2C_Mem_Write+0x224>)
 8003076:	400b      	ands	r3, r1
 8003078:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	fe00e800 	.word	0xfe00e800

080030a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f040 80fd 	bne.w	80032c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_I2C_Mem_Read+0x34>
 80030d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0f1      	b.n	80032c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Mem_Read+0x4e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0ea      	b.n	80032c8 <HAL_I2C_Mem_Read+0x224>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030fa:	f7fe fdc1 	bl	8001c80 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f9af 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d5      	b.n	80032c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2222      	movs	r2, #34	; 0x22
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2240      	movs	r2, #64	; 0x40
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003144:	88f8      	ldrh	r0, [r7, #6]
 8003146:	893a      	ldrh	r2, [r7, #8]
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	4603      	mov	r3, r0
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f913 	bl	8003380 <I2C_RequestMemoryRead>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0ad      	b.n	80032c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2bff      	cmp	r3, #255	; 0xff
 8003174:	d90e      	bls.n	8003194 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	22ff      	movs	r2, #255	; 0xff
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	4b52      	ldr	r3, [pc, #328]	; (80032d0 <HAL_I2C_Mem_Read+0x22c>)
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fb17 	bl	80037c0 <I2C_TransferConfig>
 8003192:	e00f      	b.n	80031b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	8979      	ldrh	r1, [r7, #10]
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_I2C_Mem_Read+0x22c>)
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fb06 	bl	80037c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	2200      	movs	r2, #0
 80031bc:	2104      	movs	r1, #4
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f956 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e07c      	b.n	80032c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d034      	beq.n	8003274 <HAL_I2C_Mem_Read+0x1d0>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d130      	bne.n	8003274 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	2200      	movs	r2, #0
 800321a:	2180      	movs	r1, #128	; 0x80
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f927 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e04d      	b.n	80032c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2bff      	cmp	r3, #255	; 0xff
 8003234:	d90e      	bls.n	8003254 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22ff      	movs	r2, #255	; 0xff
 800323a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	b2da      	uxtb	r2, r3
 8003242:	8979      	ldrh	r1, [r7, #10]
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fab7 	bl	80037c0 <I2C_TransferConfig>
 8003252:	e00f      	b.n	8003274 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	b2da      	uxtb	r2, r3
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	2300      	movs	r3, #0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 faa6 	bl	80037c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d19a      	bne.n	80031b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f974 	bl	8003570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e01a      	b.n	80032c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2220      	movs	r2, #32
 8003298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_I2C_Mem_Read+0x230>)
 80032a6:	400b      	ands	r3, r1
 80032a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	80002400 	.word	0x80002400
 80032d4:	fe00e800 	.word	0xfe00e800

080032d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	460b      	mov	r3, r1
 80032ec:	813b      	strh	r3, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	8979      	ldrh	r1, [r7, #10]
 80032f8:	4b20      	ldr	r3, [pc, #128]	; (800337c <I2C_RequestMemoryWrite+0xa4>)
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fa5d 	bl	80037c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	69b9      	ldr	r1, [r7, #24]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8f0 	bl	80034f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e02c      	b.n	8003374 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003320:	893b      	ldrh	r3, [r7, #8]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	629a      	str	r2, [r3, #40]	; 0x28
 800332a:	e015      	b.n	8003358 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800332c:	893b      	ldrh	r3, [r7, #8]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	b29b      	uxth	r3, r3
 8003332:	b2da      	uxtb	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f8d6 	bl	80034f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e012      	b.n	8003374 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800334e:	893b      	ldrh	r3, [r7, #8]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2200      	movs	r2, #0
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f884 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	80002000 	.word	0x80002000

08003380 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	4608      	mov	r0, r1
 800338a:	4611      	mov	r1, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4603      	mov	r3, r0
 8003390:	817b      	strh	r3, [r7, #10]
 8003392:	460b      	mov	r3, r1
 8003394:	813b      	strh	r3, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	8979      	ldrh	r1, [r7, #10]
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <I2C_RequestMemoryRead+0xa4>)
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fa0a 	bl	80037c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f89d 	bl	80034f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e02c      	b.n	800341a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033c6:	893b      	ldrh	r3, [r7, #8]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
 80033d0:	e015      	b.n	80033fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033d2:	893b      	ldrh	r3, [r7, #8]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f883 	bl	80034f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e012      	b.n	800341a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2200      	movs	r2, #0
 8003406:	2140      	movs	r1, #64	; 0x40
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f831 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	80002000 	.word	0x80002000

08003428 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d103      	bne.n	8003446 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2200      	movs	r2, #0
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d007      	beq.n	8003464 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	619a      	str	r2, [r3, #24]
  }
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	e022      	b.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d01e      	beq.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe fbf9 	bl	8001c80 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e00f      	b.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4013      	ands	r3, r2
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d0cd      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034fc:	e02c      	b.n	8003558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f870 	bl	80035e8 <I2C_IsErrorOccurred>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e02a      	b.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d01e      	beq.n	8003558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe fbb1 	bl	8001c80 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d113      	bne.n	8003558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e007      	b.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d1cb      	bne.n	80034fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800357c:	e028      	b.n	80035d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f830 	bl	80035e8 <I2C_IsErrorOccurred>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e026      	b.n	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fe fb75 	bl	8001c80 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e007      	b.n	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d1cf      	bne.n	800357e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	d075      	beq.n	8003700 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2210      	movs	r2, #16
 800361a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800361c:	e056      	b.n	80036cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d052      	beq.n	80036cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe fb2b 	bl	8001c80 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_IsErrorOccurred+0x54>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d147      	bne.n	80036cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003646:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800364e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800365a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365e:	d12e      	bne.n	80036be <I2C_IsErrorOccurred+0xd6>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003666:	d02a      	beq.n	80036be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	2b20      	cmp	r3, #32
 800366c:	d027      	beq.n	80036be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800367c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800367e:	f7fe faff 	bl	8001c80 <HAL_GetTick>
 8003682:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003684:	e01b      	b.n	80036be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003686:	f7fe fafb 	bl	8001c80 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b19      	cmp	r3, #25
 8003692:	d914      	bls.n	80036be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f043 0220 	orr.w	r2, r3, #32
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d1dc      	bne.n	8003686 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d003      	beq.n	80036e2 <I2C_IsErrorOccurred+0xfa>
 80036da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d09d      	beq.n	800361e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2220      	movs	r2, #32
 80036f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f043 0304 	orr.w	r3, r3, #4
 80036f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003722:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f043 0308 	orr.w	r3, r3, #8
 800373a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800376e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01c      	beq.n	80037b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff fe56 	bl	8003428 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <I2C_IsErrorOccurred+0x1d4>)
 8003788:	400b      	ands	r3, r1
 800378a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3728      	adds	r7, #40	; 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	fe00e800 	.word	0xfe00e800

080037c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	817b      	strh	r3, [r7, #10]
 80037ce:	4613      	mov	r3, r2
 80037d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037d2:	897b      	ldrh	r3, [r7, #10]
 80037d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037d8:	7a7b      	ldrb	r3, [r7, #9]
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037ee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	0d5b      	lsrs	r3, r3, #21
 80037fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <I2C_TransferConfig+0x60>)
 8003800:	430b      	orrs	r3, r1
 8003802:	43db      	mvns	r3, r3
 8003804:	ea02 0103 	and.w	r1, r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	03ff63ff 	.word	0x03ff63ff

08003824 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b20      	cmp	r3, #32
 8003838:	d138      	bne.n	80038ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003844:	2302      	movs	r3, #2
 8003846:	e032      	b.n	80038ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003876:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6819      	ldr	r1, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d139      	bne.n	8003944 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038da:	2302      	movs	r3, #2
 80038dc:	e033      	b.n	8003946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2224      	movs	r2, #36	; 0x24
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800390c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800395c:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <HAL_PWREx_ConfigSupply+0xb0>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	2b06      	cmp	r3, #6
 8003966:	d00a      	beq.n	800397e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003968:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <HAL_PWREx_ConfigSupply+0xb0>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	d001      	beq.n	800397a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e040      	b.n	80039fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e03e      	b.n	80039fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800397e:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003986:	491f      	ldr	r1, [pc, #124]	; (8003a04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4313      	orrs	r3, r2
 800398c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800398e:	f7fe f977 	bl	8001c80 <HAL_GetTick>
 8003992:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003994:	e009      	b.n	80039aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003996:	f7fe f973 	bl	8001c80 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a4:	d901      	bls.n	80039aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e028      	b.n	80039fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_PWREx_ConfigSupply+0xb0>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b6:	d1ee      	bne.n	8003996 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b1e      	cmp	r3, #30
 80039bc:	d008      	beq.n	80039d0 <HAL_PWREx_ConfigSupply+0x7c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b2e      	cmp	r3, #46	; 0x2e
 80039c2:	d005      	beq.n	80039d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b1d      	cmp	r3, #29
 80039c8:	d002      	beq.n	80039d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b2d      	cmp	r3, #45	; 0x2d
 80039ce:	d114      	bne.n	80039fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80039d0:	f7fe f956 	bl	8001c80 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80039d6:	e009      	b.n	80039ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039d8:	f7fe f952 	bl	8001c80 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e6:	d901      	bls.n	80039ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e007      	b.n	80039fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_PWREx_ConfigSupply+0xb0>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d1ee      	bne.n	80039d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	58024800 	.word	0x58024800

08003a08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	; 0x30
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e3f4      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80b3 	beq.w	8003b8e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a28:	4b95      	ldr	r3, [pc, #596]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a32:	4b93      	ldr	r3, [pc, #588]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d007      	beq.n	8003a4e <HAL_RCC_OscConfig+0x46>
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	2b18      	cmp	r3, #24
 8003a42:	d112      	bne.n	8003a6a <HAL_RCC_OscConfig+0x62>
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d10d      	bne.n	8003a6a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4e:	4b8c      	ldr	r3, [pc, #560]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8098 	beq.w	8003b8c <HAL_RCC_OscConfig+0x184>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f040 8093 	bne.w	8003b8c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e3cc      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a72:	d106      	bne.n	8003a82 <HAL_RCC_OscConfig+0x7a>
 8003a74:	4b82      	ldr	r3, [pc, #520]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a81      	ldr	r2, [pc, #516]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	e058      	b.n	8003b34 <HAL_RCC_OscConfig+0x12c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d112      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xa8>
 8003a8a:	4b7d      	ldr	r3, [pc, #500]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7c      	ldr	r2, [pc, #496]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b7a      	ldr	r3, [pc, #488]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a79      	ldr	r2, [pc, #484]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003a9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b77      	ldr	r3, [pc, #476]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a76      	ldr	r2, [pc, #472]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e041      	b.n	8003b34 <HAL_RCC_OscConfig+0x12c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab8:	d112      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xd8>
 8003aba:	4b71      	ldr	r3, [pc, #452]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a70      	ldr	r2, [pc, #448]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b6e      	ldr	r3, [pc, #440]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6d      	ldr	r2, [pc, #436]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003acc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b6b      	ldr	r3, [pc, #428]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e029      	b.n	8003b34 <HAL_RCC_OscConfig+0x12c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003ae8:	d112      	bne.n	8003b10 <HAL_RCC_OscConfig+0x108>
 8003aea:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a64      	ldr	r2, [pc, #400]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b62      	ldr	r3, [pc, #392]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a61      	ldr	r2, [pc, #388]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b5f      	ldr	r3, [pc, #380]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5e      	ldr	r2, [pc, #376]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e011      	b.n	8003b34 <HAL_RCC_OscConfig+0x12c>
 8003b10:	4b5b      	ldr	r3, [pc, #364]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5a      	ldr	r2, [pc, #360]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b58      	ldr	r3, [pc, #352]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a57      	ldr	r2, [pc, #348]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b55      	ldr	r3, [pc, #340]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a54      	ldr	r2, [pc, #336]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fe f8a0 	bl	8001c80 <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fe f89c 	bl	8001c80 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e356      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b56:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x13c>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fe f88c 	bl	8001c80 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fe f888 	bl	8001c80 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e342      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b7e:	4b40      	ldr	r3, [pc, #256]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x164>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 808d 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9c:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1ba>
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	2b18      	cmp	r3, #24
 8003bb6:	d137      	bne.n	8003c28 <HAL_RCC_OscConfig+0x220>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d132      	bne.n	8003c28 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc2:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x1d2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e314      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 0219 	bic.w	r2, r3, #25
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4926      	ldr	r1, [pc, #152]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bec:	f7fe f848 	bl	8001c80 <HAL_GetTick>
 8003bf0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fe f844 	bl	8001c80 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e2fe      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	4917      	ldr	r1, [pc, #92]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c26:	e046      	b.n	8003cb6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d029      	beq.n	8003c84 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c30:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 0219 	bic.w	r2, r3, #25
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4910      	ldr	r1, [pc, #64]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fe f81d 	bl	8001c80 <HAL_GetTick>
 8003c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fe f819 	bl	8001c80 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e2d3      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	4902      	ldr	r1, [pc, #8]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
 8003c7c:	e01b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x2ae>
 8003c7e:	bf00      	nop
 8003c80:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c84:	4b97      	ldr	r3, [pc, #604]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a96      	ldr	r2, [pc, #600]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd fff6 	bl	8001c80 <HAL_GetTick>
 8003c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fd fff2 	bl	8001c80 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e2ac      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003caa:	4b8e      	ldr	r3, [pc, #568]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d06a      	beq.n	8003d98 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc2:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ccc:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d007      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x2e0>
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b18      	cmp	r3, #24
 8003cdc:	d11b      	bne.n	8003d16 <HAL_RCC_OscConfig+0x30e>
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d116      	bne.n	8003d16 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ce8:	4b7e      	ldr	r3, [pc, #504]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_OscConfig+0x2f8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b80      	cmp	r3, #128	; 0x80
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e281      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d00:	4b78      	ldr	r3, [pc, #480]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	4975      	ldr	r1, [pc, #468]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d14:	e040      	b.n	8003d98 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d023      	beq.n	8003d66 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d1e:	4b71      	ldr	r3, [pc, #452]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a70      	ldr	r2, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd ffa9 	bl	8001c80 <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d32:	f7fd ffa5 	bl	8001c80 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e25f      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d44:	4b67      	ldr	r3, [pc, #412]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d50:	4b64      	ldr	r3, [pc, #400]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	4961      	ldr	r1, [pc, #388]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60cb      	str	r3, [r1, #12]
 8003d64:	e018      	b.n	8003d98 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a5e      	ldr	r2, [pc, #376]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fd ff85 	bl	8001c80 <HAL_GetTick>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d7a:	f7fd ff81 	bl	8001c80 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e23b      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d8c:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d036      	beq.n	8003e12 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d019      	beq.n	8003de0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dac:	4b4d      	ldr	r3, [pc, #308]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db0:	4a4c      	ldr	r2, [pc, #304]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fd ff62 	bl	8001c80 <HAL_GetTick>
 8003dbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc0:	f7fd ff5e 	bl	8001c80 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e218      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dd2:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x3b8>
 8003dde:	e018      	b.n	8003e12 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de0:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fd ff48 	bl	8001c80 <HAL_GetTick>
 8003df0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fd ff44 	bl	8001c80 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1fe      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d036      	beq.n	8003e8c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d019      	beq.n	8003e5a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e26:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2e      	ldr	r2, [pc, #184]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e32:	f7fd ff25 	bl	8001c80 <HAL_GetTick>
 8003e36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e3a:	f7fd ff21 	bl	8001c80 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e1db      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x432>
 8003e58:	e018      	b.n	8003e8c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e66:	f7fd ff0b 	bl	8001c80 <HAL_GetTick>
 8003e6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e6e:	f7fd ff07 	bl	8001c80 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e1c1      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80af 	beq.w	8003ff8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <HAL_RCC_OscConfig+0x4e0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <HAL_RCC_OscConfig+0x4e0>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ea6:	f7fd feeb 	bl	8001c80 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eae:	f7fd fee7 	bl	8001c80 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1a1      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_OscConfig+0x4e0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d10b      	bne.n	8003eec <HAL_RCC_OscConfig+0x4e4>
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a02      	ldr	r2, [pc, #8]	; (8003ee4 <HAL_RCC_OscConfig+0x4dc>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	e05b      	b.n	8003f9a <HAL_RCC_OscConfig+0x592>
 8003ee2:	bf00      	nop
 8003ee4:	58024400 	.word	0x58024400
 8003ee8:	58024800 	.word	0x58024800
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d112      	bne.n	8003f1a <HAL_RCC_OscConfig+0x512>
 8003ef4:	4b9d      	ldr	r3, [pc, #628]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a9c      	ldr	r2, [pc, #624]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	4b9a      	ldr	r3, [pc, #616]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a99      	ldr	r2, [pc, #612]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	4b97      	ldr	r3, [pc, #604]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a96      	ldr	r2, [pc, #600]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f12:	f023 0304 	bic.w	r3, r3, #4
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	e03f      	b.n	8003f9a <HAL_RCC_OscConfig+0x592>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d112      	bne.n	8003f48 <HAL_RCC_OscConfig+0x540>
 8003f22:	4b92      	ldr	r3, [pc, #584]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a91      	ldr	r2, [pc, #580]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	4b8f      	ldr	r3, [pc, #572]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a8e      	ldr	r2, [pc, #568]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3a:	4b8c      	ldr	r3, [pc, #560]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a8b      	ldr	r2, [pc, #556]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
 8003f46:	e028      	b.n	8003f9a <HAL_RCC_OscConfig+0x592>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b85      	cmp	r3, #133	; 0x85
 8003f4e:	d112      	bne.n	8003f76 <HAL_RCC_OscConfig+0x56e>
 8003f50:	4b86      	ldr	r3, [pc, #536]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a85      	ldr	r2, [pc, #532]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f56:	f043 0304 	orr.w	r3, r3, #4
 8003f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5c:	4b83      	ldr	r3, [pc, #524]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a82      	ldr	r2, [pc, #520]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	4b80      	ldr	r3, [pc, #512]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a7f      	ldr	r2, [pc, #508]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	e011      	b.n	8003f9a <HAL_RCC_OscConfig+0x592>
 8003f76:	4b7d      	ldr	r3, [pc, #500]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a7c      	ldr	r2, [pc, #496]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
 8003f82:	4b7a      	ldr	r3, [pc, #488]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a79      	ldr	r2, [pc, #484]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	4b77      	ldr	r3, [pc, #476]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a76      	ldr	r2, [pc, #472]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d015      	beq.n	8003fce <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa2:	f7fd fe6d 	bl	8001c80 <HAL_GetTick>
 8003fa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fd fe69 	bl	8001c80 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e121      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fc0:	4b6a      	ldr	r3, [pc, #424]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ee      	beq.n	8003faa <HAL_RCC_OscConfig+0x5a2>
 8003fcc:	e014      	b.n	8003ff8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fce:	f7fd fe57 	bl	8001c80 <HAL_GetTick>
 8003fd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fd fe53 	bl	8001c80 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e10b      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fec:	4b5f      	ldr	r3, [pc, #380]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ee      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8100 	beq.w	8004202 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004002:	4b5a      	ldr	r3, [pc, #360]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800400a:	2b18      	cmp	r3, #24
 800400c:	f000 80bb 	beq.w	8004186 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	2b02      	cmp	r3, #2
 8004016:	f040 8095 	bne.w	8004144 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	4b54      	ldr	r3, [pc, #336]	; (800416c <HAL_RCC_OscConfig+0x764>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a53      	ldr	r2, [pc, #332]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fd fe2b 	bl	8001c80 <HAL_GetTick>
 800402a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402e:	f7fd fe27 	bl	8001c80 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e0e1      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004040:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404c:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCC_OscConfig+0x764>)
 800404e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004050:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_OscConfig+0x768>)
 8004052:	4013      	ands	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800405c:	0112      	lsls	r2, r2, #4
 800405e:	430a      	orrs	r2, r1
 8004060:	4942      	ldr	r1, [pc, #264]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004062:	4313      	orrs	r3, r2
 8004064:	628b      	str	r3, [r1, #40]	; 0x28
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	3b01      	subs	r3, #1
 800406c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	3b01      	subs	r3, #1
 8004076:	025b      	lsls	r3, r3, #9
 8004078:	b29b      	uxth	r3, r3
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	3b01      	subs	r3, #1
 8004082:	041b      	lsls	r3, r3, #16
 8004084:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	3b01      	subs	r3, #1
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004096:	4935      	ldr	r1, [pc, #212]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004098:	4313      	orrs	r3, r2
 800409a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800409c:	4b33      	ldr	r3, [pc, #204]	; (800416c <HAL_RCC_OscConfig+0x764>)
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a32      	ldr	r2, [pc, #200]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040a8:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ac:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCC_OscConfig+0x76c>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040b4:	00d2      	lsls	r2, r2, #3
 80040b6:	492d      	ldr	r1, [pc, #180]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80040bc:	4b2b      	ldr	r3, [pc, #172]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	f023 020c 	bic.w	r2, r3, #12
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	4928      	ldr	r1, [pc, #160]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	f023 0202 	bic.w	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	4924      	ldr	r1, [pc, #144]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040e0:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	4a21      	ldr	r2, [pc, #132]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ec:	4b1f      	ldr	r3, [pc, #124]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	4a1e      	ldr	r2, [pc, #120]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040f8:	4b1c      	ldr	r3, [pc, #112]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4a1b      	ldr	r2, [pc, #108]	; (800416c <HAL_RCC_OscConfig+0x764>)
 80040fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004104:	4b19      	ldr	r3, [pc, #100]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4a18      	ldr	r2, [pc, #96]	; (800416c <HAL_RCC_OscConfig+0x764>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b16      	ldr	r3, [pc, #88]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fdb0 	bl	8001c80 <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004124:	f7fd fdac 	bl	8001c80 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e066      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x71c>
 8004142:	e05e      	b.n	8004202 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_RCC_OscConfig+0x764>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a08      	ldr	r2, [pc, #32]	; (800416c <HAL_RCC_OscConfig+0x764>)
 800414a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fd fd96 	bl	8001c80 <HAL_GetTick>
 8004154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004156:	e00f      	b.n	8004178 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004158:	f7fd fd92 	bl	8001c80 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d908      	bls.n	8004178 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e04c      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
 800416a:	bf00      	nop
 800416c:	58024400 	.word	0x58024400
 8004170:	fffffc0c 	.word	0xfffffc0c
 8004174:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <HAL_RCC_OscConfig+0x804>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e9      	bne.n	8004158 <HAL_RCC_OscConfig+0x750>
 8004184:	e03d      	b.n	8004202 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <HAL_RCC_OscConfig+0x804>)
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800418c:	4b1f      	ldr	r3, [pc, #124]	; (800420c <HAL_RCC_OscConfig+0x804>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b01      	cmp	r3, #1
 8004198:	d031      	beq.n	80041fe <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f003 0203 	and.w	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d12a      	bne.n	80041fe <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d122      	bne.n	80041fe <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d11a      	bne.n	80041fe <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	0a5b      	lsrs	r3, r3, #9
 80041cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d111      	bne.n	80041fe <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d108      	bne.n	80041fe <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	0e1b      	lsrs	r3, r3, #24
 80041f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3730      	adds	r7, #48	; 0x30
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	58024400 	.word	0x58024400

08004210 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e19c      	b.n	800455e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004224:	4b8a      	ldr	r3, [pc, #552]	; (8004450 <HAL_RCC_ClockConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d910      	bls.n	8004254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b87      	ldr	r3, [pc, #540]	; (8004450 <HAL_RCC_ClockConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 020f 	bic.w	r2, r3, #15
 800423a:	4985      	ldr	r1, [pc, #532]	; (8004450 <HAL_RCC_ClockConfig+0x240>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b83      	ldr	r3, [pc, #524]	; (8004450 <HAL_RCC_ClockConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e184      	b.n	800455e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d010      	beq.n	8004282 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	4b7b      	ldr	r3, [pc, #492]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800426c:	429a      	cmp	r2, r3
 800426e:	d908      	bls.n	8004282 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004270:	4b78      	ldr	r3, [pc, #480]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	4975      	ldr	r1, [pc, #468]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 800427e:	4313      	orrs	r3, r2
 8004280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d010      	beq.n	80042b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	4b70      	ldr	r3, [pc, #448]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800429a:	429a      	cmp	r2, r3
 800429c:	d908      	bls.n	80042b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800429e:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	496a      	ldr	r1, [pc, #424]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d010      	beq.n	80042de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	4b64      	ldr	r3, [pc, #400]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d908      	bls.n	80042de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042cc:	4b61      	ldr	r3, [pc, #388]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	495e      	ldr	r1, [pc, #376]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d010      	beq.n	800430c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d908      	bls.n	800430c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042fa:	4b56      	ldr	r3, [pc, #344]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	4953      	ldr	r1, [pc, #332]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004308:	4313      	orrs	r3, r2
 800430a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d010      	beq.n	800433a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	429a      	cmp	r2, r3
 8004326:	d908      	bls.n	800433a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b4a      	ldr	r3, [pc, #296]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f023 020f 	bic.w	r2, r3, #15
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4947      	ldr	r1, [pc, #284]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004336:	4313      	orrs	r3, r2
 8004338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d055      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004346:	4b43      	ldr	r3, [pc, #268]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4940      	ldr	r1, [pc, #256]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004354:	4313      	orrs	r3, r2
 8004356:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d107      	bne.n	8004370 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004360:	4b3c      	ldr	r3, [pc, #240]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d121      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0f6      	b.n	800455e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d107      	bne.n	8004388 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004378:	4b36      	ldr	r3, [pc, #216]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d115      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0ea      	b.n	800455e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004390:	4b30      	ldr	r3, [pc, #192]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0de      	b.n	800455e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043a0:	4b2c      	ldr	r3, [pc, #176]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0d6      	b.n	800455e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043b0:	4b28      	ldr	r3, [pc, #160]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f023 0207 	bic.w	r2, r3, #7
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4925      	ldr	r1, [pc, #148]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c2:	f7fd fc5d 	bl	8001c80 <HAL_GetTick>
 80043c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ca:	f7fd fc59 	bl	8001c80 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0be      	b.n	800455e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e0:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d1eb      	bne.n	80043ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d010      	beq.n	8004420 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	429a      	cmp	r2, r3
 800440c:	d208      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f023 020f 	bic.w	r2, r3, #15
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	490e      	ldr	r1, [pc, #56]	; (8004454 <HAL_RCC_ClockConfig+0x244>)
 800441c:	4313      	orrs	r3, r2
 800441e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_ClockConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d214      	bcs.n	8004458 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	4b08      	ldr	r3, [pc, #32]	; (8004450 <HAL_RCC_ClockConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 020f 	bic.w	r2, r3, #15
 8004436:	4906      	ldr	r1, [pc, #24]	; (8004450 <HAL_RCC_ClockConfig+0x240>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <HAL_RCC_ClockConfig+0x240>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e086      	b.n	800455e <HAL_RCC_ClockConfig+0x34e>
 8004450:	52002000 	.word	0x52002000
 8004454:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d010      	beq.n	8004486 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004470:	429a      	cmp	r2, r3
 8004472:	d208      	bcs.n	8004486 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004474:	4b3c      	ldr	r3, [pc, #240]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	4939      	ldr	r1, [pc, #228]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 8004482:	4313      	orrs	r3, r2
 8004484:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d010      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	4b34      	ldr	r3, [pc, #208]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800449e:	429a      	cmp	r2, r3
 80044a0:	d208      	bcs.n	80044b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044a2:	4b31      	ldr	r3, [pc, #196]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	492e      	ldr	r1, [pc, #184]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d010      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699a      	ldr	r2, [r3, #24]
 80044c4:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d208      	bcs.n	80044e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044d0:	4b25      	ldr	r3, [pc, #148]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	4922      	ldr	r1, [pc, #136]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d010      	beq.n	8004510 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69da      	ldr	r2, [r3, #28]
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d208      	bcs.n	8004510 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4917      	ldr	r1, [pc, #92]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 800450c:	4313      	orrs	r3, r2
 800450e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004510:	f000 f834 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	4912      	ldr	r1, [pc, #72]	; (800456c <HAL_RCC_ClockConfig+0x35c>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
 800452c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800452e:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <HAL_RCC_ClockConfig+0x358>)
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	4a0d      	ldr	r2, [pc, #52]	; (800456c <HAL_RCC_ClockConfig+0x35c>)
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
 8004544:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_RCC_ClockConfig+0x360>)
 8004546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004548:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <HAL_RCC_ClockConfig+0x364>)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <HAL_RCC_ClockConfig+0x368>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd fb4a 	bl	8001bec <HAL_InitTick>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	58024400 	.word	0x58024400
 800456c:	0800aa88 	.word	0x0800aa88
 8004570:	24000004 	.word	0x24000004
 8004574:	24000000 	.word	0x24000000
 8004578:	24000008 	.word	0x24000008

0800457c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004582:	4bb3      	ldr	r3, [pc, #716]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800458a:	2b18      	cmp	r3, #24
 800458c:	f200 8155 	bhi.w	800483a <HAL_RCC_GetSysClockFreq+0x2be>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045fd 	.word	0x080045fd
 800459c:	0800483b 	.word	0x0800483b
 80045a0:	0800483b 	.word	0x0800483b
 80045a4:	0800483b 	.word	0x0800483b
 80045a8:	0800483b 	.word	0x0800483b
 80045ac:	0800483b 	.word	0x0800483b
 80045b0:	0800483b 	.word	0x0800483b
 80045b4:	0800483b 	.word	0x0800483b
 80045b8:	08004623 	.word	0x08004623
 80045bc:	0800483b 	.word	0x0800483b
 80045c0:	0800483b 	.word	0x0800483b
 80045c4:	0800483b 	.word	0x0800483b
 80045c8:	0800483b 	.word	0x0800483b
 80045cc:	0800483b 	.word	0x0800483b
 80045d0:	0800483b 	.word	0x0800483b
 80045d4:	0800483b 	.word	0x0800483b
 80045d8:	08004629 	.word	0x08004629
 80045dc:	0800483b 	.word	0x0800483b
 80045e0:	0800483b 	.word	0x0800483b
 80045e4:	0800483b 	.word	0x0800483b
 80045e8:	0800483b 	.word	0x0800483b
 80045ec:	0800483b 	.word	0x0800483b
 80045f0:	0800483b 	.word	0x0800483b
 80045f4:	0800483b 	.word	0x0800483b
 80045f8:	0800462f 	.word	0x0800462f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045fc:	4b94      	ldr	r3, [pc, #592]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004608:	4b91      	ldr	r3, [pc, #580]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	08db      	lsrs	r3, r3, #3
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	4a90      	ldr	r2, [pc, #576]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
 8004618:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800461a:	e111      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800461c:	4b8d      	ldr	r3, [pc, #564]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800461e:	61bb      	str	r3, [r7, #24]
    break;
 8004620:	e10e      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004622:	4b8d      	ldr	r3, [pc, #564]	; (8004858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004624:	61bb      	str	r3, [r7, #24]
    break;
 8004626:	e10b      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004628:	4b8c      	ldr	r3, [pc, #560]	; (800485c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800462a:	61bb      	str	r3, [r7, #24]
    break;
 800462c:	e108      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800462e:	4b88      	ldr	r3, [pc, #544]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004638:	4b85      	ldr	r3, [pc, #532]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004642:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004644:	4b82      	ldr	r3, [pc, #520]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800464e:	4b80      	ldr	r3, [pc, #512]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	08db      	lsrs	r3, r3, #3
 8004654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80e1 	beq.w	8004834 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b02      	cmp	r3, #2
 8004676:	f000 8083 	beq.w	8004780 <HAL_RCC_GetSysClockFreq+0x204>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b02      	cmp	r3, #2
 800467e:	f200 80a1 	bhi.w	80047c4 <HAL_RCC_GetSysClockFreq+0x248>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0x114>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d056      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0x1c0>
 800468e:	e099      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004690:	4b6f      	ldr	r3, [pc, #444]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02d      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800469c:	4b6c      	ldr	r3, [pc, #432]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	4a6b      	ldr	r2, [pc, #428]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b62      	ldr	r3, [pc, #392]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80046f6:	e087      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004864 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a02 	vldr	s12, [r7, #8]
 800471e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473a:	e065      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b40      	ldr	r3, [pc, #256]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004762:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800477e:	e043      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800486c <HAL_RCC_GetSysClockFreq+0x2f0>
 800478e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047c2:	e021      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004868 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004806:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004808:	4b11      	ldr	r3, [pc, #68]	; (8004850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	0a5b      	lsrs	r3, r3, #9
 800480e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004812:	3301      	adds	r3, #1
 8004814:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004820:	edd7 6a07 	vldr	s13, [r7, #28]
 8004824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482c:	ee17 3a90 	vmov	r3, s15
 8004830:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004832:	e005      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
    break;
 8004838:	e002      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800483c:	61bb      	str	r3, [r7, #24]
    break;
 800483e:	bf00      	nop
  }

  return sysclockfreq;
 8004840:	69bb      	ldr	r3, [r7, #24]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3724      	adds	r7, #36	; 0x24
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	58024400 	.word	0x58024400
 8004854:	03d09000 	.word	0x03d09000
 8004858:	003d0900 	.word	0x003d0900
 800485c:	007a1200 	.word	0x007a1200
 8004860:	46000000 	.word	0x46000000
 8004864:	4c742400 	.word	0x4c742400
 8004868:	4a742400 	.word	0x4a742400
 800486c:	4af42400 	.word	0x4af42400

08004870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004876:	f7ff fe81 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800487a:	4602      	mov	r2, r0
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	0a1b      	lsrs	r3, r3, #8
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	490f      	ldr	r1, [pc, #60]	; (80048c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004888:	5ccb      	ldrb	r3, [r1, r3]
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	fa22 f303 	lsr.w	r3, r2, r3
 8004892:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800489e:	5cd3      	ldrb	r3, [r2, r3]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	fa22 f303 	lsr.w	r3, r2, r3
 80048aa:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80048ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048ae:	4a07      	ldr	r2, [pc, #28]	; (80048cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80048b6:	681b      	ldr	r3, [r3, #0]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	58024400 	.word	0x58024400
 80048c4:	0800aa88 	.word	0x0800aa88
 80048c8:	24000004 	.word	0x24000004
 80048cc:	24000000 	.word	0x24000000

080048d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80048d4:	f7ff ffcc 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4904      	ldr	r1, [pc, #16]	; (80048f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048e6:	5ccb      	ldrb	r3, [r1, r3]
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	58024400 	.word	0x58024400
 80048f8:	0800aa88 	.word	0x0800aa88

080048fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004900:	f7ff ffb6 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 8004904:	4602      	mov	r2, r0
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	4904      	ldr	r1, [pc, #16]	; (8004924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004912:	5ccb      	ldrb	r3, [r1, r3]
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	58024400 	.word	0x58024400
 8004924:	0800aa88 	.word	0x0800aa88

08004928 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004930:	2300      	movs	r3, #0
 8004932:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004934:	2300      	movs	r3, #0
 8004936:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d03f      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800494c:	d02a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800494e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004952:	d824      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004958:	d018      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800495a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800495e:	d81e      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004968:	d007      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800496a:	e018      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800496c:	4b9f      	ldr	r3, [pc, #636]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	4a9e      	ldr	r2, [pc, #632]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004978:	e015      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	2102      	movs	r1, #2
 8004980:	4618      	mov	r0, r3
 8004982:	f001 f99b 	bl	8005cbc <RCCEx_PLL2_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800498a:	e00c      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3324      	adds	r3, #36	; 0x24
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fa44 	bl	8005e20 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800499c:	e003      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	75fb      	strb	r3, [r7, #23]
      break;
 80049a2:	e000      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049ac:	4b8f      	ldr	r3, [pc, #572]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b8:	498c      	ldr	r1, [pc, #560]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	650b      	str	r3, [r1, #80]	; 0x50
 80049be:	e001      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d03d      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d826      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80049d8:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	080049f5 	.word	0x080049f5
 80049e4:	08004a03 	.word	0x08004a03
 80049e8:	08004a15 	.word	0x08004a15
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a2d 	.word	0x08004a2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f4:	4b7d      	ldr	r3, [pc, #500]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	4a7c      	ldr	r2, [pc, #496]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a00:	e015      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3304      	adds	r3, #4
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 f957 	bl	8005cbc <RCCEx_PLL2_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a12:	e00c      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3324      	adds	r3, #36	; 0x24
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 fa00 	bl	8005e20 <RCCEx_PLL3_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a24:	e003      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a34:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	f023 0207 	bic.w	r2, r3, #7
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	496a      	ldr	r1, [pc, #424]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	650b      	str	r3, [r1, #80]	; 0x50
 8004a46:	e001      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
 8004a4a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d04a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a60:	d031      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004a62:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a66:	d82b      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6c:	d02d      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a72:	d825      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a74:	2bc0      	cmp	r3, #192	; 0xc0
 8004a76:	d02a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a78:	2bc0      	cmp	r3, #192	; 0xc0
 8004a7a:	d821      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a7c:	2b80      	cmp	r3, #128	; 0x80
 8004a7e:	d016      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d81d      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d007      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004a8c:	e018      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8e:	4b57      	ldr	r3, [pc, #348]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	4a56      	ldr	r2, [pc, #344]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004a9a:	e019      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f90a 	bl	8005cbc <RCCEx_PLL2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004aac:	e010      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3324      	adds	r3, #36	; 0x24
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f001 f9b3 	bl	8005e20 <RCCEx_PLL3_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004abe:	e007      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac4:	e004      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004ac6:	bf00      	nop
 8004ac8:	e002      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004aca:	bf00      	nop
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004ad6:	4b45      	ldr	r3, [pc, #276]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ada:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	4942      	ldr	r1, [pc, #264]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	650b      	str	r3, [r1, #80]	; 0x50
 8004ae8:	e001      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d04f      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b02:	d036      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004b04:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b08:	d830      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d032      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b14:	d82a      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b16:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b1a:	d02e      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004b1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b20:	d824      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b26:	d018      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2c:	d81e      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b36:	d007      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004b38:	e018      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3a:	4b2c      	ldr	r3, [pc, #176]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	4a2b      	ldr	r2, [pc, #172]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004b46:	e019      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 f8b4 	bl	8005cbc <RCCEx_PLL2_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004b58:	e010      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3324      	adds	r3, #36	; 0x24
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 f95d 	bl	8005e20 <RCCEx_PLL3_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004b6a:	e007      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b70:	e004      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b86:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8e:	4917      	ldr	r1, [pc, #92]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	650b      	str	r3, [r1, #80]	; 0x50
 8004b94:	e001      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d034      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	2b30      	cmp	r3, #48	; 0x30
 8004bac:	d01c      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004bae:	2b30      	cmp	r3, #48	; 0x30
 8004bb0:	d817      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d813      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d018      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d10f      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004bce:	e010      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 f870 	bl	8005cbc <RCCEx_PLL2_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004be0:	e007      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
      break;
 8004be6:	e004      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004be8:	bf00      	nop
 8004bea:	e002      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bec:	58024400 	.word	0x58024400
      break;
 8004bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bf8:	4b9b      	ldr	r3, [pc, #620]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	4998      	ldr	r1, [pc, #608]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c0a:	e001      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d047      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c24:	d030      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c2a:	d82a      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c30:	d02c      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004c32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c36:	d824      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3c:	d018      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	d81e      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4c:	d007      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004c4e:	e018      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c50:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4a84      	ldr	r2, [pc, #528]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c5c:	e017      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3304      	adds	r3, #4
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 f829 	bl	8005cbc <RCCEx_PLL2_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c6e:	e00e      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3324      	adds	r3, #36	; 0x24
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f001 f8d2 	bl	8005e20 <RCCEx_PLL3_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c80:	e005      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
      break;
 8004c86:	e002      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004c88:	bf00      	nop
 8004c8a:	e000      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c94:	4b74      	ldr	r3, [pc, #464]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca0:	4971      	ldr	r1, [pc, #452]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	650b      	str	r3, [r1, #80]	; 0x50
 8004ca6:	e001      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
 8004caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d049      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc0:	d02e      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc6:	d828      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004cc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ccc:	d02a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004cce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cd2:	d822      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004cd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cd8:	d026      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004cda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cde:	d81c      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce4:	d010      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004ce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cea:	d816      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01d      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf4:	d111      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 ffdd 	bl	8005cbc <RCCEx_PLL2_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d06:	e012      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3324      	adds	r3, #36	; 0x24
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 f886 	bl	8005e20 <RCCEx_PLL3_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d18:	e009      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1e:	e006      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d20:	bf00      	nop
 8004d22:	e004      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d24:	bf00      	nop
 8004d26:	e002      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d34:	4b4c      	ldr	r3, [pc, #304]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d40:	4949      	ldr	r1, [pc, #292]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	650b      	str	r3, [r1, #80]	; 0x50
 8004d46:	e001      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d053      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d5e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004d62:	d034      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004d64:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004d68:	d82e      	bhi.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d6e:	d030      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d74:	d828      	bhi.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d02c      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d80:	d822      	bhi.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d86:	d028      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d8c:	d81c      	bhi.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d92:	d010      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d98:	d816      	bhi.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01f      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da2:	d111      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	2101      	movs	r1, #1
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 ff86 	bl	8005cbc <RCCEx_PLL2_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004db4:	e014      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	2101      	movs	r1, #1
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 f82f 	bl	8005e20 <RCCEx_PLL3_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004dc6:	e00b      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
      break;
 8004dcc:	e008      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004dce:	bf00      	nop
 8004dd0:	e006      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e004      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004de6:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004df4:	491c      	ldr	r1, [pc, #112]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	658b      	str	r3, [r1, #88]	; 0x58
 8004dfa:	e001      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
 8004dfe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d031      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e14:	d00e      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e1a:	d814      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d015      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e24:	d10f      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e26:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e32:	e00c      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	2101      	movs	r1, #1
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 ff3e 	bl	8005cbc <RCCEx_PLL2_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e44:	e003      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4a:	e000      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e54:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e60:	4901      	ldr	r1, [pc, #4]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	650b      	str	r3, [r1, #80]	; 0x50
 8004e66:	e003      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004e68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
 8004e6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d032      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d81b      	bhi.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004ec3 	.word	0x08004ec3
 8004e90:	08004e9d 	.word	0x08004e9d
 8004e94:	08004eab 	.word	0x08004eab
 8004e98:	08004ec3 	.word	0x08004ec3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9c:	4bb2      	ldr	r3, [pc, #712]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	4ab1      	ldr	r2, [pc, #708]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ea8:	e00c      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3304      	adds	r3, #4
 8004eae:	2102      	movs	r1, #2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 ff03 	bl	8005cbc <RCCEx_PLL2_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004eba:	e003      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004eca:	4ba7      	ldr	r3, [pc, #668]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	49a4      	ldr	r1, [pc, #656]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004edc:	e001      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8086 	beq.w	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef0:	4b9e      	ldr	r3, [pc, #632]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a9d      	ldr	r2, [pc, #628]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efc:	f7fc fec0 	bl	8001c80 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f02:	e009      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f04:	f7fc febc 	bl	8001c80 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d902      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	75fb      	strb	r3, [r7, #23]
        break;
 8004f16:	e005      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f18:	4b94      	ldr	r3, [pc, #592]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ef      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d166      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f2a:	4b8f      	ldr	r3, [pc, #572]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f34:	4053      	eors	r3, r2
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d013      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f3e:	4b8a      	ldr	r3, [pc, #552]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f48:	4b87      	ldr	r3, [pc, #540]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	4a86      	ldr	r2, [pc, #536]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f54:	4b84      	ldr	r3, [pc, #528]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4a83      	ldr	r2, [pc, #524]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f60:	4a81      	ldr	r2, [pc, #516]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f70:	d115      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fc fe85 	bl	8001c80 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f78:	e00b      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7a:	f7fc fe81 	bl	8001c80 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d902      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f90:	e005      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f92:	4b75      	ldr	r3, [pc, #468]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ed      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d126      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004fb4:	4b6c      	ldr	r3, [pc, #432]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fc2:	0919      	lsrs	r1, r3, #4
 8004fc4:	4b6a      	ldr	r3, [pc, #424]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004fc6:	400b      	ands	r3, r1
 8004fc8:	4967      	ldr	r1, [pc, #412]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	610b      	str	r3, [r1, #16]
 8004fce:	e005      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004fd0:	4b65      	ldr	r3, [pc, #404]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	4a64      	ldr	r2, [pc, #400]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fda:	6113      	str	r3, [r2, #16]
 8004fdc:	4b62      	ldr	r3, [pc, #392]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fea:	495f      	ldr	r1, [pc, #380]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	670b      	str	r3, [r1, #112]	; 0x70
 8004ff0:	e004      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
 8004ff4:	75bb      	strb	r3, [r7, #22]
 8004ff6:	e001      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d07f      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500e:	2b28      	cmp	r3, #40	; 0x28
 8005010:	d866      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	080050e7 	.word	0x080050e7
 800501c:	080050e1 	.word	0x080050e1
 8005020:	080050e1 	.word	0x080050e1
 8005024:	080050e1 	.word	0x080050e1
 8005028:	080050e1 	.word	0x080050e1
 800502c:	080050e1 	.word	0x080050e1
 8005030:	080050e1 	.word	0x080050e1
 8005034:	080050e1 	.word	0x080050e1
 8005038:	080050bd 	.word	0x080050bd
 800503c:	080050e1 	.word	0x080050e1
 8005040:	080050e1 	.word	0x080050e1
 8005044:	080050e1 	.word	0x080050e1
 8005048:	080050e1 	.word	0x080050e1
 800504c:	080050e1 	.word	0x080050e1
 8005050:	080050e1 	.word	0x080050e1
 8005054:	080050e1 	.word	0x080050e1
 8005058:	080050cf 	.word	0x080050cf
 800505c:	080050e1 	.word	0x080050e1
 8005060:	080050e1 	.word	0x080050e1
 8005064:	080050e1 	.word	0x080050e1
 8005068:	080050e1 	.word	0x080050e1
 800506c:	080050e1 	.word	0x080050e1
 8005070:	080050e1 	.word	0x080050e1
 8005074:	080050e1 	.word	0x080050e1
 8005078:	080050e7 	.word	0x080050e7
 800507c:	080050e1 	.word	0x080050e1
 8005080:	080050e1 	.word	0x080050e1
 8005084:	080050e1 	.word	0x080050e1
 8005088:	080050e1 	.word	0x080050e1
 800508c:	080050e1 	.word	0x080050e1
 8005090:	080050e1 	.word	0x080050e1
 8005094:	080050e1 	.word	0x080050e1
 8005098:	080050e7 	.word	0x080050e7
 800509c:	080050e1 	.word	0x080050e1
 80050a0:	080050e1 	.word	0x080050e1
 80050a4:	080050e1 	.word	0x080050e1
 80050a8:	080050e1 	.word	0x080050e1
 80050ac:	080050e1 	.word	0x080050e1
 80050b0:	080050e1 	.word	0x080050e1
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050e7 	.word	0x080050e7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	2101      	movs	r1, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fdfa 	bl	8005cbc <RCCEx_PLL2_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80050cc:	e00c      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3324      	adds	r3, #36	; 0x24
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fea3 	bl	8005e20 <RCCEx_PLL3_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80050de:	e003      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
      break;
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80050e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80050ee:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050fc:	491a      	ldr	r1, [pc, #104]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	654b      	str	r3, [r1, #84]	; 0x54
 8005102:	e001      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d03f      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005118:	2b05      	cmp	r3, #5
 800511a:	d821      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005175 	.word	0x08005175
 8005128:	0800513d 	.word	0x0800513d
 800512c:	0800514f 	.word	0x0800514f
 8005130:	08005175 	.word	0x08005175
 8005134:	08005175 	.word	0x08005175
 8005138:	08005175 	.word	0x08005175
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fdba 	bl	8005cbc <RCCEx_PLL2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800514c:	e013      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3324      	adds	r3, #36	; 0x24
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe63 	bl	8005e20 <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800515e:	e00a      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	75fb      	strb	r3, [r7, #23]
      break;
 8005164:	e007      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005166:	bf00      	nop
 8005168:	58024400 	.word	0x58024400
 800516c:	58024800 	.word	0x58024800
 8005170:	00ffffcf 	.word	0x00ffffcf
      break;
 8005174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800517c:	4b9f      	ldr	r3, [pc, #636]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	f023 0207 	bic.w	r2, r3, #7
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005188:	499c      	ldr	r1, [pc, #624]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	654b      	str	r3, [r1, #84]	; 0x54
 800518e:	e001      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d039      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d820      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051f3 	.word	0x080051f3
 80051b4:	080051c9 	.word	0x080051c9
 80051b8:	080051db 	.word	0x080051db
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	2101      	movs	r1, #1
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fd74 	bl	8005cbc <RCCEx_PLL2_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80051d8:	e00c      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3324      	adds	r3, #36	; 0x24
 80051de:	2101      	movs	r1, #1
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fe1d 	bl	8005e20 <RCCEx_PLL3_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80051ea:	e003      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
      break;
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80051f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051fa:	4b80      	ldr	r3, [pc, #512]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	f023 0207 	bic.w	r2, r3, #7
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005208:	497c      	ldr	r1, [pc, #496]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800520a:	4313      	orrs	r3, r2
 800520c:	658b      	str	r3, [r1, #88]	; 0x58
 800520e:	e001      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d04b      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800522a:	d02e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800522c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005230:	d828      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d02a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523c:	d822      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800523e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005242:	d026      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005248:	d81c      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800524a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800524e:	d010      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005254:	d816      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01d      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800525a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800525e:	d111      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fd28 	bl	8005cbc <RCCEx_PLL2_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005270:	e012      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3324      	adds	r3, #36	; 0x24
 8005276:	2102      	movs	r1, #2
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fdd1 	bl	8005e20 <RCCEx_PLL3_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005282:	e009      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	75fb      	strb	r3, [r7, #23]
      break;
 8005288:	e006      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800528a:	bf00      	nop
 800528c:	e004      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800528e:	bf00      	nop
 8005290:	e002      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800529e:	4b57      	ldr	r3, [pc, #348]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ac:	4953      	ldr	r1, [pc, #332]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	654b      	str	r3, [r1, #84]	; 0x54
 80052b2:	e001      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d04b      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052ce:	d02e      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80052d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052d4:	d828      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80052d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052da:	d02a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80052dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e0:	d822      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80052e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052e6:	d026      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80052e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ec:	d81c      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80052ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f2:	d010      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80052f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f8:	d816      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01d      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80052fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005302:	d111      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fcd6 	bl	8005cbc <RCCEx_PLL2_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005314:	e012      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3324      	adds	r3, #36	; 0x24
 800531a:	2102      	movs	r1, #2
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fd7f 	bl	8005e20 <RCCEx_PLL3_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005326:	e009      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	75fb      	strb	r3, [r7, #23]
      break;
 800532c:	e006      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800532e:	bf00      	nop
 8005330:	e004      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800533a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005342:	4b2e      	ldr	r3, [pc, #184]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005350:	492a      	ldr	r1, [pc, #168]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005352:	4313      	orrs	r3, r2
 8005354:	658b      	str	r3, [r1, #88]	; 0x58
 8005356:	e001      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	d04d      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800536e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005372:	d02e      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005374:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005378:	d828      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800537a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537e:	d02a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d822      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005386:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800538a:	d026      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800538c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005390:	d81c      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005396:	d010      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539c:	d816      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01d      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80053a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a6:	d111      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fc84 	bl	8005cbc <RCCEx_PLL2_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053b8:	e012      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3324      	adds	r3, #36	; 0x24
 80053be:	2102      	movs	r1, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fd2d 	bl	8005e20 <RCCEx_PLL3_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053ca:	e009      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	75fb      	strb	r3, [r7, #23]
      break;
 80053d0:	e006      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80053d2:	bf00      	nop
 80053d4:	e004      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80053d6:	bf00      	nop
 80053d8:	e002      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80053da:	bf00      	nop
 80053dc:	e000      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80053de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053f4:	4901      	ldr	r1, [pc, #4]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	658b      	str	r3, [r1, #88]	; 0x58
 80053fa:	e003      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80053fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541a:	d10a      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3324      	adds	r3, #36	; 0x24
 8005420:	2102      	movs	r1, #2
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fcfc 	bl	8005e20 <RCCEx_PLL3_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005432:	4b8c      	ldr	r3, [pc, #560]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	4988      	ldr	r1, [pc, #544]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545c:	d10a      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3324      	adds	r3, #36	; 0x24
 8005462:	2102      	movs	r1, #2
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fcdb 	bl	8005e20 <RCCEx_PLL3_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005474:	4b7b      	ldr	r3, [pc, #492]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005482:	4978      	ldr	r1, [pc, #480]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d034      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800549a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800549e:	d01d      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80054a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a4:	d817      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80054aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ae:	d009      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80054b0:	e011      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fbff 	bl	8005cbc <RCCEx_PLL2_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054c2:	e00c      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3324      	adds	r3, #36	; 0x24
 80054c8:	2102      	movs	r1, #2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fca8 	bl	8005e20 <RCCEx_PLL3_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054d4:	e003      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
      break;
 80054da:	e000      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80054dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054e4:	4b5f      	ldr	r3, [pc, #380]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80054e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054f2:	495c      	ldr	r1, [pc, #368]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	658b      	str	r3, [r1, #88]	; 0x58
 80054f8:	e001      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
 80054fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d033      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005510:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005514:	d01c      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005516:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800551a:	d816      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800551c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005520:	d003      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005526:	d007      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005528:	e00f      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552a:	4b4e      	ldr	r3, [pc, #312]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	4a4d      	ldr	r2, [pc, #308]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005534:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005536:	e00c      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3324      	adds	r3, #36	; 0x24
 800553c:	2101      	movs	r1, #1
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fc6e 	bl	8005e20 <RCCEx_PLL3_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005548:	e003      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	75fb      	strb	r3, [r7, #23]
      break;
 800554e:	e000      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005558:	4b42      	ldr	r3, [pc, #264]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005566:	493f      	ldr	r1, [pc, #252]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005568:	4313      	orrs	r3, r2
 800556a:	654b      	str	r3, [r1, #84]	; 0x54
 800556c:	e001      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d029      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d007      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800558c:	e00f      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800558e:	4b35      	ldr	r3, [pc, #212]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	4a34      	ldr	r2, [pc, #208]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800559a:	e00b      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	2102      	movs	r1, #2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fb8a 	bl	8005cbc <RCCEx_PLL2_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055ac:	e002      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
      break;
 80055b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055ba:	4b2a      	ldr	r3, [pc, #168]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c6:	4927      	ldr	r1, [pc, #156]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055cc:	e001      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3324      	adds	r3, #36	; 0x24
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fc1b 	bl	8005e20 <RCCEx_PLL3_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d035      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800560a:	d017      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800560c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005610:	d811      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005616:	d013      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800561c:	d80b      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d010      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005626:	d106      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800562e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005634:	e007      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
      break;
 800563a:	e004      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800563c:	bf00      	nop
 800563e:	e002      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005646:	7dfb      	ldrb	r3, [r7, #23]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10d      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565a:	4902      	ldr	r1, [pc, #8]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800565c:	4313      	orrs	r3, r2
 800565e:	654b      	str	r3, [r1, #84]	; 0x54
 8005660:	e004      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005678:	4b30      	ldr	r3, [pc, #192]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005684:	492d      	ldr	r1, [pc, #180]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005686:	4313      	orrs	r3, r2
 8005688:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d008      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a2:	4926      	ldr	r1, [pc, #152]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80056b4:	4b21      	ldr	r3, [pc, #132]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c0:	491e      	ldr	r1, [pc, #120]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056d2:	4b1a      	ldr	r3, [pc, #104]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	4a19      	ldr	r2, [pc, #100]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056dc:	6113      	str	r3, [r2, #16]
 80056de:	4b17      	ldr	r3, [pc, #92]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056e8:	4914      	ldr	r1, [pc, #80]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	da08      	bge.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005702:	490e      	ldr	r1, [pc, #56]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005704:	4313      	orrs	r3, r2
 8005706:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	4906      	ldr	r1, [pc, #24]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005724:	4313      	orrs	r3, r2
 8005726:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005728:	7dbb      	ldrb	r3, [r7, #22]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	58024400 	.word	0x58024400

08005740 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005744:	f7ff f894 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b06      	ldr	r3, [pc, #24]	; (8005764 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4904      	ldr	r1, [pc, #16]	; (8005768 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	58024400 	.word	0x58024400
 8005768:	0800aa88 	.word	0x0800aa88

0800576c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800576c:	b480      	push	{r7}
 800576e:	b089      	sub	sp, #36	; 0x24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005774:	4ba1      	ldr	r3, [pc, #644]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800577e:	4b9f      	ldr	r3, [pc, #636]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	0b1b      	lsrs	r3, r3, #12
 8005784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005788:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800578a:	4b9c      	ldr	r3, [pc, #624]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	091b      	lsrs	r3, r3, #4
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005796:	4b99      	ldr	r3, [pc, #612]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	08db      	lsrs	r3, r3, #3
 800579c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 8111 	beq.w	80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	f000 8083 	beq.w	80058c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	f200 80a1 	bhi.w	800590c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d056      	beq.n	8005884 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80057d6:	e099      	b.n	800590c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d8:	4b88      	ldr	r3, [pc, #544]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d02d      	beq.n	8005840 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057e4:	4b85      	ldr	r3, [pc, #532]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	08db      	lsrs	r3, r3, #3
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	4a84      	ldr	r2, [pc, #528]	; (8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80057f0:	fa22 f303 	lsr.w	r3, r2, r3
 80057f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b7b      	ldr	r3, [pc, #492]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005822:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800583e:	e087      	b.n	8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b6a      	ldr	r3, [pc, #424]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a03 	vldr	s12, [r7, #12]
 8005866:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005882:	e065      	b.n	8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005896:	4b59      	ldr	r3, [pc, #356]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058c6:	e043      	b.n	8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80058d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058da:	4b48      	ldr	r3, [pc, #288]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800590a:	e021      	b.n	8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005916:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800591a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591e:	4b37      	ldr	r3, [pc, #220]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005932:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800594e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005950:	4b2a      	ldr	r3, [pc, #168]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	0a5b      	lsrs	r3, r3, #9
 8005956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005966:	ee37 7a87 	vadd.f32	s14, s15, s14
 800596a:	edd7 6a07 	vldr	s13, [r7, #28]
 800596e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005976:	ee17 2a90 	vmov	r2, s15
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800597e:	4b1f      	ldr	r3, [pc, #124]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	0c1b      	lsrs	r3, r3, #16
 8005984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005988:	ee07 3a90 	vmov	s15, r3
 800598c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005998:	edd7 6a07 	vldr	s13, [r7, #28]
 800599c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059a4:	ee17 2a90 	vmov	r2, s15
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80059ac:	4b13      	ldr	r3, [pc, #76]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	0e1b      	lsrs	r3, r3, #24
 80059b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059d2:	ee17 2a90 	vmov	r2, s15
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80059da:	e008      	b.n	80059ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	609a      	str	r2, [r3, #8]
}
 80059ee:	bf00      	nop
 80059f0:	3724      	adds	r7, #36	; 0x24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	58024400 	.word	0x58024400
 8005a00:	03d09000 	.word	0x03d09000
 8005a04:	46000000 	.word	0x46000000
 8005a08:	4c742400 	.word	0x4c742400
 8005a0c:	4a742400 	.word	0x4a742400
 8005a10:	4af42400 	.word	0x4af42400

08005a14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b089      	sub	sp, #36	; 0x24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a1c:	4ba1      	ldr	r3, [pc, #644]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005a26:	4b9f      	ldr	r3, [pc, #636]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	0d1b      	lsrs	r3, r3, #20
 8005a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a32:	4b9c      	ldr	r3, [pc, #624]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	0a1b      	lsrs	r3, r3, #8
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005a3e:	4b99      	ldr	r3, [pc, #612]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	08db      	lsrs	r3, r3, #3
 8005a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8111 	beq.w	8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	f000 8083 	beq.w	8005b70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	f200 80a1 	bhi.w	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d056      	beq.n	8005b2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a7e:	e099      	b.n	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a80:	4b88      	ldr	r3, [pc, #544]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d02d      	beq.n	8005ae8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a8c:	4b85      	ldr	r3, [pc, #532]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	08db      	lsrs	r3, r3, #3
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	4a84      	ldr	r2, [pc, #528]	; (8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	ee07 3a90 	vmov	s15, r3
 8005aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	4b7b      	ldr	r3, [pc, #492]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ae6:	e087      	b.n	8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afa:	4b6a      	ldr	r3, [pc, #424]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b2a:	e065      	b.n	8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3e:	4b59      	ldr	r3, [pc, #356]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b6e:	e043      	b.n	8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b82:	4b48      	ldr	r3, [pc, #288]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bb2:	e021      	b.n	8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc6:	4b37      	ldr	r3, [pc, #220]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005bf8:	4b2a      	ldr	r3, [pc, #168]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	0a5b      	lsrs	r3, r3, #9
 8005bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c1e:	ee17 2a90 	vmov	r2, s15
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005c26:	4b1f      	ldr	r3, [pc, #124]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c30:	ee07 3a90 	vmov	s15, r3
 8005c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4c:	ee17 2a90 	vmov	r2, s15
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005c54:	4b13      	ldr	r3, [pc, #76]	; (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	0e1b      	lsrs	r3, r3, #24
 8005c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7a:	ee17 2a90 	vmov	r2, s15
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c82:	e008      	b.n	8005c96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	609a      	str	r2, [r3, #8]
}
 8005c96:	bf00      	nop
 8005c98:	3724      	adds	r7, #36	; 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	58024400 	.word	0x58024400
 8005ca8:	03d09000 	.word	0x03d09000
 8005cac:	46000000 	.word	0x46000000
 8005cb0:	4c742400 	.word	0x4c742400
 8005cb4:	4a742400 	.word	0x4a742400
 8005cb8:	4af42400 	.word	0x4af42400

08005cbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cca:	4b53      	ldr	r3, [pc, #332]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d101      	bne.n	8005cda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e099      	b.n	8005e0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005cda:	4b4f      	ldr	r3, [pc, #316]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a4e      	ldr	r2, [pc, #312]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005ce0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce6:	f7fb ffcb 	bl	8001c80 <HAL_GetTick>
 8005cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cec:	e008      	b.n	8005d00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005cee:	f7fb ffc7 	bl	8001c80 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e086      	b.n	8005e0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d00:	4b45      	ldr	r3, [pc, #276]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f0      	bne.n	8005cee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d0c:	4b42      	ldr	r3, [pc, #264]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	031b      	lsls	r3, r3, #12
 8005d1a:	493f      	ldr	r1, [pc, #252]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	025b      	lsls	r3, r3, #9
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	061b      	lsls	r3, r3, #24
 8005d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d50:	4931      	ldr	r1, [pc, #196]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d56:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	492d      	ldr	r1, [pc, #180]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d68:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	f023 0220 	bic.w	r2, r3, #32
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	4928      	ldr	r1, [pc, #160]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d7a:	4b27      	ldr	r3, [pc, #156]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d80:	f023 0310 	bic.w	r3, r3, #16
 8005d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d86:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d8a:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <RCCEx_PLL2_Config+0x160>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	69d2      	ldr	r2, [r2, #28]
 8005d92:	00d2      	lsls	r2, r2, #3
 8005d94:	4920      	ldr	r1, [pc, #128]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d9a:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	4a1e      	ldr	r2, [pc, #120]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005da0:	f043 0310 	orr.w	r3, r3, #16
 8005da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005dac:	4b1a      	ldr	r3, [pc, #104]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005db2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005db6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005db8:	e00f      	b.n	8005dda <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d106      	bne.n	8005dce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005dc0:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005dcc:	e005      	b.n	8005dda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005dce:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	4a11      	ldr	r2, [pc, #68]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a0e      	ldr	r2, [pc, #56]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005de0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de6:	f7fb ff4b 	bl	8001c80 <HAL_GetTick>
 8005dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dec:	e008      	b.n	8005e00 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dee:	f7fb ff47 	bl	8001c80 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e006      	b.n	8005e0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <RCCEx_PLL2_Config+0x15c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	58024400 	.word	0x58024400
 8005e1c:	ffff0007 	.word	0xffff0007

08005e20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e2e:	4b53      	ldr	r3, [pc, #332]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d101      	bne.n	8005e3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e099      	b.n	8005f72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e3e:	4b4f      	ldr	r3, [pc, #316]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a4e      	ldr	r2, [pc, #312]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4a:	f7fb ff19 	bl	8001c80 <HAL_GetTick>
 8005e4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e50:	e008      	b.n	8005e64 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e52:	f7fb ff15 	bl	8001c80 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e086      	b.n	8005f72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e64:	4b45      	ldr	r3, [pc, #276]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1f0      	bne.n	8005e52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e70:	4b42      	ldr	r3, [pc, #264]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	051b      	lsls	r3, r3, #20
 8005e7e:	493f      	ldr	r1, [pc, #252]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	628b      	str	r3, [r1, #40]	; 0x28
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	025b      	lsls	r3, r3, #9
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	061b      	lsls	r3, r3, #24
 8005eb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005eb4:	4931      	ldr	r1, [pc, #196]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005eba:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	492d      	ldr	r1, [pc, #180]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	4928      	ldr	r1, [pc, #160]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ede:	4b27      	ldr	r3, [pc, #156]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	4a26      	ldr	r2, [pc, #152]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005eea:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eee:	4b24      	ldr	r3, [pc, #144]	; (8005f80 <RCCEx_PLL3_Config+0x160>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	69d2      	ldr	r2, [r2, #28]
 8005ef6:	00d2      	lsls	r2, r2, #3
 8005ef8:	4920      	ldr	r1, [pc, #128]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005efe:	4b1f      	ldr	r3, [pc, #124]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005f10:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	4a19      	ldr	r2, [pc, #100]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f1c:	e00f      	b.n	8005f3e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d106      	bne.n	8005f32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005f24:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	4a14      	ldr	r2, [pc, #80]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f30:	e005      	b.n	8005f3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f32:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f4a:	f7fb fe99 	bl	8001c80 <HAL_GetTick>
 8005f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f50:	e008      	b.n	8005f64 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f52:	f7fb fe95 	bl	8001c80 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e006      	b.n	8005f72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <RCCEx_PLL3_Config+0x15c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	ffff0007 	.word	0xffff0007

08005f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e042      	b.n	800601c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d106      	bne.n	8005fae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fb fbd9 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2224      	movs	r2, #36	; 0x24
 8005fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fc80 	bl	80068cc <UART_SetConfig>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e022      	b.n	800601c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f001 fae0 	bl	80075a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 fb67 	bl	80076e8 <UART_CheckIdleState>
 800601a:	4603      	mov	r3, r0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	; 0x28
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800603a:	2b20      	cmp	r3, #32
 800603c:	f040 8083 	bne.w	8006146 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_UART_Transmit+0x28>
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e07b      	b.n	8006148 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_UART_Transmit+0x3a>
 800605a:	2302      	movs	r3, #2
 800605c:	e074      	b.n	8006148 <HAL_UART_Transmit+0x124>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2221      	movs	r2, #33	; 0x21
 8006072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006076:	f7fb fe03 	bl	8001c80 <HAL_GetTick>
 800607a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	88fa      	ldrh	r2, [r7, #6]
 8006080:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	88fa      	ldrh	r2, [r7, #6]
 8006088:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006094:	d108      	bne.n	80060a8 <HAL_UART_Transmit+0x84>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	e003      	b.n	80060b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80060b8:	e02c      	b.n	8006114 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2200      	movs	r2, #0
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f001 fb5a 	bl	800777e <UART_WaitOnFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e039      	b.n	8006148 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10b      	bne.n	80060f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	3302      	adds	r3, #2
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	e007      	b.n	8006102 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	781a      	ldrb	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	3301      	adds	r3, #1
 8006100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1cc      	bne.n	80060ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2200      	movs	r2, #0
 8006128:	2140      	movs	r1, #64	; 0x40
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 fb27 	bl	800777e <UART_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e006      	b.n	8006148 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	e000      	b.n	8006148 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006146:	2302      	movs	r3, #2
  }
}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b0ba      	sub	sp, #232	; 0xe8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006176:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800617a:	f640 030f 	movw	r3, #2063	; 0x80f
 800617e:	4013      	ands	r3, r2
 8006180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d11b      	bne.n	80061c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800618c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d015      	beq.n	80061c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 835a 	beq.w	800686e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
      }
      return;
 80061c2:	e354      	b.n	800686e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 811f 	beq.w	800640c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80061ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80061d2:	4b8b      	ldr	r3, [pc, #556]	; (8006400 <HAL_UART_IRQHandler+0x2b0>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061de:	4b89      	ldr	r3, [pc, #548]	; (8006404 <HAL_UART_IRQHandler+0x2b4>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 8112 	beq.w	800640c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d011      	beq.n	8006218 <HAL_UART_IRQHandler+0xc8>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2201      	movs	r2, #1
 8006206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800620e:	f043 0201 	orr.w	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d011      	beq.n	8006248 <HAL_UART_IRQHandler+0xf8>
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2202      	movs	r2, #2
 8006236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800623e:	f043 0204 	orr.w	r2, r3, #4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d011      	beq.n	8006278 <HAL_UART_IRQHandler+0x128>
 8006254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2204      	movs	r2, #4
 8006266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800626e:	f043 0202 	orr.w	r2, r3, #2
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d017      	beq.n	80062b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006290:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006294:	4b5a      	ldr	r3, [pc, #360]	; (8006400 <HAL_UART_IRQHandler+0x2b0>)
 8006296:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2208      	movs	r2, #8
 80062a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062aa:	f043 0208 	orr.w	r2, r3, #8
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d012      	beq.n	80062e6 <HAL_UART_IRQHandler+0x196>
 80062c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00c      	beq.n	80062e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 82c0 	beq.w	8006872 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d013      	beq.n	8006326 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800630a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800632c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633a:	2b40      	cmp	r3, #64	; 0x40
 800633c:	d005      	beq.n	800634a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800633e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006342:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006346:	2b00      	cmp	r3, #0
 8006348:	d04f      	beq.n	80063ea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 fae0 	bl	8007910 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d141      	bne.n	80063e2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3308      	adds	r3, #8
 8006386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800638a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800638e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1d9      	bne.n	800635e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b6:	4a14      	ldr	r2, [pc, #80]	; (8006408 <HAL_UART_IRQHandler+0x2b8>)
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fc f8bc 	bl	800253c <HAL_DMA_Abort_IT>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d017      	beq.n	80063fa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80063d4:	4610      	mov	r0, r2
 80063d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	e00f      	b.n	80063fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa60 	bl	80068a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	e00b      	b.n	80063fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa5c 	bl	80068a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	e007      	b.n	80063fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa58 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80063f8:	e23b      	b.n	8006872 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fa:	bf00      	nop
    return;
 80063fc:	e239      	b.n	8006872 <HAL_UART_IRQHandler+0x722>
 80063fe:	bf00      	nop
 8006400:	10000001 	.word	0x10000001
 8006404:	04000120 	.word	0x04000120
 8006408:	080079dd 	.word	0x080079dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006410:	2b01      	cmp	r3, #1
 8006412:	f040 81ce 	bne.w	80067b2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 81c7 	beq.w	80067b2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 81c0 	beq.w	80067b2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2210      	movs	r2, #16
 8006438:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006444:	2b40      	cmp	r3, #64	; 0x40
 8006446:	f040 813b 	bne.w	80066c0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a8b      	ldr	r2, [pc, #556]	; (8006680 <HAL_UART_IRQHandler+0x530>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d059      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a89      	ldr	r2, [pc, #548]	; (8006684 <HAL_UART_IRQHandler+0x534>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d053      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a87      	ldr	r2, [pc, #540]	; (8006688 <HAL_UART_IRQHandler+0x538>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d04d      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a85      	ldr	r2, [pc, #532]	; (800668c <HAL_UART_IRQHandler+0x53c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d047      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a83      	ldr	r2, [pc, #524]	; (8006690 <HAL_UART_IRQHandler+0x540>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d041      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a81      	ldr	r2, [pc, #516]	; (8006694 <HAL_UART_IRQHandler+0x544>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d03b      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a7f      	ldr	r2, [pc, #508]	; (8006698 <HAL_UART_IRQHandler+0x548>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d035      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a7d      	ldr	r2, [pc, #500]	; (800669c <HAL_UART_IRQHandler+0x54c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d02f      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a7b      	ldr	r2, [pc, #492]	; (80066a0 <HAL_UART_IRQHandler+0x550>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d029      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a79      	ldr	r2, [pc, #484]	; (80066a4 <HAL_UART_IRQHandler+0x554>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d023      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a77      	ldr	r2, [pc, #476]	; (80066a8 <HAL_UART_IRQHandler+0x558>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01d      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a75      	ldr	r2, [pc, #468]	; (80066ac <HAL_UART_IRQHandler+0x55c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d017      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a73      	ldr	r2, [pc, #460]	; (80066b0 <HAL_UART_IRQHandler+0x560>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d011      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a71      	ldr	r2, [pc, #452]	; (80066b4 <HAL_UART_IRQHandler+0x564>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00b      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a6f      	ldr	r2, [pc, #444]	; (80066b8 <HAL_UART_IRQHandler+0x568>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d005      	beq.n	800650a <HAL_UART_IRQHandler+0x3ba>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a6d      	ldr	r2, [pc, #436]	; (80066bc <HAL_UART_IRQHandler+0x56c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d105      	bne.n	8006516 <HAL_UART_IRQHandler+0x3c6>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	b29b      	uxth	r3, r3
 8006514:	e004      	b.n	8006520 <HAL_UART_IRQHandler+0x3d0>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 81a4 	beq.w	8006876 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006534:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006538:	429a      	cmp	r2, r3
 800653a:	f080 819c 	bcs.w	8006876 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006544:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006552:	f000 8086 	beq.w	8006662 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800656a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800656e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006572:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006584:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800658c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1da      	bne.n	8006556 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3308      	adds	r3, #8
 80065a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e1      	bne.n	80065a0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3308      	adds	r3, #8
 80065e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006600:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006602:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006606:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800660e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e3      	bne.n	80065dc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006632:	f023 0310 	bic.w	r3, r3, #16
 8006636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006644:	65bb      	str	r3, [r7, #88]	; 0x58
 8006646:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800664a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e4      	bne.n	8006622 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800665c:	4618      	mov	r0, r3
 800665e:	f7fb fc4f 	bl	8001f00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800666e:	b29b      	uxth	r3, r3
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	b29b      	uxth	r3, r3
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f91c 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800667c:	e0fb      	b.n	8006876 <HAL_UART_IRQHandler+0x726>
 800667e:	bf00      	nop
 8006680:	40020010 	.word	0x40020010
 8006684:	40020028 	.word	0x40020028
 8006688:	40020040 	.word	0x40020040
 800668c:	40020058 	.word	0x40020058
 8006690:	40020070 	.word	0x40020070
 8006694:	40020088 	.word	0x40020088
 8006698:	400200a0 	.word	0x400200a0
 800669c:	400200b8 	.word	0x400200b8
 80066a0:	40020410 	.word	0x40020410
 80066a4:	40020428 	.word	0x40020428
 80066a8:	40020440 	.word	0x40020440
 80066ac:	40020458 	.word	0x40020458
 80066b0:	40020470 	.word	0x40020470
 80066b4:	40020488 	.word	0x40020488
 80066b8:	400204a0 	.word	0x400204a0
 80066bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80cc 	beq.w	800687a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80066e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80c7 	beq.w	800687a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800670e:	647b      	str	r3, [r7, #68]	; 0x44
 8006710:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800671c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e4      	bne.n	80066ec <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3308      	adds	r3, #8
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	623b      	str	r3, [r7, #32]
   return(result);
 8006732:	6a3a      	ldr	r2, [r7, #32]
 8006734:	4b54      	ldr	r3, [pc, #336]	; (8006888 <HAL_UART_IRQHandler+0x738>)
 8006736:	4013      	ands	r3, r2
 8006738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006746:	633a      	str	r2, [r7, #48]	; 0x30
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800674c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e3      	bne.n	8006722 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	60fb      	str	r3, [r7, #12]
   return(result);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0310 	bic.w	r3, r3, #16
 8006782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	69b9      	ldr	r1, [r7, #24]
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	617b      	str	r3, [r7, #20]
   return(result);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e4      	bne.n	800676e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f882 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067b0:	e063      	b.n	800687a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00e      	beq.n	80067dc <HAL_UART_IRQHandler+0x68c>
 80067be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 f942 	bl	8007a5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067da:	e051      	b.n	8006880 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d014      	beq.n	8006812 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006804:	2b00      	cmp	r3, #0
 8006806:	d03a      	beq.n	800687e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
    }
    return;
 8006810:	e035      	b.n	800687e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <HAL_UART_IRQHandler+0x6e2>
 800681e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 f8ec 	bl	8007a08 <UART_EndTransmit_IT>
    return;
 8006830:	e026      	b.n	8006880 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <HAL_UART_IRQHandler+0x702>
 800683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006842:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 f91b 	bl	8007a86 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006850:	e016      	b.n	8006880 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d010      	beq.n	8006880 <HAL_UART_IRQHandler+0x730>
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006862:	2b00      	cmp	r3, #0
 8006864:	da0c      	bge.n	8006880 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 f903 	bl	8007a72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800686c:	e008      	b.n	8006880 <HAL_UART_IRQHandler+0x730>
      return;
 800686e:	bf00      	nop
 8006870:	e006      	b.n	8006880 <HAL_UART_IRQHandler+0x730>
    return;
 8006872:	bf00      	nop
 8006874:	e004      	b.n	8006880 <HAL_UART_IRQHandler+0x730>
      return;
 8006876:	bf00      	nop
 8006878:	e002      	b.n	8006880 <HAL_UART_IRQHandler+0x730>
      return;
 800687a:	bf00      	nop
 800687c:	e000      	b.n	8006880 <HAL_UART_IRQHandler+0x730>
    return;
 800687e:	bf00      	nop
  }
}
 8006880:	37e8      	adds	r7, #232	; 0xe8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	effffffe 	.word	0xeffffffe

0800688c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068d0:	b092      	sub	sp, #72	; 0x48
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	431a      	orrs	r2, r3
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4bbe      	ldr	r3, [pc, #760]	; (8006bf4 <UART_SetConfig+0x328>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	6812      	ldr	r2, [r2, #0]
 8006902:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006904:	430b      	orrs	r3, r1
 8006906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4ab3      	ldr	r2, [pc, #716]	; (8006bf8 <UART_SetConfig+0x32c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d004      	beq.n	8006938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006934:	4313      	orrs	r3, r2
 8006936:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	4baf      	ldr	r3, [pc, #700]	; (8006bfc <UART_SetConfig+0x330>)
 8006940:	4013      	ands	r3, r2
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006948:	430b      	orrs	r3, r1
 800694a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	f023 010f 	bic.w	r1, r3, #15
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4aa6      	ldr	r2, [pc, #664]	; (8006c00 <UART_SetConfig+0x334>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d177      	bne.n	8006a5c <UART_SetConfig+0x190>
 800696c:	4ba5      	ldr	r3, [pc, #660]	; (8006c04 <UART_SetConfig+0x338>)
 800696e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006974:	2b28      	cmp	r3, #40	; 0x28
 8006976:	d86d      	bhi.n	8006a54 <UART_SetConfig+0x188>
 8006978:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0xb4>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	08006a25 	.word	0x08006a25
 8006984:	08006a55 	.word	0x08006a55
 8006988:	08006a55 	.word	0x08006a55
 800698c:	08006a55 	.word	0x08006a55
 8006990:	08006a55 	.word	0x08006a55
 8006994:	08006a55 	.word	0x08006a55
 8006998:	08006a55 	.word	0x08006a55
 800699c:	08006a55 	.word	0x08006a55
 80069a0:	08006a2d 	.word	0x08006a2d
 80069a4:	08006a55 	.word	0x08006a55
 80069a8:	08006a55 	.word	0x08006a55
 80069ac:	08006a55 	.word	0x08006a55
 80069b0:	08006a55 	.word	0x08006a55
 80069b4:	08006a55 	.word	0x08006a55
 80069b8:	08006a55 	.word	0x08006a55
 80069bc:	08006a55 	.word	0x08006a55
 80069c0:	08006a35 	.word	0x08006a35
 80069c4:	08006a55 	.word	0x08006a55
 80069c8:	08006a55 	.word	0x08006a55
 80069cc:	08006a55 	.word	0x08006a55
 80069d0:	08006a55 	.word	0x08006a55
 80069d4:	08006a55 	.word	0x08006a55
 80069d8:	08006a55 	.word	0x08006a55
 80069dc:	08006a55 	.word	0x08006a55
 80069e0:	08006a3d 	.word	0x08006a3d
 80069e4:	08006a55 	.word	0x08006a55
 80069e8:	08006a55 	.word	0x08006a55
 80069ec:	08006a55 	.word	0x08006a55
 80069f0:	08006a55 	.word	0x08006a55
 80069f4:	08006a55 	.word	0x08006a55
 80069f8:	08006a55 	.word	0x08006a55
 80069fc:	08006a55 	.word	0x08006a55
 8006a00:	08006a45 	.word	0x08006a45
 8006a04:	08006a55 	.word	0x08006a55
 8006a08:	08006a55 	.word	0x08006a55
 8006a0c:	08006a55 	.word	0x08006a55
 8006a10:	08006a55 	.word	0x08006a55
 8006a14:	08006a55 	.word	0x08006a55
 8006a18:	08006a55 	.word	0x08006a55
 8006a1c:	08006a55 	.word	0x08006a55
 8006a20:	08006a4d 	.word	0x08006a4d
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2a:	e326      	b.n	800707a <UART_SetConfig+0x7ae>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a32:	e322      	b.n	800707a <UART_SetConfig+0x7ae>
 8006a34:	2308      	movs	r3, #8
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3a:	e31e      	b.n	800707a <UART_SetConfig+0x7ae>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a42:	e31a      	b.n	800707a <UART_SetConfig+0x7ae>
 8006a44:	2320      	movs	r3, #32
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4a:	e316      	b.n	800707a <UART_SetConfig+0x7ae>
 8006a4c:	2340      	movs	r3, #64	; 0x40
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a52:	e312      	b.n	800707a <UART_SetConfig+0x7ae>
 8006a54:	2380      	movs	r3, #128	; 0x80
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5a:	e30e      	b.n	800707a <UART_SetConfig+0x7ae>
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a69      	ldr	r2, [pc, #420]	; (8006c08 <UART_SetConfig+0x33c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d130      	bne.n	8006ac8 <UART_SetConfig+0x1fc>
 8006a66:	4b67      	ldr	r3, [pc, #412]	; (8006c04 <UART_SetConfig+0x338>)
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	2b05      	cmp	r3, #5
 8006a70:	d826      	bhi.n	8006ac0 <UART_SetConfig+0x1f4>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0x1ac>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006a91 	.word	0x08006a91
 8006a7c:	08006a99 	.word	0x08006a99
 8006a80:	08006aa1 	.word	0x08006aa1
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a96:	e2f0      	b.n	800707a <UART_SetConfig+0x7ae>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9e:	e2ec      	b.n	800707a <UART_SetConfig+0x7ae>
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e2e8      	b.n	800707a <UART_SetConfig+0x7ae>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e2e4      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab6:	e2e0      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006abe:	e2dc      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac6:	e2d8      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a4f      	ldr	r2, [pc, #316]	; (8006c0c <UART_SetConfig+0x340>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d130      	bne.n	8006b34 <UART_SetConfig+0x268>
 8006ad2:	4b4c      	ldr	r3, [pc, #304]	; (8006c04 <UART_SetConfig+0x338>)
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d826      	bhi.n	8006b2c <UART_SetConfig+0x260>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0x218>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006afd 	.word	0x08006afd
 8006ae8:	08006b05 	.word	0x08006b05
 8006aec:	08006b0d 	.word	0x08006b0d
 8006af0:	08006b15 	.word	0x08006b15
 8006af4:	08006b1d 	.word	0x08006b1d
 8006af8:	08006b25 	.word	0x08006b25
 8006afc:	2300      	movs	r3, #0
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e2ba      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b04:	2304      	movs	r3, #4
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e2b6      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b0c:	2308      	movs	r3, #8
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e2b2      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b14:	2310      	movs	r3, #16
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e2ae      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b1c:	2320      	movs	r3, #32
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e2aa      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b24:	2340      	movs	r3, #64	; 0x40
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2a:	e2a6      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b32:	e2a2      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a35      	ldr	r2, [pc, #212]	; (8006c10 <UART_SetConfig+0x344>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d130      	bne.n	8006ba0 <UART_SetConfig+0x2d4>
 8006b3e:	4b31      	ldr	r3, [pc, #196]	; (8006c04 <UART_SetConfig+0x338>)
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	d826      	bhi.n	8006b98 <UART_SetConfig+0x2cc>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0x284>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b69 	.word	0x08006b69
 8006b54:	08006b71 	.word	0x08006b71
 8006b58:	08006b79 	.word	0x08006b79
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b89 	.word	0x08006b89
 8006b64:	08006b91 	.word	0x08006b91
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e284      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b70:	2304      	movs	r3, #4
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e280      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b78:	2308      	movs	r3, #8
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e27c      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b80:	2310      	movs	r3, #16
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e278      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b88:	2320      	movs	r3, #32
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e274      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b90:	2340      	movs	r3, #64	; 0x40
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b96:	e270      	b.n	800707a <UART_SetConfig+0x7ae>
 8006b98:	2380      	movs	r3, #128	; 0x80
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9e:	e26c      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1b      	ldr	r2, [pc, #108]	; (8006c14 <UART_SetConfig+0x348>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d142      	bne.n	8006c30 <UART_SetConfig+0x364>
 8006baa:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <UART_SetConfig+0x338>)
 8006bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b05      	cmp	r3, #5
 8006bb4:	d838      	bhi.n	8006c28 <UART_SetConfig+0x35c>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x2f0>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bd5 	.word	0x08006bd5
 8006bc0:	08006bdd 	.word	0x08006bdd
 8006bc4:	08006be5 	.word	0x08006be5
 8006bc8:	08006bed 	.word	0x08006bed
 8006bcc:	08006c19 	.word	0x08006c19
 8006bd0:	08006c21 	.word	0x08006c21
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bda:	e24e      	b.n	800707a <UART_SetConfig+0x7ae>
 8006bdc:	2304      	movs	r3, #4
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be2:	e24a      	b.n	800707a <UART_SetConfig+0x7ae>
 8006be4:	2308      	movs	r3, #8
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bea:	e246      	b.n	800707a <UART_SetConfig+0x7ae>
 8006bec:	2310      	movs	r3, #16
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e242      	b.n	800707a <UART_SetConfig+0x7ae>
 8006bf4:	cfff69f3 	.word	0xcfff69f3
 8006bf8:	58000c00 	.word	0x58000c00
 8006bfc:	11fff4ff 	.word	0x11fff4ff
 8006c00:	40011000 	.word	0x40011000
 8006c04:	58024400 	.word	0x58024400
 8006c08:	40004400 	.word	0x40004400
 8006c0c:	40004800 	.word	0x40004800
 8006c10:	40004c00 	.word	0x40004c00
 8006c14:	40005000 	.word	0x40005000
 8006c18:	2320      	movs	r3, #32
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1e:	e22c      	b.n	800707a <UART_SetConfig+0x7ae>
 8006c20:	2340      	movs	r3, #64	; 0x40
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c26:	e228      	b.n	800707a <UART_SetConfig+0x7ae>
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2e:	e224      	b.n	800707a <UART_SetConfig+0x7ae>
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4ab1      	ldr	r2, [pc, #708]	; (8006efc <UART_SetConfig+0x630>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d176      	bne.n	8006d28 <UART_SetConfig+0x45c>
 8006c3a:	4bb1      	ldr	r3, [pc, #708]	; (8006f00 <UART_SetConfig+0x634>)
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c42:	2b28      	cmp	r3, #40	; 0x28
 8006c44:	d86c      	bhi.n	8006d20 <UART_SetConfig+0x454>
 8006c46:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <UART_SetConfig+0x380>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006cf1 	.word	0x08006cf1
 8006c50:	08006d21 	.word	0x08006d21
 8006c54:	08006d21 	.word	0x08006d21
 8006c58:	08006d21 	.word	0x08006d21
 8006c5c:	08006d21 	.word	0x08006d21
 8006c60:	08006d21 	.word	0x08006d21
 8006c64:	08006d21 	.word	0x08006d21
 8006c68:	08006d21 	.word	0x08006d21
 8006c6c:	08006cf9 	.word	0x08006cf9
 8006c70:	08006d21 	.word	0x08006d21
 8006c74:	08006d21 	.word	0x08006d21
 8006c78:	08006d21 	.word	0x08006d21
 8006c7c:	08006d21 	.word	0x08006d21
 8006c80:	08006d21 	.word	0x08006d21
 8006c84:	08006d21 	.word	0x08006d21
 8006c88:	08006d21 	.word	0x08006d21
 8006c8c:	08006d01 	.word	0x08006d01
 8006c90:	08006d21 	.word	0x08006d21
 8006c94:	08006d21 	.word	0x08006d21
 8006c98:	08006d21 	.word	0x08006d21
 8006c9c:	08006d21 	.word	0x08006d21
 8006ca0:	08006d21 	.word	0x08006d21
 8006ca4:	08006d21 	.word	0x08006d21
 8006ca8:	08006d21 	.word	0x08006d21
 8006cac:	08006d09 	.word	0x08006d09
 8006cb0:	08006d21 	.word	0x08006d21
 8006cb4:	08006d21 	.word	0x08006d21
 8006cb8:	08006d21 	.word	0x08006d21
 8006cbc:	08006d21 	.word	0x08006d21
 8006cc0:	08006d21 	.word	0x08006d21
 8006cc4:	08006d21 	.word	0x08006d21
 8006cc8:	08006d21 	.word	0x08006d21
 8006ccc:	08006d11 	.word	0x08006d11
 8006cd0:	08006d21 	.word	0x08006d21
 8006cd4:	08006d21 	.word	0x08006d21
 8006cd8:	08006d21 	.word	0x08006d21
 8006cdc:	08006d21 	.word	0x08006d21
 8006ce0:	08006d21 	.word	0x08006d21
 8006ce4:	08006d21 	.word	0x08006d21
 8006ce8:	08006d21 	.word	0x08006d21
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf6:	e1c0      	b.n	800707a <UART_SetConfig+0x7ae>
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfe:	e1bc      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d00:	2308      	movs	r3, #8
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d06:	e1b8      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0e:	e1b4      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d10:	2320      	movs	r3, #32
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e1b0      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1e:	e1ac      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d20:	2380      	movs	r3, #128	; 0x80
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d26:	e1a8      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a75      	ldr	r2, [pc, #468]	; (8006f04 <UART_SetConfig+0x638>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d130      	bne.n	8006d94 <UART_SetConfig+0x4c8>
 8006d32:	4b73      	ldr	r3, [pc, #460]	; (8006f00 <UART_SetConfig+0x634>)
 8006d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	d826      	bhi.n	8006d8c <UART_SetConfig+0x4c0>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0x478>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d5d 	.word	0x08006d5d
 8006d48:	08006d65 	.word	0x08006d65
 8006d4c:	08006d6d 	.word	0x08006d6d
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d62:	e18a      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d64:	2304      	movs	r3, #4
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6a:	e186      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d72:	e182      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d74:	2310      	movs	r3, #16
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7a:	e17e      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d7c:	2320      	movs	r3, #32
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d82:	e17a      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8a:	e176      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d92:	e172      	b.n	800707a <UART_SetConfig+0x7ae>
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a5b      	ldr	r2, [pc, #364]	; (8006f08 <UART_SetConfig+0x63c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d130      	bne.n	8006e00 <UART_SetConfig+0x534>
 8006d9e:	4b58      	ldr	r3, [pc, #352]	; (8006f00 <UART_SetConfig+0x634>)
 8006da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d826      	bhi.n	8006df8 <UART_SetConfig+0x52c>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x4e4>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dc9 	.word	0x08006dc9
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	08006dd9 	.word	0x08006dd9
 8006dbc:	08006de1 	.word	0x08006de1
 8006dc0:	08006de9 	.word	0x08006de9
 8006dc4:	08006df1 	.word	0x08006df1
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dce:	e154      	b.n	800707a <UART_SetConfig+0x7ae>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd6:	e150      	b.n	800707a <UART_SetConfig+0x7ae>
 8006dd8:	2308      	movs	r3, #8
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e14c      	b.n	800707a <UART_SetConfig+0x7ae>
 8006de0:	2310      	movs	r3, #16
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de6:	e148      	b.n	800707a <UART_SetConfig+0x7ae>
 8006de8:	2320      	movs	r3, #32
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e144      	b.n	800707a <UART_SetConfig+0x7ae>
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df6:	e140      	b.n	800707a <UART_SetConfig+0x7ae>
 8006df8:	2380      	movs	r3, #128	; 0x80
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfe:	e13c      	b.n	800707a <UART_SetConfig+0x7ae>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a41      	ldr	r2, [pc, #260]	; (8006f0c <UART_SetConfig+0x640>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	f040 8082 	bne.w	8006f10 <UART_SetConfig+0x644>
 8006e0c:	4b3c      	ldr	r3, [pc, #240]	; (8006f00 <UART_SetConfig+0x634>)
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e14:	2b28      	cmp	r3, #40	; 0x28
 8006e16:	d86d      	bhi.n	8006ef4 <UART_SetConfig+0x628>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0x554>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006ec5 	.word	0x08006ec5
 8006e24:	08006ef5 	.word	0x08006ef5
 8006e28:	08006ef5 	.word	0x08006ef5
 8006e2c:	08006ef5 	.word	0x08006ef5
 8006e30:	08006ef5 	.word	0x08006ef5
 8006e34:	08006ef5 	.word	0x08006ef5
 8006e38:	08006ef5 	.word	0x08006ef5
 8006e3c:	08006ef5 	.word	0x08006ef5
 8006e40:	08006ecd 	.word	0x08006ecd
 8006e44:	08006ef5 	.word	0x08006ef5
 8006e48:	08006ef5 	.word	0x08006ef5
 8006e4c:	08006ef5 	.word	0x08006ef5
 8006e50:	08006ef5 	.word	0x08006ef5
 8006e54:	08006ef5 	.word	0x08006ef5
 8006e58:	08006ef5 	.word	0x08006ef5
 8006e5c:	08006ef5 	.word	0x08006ef5
 8006e60:	08006ed5 	.word	0x08006ed5
 8006e64:	08006ef5 	.word	0x08006ef5
 8006e68:	08006ef5 	.word	0x08006ef5
 8006e6c:	08006ef5 	.word	0x08006ef5
 8006e70:	08006ef5 	.word	0x08006ef5
 8006e74:	08006ef5 	.word	0x08006ef5
 8006e78:	08006ef5 	.word	0x08006ef5
 8006e7c:	08006ef5 	.word	0x08006ef5
 8006e80:	08006edd 	.word	0x08006edd
 8006e84:	08006ef5 	.word	0x08006ef5
 8006e88:	08006ef5 	.word	0x08006ef5
 8006e8c:	08006ef5 	.word	0x08006ef5
 8006e90:	08006ef5 	.word	0x08006ef5
 8006e94:	08006ef5 	.word	0x08006ef5
 8006e98:	08006ef5 	.word	0x08006ef5
 8006e9c:	08006ef5 	.word	0x08006ef5
 8006ea0:	08006ee5 	.word	0x08006ee5
 8006ea4:	08006ef5 	.word	0x08006ef5
 8006ea8:	08006ef5 	.word	0x08006ef5
 8006eac:	08006ef5 	.word	0x08006ef5
 8006eb0:	08006ef5 	.word	0x08006ef5
 8006eb4:	08006ef5 	.word	0x08006ef5
 8006eb8:	08006ef5 	.word	0x08006ef5
 8006ebc:	08006ef5 	.word	0x08006ef5
 8006ec0:	08006eed 	.word	0x08006eed
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eca:	e0d6      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ecc:	2304      	movs	r3, #4
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed2:	e0d2      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eda:	e0ce      	b.n	800707a <UART_SetConfig+0x7ae>
 8006edc:	2310      	movs	r3, #16
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee2:	e0ca      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ee4:	2320      	movs	r3, #32
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eea:	e0c6      	b.n	800707a <UART_SetConfig+0x7ae>
 8006eec:	2340      	movs	r3, #64	; 0x40
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef2:	e0c2      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ef4:	2380      	movs	r3, #128	; 0x80
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efa:	e0be      	b.n	800707a <UART_SetConfig+0x7ae>
 8006efc:	40011400 	.word	0x40011400
 8006f00:	58024400 	.word	0x58024400
 8006f04:	40007800 	.word	0x40007800
 8006f08:	40007c00 	.word	0x40007c00
 8006f0c:	40011800 	.word	0x40011800
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4aad      	ldr	r2, [pc, #692]	; (80071cc <UART_SetConfig+0x900>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d176      	bne.n	8007008 <UART_SetConfig+0x73c>
 8006f1a:	4bad      	ldr	r3, [pc, #692]	; (80071d0 <UART_SetConfig+0x904>)
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f22:	2b28      	cmp	r3, #40	; 0x28
 8006f24:	d86c      	bhi.n	8007000 <UART_SetConfig+0x734>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <UART_SetConfig+0x660>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006fd1 	.word	0x08006fd1
 8006f30:	08007001 	.word	0x08007001
 8006f34:	08007001 	.word	0x08007001
 8006f38:	08007001 	.word	0x08007001
 8006f3c:	08007001 	.word	0x08007001
 8006f40:	08007001 	.word	0x08007001
 8006f44:	08007001 	.word	0x08007001
 8006f48:	08007001 	.word	0x08007001
 8006f4c:	08006fd9 	.word	0x08006fd9
 8006f50:	08007001 	.word	0x08007001
 8006f54:	08007001 	.word	0x08007001
 8006f58:	08007001 	.word	0x08007001
 8006f5c:	08007001 	.word	0x08007001
 8006f60:	08007001 	.word	0x08007001
 8006f64:	08007001 	.word	0x08007001
 8006f68:	08007001 	.word	0x08007001
 8006f6c:	08006fe1 	.word	0x08006fe1
 8006f70:	08007001 	.word	0x08007001
 8006f74:	08007001 	.word	0x08007001
 8006f78:	08007001 	.word	0x08007001
 8006f7c:	08007001 	.word	0x08007001
 8006f80:	08007001 	.word	0x08007001
 8006f84:	08007001 	.word	0x08007001
 8006f88:	08007001 	.word	0x08007001
 8006f8c:	08006fe9 	.word	0x08006fe9
 8006f90:	08007001 	.word	0x08007001
 8006f94:	08007001 	.word	0x08007001
 8006f98:	08007001 	.word	0x08007001
 8006f9c:	08007001 	.word	0x08007001
 8006fa0:	08007001 	.word	0x08007001
 8006fa4:	08007001 	.word	0x08007001
 8006fa8:	08007001 	.word	0x08007001
 8006fac:	08006ff1 	.word	0x08006ff1
 8006fb0:	08007001 	.word	0x08007001
 8006fb4:	08007001 	.word	0x08007001
 8006fb8:	08007001 	.word	0x08007001
 8006fbc:	08007001 	.word	0x08007001
 8006fc0:	08007001 	.word	0x08007001
 8006fc4:	08007001 	.word	0x08007001
 8006fc8:	08007001 	.word	0x08007001
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e050      	b.n	800707a <UART_SetConfig+0x7ae>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e04c      	b.n	800707a <UART_SetConfig+0x7ae>
 8006fe0:	2308      	movs	r3, #8
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e048      	b.n	800707a <UART_SetConfig+0x7ae>
 8006fe8:	2310      	movs	r3, #16
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fee:	e044      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e040      	b.n	800707a <UART_SetConfig+0x7ae>
 8006ff8:	2340      	movs	r3, #64	; 0x40
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffe:	e03c      	b.n	800707a <UART_SetConfig+0x7ae>
 8007000:	2380      	movs	r3, #128	; 0x80
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007006:	e038      	b.n	800707a <UART_SetConfig+0x7ae>
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a71      	ldr	r2, [pc, #452]	; (80071d4 <UART_SetConfig+0x908>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d130      	bne.n	8007074 <UART_SetConfig+0x7a8>
 8007012:	4b6f      	ldr	r3, [pc, #444]	; (80071d0 <UART_SetConfig+0x904>)
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	2b05      	cmp	r3, #5
 800701c:	d826      	bhi.n	800706c <UART_SetConfig+0x7a0>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <UART_SetConfig+0x758>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	0800703d 	.word	0x0800703d
 8007028:	08007045 	.word	0x08007045
 800702c:	0800704d 	.word	0x0800704d
 8007030:	08007055 	.word	0x08007055
 8007034:	0800705d 	.word	0x0800705d
 8007038:	08007065 	.word	0x08007065
 800703c:	2302      	movs	r3, #2
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e01a      	b.n	800707a <UART_SetConfig+0x7ae>
 8007044:	2304      	movs	r3, #4
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704a:	e016      	b.n	800707a <UART_SetConfig+0x7ae>
 800704c:	2308      	movs	r3, #8
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e012      	b.n	800707a <UART_SetConfig+0x7ae>
 8007054:	2310      	movs	r3, #16
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e00e      	b.n	800707a <UART_SetConfig+0x7ae>
 800705c:	2320      	movs	r3, #32
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e00a      	b.n	800707a <UART_SetConfig+0x7ae>
 8007064:	2340      	movs	r3, #64	; 0x40
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706a:	e006      	b.n	800707a <UART_SetConfig+0x7ae>
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007072:	e002      	b.n	800707a <UART_SetConfig+0x7ae>
 8007074:	2380      	movs	r3, #128	; 0x80
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a55      	ldr	r2, [pc, #340]	; (80071d4 <UART_SetConfig+0x908>)
 8007080:	4293      	cmp	r3, r2
 8007082:	f040 80f8 	bne.w	8007276 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007086:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800708a:	2b20      	cmp	r3, #32
 800708c:	dc46      	bgt.n	800711c <UART_SetConfig+0x850>
 800708e:	2b02      	cmp	r3, #2
 8007090:	db75      	blt.n	800717e <UART_SetConfig+0x8b2>
 8007092:	3b02      	subs	r3, #2
 8007094:	2b1e      	cmp	r3, #30
 8007096:	d872      	bhi.n	800717e <UART_SetConfig+0x8b2>
 8007098:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <UART_SetConfig+0x7d4>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	08007123 	.word	0x08007123
 80070a4:	0800717f 	.word	0x0800717f
 80070a8:	0800712b 	.word	0x0800712b
 80070ac:	0800717f 	.word	0x0800717f
 80070b0:	0800717f 	.word	0x0800717f
 80070b4:	0800717f 	.word	0x0800717f
 80070b8:	0800713b 	.word	0x0800713b
 80070bc:	0800717f 	.word	0x0800717f
 80070c0:	0800717f 	.word	0x0800717f
 80070c4:	0800717f 	.word	0x0800717f
 80070c8:	0800717f 	.word	0x0800717f
 80070cc:	0800717f 	.word	0x0800717f
 80070d0:	0800717f 	.word	0x0800717f
 80070d4:	0800717f 	.word	0x0800717f
 80070d8:	0800714b 	.word	0x0800714b
 80070dc:	0800717f 	.word	0x0800717f
 80070e0:	0800717f 	.word	0x0800717f
 80070e4:	0800717f 	.word	0x0800717f
 80070e8:	0800717f 	.word	0x0800717f
 80070ec:	0800717f 	.word	0x0800717f
 80070f0:	0800717f 	.word	0x0800717f
 80070f4:	0800717f 	.word	0x0800717f
 80070f8:	0800717f 	.word	0x0800717f
 80070fc:	0800717f 	.word	0x0800717f
 8007100:	0800717f 	.word	0x0800717f
 8007104:	0800717f 	.word	0x0800717f
 8007108:	0800717f 	.word	0x0800717f
 800710c:	0800717f 	.word	0x0800717f
 8007110:	0800717f 	.word	0x0800717f
 8007114:	0800717f 	.word	0x0800717f
 8007118:	08007171 	.word	0x08007171
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d02a      	beq.n	8007176 <UART_SetConfig+0x8aa>
 8007120:	e02d      	b.n	800717e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007122:	f7fe fb0d 	bl	8005740 <HAL_RCCEx_GetD3PCLK1Freq>
 8007126:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007128:	e02f      	b.n	800718a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800712a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe fb1c 	bl	800576c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007138:	e027      	b.n	800718a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800713a:	f107 0318 	add.w	r3, r7, #24
 800713e:	4618      	mov	r0, r3
 8007140:	f7fe fc68 	bl	8005a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007148:	e01f      	b.n	800718a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800714a:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <UART_SetConfig+0x904>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007156:	4b1e      	ldr	r3, [pc, #120]	; (80071d0 <UART_SetConfig+0x904>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	08db      	lsrs	r3, r3, #3
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <UART_SetConfig+0x90c>)
 8007162:	fa22 f303 	lsr.w	r3, r2, r3
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007168:	e00f      	b.n	800718a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <UART_SetConfig+0x90c>)
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800716e:	e00c      	b.n	800718a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007170:	4b1a      	ldr	r3, [pc, #104]	; (80071dc <UART_SetConfig+0x910>)
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007174:	e009      	b.n	800718a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800717c:	e005      	b.n	800718a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800718a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 81ee 	beq.w	800756e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <UART_SetConfig+0x914>)
 8007198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800719c:	461a      	mov	r2, r3
 800719e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	4413      	add	r3, r2
 80071b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d305      	bcc.n	80071c2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071be:	429a      	cmp	r2, r3
 80071c0:	d910      	bls.n	80071e4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80071c8:	e1d1      	b.n	800756e <UART_SetConfig+0xca2>
 80071ca:	bf00      	nop
 80071cc:	40011c00 	.word	0x40011c00
 80071d0:	58024400 	.word	0x58024400
 80071d4:	58000c00 	.word	0x58000c00
 80071d8:	03d09000 	.word	0x03d09000
 80071dc:	003d0900 	.word	0x003d0900
 80071e0:	0800aa98 	.word	0x0800aa98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e6:	2200      	movs	r2, #0
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	60fa      	str	r2, [r7, #12]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	4ac0      	ldr	r2, [pc, #768]	; (80074f4 <UART_SetConfig+0xc28>)
 80071f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2200      	movs	r2, #0
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007202:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007206:	f7f9 f8cb 	bl	80003a0 <__aeabi_uldivmod>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4610      	mov	r0, r2
 8007210:	4619      	mov	r1, r3
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	020b      	lsls	r3, r1, #8
 800721c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007220:	0202      	lsls	r2, r0, #8
 8007222:	6979      	ldr	r1, [r7, #20]
 8007224:	6849      	ldr	r1, [r1, #4]
 8007226:	0849      	lsrs	r1, r1, #1
 8007228:	2000      	movs	r0, #0
 800722a:	460c      	mov	r4, r1
 800722c:	4605      	mov	r5, r0
 800722e:	eb12 0804 	adds.w	r8, r2, r4
 8007232:	eb43 0905 	adc.w	r9, r3, r5
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	469a      	mov	sl, r3
 800723e:	4693      	mov	fp, r2
 8007240:	4652      	mov	r2, sl
 8007242:	465b      	mov	r3, fp
 8007244:	4640      	mov	r0, r8
 8007246:	4649      	mov	r1, r9
 8007248:	f7f9 f8aa 	bl	80003a0 <__aeabi_uldivmod>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4613      	mov	r3, r2
 8007252:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800725a:	d308      	bcc.n	800726e <UART_SetConfig+0x9a2>
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007262:	d204      	bcs.n	800726e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726a:	60da      	str	r2, [r3, #12]
 800726c:	e17f      	b.n	800756e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007274:	e17b      	b.n	800756e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800727e:	f040 80bd 	bne.w	80073fc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007282:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007286:	2b20      	cmp	r3, #32
 8007288:	dc48      	bgt.n	800731c <UART_SetConfig+0xa50>
 800728a:	2b00      	cmp	r3, #0
 800728c:	db7b      	blt.n	8007386 <UART_SetConfig+0xaba>
 800728e:	2b20      	cmp	r3, #32
 8007290:	d879      	bhi.n	8007386 <UART_SetConfig+0xaba>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <UART_SetConfig+0x9cc>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	08007323 	.word	0x08007323
 800729c:	0800732b 	.word	0x0800732b
 80072a0:	08007387 	.word	0x08007387
 80072a4:	08007387 	.word	0x08007387
 80072a8:	08007333 	.word	0x08007333
 80072ac:	08007387 	.word	0x08007387
 80072b0:	08007387 	.word	0x08007387
 80072b4:	08007387 	.word	0x08007387
 80072b8:	08007343 	.word	0x08007343
 80072bc:	08007387 	.word	0x08007387
 80072c0:	08007387 	.word	0x08007387
 80072c4:	08007387 	.word	0x08007387
 80072c8:	08007387 	.word	0x08007387
 80072cc:	08007387 	.word	0x08007387
 80072d0:	08007387 	.word	0x08007387
 80072d4:	08007387 	.word	0x08007387
 80072d8:	08007353 	.word	0x08007353
 80072dc:	08007387 	.word	0x08007387
 80072e0:	08007387 	.word	0x08007387
 80072e4:	08007387 	.word	0x08007387
 80072e8:	08007387 	.word	0x08007387
 80072ec:	08007387 	.word	0x08007387
 80072f0:	08007387 	.word	0x08007387
 80072f4:	08007387 	.word	0x08007387
 80072f8:	08007387 	.word	0x08007387
 80072fc:	08007387 	.word	0x08007387
 8007300:	08007387 	.word	0x08007387
 8007304:	08007387 	.word	0x08007387
 8007308:	08007387 	.word	0x08007387
 800730c:	08007387 	.word	0x08007387
 8007310:	08007387 	.word	0x08007387
 8007314:	08007387 	.word	0x08007387
 8007318:	08007379 	.word	0x08007379
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	d02e      	beq.n	800737e <UART_SetConfig+0xab2>
 8007320:	e031      	b.n	8007386 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007322:	f7fd fad5 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 8007326:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007328:	e033      	b.n	8007392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800732a:	f7fd fae7 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 800732e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007330:	e02f      	b.n	8007392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fa18 	bl	800576c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007340:	e027      	b.n	8007392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007342:	f107 0318 	add.w	r3, r7, #24
 8007346:	4618      	mov	r0, r3
 8007348:	f7fe fb64 	bl	8005a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007350:	e01f      	b.n	8007392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007352:	4b69      	ldr	r3, [pc, #420]	; (80074f8 <UART_SetConfig+0xc2c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0320 	and.w	r3, r3, #32
 800735a:	2b00      	cmp	r3, #0
 800735c:	d009      	beq.n	8007372 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800735e:	4b66      	ldr	r3, [pc, #408]	; (80074f8 <UART_SetConfig+0xc2c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	08db      	lsrs	r3, r3, #3
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	4a64      	ldr	r2, [pc, #400]	; (80074fc <UART_SetConfig+0xc30>)
 800736a:	fa22 f303 	lsr.w	r3, r2, r3
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007370:	e00f      	b.n	8007392 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007372:	4b62      	ldr	r3, [pc, #392]	; (80074fc <UART_SetConfig+0xc30>)
 8007374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007376:	e00c      	b.n	8007392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007378:	4b61      	ldr	r3, [pc, #388]	; (8007500 <UART_SetConfig+0xc34>)
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800737c:	e009      	b.n	8007392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007384:	e005      	b.n	8007392 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 80ea 	beq.w	800756e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	4a55      	ldr	r2, [pc, #340]	; (80074f4 <UART_SetConfig+0xc28>)
 80073a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ac:	005a      	lsls	r2, r3, #1
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	441a      	add	r2, r3
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80073be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	2b0f      	cmp	r3, #15
 80073c4:	d916      	bls.n	80073f4 <UART_SetConfig+0xb28>
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073cc:	d212      	bcs.n	80073f4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f023 030f 	bic.w	r3, r3, #15
 80073d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80073e6:	4313      	orrs	r3, r2
 80073e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80073f0:	60da      	str	r2, [r3, #12]
 80073f2:	e0bc      	b.n	800756e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80073fa:	e0b8      	b.n	800756e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007400:	2b20      	cmp	r3, #32
 8007402:	dc4b      	bgt.n	800749c <UART_SetConfig+0xbd0>
 8007404:	2b00      	cmp	r3, #0
 8007406:	f2c0 8087 	blt.w	8007518 <UART_SetConfig+0xc4c>
 800740a:	2b20      	cmp	r3, #32
 800740c:	f200 8084 	bhi.w	8007518 <UART_SetConfig+0xc4c>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <UART_SetConfig+0xb4c>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	080074a3 	.word	0x080074a3
 800741c:	080074ab 	.word	0x080074ab
 8007420:	08007519 	.word	0x08007519
 8007424:	08007519 	.word	0x08007519
 8007428:	080074b3 	.word	0x080074b3
 800742c:	08007519 	.word	0x08007519
 8007430:	08007519 	.word	0x08007519
 8007434:	08007519 	.word	0x08007519
 8007438:	080074c3 	.word	0x080074c3
 800743c:	08007519 	.word	0x08007519
 8007440:	08007519 	.word	0x08007519
 8007444:	08007519 	.word	0x08007519
 8007448:	08007519 	.word	0x08007519
 800744c:	08007519 	.word	0x08007519
 8007450:	08007519 	.word	0x08007519
 8007454:	08007519 	.word	0x08007519
 8007458:	080074d3 	.word	0x080074d3
 800745c:	08007519 	.word	0x08007519
 8007460:	08007519 	.word	0x08007519
 8007464:	08007519 	.word	0x08007519
 8007468:	08007519 	.word	0x08007519
 800746c:	08007519 	.word	0x08007519
 8007470:	08007519 	.word	0x08007519
 8007474:	08007519 	.word	0x08007519
 8007478:	08007519 	.word	0x08007519
 800747c:	08007519 	.word	0x08007519
 8007480:	08007519 	.word	0x08007519
 8007484:	08007519 	.word	0x08007519
 8007488:	08007519 	.word	0x08007519
 800748c:	08007519 	.word	0x08007519
 8007490:	08007519 	.word	0x08007519
 8007494:	08007519 	.word	0x08007519
 8007498:	0800750b 	.word	0x0800750b
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	d037      	beq.n	8007510 <UART_SetConfig+0xc44>
 80074a0:	e03a      	b.n	8007518 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a2:	f7fd fa15 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 80074a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074a8:	e03c      	b.n	8007524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074aa:	f7fd fa27 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 80074ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074b0:	e038      	b.n	8007524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe f958 	bl	800576c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074c0:	e030      	b.n	8007524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c2:	f107 0318 	add.w	r3, r7, #24
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe faa4 	bl	8005a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074d0:	e028      	b.n	8007524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <UART_SetConfig+0xc2c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d012      	beq.n	8007504 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074de:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <UART_SetConfig+0xc2c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	08db      	lsrs	r3, r3, #3
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	4a04      	ldr	r2, [pc, #16]	; (80074fc <UART_SetConfig+0xc30>)
 80074ea:	fa22 f303 	lsr.w	r3, r2, r3
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074f0:	e018      	b.n	8007524 <UART_SetConfig+0xc58>
 80074f2:	bf00      	nop
 80074f4:	0800aa98 	.word	0x0800aa98
 80074f8:	58024400 	.word	0x58024400
 80074fc:	03d09000 	.word	0x03d09000
 8007500:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007504:	4b24      	ldr	r3, [pc, #144]	; (8007598 <UART_SetConfig+0xccc>)
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007508:	e00c      	b.n	8007524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800750a:	4b24      	ldr	r3, [pc, #144]	; (800759c <UART_SetConfig+0xcd0>)
 800750c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800750e:	e009      	b.n	8007524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007516:	e005      	b.n	8007524 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007522:	bf00      	nop
    }

    if (pclk != 0U)
 8007524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d021      	beq.n	800756e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	4a1c      	ldr	r2, [pc, #112]	; (80075a0 <UART_SetConfig+0xcd4>)
 8007530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007534:	461a      	mov	r2, r3
 8007536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007538:	fbb3 f2f2 	udiv	r2, r3, r2
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	441a      	add	r2, r3
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	fbb2 f3f3 	udiv	r3, r2, r3
 800754c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	2b0f      	cmp	r3, #15
 8007552:	d909      	bls.n	8007568 <UART_SetConfig+0xc9c>
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755a:	d205      	bcs.n	8007568 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	b29a      	uxth	r2, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60da      	str	r2, [r3, #12]
 8007566:	e002      	b.n	800756e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2201      	movs	r2, #1
 8007572:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2201      	movs	r2, #1
 800757a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2200      	movs	r2, #0
 8007582:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2200      	movs	r2, #0
 8007588:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800758a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800758e:	4618      	mov	r0, r3
 8007590:	3748      	adds	r7, #72	; 0x48
 8007592:	46bd      	mov	sp, r7
 8007594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007598:	03d09000 	.word	0x03d09000
 800759c:	003d0900 	.word	0x003d0900
 80075a0:	0800aa98 	.word	0x0800aa98

080075a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01a      	beq.n	80076ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a2:	d10a      	bne.n	80076ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	605a      	str	r2, [r3, #4]
  }
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076f8:	f7fa fac2 	bl	8001c80 <HAL_GetTick>
 80076fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b08      	cmp	r3, #8
 800770a:	d10e      	bne.n	800772a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800770c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f82f 	bl	800777e <UART_WaitOnFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e025      	b.n	8007776 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b04      	cmp	r3, #4
 8007736:	d10e      	bne.n	8007756 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f819 	bl	800777e <UART_WaitOnFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e00f      	b.n	8007776 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b09c      	sub	sp, #112	; 0x70
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	603b      	str	r3, [r7, #0]
 800778a:	4613      	mov	r3, r2
 800778c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800778e:	e0a9      	b.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	f000 80a5 	beq.w	80078e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779a:	f7fa fa71 	bl	8001c80 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80077aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d140      	bne.n	8007832 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077c4:	667b      	str	r3, [r7, #100]	; 0x64
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e6      	bne.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3308      	adds	r3, #8
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	f023 0301 	bic.w	r3, r3, #1
 80077f8:	663b      	str	r3, [r7, #96]	; 0x60
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007802:	64ba      	str	r2, [r7, #72]	; 0x48
 8007804:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e5      	bne.n	80077e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e069      	b.n	8007906 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d051      	beq.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800784a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800784e:	d149      	bne.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007858:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800786e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
 800787a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800787e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e6      	bne.n	800785a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	613b      	str	r3, [r7, #16]
   return(result);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3308      	adds	r3, #8
 80078aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078ac:	623a      	str	r2, [r7, #32]
 80078ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	69f9      	ldr	r1, [r7, #28]
 80078b2:	6a3a      	ldr	r2, [r7, #32]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e5      	bne.n	800788c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e010      	b.n	8007906 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	69da      	ldr	r2, [r3, #28]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	4013      	ands	r3, r2
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	bf0c      	ite	eq
 80078f4:	2301      	moveq	r3, #1
 80078f6:	2300      	movne	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	429a      	cmp	r2, r3
 8007900:	f43f af46 	beq.w	8007790 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3770      	adds	r7, #112	; 0x70
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007910:	b480      	push	{r7}
 8007912:	b095      	sub	sp, #84	; 0x54
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800792c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007936:	643b      	str	r3, [r7, #64]	; 0x40
 8007938:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800793c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e6      	bne.n	8007918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	61fb      	str	r3, [r7, #28]
   return(result);
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	4b1e      	ldr	r3, [pc, #120]	; (80079d8 <UART_EndRxTransfer+0xc8>)
 800795e:	4013      	ands	r3, r2
 8007960:	64bb      	str	r3, [r7, #72]	; 0x48
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3308      	adds	r3, #8
 8007968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800796a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e5      	bne.n	800794a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007982:	2b01      	cmp	r3, #1
 8007984:	d118      	bne.n	80079b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	60bb      	str	r3, [r7, #8]
   return(result);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f023 0310 	bic.w	r3, r3, #16
 800799a:	647b      	str	r3, [r7, #68]	; 0x44
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a4:	61bb      	str	r3, [r7, #24]
 80079a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6979      	ldr	r1, [r7, #20]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	613b      	str	r3, [r7, #16]
   return(result);
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e6      	bne.n	8007986 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 80079cc:	bf00      	nop
 80079ce:	3754      	adds	r7, #84	; 0x54
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	effffffe 	.word	0xeffffffe

080079dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f7fe ff50 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a00:	bf00      	nop
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6979      	ldr	r1, [r7, #20]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e6      	bne.n	8007a10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7fe ff1b 	bl	800688c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a56:	bf00      	nop
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_UARTEx_DisableFifoMode+0x16>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e027      	b.n	8007b00 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2224      	movs	r2, #36	; 0x24
 8007abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ade:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e02d      	b.n	8007b80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2224      	movs	r2, #36	; 0x24
 8007b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f84f 	bl	8007c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e02d      	b.n	8007bfc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2224      	movs	r2, #36	; 0x24
 8007bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f811 	bl	8007c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d108      	bne.n	8007c26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c24:	e031      	b.n	8007c8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c26:	2310      	movs	r3, #16
 8007c28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c2a:	2310      	movs	r3, #16
 8007c2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	0e5b      	lsrs	r3, r3, #25
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	0f5b      	lsrs	r3, r3, #29
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	7b3a      	ldrb	r2, [r7, #12]
 8007c52:	4911      	ldr	r1, [pc, #68]	; (8007c98 <UARTEx_SetNbDataToProcess+0x94>)
 8007c54:	5c8a      	ldrb	r2, [r1, r2]
 8007c56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c5a:	7b3a      	ldrb	r2, [r7, #12]
 8007c5c:	490f      	ldr	r1, [pc, #60]	; (8007c9c <UARTEx_SetNbDataToProcess+0x98>)
 8007c5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	7b7a      	ldrb	r2, [r7, #13]
 8007c70:	4909      	ldr	r1, [pc, #36]	; (8007c98 <UARTEx_SetNbDataToProcess+0x94>)
 8007c72:	5c8a      	ldrb	r2, [r1, r2]
 8007c74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c78:	7b7a      	ldrb	r2, [r7, #13]
 8007c7a:	4908      	ldr	r1, [pc, #32]	; (8007c9c <UARTEx_SetNbDataToProcess+0x98>)
 8007c7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c8a:	bf00      	nop
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	0800aab0 	.word	0x0800aab0
 8007c9c:	0800aab8 	.word	0x0800aab8

08007ca0 <__assert_func>:
 8007ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ca2:	4614      	mov	r4, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <__assert_func+0x2c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4605      	mov	r5, r0
 8007cac:	68d8      	ldr	r0, [r3, #12]
 8007cae:	b14c      	cbz	r4, 8007cc4 <__assert_func+0x24>
 8007cb0:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <__assert_func+0x30>)
 8007cb2:	9100      	str	r1, [sp, #0]
 8007cb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cb8:	4906      	ldr	r1, [pc, #24]	; (8007cd4 <__assert_func+0x34>)
 8007cba:	462b      	mov	r3, r5
 8007cbc:	f000 f814 	bl	8007ce8 <fiprintf>
 8007cc0:	f000 fecc 	bl	8008a5c <abort>
 8007cc4:	4b04      	ldr	r3, [pc, #16]	; (8007cd8 <__assert_func+0x38>)
 8007cc6:	461c      	mov	r4, r3
 8007cc8:	e7f3      	b.n	8007cb2 <__assert_func+0x12>
 8007cca:	bf00      	nop
 8007ccc:	24000010 	.word	0x24000010
 8007cd0:	0800aac0 	.word	0x0800aac0
 8007cd4:	0800aacd 	.word	0x0800aacd
 8007cd8:	0800aafb 	.word	0x0800aafb

08007cdc <__errno>:
 8007cdc:	4b01      	ldr	r3, [pc, #4]	; (8007ce4 <__errno+0x8>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	24000010 	.word	0x24000010

08007ce8 <fiprintf>:
 8007ce8:	b40e      	push	{r1, r2, r3}
 8007cea:	b503      	push	{r0, r1, lr}
 8007cec:	4601      	mov	r1, r0
 8007cee:	ab03      	add	r3, sp, #12
 8007cf0:	4805      	ldr	r0, [pc, #20]	; (8007d08 <fiprintf+0x20>)
 8007cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf6:	6800      	ldr	r0, [r0, #0]
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	f000 f85d 	bl	8007db8 <_vfiprintf_r>
 8007cfe:	b002      	add	sp, #8
 8007d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d04:	b003      	add	sp, #12
 8007d06:	4770      	bx	lr
 8007d08:	24000010 	.word	0x24000010

08007d0c <__libc_init_array>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4d0d      	ldr	r5, [pc, #52]	; (8007d44 <__libc_init_array+0x38>)
 8007d10:	4c0d      	ldr	r4, [pc, #52]	; (8007d48 <__libc_init_array+0x3c>)
 8007d12:	1b64      	subs	r4, r4, r5
 8007d14:	10a4      	asrs	r4, r4, #2
 8007d16:	2600      	movs	r6, #0
 8007d18:	42a6      	cmp	r6, r4
 8007d1a:	d109      	bne.n	8007d30 <__libc_init_array+0x24>
 8007d1c:	4d0b      	ldr	r5, [pc, #44]	; (8007d4c <__libc_init_array+0x40>)
 8007d1e:	4c0c      	ldr	r4, [pc, #48]	; (8007d50 <__libc_init_array+0x44>)
 8007d20:	f002 fe28 	bl	800a974 <_init>
 8007d24:	1b64      	subs	r4, r4, r5
 8007d26:	10a4      	asrs	r4, r4, #2
 8007d28:	2600      	movs	r6, #0
 8007d2a:	42a6      	cmp	r6, r4
 8007d2c:	d105      	bne.n	8007d3a <__libc_init_array+0x2e>
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d34:	4798      	blx	r3
 8007d36:	3601      	adds	r6, #1
 8007d38:	e7ee      	b.n	8007d18 <__libc_init_array+0xc>
 8007d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3e:	4798      	blx	r3
 8007d40:	3601      	adds	r6, #1
 8007d42:	e7f2      	b.n	8007d2a <__libc_init_array+0x1e>
 8007d44:	0800aea8 	.word	0x0800aea8
 8007d48:	0800aea8 	.word	0x0800aea8
 8007d4c:	0800aea8 	.word	0x0800aea8
 8007d50:	0800aeac 	.word	0x0800aeac

08007d54 <memset>:
 8007d54:	4402      	add	r2, r0
 8007d56:	4603      	mov	r3, r0
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d100      	bne.n	8007d5e <memset+0xa>
 8007d5c:	4770      	bx	lr
 8007d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d62:	e7f9      	b.n	8007d58 <memset+0x4>

08007d64 <__sfputc_r>:
 8007d64:	6893      	ldr	r3, [r2, #8]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	b410      	push	{r4}
 8007d6c:	6093      	str	r3, [r2, #8]
 8007d6e:	da08      	bge.n	8007d82 <__sfputc_r+0x1e>
 8007d70:	6994      	ldr	r4, [r2, #24]
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	db01      	blt.n	8007d7a <__sfputc_r+0x16>
 8007d76:	290a      	cmp	r1, #10
 8007d78:	d103      	bne.n	8007d82 <__sfputc_r+0x1e>
 8007d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d7e:	f000 bdad 	b.w	80088dc <__swbuf_r>
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	1c58      	adds	r0, r3, #1
 8007d86:	6010      	str	r0, [r2, #0]
 8007d88:	7019      	strb	r1, [r3, #0]
 8007d8a:	4608      	mov	r0, r1
 8007d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <__sfputs_r>:
 8007d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d94:	4606      	mov	r6, r0
 8007d96:	460f      	mov	r7, r1
 8007d98:	4614      	mov	r4, r2
 8007d9a:	18d5      	adds	r5, r2, r3
 8007d9c:	42ac      	cmp	r4, r5
 8007d9e:	d101      	bne.n	8007da4 <__sfputs_r+0x12>
 8007da0:	2000      	movs	r0, #0
 8007da2:	e007      	b.n	8007db4 <__sfputs_r+0x22>
 8007da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da8:	463a      	mov	r2, r7
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff ffda 	bl	8007d64 <__sfputc_r>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d1f3      	bne.n	8007d9c <__sfputs_r+0xa>
 8007db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007db8 <_vfiprintf_r>:
 8007db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	b09d      	sub	sp, #116	; 0x74
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	4698      	mov	r8, r3
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	b118      	cbz	r0, 8007dd0 <_vfiprintf_r+0x18>
 8007dc8:	6983      	ldr	r3, [r0, #24]
 8007dca:	b90b      	cbnz	r3, 8007dd0 <_vfiprintf_r+0x18>
 8007dcc:	f001 fd60 	bl	8009890 <__sinit>
 8007dd0:	4b89      	ldr	r3, [pc, #548]	; (8007ff8 <_vfiprintf_r+0x240>)
 8007dd2:	429d      	cmp	r5, r3
 8007dd4:	d11b      	bne.n	8007e0e <_vfiprintf_r+0x56>
 8007dd6:	6875      	ldr	r5, [r6, #4]
 8007dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dda:	07d9      	lsls	r1, r3, #31
 8007ddc:	d405      	bmi.n	8007dea <_vfiprintf_r+0x32>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	059a      	lsls	r2, r3, #22
 8007de2:	d402      	bmi.n	8007dea <_vfiprintf_r+0x32>
 8007de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007de6:	f001 fdf6 	bl	80099d6 <__retarget_lock_acquire_recursive>
 8007dea:	89ab      	ldrh	r3, [r5, #12]
 8007dec:	071b      	lsls	r3, r3, #28
 8007dee:	d501      	bpl.n	8007df4 <_vfiprintf_r+0x3c>
 8007df0:	692b      	ldr	r3, [r5, #16]
 8007df2:	b9eb      	cbnz	r3, 8007e30 <_vfiprintf_r+0x78>
 8007df4:	4629      	mov	r1, r5
 8007df6:	4630      	mov	r0, r6
 8007df8:	f000 fdc2 	bl	8008980 <__swsetup_r>
 8007dfc:	b1c0      	cbz	r0, 8007e30 <_vfiprintf_r+0x78>
 8007dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e00:	07dc      	lsls	r4, r3, #31
 8007e02:	d50e      	bpl.n	8007e22 <_vfiprintf_r+0x6a>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	b01d      	add	sp, #116	; 0x74
 8007e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0e:	4b7b      	ldr	r3, [pc, #492]	; (8007ffc <_vfiprintf_r+0x244>)
 8007e10:	429d      	cmp	r5, r3
 8007e12:	d101      	bne.n	8007e18 <_vfiprintf_r+0x60>
 8007e14:	68b5      	ldr	r5, [r6, #8]
 8007e16:	e7df      	b.n	8007dd8 <_vfiprintf_r+0x20>
 8007e18:	4b79      	ldr	r3, [pc, #484]	; (8008000 <_vfiprintf_r+0x248>)
 8007e1a:	429d      	cmp	r5, r3
 8007e1c:	bf08      	it	eq
 8007e1e:	68f5      	ldreq	r5, [r6, #12]
 8007e20:	e7da      	b.n	8007dd8 <_vfiprintf_r+0x20>
 8007e22:	89ab      	ldrh	r3, [r5, #12]
 8007e24:	0598      	lsls	r0, r3, #22
 8007e26:	d4ed      	bmi.n	8007e04 <_vfiprintf_r+0x4c>
 8007e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e2a:	f001 fdd5 	bl	80099d8 <__retarget_lock_release_recursive>
 8007e2e:	e7e9      	b.n	8007e04 <_vfiprintf_r+0x4c>
 8007e30:	2300      	movs	r3, #0
 8007e32:	9309      	str	r3, [sp, #36]	; 0x24
 8007e34:	2320      	movs	r3, #32
 8007e36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e3e:	2330      	movs	r3, #48	; 0x30
 8007e40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008004 <_vfiprintf_r+0x24c>
 8007e44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e48:	f04f 0901 	mov.w	r9, #1
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	469a      	mov	sl, r3
 8007e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e54:	b10a      	cbz	r2, 8007e5a <_vfiprintf_r+0xa2>
 8007e56:	2a25      	cmp	r2, #37	; 0x25
 8007e58:	d1f9      	bne.n	8007e4e <_vfiprintf_r+0x96>
 8007e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e5e:	d00b      	beq.n	8007e78 <_vfiprintf_r+0xc0>
 8007e60:	465b      	mov	r3, fp
 8007e62:	4622      	mov	r2, r4
 8007e64:	4629      	mov	r1, r5
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff ff93 	bl	8007d92 <__sfputs_r>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	f000 80aa 	beq.w	8007fc6 <_vfiprintf_r+0x20e>
 8007e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e74:	445a      	add	r2, fp
 8007e76:	9209      	str	r2, [sp, #36]	; 0x24
 8007e78:	f89a 3000 	ldrb.w	r3, [sl]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 80a2 	beq.w	8007fc6 <_vfiprintf_r+0x20e>
 8007e82:	2300      	movs	r3, #0
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e8c:	f10a 0a01 	add.w	sl, sl, #1
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	9307      	str	r3, [sp, #28]
 8007e94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e98:	931a      	str	r3, [sp, #104]	; 0x68
 8007e9a:	4654      	mov	r4, sl
 8007e9c:	2205      	movs	r2, #5
 8007e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea2:	4858      	ldr	r0, [pc, #352]	; (8008004 <_vfiprintf_r+0x24c>)
 8007ea4:	f7f8 fa2c 	bl	8000300 <memchr>
 8007ea8:	9a04      	ldr	r2, [sp, #16]
 8007eaa:	b9d8      	cbnz	r0, 8007ee4 <_vfiprintf_r+0x12c>
 8007eac:	06d1      	lsls	r1, r2, #27
 8007eae:	bf44      	itt	mi
 8007eb0:	2320      	movmi	r3, #32
 8007eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eb6:	0713      	lsls	r3, r2, #28
 8007eb8:	bf44      	itt	mi
 8007eba:	232b      	movmi	r3, #43	; 0x2b
 8007ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ec6:	d015      	beq.n	8007ef4 <_vfiprintf_r+0x13c>
 8007ec8:	9a07      	ldr	r2, [sp, #28]
 8007eca:	4654      	mov	r4, sl
 8007ecc:	2000      	movs	r0, #0
 8007ece:	f04f 0c0a 	mov.w	ip, #10
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ed8:	3b30      	subs	r3, #48	; 0x30
 8007eda:	2b09      	cmp	r3, #9
 8007edc:	d94e      	bls.n	8007f7c <_vfiprintf_r+0x1c4>
 8007ede:	b1b0      	cbz	r0, 8007f0e <_vfiprintf_r+0x156>
 8007ee0:	9207      	str	r2, [sp, #28]
 8007ee2:	e014      	b.n	8007f0e <_vfiprintf_r+0x156>
 8007ee4:	eba0 0308 	sub.w	r3, r0, r8
 8007ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8007eec:	4313      	orrs	r3, r2
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	46a2      	mov	sl, r4
 8007ef2:	e7d2      	b.n	8007e9a <_vfiprintf_r+0xe2>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	1d19      	adds	r1, r3, #4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	9103      	str	r1, [sp, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bfbb      	ittet	lt
 8007f00:	425b      	neglt	r3, r3
 8007f02:	f042 0202 	orrlt.w	r2, r2, #2
 8007f06:	9307      	strge	r3, [sp, #28]
 8007f08:	9307      	strlt	r3, [sp, #28]
 8007f0a:	bfb8      	it	lt
 8007f0c:	9204      	strlt	r2, [sp, #16]
 8007f0e:	7823      	ldrb	r3, [r4, #0]
 8007f10:	2b2e      	cmp	r3, #46	; 0x2e
 8007f12:	d10c      	bne.n	8007f2e <_vfiprintf_r+0x176>
 8007f14:	7863      	ldrb	r3, [r4, #1]
 8007f16:	2b2a      	cmp	r3, #42	; 0x2a
 8007f18:	d135      	bne.n	8007f86 <_vfiprintf_r+0x1ce>
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	1d1a      	adds	r2, r3, #4
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	9203      	str	r2, [sp, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	bfb8      	it	lt
 8007f26:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f2a:	3402      	adds	r4, #2
 8007f2c:	9305      	str	r3, [sp, #20]
 8007f2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008014 <_vfiprintf_r+0x25c>
 8007f32:	7821      	ldrb	r1, [r4, #0]
 8007f34:	2203      	movs	r2, #3
 8007f36:	4650      	mov	r0, sl
 8007f38:	f7f8 f9e2 	bl	8000300 <memchr>
 8007f3c:	b140      	cbz	r0, 8007f50 <_vfiprintf_r+0x198>
 8007f3e:	2340      	movs	r3, #64	; 0x40
 8007f40:	eba0 000a 	sub.w	r0, r0, sl
 8007f44:	fa03 f000 	lsl.w	r0, r3, r0
 8007f48:	9b04      	ldr	r3, [sp, #16]
 8007f4a:	4303      	orrs	r3, r0
 8007f4c:	3401      	adds	r4, #1
 8007f4e:	9304      	str	r3, [sp, #16]
 8007f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f54:	482c      	ldr	r0, [pc, #176]	; (8008008 <_vfiprintf_r+0x250>)
 8007f56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f5a:	2206      	movs	r2, #6
 8007f5c:	f7f8 f9d0 	bl	8000300 <memchr>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d03f      	beq.n	8007fe4 <_vfiprintf_r+0x22c>
 8007f64:	4b29      	ldr	r3, [pc, #164]	; (800800c <_vfiprintf_r+0x254>)
 8007f66:	bb1b      	cbnz	r3, 8007fb0 <_vfiprintf_r+0x1f8>
 8007f68:	9b03      	ldr	r3, [sp, #12]
 8007f6a:	3307      	adds	r3, #7
 8007f6c:	f023 0307 	bic.w	r3, r3, #7
 8007f70:	3308      	adds	r3, #8
 8007f72:	9303      	str	r3, [sp, #12]
 8007f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f76:	443b      	add	r3, r7
 8007f78:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7a:	e767      	b.n	8007e4c <_vfiprintf_r+0x94>
 8007f7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f80:	460c      	mov	r4, r1
 8007f82:	2001      	movs	r0, #1
 8007f84:	e7a5      	b.n	8007ed2 <_vfiprintf_r+0x11a>
 8007f86:	2300      	movs	r3, #0
 8007f88:	3401      	adds	r4, #1
 8007f8a:	9305      	str	r3, [sp, #20]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	f04f 0c0a 	mov.w	ip, #10
 8007f92:	4620      	mov	r0, r4
 8007f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f98:	3a30      	subs	r2, #48	; 0x30
 8007f9a:	2a09      	cmp	r2, #9
 8007f9c:	d903      	bls.n	8007fa6 <_vfiprintf_r+0x1ee>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0c5      	beq.n	8007f2e <_vfiprintf_r+0x176>
 8007fa2:	9105      	str	r1, [sp, #20]
 8007fa4:	e7c3      	b.n	8007f2e <_vfiprintf_r+0x176>
 8007fa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007faa:	4604      	mov	r4, r0
 8007fac:	2301      	movs	r3, #1
 8007fae:	e7f0      	b.n	8007f92 <_vfiprintf_r+0x1da>
 8007fb0:	ab03      	add	r3, sp, #12
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	462a      	mov	r2, r5
 8007fb6:	4b16      	ldr	r3, [pc, #88]	; (8008010 <_vfiprintf_r+0x258>)
 8007fb8:	a904      	add	r1, sp, #16
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f000 f8bc 	bl	8008138 <_printf_float>
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	1c78      	adds	r0, r7, #1
 8007fc4:	d1d6      	bne.n	8007f74 <_vfiprintf_r+0x1bc>
 8007fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc8:	07d9      	lsls	r1, r3, #31
 8007fca:	d405      	bmi.n	8007fd8 <_vfiprintf_r+0x220>
 8007fcc:	89ab      	ldrh	r3, [r5, #12]
 8007fce:	059a      	lsls	r2, r3, #22
 8007fd0:	d402      	bmi.n	8007fd8 <_vfiprintf_r+0x220>
 8007fd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fd4:	f001 fd00 	bl	80099d8 <__retarget_lock_release_recursive>
 8007fd8:	89ab      	ldrh	r3, [r5, #12]
 8007fda:	065b      	lsls	r3, r3, #25
 8007fdc:	f53f af12 	bmi.w	8007e04 <_vfiprintf_r+0x4c>
 8007fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fe2:	e711      	b.n	8007e08 <_vfiprintf_r+0x50>
 8007fe4:	ab03      	add	r3, sp, #12
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4b09      	ldr	r3, [pc, #36]	; (8008010 <_vfiprintf_r+0x258>)
 8007fec:	a904      	add	r1, sp, #16
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 fb2e 	bl	8008650 <_printf_i>
 8007ff4:	e7e4      	b.n	8007fc0 <_vfiprintf_r+0x208>
 8007ff6:	bf00      	nop
 8007ff8:	0800abf8 	.word	0x0800abf8
 8007ffc:	0800ac18 	.word	0x0800ac18
 8008000:	0800abd8 	.word	0x0800abd8
 8008004:	0800ab00 	.word	0x0800ab00
 8008008:	0800ab0a 	.word	0x0800ab0a
 800800c:	08008139 	.word	0x08008139
 8008010:	08007d93 	.word	0x08007d93
 8008014:	0800ab06 	.word	0x0800ab06

08008018 <__cvt>:
 8008018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801a:	ed2d 8b02 	vpush	{d8}
 800801e:	eeb0 8b40 	vmov.f64	d8, d0
 8008022:	b085      	sub	sp, #20
 8008024:	4617      	mov	r7, r2
 8008026:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008028:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800802a:	ee18 2a90 	vmov	r2, s17
 800802e:	f025 0520 	bic.w	r5, r5, #32
 8008032:	2a00      	cmp	r2, #0
 8008034:	bfb6      	itet	lt
 8008036:	222d      	movlt	r2, #45	; 0x2d
 8008038:	2200      	movge	r2, #0
 800803a:	eeb1 8b40 	vneglt.f64	d8, d0
 800803e:	2d46      	cmp	r5, #70	; 0x46
 8008040:	460c      	mov	r4, r1
 8008042:	701a      	strb	r2, [r3, #0]
 8008044:	d004      	beq.n	8008050 <__cvt+0x38>
 8008046:	2d45      	cmp	r5, #69	; 0x45
 8008048:	d100      	bne.n	800804c <__cvt+0x34>
 800804a:	3401      	adds	r4, #1
 800804c:	2102      	movs	r1, #2
 800804e:	e000      	b.n	8008052 <__cvt+0x3a>
 8008050:	2103      	movs	r1, #3
 8008052:	ab03      	add	r3, sp, #12
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	ab02      	add	r3, sp, #8
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	4622      	mov	r2, r4
 800805c:	4633      	mov	r3, r6
 800805e:	eeb0 0b48 	vmov.f64	d0, d8
 8008062:	f000 fd8d 	bl	8008b80 <_dtoa_r>
 8008066:	2d47      	cmp	r5, #71	; 0x47
 8008068:	d101      	bne.n	800806e <__cvt+0x56>
 800806a:	07fb      	lsls	r3, r7, #31
 800806c:	d51a      	bpl.n	80080a4 <__cvt+0x8c>
 800806e:	2d46      	cmp	r5, #70	; 0x46
 8008070:	eb00 0204 	add.w	r2, r0, r4
 8008074:	d10c      	bne.n	8008090 <__cvt+0x78>
 8008076:	7803      	ldrb	r3, [r0, #0]
 8008078:	2b30      	cmp	r3, #48	; 0x30
 800807a:	d107      	bne.n	800808c <__cvt+0x74>
 800807c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008084:	bf1c      	itt	ne
 8008086:	f1c4 0401 	rsbne	r4, r4, #1
 800808a:	6034      	strne	r4, [r6, #0]
 800808c:	6833      	ldr	r3, [r6, #0]
 800808e:	441a      	add	r2, r3
 8008090:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008098:	bf08      	it	eq
 800809a:	9203      	streq	r2, [sp, #12]
 800809c:	2130      	movs	r1, #48	; 0x30
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d307      	bcc.n	80080b4 <__cvt+0x9c>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080a8:	1a1b      	subs	r3, r3, r0
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	b005      	add	sp, #20
 80080ae:	ecbd 8b02 	vpop	{d8}
 80080b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b4:	1c5c      	adds	r4, r3, #1
 80080b6:	9403      	str	r4, [sp, #12]
 80080b8:	7019      	strb	r1, [r3, #0]
 80080ba:	e7f0      	b.n	800809e <__cvt+0x86>

080080bc <__exponent>:
 80080bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080be:	4603      	mov	r3, r0
 80080c0:	2900      	cmp	r1, #0
 80080c2:	bfb8      	it	lt
 80080c4:	4249      	neglt	r1, r1
 80080c6:	f803 2b02 	strb.w	r2, [r3], #2
 80080ca:	bfb4      	ite	lt
 80080cc:	222d      	movlt	r2, #45	; 0x2d
 80080ce:	222b      	movge	r2, #43	; 0x2b
 80080d0:	2909      	cmp	r1, #9
 80080d2:	7042      	strb	r2, [r0, #1]
 80080d4:	dd2a      	ble.n	800812c <__exponent+0x70>
 80080d6:	f10d 0407 	add.w	r4, sp, #7
 80080da:	46a4      	mov	ip, r4
 80080dc:	270a      	movs	r7, #10
 80080de:	46a6      	mov	lr, r4
 80080e0:	460a      	mov	r2, r1
 80080e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80080e6:	fb07 1516 	mls	r5, r7, r6, r1
 80080ea:	3530      	adds	r5, #48	; 0x30
 80080ec:	2a63      	cmp	r2, #99	; 0x63
 80080ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80080f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080f6:	4631      	mov	r1, r6
 80080f8:	dcf1      	bgt.n	80080de <__exponent+0x22>
 80080fa:	3130      	adds	r1, #48	; 0x30
 80080fc:	f1ae 0502 	sub.w	r5, lr, #2
 8008100:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008104:	1c44      	adds	r4, r0, #1
 8008106:	4629      	mov	r1, r5
 8008108:	4561      	cmp	r1, ip
 800810a:	d30a      	bcc.n	8008122 <__exponent+0x66>
 800810c:	f10d 0209 	add.w	r2, sp, #9
 8008110:	eba2 020e 	sub.w	r2, r2, lr
 8008114:	4565      	cmp	r5, ip
 8008116:	bf88      	it	hi
 8008118:	2200      	movhi	r2, #0
 800811a:	4413      	add	r3, r2
 800811c:	1a18      	subs	r0, r3, r0
 800811e:	b003      	add	sp, #12
 8008120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800812a:	e7ed      	b.n	8008108 <__exponent+0x4c>
 800812c:	2330      	movs	r3, #48	; 0x30
 800812e:	3130      	adds	r1, #48	; 0x30
 8008130:	7083      	strb	r3, [r0, #2]
 8008132:	70c1      	strb	r1, [r0, #3]
 8008134:	1d03      	adds	r3, r0, #4
 8008136:	e7f1      	b.n	800811c <__exponent+0x60>

08008138 <_printf_float>:
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	b08b      	sub	sp, #44	; 0x2c
 800813e:	460c      	mov	r4, r1
 8008140:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008144:	4616      	mov	r6, r2
 8008146:	461f      	mov	r7, r3
 8008148:	4605      	mov	r5, r0
 800814a:	f001 fc3f 	bl	80099cc <_localeconv_r>
 800814e:	f8d0 b000 	ldr.w	fp, [r0]
 8008152:	4658      	mov	r0, fp
 8008154:	f7f8 f8cc 	bl	80002f0 <strlen>
 8008158:	2300      	movs	r3, #0
 800815a:	9308      	str	r3, [sp, #32]
 800815c:	f8d8 3000 	ldr.w	r3, [r8]
 8008160:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008164:	6822      	ldr	r2, [r4, #0]
 8008166:	3307      	adds	r3, #7
 8008168:	f023 0307 	bic.w	r3, r3, #7
 800816c:	f103 0108 	add.w	r1, r3, #8
 8008170:	f8c8 1000 	str.w	r1, [r8]
 8008174:	4682      	mov	sl, r0
 8008176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800817a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800817e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80083e0 <_printf_float+0x2a8>
 8008182:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008186:	eeb0 6bc0 	vabs.f64	d6, d0
 800818a:	eeb4 6b47 	vcmp.f64	d6, d7
 800818e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008192:	dd24      	ble.n	80081de <_printf_float+0xa6>
 8008194:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800819c:	d502      	bpl.n	80081a4 <_printf_float+0x6c>
 800819e:	232d      	movs	r3, #45	; 0x2d
 80081a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a4:	4b90      	ldr	r3, [pc, #576]	; (80083e8 <_printf_float+0x2b0>)
 80081a6:	4891      	ldr	r0, [pc, #580]	; (80083ec <_printf_float+0x2b4>)
 80081a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80081ac:	bf94      	ite	ls
 80081ae:	4698      	movls	r8, r3
 80081b0:	4680      	movhi	r8, r0
 80081b2:	2303      	movs	r3, #3
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	f022 0204 	bic.w	r2, r2, #4
 80081ba:	2300      	movs	r3, #0
 80081bc:	6022      	str	r2, [r4, #0]
 80081be:	9304      	str	r3, [sp, #16]
 80081c0:	9700      	str	r7, [sp, #0]
 80081c2:	4633      	mov	r3, r6
 80081c4:	aa09      	add	r2, sp, #36	; 0x24
 80081c6:	4621      	mov	r1, r4
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 f9d3 	bl	8008574 <_printf_common>
 80081ce:	3001      	adds	r0, #1
 80081d0:	f040 808a 	bne.w	80082e8 <_printf_float+0x1b0>
 80081d4:	f04f 30ff 	mov.w	r0, #4294967295
 80081d8:	b00b      	add	sp, #44	; 0x2c
 80081da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081de:	eeb4 0b40 	vcmp.f64	d0, d0
 80081e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e6:	d709      	bvc.n	80081fc <_printf_float+0xc4>
 80081e8:	ee10 3a90 	vmov	r3, s1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bfbc      	itt	lt
 80081f0:	232d      	movlt	r3, #45	; 0x2d
 80081f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081f6:	487e      	ldr	r0, [pc, #504]	; (80083f0 <_printf_float+0x2b8>)
 80081f8:	4b7e      	ldr	r3, [pc, #504]	; (80083f4 <_printf_float+0x2bc>)
 80081fa:	e7d5      	b.n	80081a8 <_printf_float+0x70>
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008202:	9104      	str	r1, [sp, #16]
 8008204:	1c59      	adds	r1, r3, #1
 8008206:	d13c      	bne.n	8008282 <_printf_float+0x14a>
 8008208:	2306      	movs	r3, #6
 800820a:	6063      	str	r3, [r4, #4]
 800820c:	2300      	movs	r3, #0
 800820e:	9303      	str	r3, [sp, #12]
 8008210:	ab08      	add	r3, sp, #32
 8008212:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800821a:	ab07      	add	r3, sp, #28
 800821c:	6861      	ldr	r1, [r4, #4]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	6022      	str	r2, [r4, #0]
 8008222:	f10d 031b 	add.w	r3, sp, #27
 8008226:	4628      	mov	r0, r5
 8008228:	f7ff fef6 	bl	8008018 <__cvt>
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	9907      	ldr	r1, [sp, #28]
 8008230:	2b47      	cmp	r3, #71	; 0x47
 8008232:	4680      	mov	r8, r0
 8008234:	d108      	bne.n	8008248 <_printf_float+0x110>
 8008236:	1cc8      	adds	r0, r1, #3
 8008238:	db02      	blt.n	8008240 <_printf_float+0x108>
 800823a:	6863      	ldr	r3, [r4, #4]
 800823c:	4299      	cmp	r1, r3
 800823e:	dd41      	ble.n	80082c4 <_printf_float+0x18c>
 8008240:	f1a9 0902 	sub.w	r9, r9, #2
 8008244:	fa5f f989 	uxtb.w	r9, r9
 8008248:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800824c:	d820      	bhi.n	8008290 <_printf_float+0x158>
 800824e:	3901      	subs	r1, #1
 8008250:	464a      	mov	r2, r9
 8008252:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008256:	9107      	str	r1, [sp, #28]
 8008258:	f7ff ff30 	bl	80080bc <__exponent>
 800825c:	9a08      	ldr	r2, [sp, #32]
 800825e:	9004      	str	r0, [sp, #16]
 8008260:	1813      	adds	r3, r2, r0
 8008262:	2a01      	cmp	r2, #1
 8008264:	6123      	str	r3, [r4, #16]
 8008266:	dc02      	bgt.n	800826e <_printf_float+0x136>
 8008268:	6822      	ldr	r2, [r4, #0]
 800826a:	07d2      	lsls	r2, r2, #31
 800826c:	d501      	bpl.n	8008272 <_printf_float+0x13a>
 800826e:	3301      	adds	r3, #1
 8008270:	6123      	str	r3, [r4, #16]
 8008272:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0a2      	beq.n	80081c0 <_printf_float+0x88>
 800827a:	232d      	movs	r3, #45	; 0x2d
 800827c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008280:	e79e      	b.n	80081c0 <_printf_float+0x88>
 8008282:	9904      	ldr	r1, [sp, #16]
 8008284:	2947      	cmp	r1, #71	; 0x47
 8008286:	d1c1      	bne.n	800820c <_printf_float+0xd4>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1bf      	bne.n	800820c <_printf_float+0xd4>
 800828c:	2301      	movs	r3, #1
 800828e:	e7bc      	b.n	800820a <_printf_float+0xd2>
 8008290:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008294:	d118      	bne.n	80082c8 <_printf_float+0x190>
 8008296:	2900      	cmp	r1, #0
 8008298:	6863      	ldr	r3, [r4, #4]
 800829a:	dd0b      	ble.n	80082b4 <_printf_float+0x17c>
 800829c:	6121      	str	r1, [r4, #16]
 800829e:	b913      	cbnz	r3, 80082a6 <_printf_float+0x16e>
 80082a0:	6822      	ldr	r2, [r4, #0]
 80082a2:	07d0      	lsls	r0, r2, #31
 80082a4:	d502      	bpl.n	80082ac <_printf_float+0x174>
 80082a6:	3301      	adds	r3, #1
 80082a8:	440b      	add	r3, r1
 80082aa:	6123      	str	r3, [r4, #16]
 80082ac:	2300      	movs	r3, #0
 80082ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	e7de      	b.n	8008272 <_printf_float+0x13a>
 80082b4:	b913      	cbnz	r3, 80082bc <_printf_float+0x184>
 80082b6:	6822      	ldr	r2, [r4, #0]
 80082b8:	07d2      	lsls	r2, r2, #31
 80082ba:	d501      	bpl.n	80082c0 <_printf_float+0x188>
 80082bc:	3302      	adds	r3, #2
 80082be:	e7f4      	b.n	80082aa <_printf_float+0x172>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e7f2      	b.n	80082aa <_printf_float+0x172>
 80082c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80082c8:	9b08      	ldr	r3, [sp, #32]
 80082ca:	4299      	cmp	r1, r3
 80082cc:	db05      	blt.n	80082da <_printf_float+0x1a2>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	6121      	str	r1, [r4, #16]
 80082d2:	07d8      	lsls	r0, r3, #31
 80082d4:	d5ea      	bpl.n	80082ac <_printf_float+0x174>
 80082d6:	1c4b      	adds	r3, r1, #1
 80082d8:	e7e7      	b.n	80082aa <_printf_float+0x172>
 80082da:	2900      	cmp	r1, #0
 80082dc:	bfd4      	ite	le
 80082de:	f1c1 0202 	rsble	r2, r1, #2
 80082e2:	2201      	movgt	r2, #1
 80082e4:	4413      	add	r3, r2
 80082e6:	e7e0      	b.n	80082aa <_printf_float+0x172>
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	055a      	lsls	r2, r3, #21
 80082ec:	d407      	bmi.n	80082fe <_printf_float+0x1c6>
 80082ee:	6923      	ldr	r3, [r4, #16]
 80082f0:	4642      	mov	r2, r8
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	d12a      	bne.n	8008352 <_printf_float+0x21a>
 80082fc:	e76a      	b.n	80081d4 <_printf_float+0x9c>
 80082fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008302:	f240 80e2 	bls.w	80084ca <_printf_float+0x392>
 8008306:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800830a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800830e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008312:	d133      	bne.n	800837c <_printf_float+0x244>
 8008314:	4a38      	ldr	r2, [pc, #224]	; (80083f8 <_printf_float+0x2c0>)
 8008316:	2301      	movs	r3, #1
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	f43f af58 	beq.w	80081d4 <_printf_float+0x9c>
 8008324:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008328:	429a      	cmp	r2, r3
 800832a:	db02      	blt.n	8008332 <_printf_float+0x1fa>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	07d8      	lsls	r0, r3, #31
 8008330:	d50f      	bpl.n	8008352 <_printf_float+0x21a>
 8008332:	4653      	mov	r3, sl
 8008334:	465a      	mov	r2, fp
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f af49 	beq.w	80081d4 <_printf_float+0x9c>
 8008342:	f04f 0800 	mov.w	r8, #0
 8008346:	f104 091a 	add.w	r9, r4, #26
 800834a:	9b08      	ldr	r3, [sp, #32]
 800834c:	3b01      	subs	r3, #1
 800834e:	4543      	cmp	r3, r8
 8008350:	dc09      	bgt.n	8008366 <_printf_float+0x22e>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	079b      	lsls	r3, r3, #30
 8008356:	f100 8108 	bmi.w	800856a <_printf_float+0x432>
 800835a:	68e0      	ldr	r0, [r4, #12]
 800835c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835e:	4298      	cmp	r0, r3
 8008360:	bfb8      	it	lt
 8008362:	4618      	movlt	r0, r3
 8008364:	e738      	b.n	80081d8 <_printf_float+0xa0>
 8008366:	2301      	movs	r3, #1
 8008368:	464a      	mov	r2, r9
 800836a:	4631      	mov	r1, r6
 800836c:	4628      	mov	r0, r5
 800836e:	47b8      	blx	r7
 8008370:	3001      	adds	r0, #1
 8008372:	f43f af2f 	beq.w	80081d4 <_printf_float+0x9c>
 8008376:	f108 0801 	add.w	r8, r8, #1
 800837a:	e7e6      	b.n	800834a <_printf_float+0x212>
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	2b00      	cmp	r3, #0
 8008380:	dc3c      	bgt.n	80083fc <_printf_float+0x2c4>
 8008382:	4a1d      	ldr	r2, [pc, #116]	; (80083f8 <_printf_float+0x2c0>)
 8008384:	2301      	movs	r3, #1
 8008386:	4631      	mov	r1, r6
 8008388:	4628      	mov	r0, r5
 800838a:	47b8      	blx	r7
 800838c:	3001      	adds	r0, #1
 800838e:	f43f af21 	beq.w	80081d4 <_printf_float+0x9c>
 8008392:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008396:	4313      	orrs	r3, r2
 8008398:	d102      	bne.n	80083a0 <_printf_float+0x268>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	07d9      	lsls	r1, r3, #31
 800839e:	d5d8      	bpl.n	8008352 <_printf_float+0x21a>
 80083a0:	4653      	mov	r3, sl
 80083a2:	465a      	mov	r2, fp
 80083a4:	4631      	mov	r1, r6
 80083a6:	4628      	mov	r0, r5
 80083a8:	47b8      	blx	r7
 80083aa:	3001      	adds	r0, #1
 80083ac:	f43f af12 	beq.w	80081d4 <_printf_float+0x9c>
 80083b0:	f04f 0900 	mov.w	r9, #0
 80083b4:	f104 0a1a 	add.w	sl, r4, #26
 80083b8:	9b07      	ldr	r3, [sp, #28]
 80083ba:	425b      	negs	r3, r3
 80083bc:	454b      	cmp	r3, r9
 80083be:	dc01      	bgt.n	80083c4 <_printf_float+0x28c>
 80083c0:	9b08      	ldr	r3, [sp, #32]
 80083c2:	e795      	b.n	80082f0 <_printf_float+0x1b8>
 80083c4:	2301      	movs	r3, #1
 80083c6:	4652      	mov	r2, sl
 80083c8:	4631      	mov	r1, r6
 80083ca:	4628      	mov	r0, r5
 80083cc:	47b8      	blx	r7
 80083ce:	3001      	adds	r0, #1
 80083d0:	f43f af00 	beq.w	80081d4 <_printf_float+0x9c>
 80083d4:	f109 0901 	add.w	r9, r9, #1
 80083d8:	e7ee      	b.n	80083b8 <_printf_float+0x280>
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	ffffffff 	.word	0xffffffff
 80083e4:	7fefffff 	.word	0x7fefffff
 80083e8:	0800ab11 	.word	0x0800ab11
 80083ec:	0800ab15 	.word	0x0800ab15
 80083f0:	0800ab1d 	.word	0x0800ab1d
 80083f4:	0800ab19 	.word	0x0800ab19
 80083f8:	0800ab21 	.word	0x0800ab21
 80083fc:	9a08      	ldr	r2, [sp, #32]
 80083fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008400:	429a      	cmp	r2, r3
 8008402:	bfa8      	it	ge
 8008404:	461a      	movge	r2, r3
 8008406:	2a00      	cmp	r2, #0
 8008408:	4691      	mov	r9, r2
 800840a:	dc38      	bgt.n	800847e <_printf_float+0x346>
 800840c:	2300      	movs	r3, #0
 800840e:	9305      	str	r3, [sp, #20]
 8008410:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008414:	f104 021a 	add.w	r2, r4, #26
 8008418:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800841a:	9905      	ldr	r1, [sp, #20]
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	eba3 0309 	sub.w	r3, r3, r9
 8008422:	428b      	cmp	r3, r1
 8008424:	dc33      	bgt.n	800848e <_printf_float+0x356>
 8008426:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800842a:	429a      	cmp	r2, r3
 800842c:	db3c      	blt.n	80084a8 <_printf_float+0x370>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	07da      	lsls	r2, r3, #31
 8008432:	d439      	bmi.n	80084a8 <_printf_float+0x370>
 8008434:	9b08      	ldr	r3, [sp, #32]
 8008436:	9a04      	ldr	r2, [sp, #16]
 8008438:	9907      	ldr	r1, [sp, #28]
 800843a:	1a9a      	subs	r2, r3, r2
 800843c:	eba3 0901 	sub.w	r9, r3, r1
 8008440:	4591      	cmp	r9, r2
 8008442:	bfa8      	it	ge
 8008444:	4691      	movge	r9, r2
 8008446:	f1b9 0f00 	cmp.w	r9, #0
 800844a:	dc35      	bgt.n	80084b8 <_printf_float+0x380>
 800844c:	f04f 0800 	mov.w	r8, #0
 8008450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008454:	f104 0a1a 	add.w	sl, r4, #26
 8008458:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	eba3 0309 	sub.w	r3, r3, r9
 8008462:	4543      	cmp	r3, r8
 8008464:	f77f af75 	ble.w	8008352 <_printf_float+0x21a>
 8008468:	2301      	movs	r3, #1
 800846a:	4652      	mov	r2, sl
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f aeae 	beq.w	80081d4 <_printf_float+0x9c>
 8008478:	f108 0801 	add.w	r8, r8, #1
 800847c:	e7ec      	b.n	8008458 <_printf_float+0x320>
 800847e:	4613      	mov	r3, r2
 8008480:	4631      	mov	r1, r6
 8008482:	4642      	mov	r2, r8
 8008484:	4628      	mov	r0, r5
 8008486:	47b8      	blx	r7
 8008488:	3001      	adds	r0, #1
 800848a:	d1bf      	bne.n	800840c <_printf_float+0x2d4>
 800848c:	e6a2      	b.n	80081d4 <_printf_float+0x9c>
 800848e:	2301      	movs	r3, #1
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	9204      	str	r2, [sp, #16]
 8008496:	47b8      	blx	r7
 8008498:	3001      	adds	r0, #1
 800849a:	f43f ae9b 	beq.w	80081d4 <_printf_float+0x9c>
 800849e:	9b05      	ldr	r3, [sp, #20]
 80084a0:	9a04      	ldr	r2, [sp, #16]
 80084a2:	3301      	adds	r3, #1
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	e7b7      	b.n	8008418 <_printf_float+0x2e0>
 80084a8:	4653      	mov	r3, sl
 80084aa:	465a      	mov	r2, fp
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b8      	blx	r7
 80084b2:	3001      	adds	r0, #1
 80084b4:	d1be      	bne.n	8008434 <_printf_float+0x2fc>
 80084b6:	e68d      	b.n	80081d4 <_printf_float+0x9c>
 80084b8:	9a04      	ldr	r2, [sp, #16]
 80084ba:	464b      	mov	r3, r9
 80084bc:	4442      	add	r2, r8
 80084be:	4631      	mov	r1, r6
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b8      	blx	r7
 80084c4:	3001      	adds	r0, #1
 80084c6:	d1c1      	bne.n	800844c <_printf_float+0x314>
 80084c8:	e684      	b.n	80081d4 <_printf_float+0x9c>
 80084ca:	9a08      	ldr	r2, [sp, #32]
 80084cc:	2a01      	cmp	r2, #1
 80084ce:	dc01      	bgt.n	80084d4 <_printf_float+0x39c>
 80084d0:	07db      	lsls	r3, r3, #31
 80084d2:	d537      	bpl.n	8008544 <_printf_float+0x40c>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4642      	mov	r2, r8
 80084d8:	4631      	mov	r1, r6
 80084da:	4628      	mov	r0, r5
 80084dc:	47b8      	blx	r7
 80084de:	3001      	adds	r0, #1
 80084e0:	f43f ae78 	beq.w	80081d4 <_printf_float+0x9c>
 80084e4:	4653      	mov	r3, sl
 80084e6:	465a      	mov	r2, fp
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	f43f ae70 	beq.w	80081d4 <_printf_float+0x9c>
 80084f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80084f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80084fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008500:	d01b      	beq.n	800853a <_printf_float+0x402>
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	f108 0201 	add.w	r2, r8, #1
 8008508:	3b01      	subs	r3, #1
 800850a:	4631      	mov	r1, r6
 800850c:	4628      	mov	r0, r5
 800850e:	47b8      	blx	r7
 8008510:	3001      	adds	r0, #1
 8008512:	d10e      	bne.n	8008532 <_printf_float+0x3fa>
 8008514:	e65e      	b.n	80081d4 <_printf_float+0x9c>
 8008516:	2301      	movs	r3, #1
 8008518:	464a      	mov	r2, r9
 800851a:	4631      	mov	r1, r6
 800851c:	4628      	mov	r0, r5
 800851e:	47b8      	blx	r7
 8008520:	3001      	adds	r0, #1
 8008522:	f43f ae57 	beq.w	80081d4 <_printf_float+0x9c>
 8008526:	f108 0801 	add.w	r8, r8, #1
 800852a:	9b08      	ldr	r3, [sp, #32]
 800852c:	3b01      	subs	r3, #1
 800852e:	4543      	cmp	r3, r8
 8008530:	dcf1      	bgt.n	8008516 <_printf_float+0x3de>
 8008532:	9b04      	ldr	r3, [sp, #16]
 8008534:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008538:	e6db      	b.n	80082f2 <_printf_float+0x1ba>
 800853a:	f04f 0800 	mov.w	r8, #0
 800853e:	f104 091a 	add.w	r9, r4, #26
 8008542:	e7f2      	b.n	800852a <_printf_float+0x3f2>
 8008544:	2301      	movs	r3, #1
 8008546:	4642      	mov	r2, r8
 8008548:	e7df      	b.n	800850a <_printf_float+0x3d2>
 800854a:	2301      	movs	r3, #1
 800854c:	464a      	mov	r2, r9
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	47b8      	blx	r7
 8008554:	3001      	adds	r0, #1
 8008556:	f43f ae3d 	beq.w	80081d4 <_printf_float+0x9c>
 800855a:	f108 0801 	add.w	r8, r8, #1
 800855e:	68e3      	ldr	r3, [r4, #12]
 8008560:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008562:	1a5b      	subs	r3, r3, r1
 8008564:	4543      	cmp	r3, r8
 8008566:	dcf0      	bgt.n	800854a <_printf_float+0x412>
 8008568:	e6f7      	b.n	800835a <_printf_float+0x222>
 800856a:	f04f 0800 	mov.w	r8, #0
 800856e:	f104 0919 	add.w	r9, r4, #25
 8008572:	e7f4      	b.n	800855e <_printf_float+0x426>

08008574 <_printf_common>:
 8008574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	4616      	mov	r6, r2
 800857a:	4699      	mov	r9, r3
 800857c:	688a      	ldr	r2, [r1, #8]
 800857e:	690b      	ldr	r3, [r1, #16]
 8008580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008584:	4293      	cmp	r3, r2
 8008586:	bfb8      	it	lt
 8008588:	4613      	movlt	r3, r2
 800858a:	6033      	str	r3, [r6, #0]
 800858c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008590:	4607      	mov	r7, r0
 8008592:	460c      	mov	r4, r1
 8008594:	b10a      	cbz	r2, 800859a <_printf_common+0x26>
 8008596:	3301      	adds	r3, #1
 8008598:	6033      	str	r3, [r6, #0]
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	0699      	lsls	r1, r3, #26
 800859e:	bf42      	ittt	mi
 80085a0:	6833      	ldrmi	r3, [r6, #0]
 80085a2:	3302      	addmi	r3, #2
 80085a4:	6033      	strmi	r3, [r6, #0]
 80085a6:	6825      	ldr	r5, [r4, #0]
 80085a8:	f015 0506 	ands.w	r5, r5, #6
 80085ac:	d106      	bne.n	80085bc <_printf_common+0x48>
 80085ae:	f104 0a19 	add.w	sl, r4, #25
 80085b2:	68e3      	ldr	r3, [r4, #12]
 80085b4:	6832      	ldr	r2, [r6, #0]
 80085b6:	1a9b      	subs	r3, r3, r2
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	dc26      	bgt.n	800860a <_printf_common+0x96>
 80085bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085c0:	1e13      	subs	r3, r2, #0
 80085c2:	6822      	ldr	r2, [r4, #0]
 80085c4:	bf18      	it	ne
 80085c6:	2301      	movne	r3, #1
 80085c8:	0692      	lsls	r2, r2, #26
 80085ca:	d42b      	bmi.n	8008624 <_printf_common+0xb0>
 80085cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085d0:	4649      	mov	r1, r9
 80085d2:	4638      	mov	r0, r7
 80085d4:	47c0      	blx	r8
 80085d6:	3001      	adds	r0, #1
 80085d8:	d01e      	beq.n	8008618 <_printf_common+0xa4>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	68e5      	ldr	r5, [r4, #12]
 80085de:	6832      	ldr	r2, [r6, #0]
 80085e0:	f003 0306 	and.w	r3, r3, #6
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	bf08      	it	eq
 80085e8:	1aad      	subeq	r5, r5, r2
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	6922      	ldr	r2, [r4, #16]
 80085ee:	bf0c      	ite	eq
 80085f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085f4:	2500      	movne	r5, #0
 80085f6:	4293      	cmp	r3, r2
 80085f8:	bfc4      	itt	gt
 80085fa:	1a9b      	subgt	r3, r3, r2
 80085fc:	18ed      	addgt	r5, r5, r3
 80085fe:	2600      	movs	r6, #0
 8008600:	341a      	adds	r4, #26
 8008602:	42b5      	cmp	r5, r6
 8008604:	d11a      	bne.n	800863c <_printf_common+0xc8>
 8008606:	2000      	movs	r0, #0
 8008608:	e008      	b.n	800861c <_printf_common+0xa8>
 800860a:	2301      	movs	r3, #1
 800860c:	4652      	mov	r2, sl
 800860e:	4649      	mov	r1, r9
 8008610:	4638      	mov	r0, r7
 8008612:	47c0      	blx	r8
 8008614:	3001      	adds	r0, #1
 8008616:	d103      	bne.n	8008620 <_printf_common+0xac>
 8008618:	f04f 30ff 	mov.w	r0, #4294967295
 800861c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008620:	3501      	adds	r5, #1
 8008622:	e7c6      	b.n	80085b2 <_printf_common+0x3e>
 8008624:	18e1      	adds	r1, r4, r3
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	2030      	movs	r0, #48	; 0x30
 800862a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800862e:	4422      	add	r2, r4
 8008630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008638:	3302      	adds	r3, #2
 800863a:	e7c7      	b.n	80085cc <_printf_common+0x58>
 800863c:	2301      	movs	r3, #1
 800863e:	4622      	mov	r2, r4
 8008640:	4649      	mov	r1, r9
 8008642:	4638      	mov	r0, r7
 8008644:	47c0      	blx	r8
 8008646:	3001      	adds	r0, #1
 8008648:	d0e6      	beq.n	8008618 <_printf_common+0xa4>
 800864a:	3601      	adds	r6, #1
 800864c:	e7d9      	b.n	8008602 <_printf_common+0x8e>
	...

08008650 <_printf_i>:
 8008650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008654:	7e0f      	ldrb	r7, [r1, #24]
 8008656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008658:	2f78      	cmp	r7, #120	; 0x78
 800865a:	4691      	mov	r9, r2
 800865c:	4680      	mov	r8, r0
 800865e:	460c      	mov	r4, r1
 8008660:	469a      	mov	sl, r3
 8008662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008666:	d807      	bhi.n	8008678 <_printf_i+0x28>
 8008668:	2f62      	cmp	r7, #98	; 0x62
 800866a:	d80a      	bhi.n	8008682 <_printf_i+0x32>
 800866c:	2f00      	cmp	r7, #0
 800866e:	f000 80d8 	beq.w	8008822 <_printf_i+0x1d2>
 8008672:	2f58      	cmp	r7, #88	; 0x58
 8008674:	f000 80a3 	beq.w	80087be <_printf_i+0x16e>
 8008678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800867c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008680:	e03a      	b.n	80086f8 <_printf_i+0xa8>
 8008682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008686:	2b15      	cmp	r3, #21
 8008688:	d8f6      	bhi.n	8008678 <_printf_i+0x28>
 800868a:	a101      	add	r1, pc, #4	; (adr r1, 8008690 <_printf_i+0x40>)
 800868c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008690:	080086e9 	.word	0x080086e9
 8008694:	080086fd 	.word	0x080086fd
 8008698:	08008679 	.word	0x08008679
 800869c:	08008679 	.word	0x08008679
 80086a0:	08008679 	.word	0x08008679
 80086a4:	08008679 	.word	0x08008679
 80086a8:	080086fd 	.word	0x080086fd
 80086ac:	08008679 	.word	0x08008679
 80086b0:	08008679 	.word	0x08008679
 80086b4:	08008679 	.word	0x08008679
 80086b8:	08008679 	.word	0x08008679
 80086bc:	08008809 	.word	0x08008809
 80086c0:	0800872d 	.word	0x0800872d
 80086c4:	080087eb 	.word	0x080087eb
 80086c8:	08008679 	.word	0x08008679
 80086cc:	08008679 	.word	0x08008679
 80086d0:	0800882b 	.word	0x0800882b
 80086d4:	08008679 	.word	0x08008679
 80086d8:	0800872d 	.word	0x0800872d
 80086dc:	08008679 	.word	0x08008679
 80086e0:	08008679 	.word	0x08008679
 80086e4:	080087f3 	.word	0x080087f3
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	1d1a      	adds	r2, r3, #4
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	602a      	str	r2, [r5, #0]
 80086f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086f8:	2301      	movs	r3, #1
 80086fa:	e0a3      	b.n	8008844 <_printf_i+0x1f4>
 80086fc:	6820      	ldr	r0, [r4, #0]
 80086fe:	6829      	ldr	r1, [r5, #0]
 8008700:	0606      	lsls	r6, r0, #24
 8008702:	f101 0304 	add.w	r3, r1, #4
 8008706:	d50a      	bpl.n	800871e <_printf_i+0xce>
 8008708:	680e      	ldr	r6, [r1, #0]
 800870a:	602b      	str	r3, [r5, #0]
 800870c:	2e00      	cmp	r6, #0
 800870e:	da03      	bge.n	8008718 <_printf_i+0xc8>
 8008710:	232d      	movs	r3, #45	; 0x2d
 8008712:	4276      	negs	r6, r6
 8008714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008718:	485e      	ldr	r0, [pc, #376]	; (8008894 <_printf_i+0x244>)
 800871a:	230a      	movs	r3, #10
 800871c:	e019      	b.n	8008752 <_printf_i+0x102>
 800871e:	680e      	ldr	r6, [r1, #0]
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008726:	bf18      	it	ne
 8008728:	b236      	sxthne	r6, r6
 800872a:	e7ef      	b.n	800870c <_printf_i+0xbc>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	6820      	ldr	r0, [r4, #0]
 8008730:	1d19      	adds	r1, r3, #4
 8008732:	6029      	str	r1, [r5, #0]
 8008734:	0601      	lsls	r1, r0, #24
 8008736:	d501      	bpl.n	800873c <_printf_i+0xec>
 8008738:	681e      	ldr	r6, [r3, #0]
 800873a:	e002      	b.n	8008742 <_printf_i+0xf2>
 800873c:	0646      	lsls	r6, r0, #25
 800873e:	d5fb      	bpl.n	8008738 <_printf_i+0xe8>
 8008740:	881e      	ldrh	r6, [r3, #0]
 8008742:	4854      	ldr	r0, [pc, #336]	; (8008894 <_printf_i+0x244>)
 8008744:	2f6f      	cmp	r7, #111	; 0x6f
 8008746:	bf0c      	ite	eq
 8008748:	2308      	moveq	r3, #8
 800874a:	230a      	movne	r3, #10
 800874c:	2100      	movs	r1, #0
 800874e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008752:	6865      	ldr	r5, [r4, #4]
 8008754:	60a5      	str	r5, [r4, #8]
 8008756:	2d00      	cmp	r5, #0
 8008758:	bfa2      	ittt	ge
 800875a:	6821      	ldrge	r1, [r4, #0]
 800875c:	f021 0104 	bicge.w	r1, r1, #4
 8008760:	6021      	strge	r1, [r4, #0]
 8008762:	b90e      	cbnz	r6, 8008768 <_printf_i+0x118>
 8008764:	2d00      	cmp	r5, #0
 8008766:	d04d      	beq.n	8008804 <_printf_i+0x1b4>
 8008768:	4615      	mov	r5, r2
 800876a:	fbb6 f1f3 	udiv	r1, r6, r3
 800876e:	fb03 6711 	mls	r7, r3, r1, r6
 8008772:	5dc7      	ldrb	r7, [r0, r7]
 8008774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008778:	4637      	mov	r7, r6
 800877a:	42bb      	cmp	r3, r7
 800877c:	460e      	mov	r6, r1
 800877e:	d9f4      	bls.n	800876a <_printf_i+0x11a>
 8008780:	2b08      	cmp	r3, #8
 8008782:	d10b      	bne.n	800879c <_printf_i+0x14c>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	07de      	lsls	r6, r3, #31
 8008788:	d508      	bpl.n	800879c <_printf_i+0x14c>
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	6861      	ldr	r1, [r4, #4]
 800878e:	4299      	cmp	r1, r3
 8008790:	bfde      	ittt	le
 8008792:	2330      	movle	r3, #48	; 0x30
 8008794:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008798:	f105 35ff 	addle.w	r5, r5, #4294967295
 800879c:	1b52      	subs	r2, r2, r5
 800879e:	6122      	str	r2, [r4, #16]
 80087a0:	f8cd a000 	str.w	sl, [sp]
 80087a4:	464b      	mov	r3, r9
 80087a6:	aa03      	add	r2, sp, #12
 80087a8:	4621      	mov	r1, r4
 80087aa:	4640      	mov	r0, r8
 80087ac:	f7ff fee2 	bl	8008574 <_printf_common>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d14c      	bne.n	800884e <_printf_i+0x1fe>
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	b004      	add	sp, #16
 80087ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087be:	4835      	ldr	r0, [pc, #212]	; (8008894 <_printf_i+0x244>)
 80087c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087c4:	6829      	ldr	r1, [r5, #0]
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80087cc:	6029      	str	r1, [r5, #0]
 80087ce:	061d      	lsls	r5, r3, #24
 80087d0:	d514      	bpl.n	80087fc <_printf_i+0x1ac>
 80087d2:	07df      	lsls	r7, r3, #31
 80087d4:	bf44      	itt	mi
 80087d6:	f043 0320 	orrmi.w	r3, r3, #32
 80087da:	6023      	strmi	r3, [r4, #0]
 80087dc:	b91e      	cbnz	r6, 80087e6 <_printf_i+0x196>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	f023 0320 	bic.w	r3, r3, #32
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	2310      	movs	r3, #16
 80087e8:	e7b0      	b.n	800874c <_printf_i+0xfc>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	f043 0320 	orr.w	r3, r3, #32
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	2378      	movs	r3, #120	; 0x78
 80087f4:	4828      	ldr	r0, [pc, #160]	; (8008898 <_printf_i+0x248>)
 80087f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087fa:	e7e3      	b.n	80087c4 <_printf_i+0x174>
 80087fc:	0659      	lsls	r1, r3, #25
 80087fe:	bf48      	it	mi
 8008800:	b2b6      	uxthmi	r6, r6
 8008802:	e7e6      	b.n	80087d2 <_printf_i+0x182>
 8008804:	4615      	mov	r5, r2
 8008806:	e7bb      	b.n	8008780 <_printf_i+0x130>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	6826      	ldr	r6, [r4, #0]
 800880c:	6961      	ldr	r1, [r4, #20]
 800880e:	1d18      	adds	r0, r3, #4
 8008810:	6028      	str	r0, [r5, #0]
 8008812:	0635      	lsls	r5, r6, #24
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	d501      	bpl.n	800881c <_printf_i+0x1cc>
 8008818:	6019      	str	r1, [r3, #0]
 800881a:	e002      	b.n	8008822 <_printf_i+0x1d2>
 800881c:	0670      	lsls	r0, r6, #25
 800881e:	d5fb      	bpl.n	8008818 <_printf_i+0x1c8>
 8008820:	8019      	strh	r1, [r3, #0]
 8008822:	2300      	movs	r3, #0
 8008824:	6123      	str	r3, [r4, #16]
 8008826:	4615      	mov	r5, r2
 8008828:	e7ba      	b.n	80087a0 <_printf_i+0x150>
 800882a:	682b      	ldr	r3, [r5, #0]
 800882c:	1d1a      	adds	r2, r3, #4
 800882e:	602a      	str	r2, [r5, #0]
 8008830:	681d      	ldr	r5, [r3, #0]
 8008832:	6862      	ldr	r2, [r4, #4]
 8008834:	2100      	movs	r1, #0
 8008836:	4628      	mov	r0, r5
 8008838:	f7f7 fd62 	bl	8000300 <memchr>
 800883c:	b108      	cbz	r0, 8008842 <_printf_i+0x1f2>
 800883e:	1b40      	subs	r0, r0, r5
 8008840:	6060      	str	r0, [r4, #4]
 8008842:	6863      	ldr	r3, [r4, #4]
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	2300      	movs	r3, #0
 8008848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884c:	e7a8      	b.n	80087a0 <_printf_i+0x150>
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	462a      	mov	r2, r5
 8008852:	4649      	mov	r1, r9
 8008854:	4640      	mov	r0, r8
 8008856:	47d0      	blx	sl
 8008858:	3001      	adds	r0, #1
 800885a:	d0ab      	beq.n	80087b4 <_printf_i+0x164>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	079b      	lsls	r3, r3, #30
 8008860:	d413      	bmi.n	800888a <_printf_i+0x23a>
 8008862:	68e0      	ldr	r0, [r4, #12]
 8008864:	9b03      	ldr	r3, [sp, #12]
 8008866:	4298      	cmp	r0, r3
 8008868:	bfb8      	it	lt
 800886a:	4618      	movlt	r0, r3
 800886c:	e7a4      	b.n	80087b8 <_printf_i+0x168>
 800886e:	2301      	movs	r3, #1
 8008870:	4632      	mov	r2, r6
 8008872:	4649      	mov	r1, r9
 8008874:	4640      	mov	r0, r8
 8008876:	47d0      	blx	sl
 8008878:	3001      	adds	r0, #1
 800887a:	d09b      	beq.n	80087b4 <_printf_i+0x164>
 800887c:	3501      	adds	r5, #1
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	9903      	ldr	r1, [sp, #12]
 8008882:	1a5b      	subs	r3, r3, r1
 8008884:	42ab      	cmp	r3, r5
 8008886:	dcf2      	bgt.n	800886e <_printf_i+0x21e>
 8008888:	e7eb      	b.n	8008862 <_printf_i+0x212>
 800888a:	2500      	movs	r5, #0
 800888c:	f104 0619 	add.w	r6, r4, #25
 8008890:	e7f5      	b.n	800887e <_printf_i+0x22e>
 8008892:	bf00      	nop
 8008894:	0800ab23 	.word	0x0800ab23
 8008898:	0800ab34 	.word	0x0800ab34

0800889c <siprintf>:
 800889c:	b40e      	push	{r1, r2, r3}
 800889e:	b500      	push	{lr}
 80088a0:	b09c      	sub	sp, #112	; 0x70
 80088a2:	ab1d      	add	r3, sp, #116	; 0x74
 80088a4:	9002      	str	r0, [sp, #8]
 80088a6:	9006      	str	r0, [sp, #24]
 80088a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088ac:	4809      	ldr	r0, [pc, #36]	; (80088d4 <siprintf+0x38>)
 80088ae:	9107      	str	r1, [sp, #28]
 80088b0:	9104      	str	r1, [sp, #16]
 80088b2:	4909      	ldr	r1, [pc, #36]	; (80088d8 <siprintf+0x3c>)
 80088b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b8:	9105      	str	r1, [sp, #20]
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	a902      	add	r1, sp, #8
 80088c0:	f001 fe24 	bl	800a50c <_svfiprintf_r>
 80088c4:	9b02      	ldr	r3, [sp, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	b01c      	add	sp, #112	; 0x70
 80088cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088d0:	b003      	add	sp, #12
 80088d2:	4770      	bx	lr
 80088d4:	24000010 	.word	0x24000010
 80088d8:	ffff0208 	.word	0xffff0208

080088dc <__swbuf_r>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	460e      	mov	r6, r1
 80088e0:	4614      	mov	r4, r2
 80088e2:	4605      	mov	r5, r0
 80088e4:	b118      	cbz	r0, 80088ee <__swbuf_r+0x12>
 80088e6:	6983      	ldr	r3, [r0, #24]
 80088e8:	b90b      	cbnz	r3, 80088ee <__swbuf_r+0x12>
 80088ea:	f000 ffd1 	bl	8009890 <__sinit>
 80088ee:	4b21      	ldr	r3, [pc, #132]	; (8008974 <__swbuf_r+0x98>)
 80088f0:	429c      	cmp	r4, r3
 80088f2:	d12b      	bne.n	800894c <__swbuf_r+0x70>
 80088f4:	686c      	ldr	r4, [r5, #4]
 80088f6:	69a3      	ldr	r3, [r4, #24]
 80088f8:	60a3      	str	r3, [r4, #8]
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	071a      	lsls	r2, r3, #28
 80088fe:	d52f      	bpl.n	8008960 <__swbuf_r+0x84>
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	b36b      	cbz	r3, 8008960 <__swbuf_r+0x84>
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	6820      	ldr	r0, [r4, #0]
 8008908:	1ac0      	subs	r0, r0, r3
 800890a:	6963      	ldr	r3, [r4, #20]
 800890c:	b2f6      	uxtb	r6, r6
 800890e:	4283      	cmp	r3, r0
 8008910:	4637      	mov	r7, r6
 8008912:	dc04      	bgt.n	800891e <__swbuf_r+0x42>
 8008914:	4621      	mov	r1, r4
 8008916:	4628      	mov	r0, r5
 8008918:	f000 ff26 	bl	8009768 <_fflush_r>
 800891c:	bb30      	cbnz	r0, 800896c <__swbuf_r+0x90>
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	3b01      	subs	r3, #1
 8008922:	60a3      	str	r3, [r4, #8]
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	6022      	str	r2, [r4, #0]
 800892a:	701e      	strb	r6, [r3, #0]
 800892c:	6963      	ldr	r3, [r4, #20]
 800892e:	3001      	adds	r0, #1
 8008930:	4283      	cmp	r3, r0
 8008932:	d004      	beq.n	800893e <__swbuf_r+0x62>
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	07db      	lsls	r3, r3, #31
 8008938:	d506      	bpl.n	8008948 <__swbuf_r+0x6c>
 800893a:	2e0a      	cmp	r6, #10
 800893c:	d104      	bne.n	8008948 <__swbuf_r+0x6c>
 800893e:	4621      	mov	r1, r4
 8008940:	4628      	mov	r0, r5
 8008942:	f000 ff11 	bl	8009768 <_fflush_r>
 8008946:	b988      	cbnz	r0, 800896c <__swbuf_r+0x90>
 8008948:	4638      	mov	r0, r7
 800894a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800894c:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <__swbuf_r+0x9c>)
 800894e:	429c      	cmp	r4, r3
 8008950:	d101      	bne.n	8008956 <__swbuf_r+0x7a>
 8008952:	68ac      	ldr	r4, [r5, #8]
 8008954:	e7cf      	b.n	80088f6 <__swbuf_r+0x1a>
 8008956:	4b09      	ldr	r3, [pc, #36]	; (800897c <__swbuf_r+0xa0>)
 8008958:	429c      	cmp	r4, r3
 800895a:	bf08      	it	eq
 800895c:	68ec      	ldreq	r4, [r5, #12]
 800895e:	e7ca      	b.n	80088f6 <__swbuf_r+0x1a>
 8008960:	4621      	mov	r1, r4
 8008962:	4628      	mov	r0, r5
 8008964:	f000 f80c 	bl	8008980 <__swsetup_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	d0cb      	beq.n	8008904 <__swbuf_r+0x28>
 800896c:	f04f 37ff 	mov.w	r7, #4294967295
 8008970:	e7ea      	b.n	8008948 <__swbuf_r+0x6c>
 8008972:	bf00      	nop
 8008974:	0800abf8 	.word	0x0800abf8
 8008978:	0800ac18 	.word	0x0800ac18
 800897c:	0800abd8 	.word	0x0800abd8

08008980 <__swsetup_r>:
 8008980:	4b32      	ldr	r3, [pc, #200]	; (8008a4c <__swsetup_r+0xcc>)
 8008982:	b570      	push	{r4, r5, r6, lr}
 8008984:	681d      	ldr	r5, [r3, #0]
 8008986:	4606      	mov	r6, r0
 8008988:	460c      	mov	r4, r1
 800898a:	b125      	cbz	r5, 8008996 <__swsetup_r+0x16>
 800898c:	69ab      	ldr	r3, [r5, #24]
 800898e:	b913      	cbnz	r3, 8008996 <__swsetup_r+0x16>
 8008990:	4628      	mov	r0, r5
 8008992:	f000 ff7d 	bl	8009890 <__sinit>
 8008996:	4b2e      	ldr	r3, [pc, #184]	; (8008a50 <__swsetup_r+0xd0>)
 8008998:	429c      	cmp	r4, r3
 800899a:	d10f      	bne.n	80089bc <__swsetup_r+0x3c>
 800899c:	686c      	ldr	r4, [r5, #4]
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089a4:	0719      	lsls	r1, r3, #28
 80089a6:	d42c      	bmi.n	8008a02 <__swsetup_r+0x82>
 80089a8:	06dd      	lsls	r5, r3, #27
 80089aa:	d411      	bmi.n	80089d0 <__swsetup_r+0x50>
 80089ac:	2309      	movs	r3, #9
 80089ae:	6033      	str	r3, [r6, #0]
 80089b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ba:	e03e      	b.n	8008a3a <__swsetup_r+0xba>
 80089bc:	4b25      	ldr	r3, [pc, #148]	; (8008a54 <__swsetup_r+0xd4>)
 80089be:	429c      	cmp	r4, r3
 80089c0:	d101      	bne.n	80089c6 <__swsetup_r+0x46>
 80089c2:	68ac      	ldr	r4, [r5, #8]
 80089c4:	e7eb      	b.n	800899e <__swsetup_r+0x1e>
 80089c6:	4b24      	ldr	r3, [pc, #144]	; (8008a58 <__swsetup_r+0xd8>)
 80089c8:	429c      	cmp	r4, r3
 80089ca:	bf08      	it	eq
 80089cc:	68ec      	ldreq	r4, [r5, #12]
 80089ce:	e7e6      	b.n	800899e <__swsetup_r+0x1e>
 80089d0:	0758      	lsls	r0, r3, #29
 80089d2:	d512      	bpl.n	80089fa <__swsetup_r+0x7a>
 80089d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089d6:	b141      	cbz	r1, 80089ea <__swsetup_r+0x6a>
 80089d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089dc:	4299      	cmp	r1, r3
 80089de:	d002      	beq.n	80089e6 <__swsetup_r+0x66>
 80089e0:	4630      	mov	r0, r6
 80089e2:	f001 fc29 	bl	800a238 <_free_r>
 80089e6:	2300      	movs	r3, #0
 80089e8:	6363      	str	r3, [r4, #52]	; 0x34
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	2300      	movs	r3, #0
 80089f4:	6063      	str	r3, [r4, #4]
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	f043 0308 	orr.w	r3, r3, #8
 8008a00:	81a3      	strh	r3, [r4, #12]
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	b94b      	cbnz	r3, 8008a1a <__swsetup_r+0x9a>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a10:	d003      	beq.n	8008a1a <__swsetup_r+0x9a>
 8008a12:	4621      	mov	r1, r4
 8008a14:	4630      	mov	r0, r6
 8008a16:	f001 f805 	bl	8009a24 <__smakebuf_r>
 8008a1a:	89a0      	ldrh	r0, [r4, #12]
 8008a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a20:	f010 0301 	ands.w	r3, r0, #1
 8008a24:	d00a      	beq.n	8008a3c <__swsetup_r+0xbc>
 8008a26:	2300      	movs	r3, #0
 8008a28:	60a3      	str	r3, [r4, #8]
 8008a2a:	6963      	ldr	r3, [r4, #20]
 8008a2c:	425b      	negs	r3, r3
 8008a2e:	61a3      	str	r3, [r4, #24]
 8008a30:	6923      	ldr	r3, [r4, #16]
 8008a32:	b943      	cbnz	r3, 8008a46 <__swsetup_r+0xc6>
 8008a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a38:	d1ba      	bne.n	80089b0 <__swsetup_r+0x30>
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}
 8008a3c:	0781      	lsls	r1, r0, #30
 8008a3e:	bf58      	it	pl
 8008a40:	6963      	ldrpl	r3, [r4, #20]
 8008a42:	60a3      	str	r3, [r4, #8]
 8008a44:	e7f4      	b.n	8008a30 <__swsetup_r+0xb0>
 8008a46:	2000      	movs	r0, #0
 8008a48:	e7f7      	b.n	8008a3a <__swsetup_r+0xba>
 8008a4a:	bf00      	nop
 8008a4c:	24000010 	.word	0x24000010
 8008a50:	0800abf8 	.word	0x0800abf8
 8008a54:	0800ac18 	.word	0x0800ac18
 8008a58:	0800abd8 	.word	0x0800abd8

08008a5c <abort>:
 8008a5c:	b508      	push	{r3, lr}
 8008a5e:	2006      	movs	r0, #6
 8008a60:	f001 fe8c 	bl	800a77c <raise>
 8008a64:	2001      	movs	r0, #1
 8008a66:	f7f8 ff35 	bl	80018d4 <_exit>

08008a6a <quorem>:
 8008a6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6e:	6903      	ldr	r3, [r0, #16]
 8008a70:	690c      	ldr	r4, [r1, #16]
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	4607      	mov	r7, r0
 8008a76:	f2c0 8081 	blt.w	8008b7c <quorem+0x112>
 8008a7a:	3c01      	subs	r4, #1
 8008a7c:	f101 0814 	add.w	r8, r1, #20
 8008a80:	f100 0514 	add.w	r5, r0, #20
 8008a84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a92:	3301      	adds	r3, #1
 8008a94:	429a      	cmp	r2, r3
 8008a96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008aa2:	d331      	bcc.n	8008b08 <quorem+0x9e>
 8008aa4:	f04f 0e00 	mov.w	lr, #0
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	46ac      	mov	ip, r5
 8008aac:	46f2      	mov	sl, lr
 8008aae:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ab2:	b293      	uxth	r3, r2
 8008ab4:	fb06 e303 	mla	r3, r6, r3, lr
 8008ab8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	ebaa 0303 	sub.w	r3, sl, r3
 8008ac2:	f8dc a000 	ldr.w	sl, [ip]
 8008ac6:	0c12      	lsrs	r2, r2, #16
 8008ac8:	fa13 f38a 	uxtah	r3, r3, sl
 8008acc:	fb06 e202 	mla	r2, r6, r2, lr
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	9b00      	ldr	r3, [sp, #0]
 8008ad4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ad8:	b292      	uxth	r2, r2
 8008ada:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ae2:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ae6:	4581      	cmp	r9, r0
 8008ae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aec:	f84c 3b04 	str.w	r3, [ip], #4
 8008af0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008af4:	d2db      	bcs.n	8008aae <quorem+0x44>
 8008af6:	f855 300b 	ldr.w	r3, [r5, fp]
 8008afa:	b92b      	cbnz	r3, 8008b08 <quorem+0x9e>
 8008afc:	9b01      	ldr	r3, [sp, #4]
 8008afe:	3b04      	subs	r3, #4
 8008b00:	429d      	cmp	r5, r3
 8008b02:	461a      	mov	r2, r3
 8008b04:	d32e      	bcc.n	8008b64 <quorem+0xfa>
 8008b06:	613c      	str	r4, [r7, #16]
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f001 fa7d 	bl	800a008 <__mcmp>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	db24      	blt.n	8008b5c <quorem+0xf2>
 8008b12:	3601      	adds	r6, #1
 8008b14:	4628      	mov	r0, r5
 8008b16:	f04f 0c00 	mov.w	ip, #0
 8008b1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b1e:	f8d0 e000 	ldr.w	lr, [r0]
 8008b22:	b293      	uxth	r3, r2
 8008b24:	ebac 0303 	sub.w	r3, ip, r3
 8008b28:	0c12      	lsrs	r2, r2, #16
 8008b2a:	fa13 f38e 	uxtah	r3, r3, lr
 8008b2e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b3c:	45c1      	cmp	r9, r8
 8008b3e:	f840 3b04 	str.w	r3, [r0], #4
 8008b42:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b46:	d2e8      	bcs.n	8008b1a <quorem+0xb0>
 8008b48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b50:	b922      	cbnz	r2, 8008b5c <quorem+0xf2>
 8008b52:	3b04      	subs	r3, #4
 8008b54:	429d      	cmp	r5, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	d30a      	bcc.n	8008b70 <quorem+0x106>
 8008b5a:	613c      	str	r4, [r7, #16]
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	b003      	add	sp, #12
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	3b04      	subs	r3, #4
 8008b68:	2a00      	cmp	r2, #0
 8008b6a:	d1cc      	bne.n	8008b06 <quorem+0x9c>
 8008b6c:	3c01      	subs	r4, #1
 8008b6e:	e7c7      	b.n	8008b00 <quorem+0x96>
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	3b04      	subs	r3, #4
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	d1f0      	bne.n	8008b5a <quorem+0xf0>
 8008b78:	3c01      	subs	r4, #1
 8008b7a:	e7eb      	b.n	8008b54 <quorem+0xea>
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e7ee      	b.n	8008b5e <quorem+0xf4>

08008b80 <_dtoa_r>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	ed2d 8b02 	vpush	{d8}
 8008b88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b8a:	b091      	sub	sp, #68	; 0x44
 8008b8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b90:	ec59 8b10 	vmov	r8, r9, d0
 8008b94:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008b96:	9106      	str	r1, [sp, #24]
 8008b98:	4606      	mov	r6, r0
 8008b9a:	9208      	str	r2, [sp, #32]
 8008b9c:	930c      	str	r3, [sp, #48]	; 0x30
 8008b9e:	b975      	cbnz	r5, 8008bbe <_dtoa_r+0x3e>
 8008ba0:	2010      	movs	r0, #16
 8008ba2:	f000 ff7f 	bl	8009aa4 <malloc>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	6270      	str	r0, [r6, #36]	; 0x24
 8008baa:	b920      	cbnz	r0, 8008bb6 <_dtoa_r+0x36>
 8008bac:	4baa      	ldr	r3, [pc, #680]	; (8008e58 <_dtoa_r+0x2d8>)
 8008bae:	21ea      	movs	r1, #234	; 0xea
 8008bb0:	48aa      	ldr	r0, [pc, #680]	; (8008e5c <_dtoa_r+0x2dc>)
 8008bb2:	f7ff f875 	bl	8007ca0 <__assert_func>
 8008bb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bba:	6005      	str	r5, [r0, #0]
 8008bbc:	60c5      	str	r5, [r0, #12]
 8008bbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	b151      	cbz	r1, 8008bda <_dtoa_r+0x5a>
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	604a      	str	r2, [r1, #4]
 8008bc8:	2301      	movs	r3, #1
 8008bca:	4093      	lsls	r3, r2
 8008bcc:	608b      	str	r3, [r1, #8]
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 ffd8 	bl	8009b84 <_Bfree>
 8008bd4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	f1b9 0300 	subs.w	r3, r9, #0
 8008bde:	bfbb      	ittet	lt
 8008be0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008be4:	9303      	strlt	r3, [sp, #12]
 8008be6:	2300      	movge	r3, #0
 8008be8:	2201      	movlt	r2, #1
 8008bea:	bfac      	ite	ge
 8008bec:	6023      	strge	r3, [r4, #0]
 8008bee:	6022      	strlt	r2, [r4, #0]
 8008bf0:	4b9b      	ldr	r3, [pc, #620]	; (8008e60 <_dtoa_r+0x2e0>)
 8008bf2:	9c03      	ldr	r4, [sp, #12]
 8008bf4:	43a3      	bics	r3, r4
 8008bf6:	d11c      	bne.n	8008c32 <_dtoa_r+0xb2>
 8008bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008c04:	ea53 0308 	orrs.w	r3, r3, r8
 8008c08:	f000 84fd 	beq.w	8009606 <_dtoa_r+0xa86>
 8008c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c0e:	b963      	cbnz	r3, 8008c2a <_dtoa_r+0xaa>
 8008c10:	4b94      	ldr	r3, [pc, #592]	; (8008e64 <_dtoa_r+0x2e4>)
 8008c12:	e01f      	b.n	8008c54 <_dtoa_r+0xd4>
 8008c14:	4b94      	ldr	r3, [pc, #592]	; (8008e68 <_dtoa_r+0x2e8>)
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	3308      	adds	r3, #8
 8008c1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	9801      	ldr	r0, [sp, #4]
 8008c20:	b011      	add	sp, #68	; 0x44
 8008c22:	ecbd 8b02 	vpop	{d8}
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2a:	4b8e      	ldr	r3, [pc, #568]	; (8008e64 <_dtoa_r+0x2e4>)
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	3303      	adds	r3, #3
 8008c30:	e7f3      	b.n	8008c1a <_dtoa_r+0x9a>
 8008c32:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008c36:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c3e:	d10b      	bne.n	8008c58 <_dtoa_r+0xd8>
 8008c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c42:	2301      	movs	r3, #1
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 84d9 	beq.w	8009600 <_dtoa_r+0xa80>
 8008c4e:	4887      	ldr	r0, [pc, #540]	; (8008e6c <_dtoa_r+0x2ec>)
 8008c50:	6018      	str	r0, [r3, #0]
 8008c52:	1e43      	subs	r3, r0, #1
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	e7e2      	b.n	8008c1e <_dtoa_r+0x9e>
 8008c58:	a90f      	add	r1, sp, #60	; 0x3c
 8008c5a:	aa0e      	add	r2, sp, #56	; 0x38
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	eeb0 0b48 	vmov.f64	d0, d8
 8008c62:	f001 fa77 	bl	800a154 <__d2b>
 8008c66:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008c6e:	2900      	cmp	r1, #0
 8008c70:	d046      	beq.n	8008d00 <_dtoa_r+0x180>
 8008c72:	ee18 4a90 	vmov	r4, s17
 8008c76:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008c7a:	ec53 2b18 	vmov	r2, r3, d8
 8008c7e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008c82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c86:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008c8a:	2400      	movs	r4, #0
 8008c8c:	ec43 2b16 	vmov	d6, r2, r3
 8008c90:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008c94:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008e40 <_dtoa_r+0x2c0>
 8008c98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c9c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008e48 <_dtoa_r+0x2c8>
 8008ca0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008ca4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008e50 <_dtoa_r+0x2d0>
 8008ca8:	ee07 1a90 	vmov	s15, r1
 8008cac:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008cb0:	eeb0 7b46 	vmov.f64	d7, d6
 8008cb4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008cb8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008cbc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc4:	ee16 ba90 	vmov	fp, s13
 8008cc8:	940a      	str	r4, [sp, #40]	; 0x28
 8008cca:	d508      	bpl.n	8008cde <_dtoa_r+0x15e>
 8008ccc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008cd0:	eeb4 6b47 	vcmp.f64	d6, d7
 8008cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd8:	bf18      	it	ne
 8008cda:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008cde:	f1bb 0f16 	cmp.w	fp, #22
 8008ce2:	d82f      	bhi.n	8008d44 <_dtoa_r+0x1c4>
 8008ce4:	4b62      	ldr	r3, [pc, #392]	; (8008e70 <_dtoa_r+0x2f0>)
 8008ce6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008cea:	ed93 7b00 	vldr	d7, [r3]
 8008cee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf6:	d501      	bpl.n	8008cfc <_dtoa_r+0x17c>
 8008cf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e022      	b.n	8008d46 <_dtoa_r+0x1c6>
 8008d00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d02:	4401      	add	r1, r0
 8008d04:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	bfc1      	itttt	gt
 8008d0c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d10:	fa04 f303 	lslgt.w	r3, r4, r3
 8008d14:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008d18:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008d1c:	bfd6      	itet	le
 8008d1e:	f1c3 0320 	rsble	r3, r3, #32
 8008d22:	ea43 0808 	orrgt.w	r8, r3, r8
 8008d26:	fa08 f803 	lslle.w	r8, r8, r3
 8008d2a:	ee07 8a90 	vmov	s15, r8
 8008d2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008d32:	3901      	subs	r1, #1
 8008d34:	ee17 4a90 	vmov	r4, s15
 8008d38:	ec53 2b17 	vmov	r2, r3, d7
 8008d3c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008d40:	2401      	movs	r4, #1
 8008d42:	e7a3      	b.n	8008c8c <_dtoa_r+0x10c>
 8008d44:	2301      	movs	r3, #1
 8008d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d48:	1a43      	subs	r3, r0, r1
 8008d4a:	1e5a      	subs	r2, r3, #1
 8008d4c:	bf45      	ittet	mi
 8008d4e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d52:	9304      	strmi	r3, [sp, #16]
 8008d54:	2300      	movpl	r3, #0
 8008d56:	2300      	movmi	r3, #0
 8008d58:	9205      	str	r2, [sp, #20]
 8008d5a:	bf54      	ite	pl
 8008d5c:	9304      	strpl	r3, [sp, #16]
 8008d5e:	9305      	strmi	r3, [sp, #20]
 8008d60:	f1bb 0f00 	cmp.w	fp, #0
 8008d64:	db18      	blt.n	8008d98 <_dtoa_r+0x218>
 8008d66:	9b05      	ldr	r3, [sp, #20]
 8008d68:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008d6c:	445b      	add	r3, fp
 8008d6e:	9305      	str	r3, [sp, #20]
 8008d70:	2300      	movs	r3, #0
 8008d72:	9a06      	ldr	r2, [sp, #24]
 8008d74:	2a09      	cmp	r2, #9
 8008d76:	d849      	bhi.n	8008e0c <_dtoa_r+0x28c>
 8008d78:	2a05      	cmp	r2, #5
 8008d7a:	bfc4      	itt	gt
 8008d7c:	3a04      	subgt	r2, #4
 8008d7e:	9206      	strgt	r2, [sp, #24]
 8008d80:	9a06      	ldr	r2, [sp, #24]
 8008d82:	f1a2 0202 	sub.w	r2, r2, #2
 8008d86:	bfcc      	ite	gt
 8008d88:	2400      	movgt	r4, #0
 8008d8a:	2401      	movle	r4, #1
 8008d8c:	2a03      	cmp	r2, #3
 8008d8e:	d848      	bhi.n	8008e22 <_dtoa_r+0x2a2>
 8008d90:	e8df f002 	tbb	[pc, r2]
 8008d94:	3a2c2e0b 	.word	0x3a2c2e0b
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	eba3 030b 	sub.w	r3, r3, fp
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	9209      	str	r2, [sp, #36]	; 0x24
 8008da4:	f1cb 0300 	rsb	r3, fp, #0
 8008da8:	e7e3      	b.n	8008d72 <_dtoa_r+0x1f2>
 8008daa:	2200      	movs	r2, #0
 8008dac:	9207      	str	r2, [sp, #28]
 8008dae:	9a08      	ldr	r2, [sp, #32]
 8008db0:	2a00      	cmp	r2, #0
 8008db2:	dc39      	bgt.n	8008e28 <_dtoa_r+0x2a8>
 8008db4:	f04f 0a01 	mov.w	sl, #1
 8008db8:	46d1      	mov	r9, sl
 8008dba:	4652      	mov	r2, sl
 8008dbc:	f8cd a020 	str.w	sl, [sp, #32]
 8008dc0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	6079      	str	r1, [r7, #4]
 8008dc6:	2004      	movs	r0, #4
 8008dc8:	f100 0c14 	add.w	ip, r0, #20
 8008dcc:	4594      	cmp	ip, r2
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	d92f      	bls.n	8008e32 <_dtoa_r+0x2b2>
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	930d      	str	r3, [sp, #52]	; 0x34
 8008dd6:	f000 fe95 	bl	8009b04 <_Balloc>
 8008dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ddc:	9001      	str	r0, [sp, #4]
 8008dde:	4602      	mov	r2, r0
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d149      	bne.n	8008e78 <_dtoa_r+0x2f8>
 8008de4:	4b23      	ldr	r3, [pc, #140]	; (8008e74 <_dtoa_r+0x2f4>)
 8008de6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008dea:	e6e1      	b.n	8008bb0 <_dtoa_r+0x30>
 8008dec:	2201      	movs	r2, #1
 8008dee:	e7dd      	b.n	8008dac <_dtoa_r+0x22c>
 8008df0:	2200      	movs	r2, #0
 8008df2:	9207      	str	r2, [sp, #28]
 8008df4:	9a08      	ldr	r2, [sp, #32]
 8008df6:	eb0b 0a02 	add.w	sl, fp, r2
 8008dfa:	f10a 0901 	add.w	r9, sl, #1
 8008dfe:	464a      	mov	r2, r9
 8008e00:	2a01      	cmp	r2, #1
 8008e02:	bfb8      	it	lt
 8008e04:	2201      	movlt	r2, #1
 8008e06:	e7db      	b.n	8008dc0 <_dtoa_r+0x240>
 8008e08:	2201      	movs	r2, #1
 8008e0a:	e7f2      	b.n	8008df2 <_dtoa_r+0x272>
 8008e0c:	2401      	movs	r4, #1
 8008e0e:	2200      	movs	r2, #0
 8008e10:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008e14:	f04f 3aff 	mov.w	sl, #4294967295
 8008e18:	2100      	movs	r1, #0
 8008e1a:	46d1      	mov	r9, sl
 8008e1c:	2212      	movs	r2, #18
 8008e1e:	9108      	str	r1, [sp, #32]
 8008e20:	e7ce      	b.n	8008dc0 <_dtoa_r+0x240>
 8008e22:	2201      	movs	r2, #1
 8008e24:	9207      	str	r2, [sp, #28]
 8008e26:	e7f5      	b.n	8008e14 <_dtoa_r+0x294>
 8008e28:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e2c:	46d1      	mov	r9, sl
 8008e2e:	4652      	mov	r2, sl
 8008e30:	e7c6      	b.n	8008dc0 <_dtoa_r+0x240>
 8008e32:	3101      	adds	r1, #1
 8008e34:	6079      	str	r1, [r7, #4]
 8008e36:	0040      	lsls	r0, r0, #1
 8008e38:	e7c6      	b.n	8008dc8 <_dtoa_r+0x248>
 8008e3a:	bf00      	nop
 8008e3c:	f3af 8000 	nop.w
 8008e40:	636f4361 	.word	0x636f4361
 8008e44:	3fd287a7 	.word	0x3fd287a7
 8008e48:	8b60c8b3 	.word	0x8b60c8b3
 8008e4c:	3fc68a28 	.word	0x3fc68a28
 8008e50:	509f79fb 	.word	0x509f79fb
 8008e54:	3fd34413 	.word	0x3fd34413
 8008e58:	0800ab52 	.word	0x0800ab52
 8008e5c:	0800ab69 	.word	0x0800ab69
 8008e60:	7ff00000 	.word	0x7ff00000
 8008e64:	0800ab4e 	.word	0x0800ab4e
 8008e68:	0800ab45 	.word	0x0800ab45
 8008e6c:	0800ab22 	.word	0x0800ab22
 8008e70:	0800acc0 	.word	0x0800acc0
 8008e74:	0800abc4 	.word	0x0800abc4
 8008e78:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008e7a:	9901      	ldr	r1, [sp, #4]
 8008e7c:	6011      	str	r1, [r2, #0]
 8008e7e:	f1b9 0f0e 	cmp.w	r9, #14
 8008e82:	d86c      	bhi.n	8008f5e <_dtoa_r+0x3de>
 8008e84:	2c00      	cmp	r4, #0
 8008e86:	d06a      	beq.n	8008f5e <_dtoa_r+0x3de>
 8008e88:	f1bb 0f00 	cmp.w	fp, #0
 8008e8c:	f340 80a0 	ble.w	8008fd0 <_dtoa_r+0x450>
 8008e90:	49c1      	ldr	r1, [pc, #772]	; (8009198 <_dtoa_r+0x618>)
 8008e92:	f00b 020f 	and.w	r2, fp, #15
 8008e96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008e9a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e9e:	ed92 7b00 	vldr	d7, [r2]
 8008ea2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008ea6:	f000 8087 	beq.w	8008fb8 <_dtoa_r+0x438>
 8008eaa:	4abc      	ldr	r2, [pc, #752]	; (800919c <_dtoa_r+0x61c>)
 8008eac:	ed92 6b08 	vldr	d6, [r2, #32]
 8008eb0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008eb4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008eb8:	f001 010f 	and.w	r1, r1, #15
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	48b7      	ldr	r0, [pc, #732]	; (800919c <_dtoa_r+0x61c>)
 8008ec0:	2900      	cmp	r1, #0
 8008ec2:	d17b      	bne.n	8008fbc <_dtoa_r+0x43c>
 8008ec4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008ec8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008ecc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ed2:	2900      	cmp	r1, #0
 8008ed4:	f000 80a2 	beq.w	800901c <_dtoa_r+0x49c>
 8008ed8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008edc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ee0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee8:	f140 8098 	bpl.w	800901c <_dtoa_r+0x49c>
 8008eec:	f1b9 0f00 	cmp.w	r9, #0
 8008ef0:	f000 8094 	beq.w	800901c <_dtoa_r+0x49c>
 8008ef4:	f1ba 0f00 	cmp.w	sl, #0
 8008ef8:	dd2f      	ble.n	8008f5a <_dtoa_r+0x3da>
 8008efa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008efe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f06:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f0a:	3201      	adds	r2, #1
 8008f0c:	4650      	mov	r0, sl
 8008f0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008f12:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008f16:	ee07 2a90 	vmov	s15, r2
 8008f1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f1e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008f22:	ee15 4a90 	vmov	r4, s11
 8008f26:	ec52 1b15 	vmov	r1, r2, d5
 8008f2a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d177      	bne.n	8009022 <_dtoa_r+0x4a2>
 8008f32:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008f36:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008f3a:	ec42 1b17 	vmov	d7, r1, r2
 8008f3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f46:	f300 8263 	bgt.w	8009410 <_dtoa_r+0x890>
 8008f4a:	eeb1 7b47 	vneg.f64	d7, d7
 8008f4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f56:	f100 8258 	bmi.w	800940a <_dtoa_r+0x88a>
 8008f5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f60:	2a00      	cmp	r2, #0
 8008f62:	f2c0 811d 	blt.w	80091a0 <_dtoa_r+0x620>
 8008f66:	f1bb 0f0e 	cmp.w	fp, #14
 8008f6a:	f300 8119 	bgt.w	80091a0 <_dtoa_r+0x620>
 8008f6e:	4b8a      	ldr	r3, [pc, #552]	; (8009198 <_dtoa_r+0x618>)
 8008f70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f74:	ed93 6b00 	vldr	d6, [r3]
 8008f78:	9b08      	ldr	r3, [sp, #32]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f280 80b7 	bge.w	80090ee <_dtoa_r+0x56e>
 8008f80:	f1b9 0f00 	cmp.w	r9, #0
 8008f84:	f300 80b3 	bgt.w	80090ee <_dtoa_r+0x56e>
 8008f88:	f040 823f 	bne.w	800940a <_dtoa_r+0x88a>
 8008f8c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008f90:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008f94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa0:	464c      	mov	r4, r9
 8008fa2:	464f      	mov	r7, r9
 8008fa4:	f280 8215 	bge.w	80093d2 <_dtoa_r+0x852>
 8008fa8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008fac:	2331      	movs	r3, #49	; 0x31
 8008fae:	f808 3b01 	strb.w	r3, [r8], #1
 8008fb2:	f10b 0b01 	add.w	fp, fp, #1
 8008fb6:	e211      	b.n	80093dc <_dtoa_r+0x85c>
 8008fb8:	2202      	movs	r2, #2
 8008fba:	e780      	b.n	8008ebe <_dtoa_r+0x33e>
 8008fbc:	07cc      	lsls	r4, r1, #31
 8008fbe:	d504      	bpl.n	8008fca <_dtoa_r+0x44a>
 8008fc0:	ed90 6b00 	vldr	d6, [r0]
 8008fc4:	3201      	adds	r2, #1
 8008fc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fca:	1049      	asrs	r1, r1, #1
 8008fcc:	3008      	adds	r0, #8
 8008fce:	e777      	b.n	8008ec0 <_dtoa_r+0x340>
 8008fd0:	d022      	beq.n	8009018 <_dtoa_r+0x498>
 8008fd2:	f1cb 0100 	rsb	r1, fp, #0
 8008fd6:	4a70      	ldr	r2, [pc, #448]	; (8009198 <_dtoa_r+0x618>)
 8008fd8:	f001 000f 	and.w	r0, r1, #15
 8008fdc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008fe0:	ed92 7b00 	vldr	d7, [r2]
 8008fe4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008fe8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fec:	486b      	ldr	r0, [pc, #428]	; (800919c <_dtoa_r+0x61c>)
 8008fee:	1109      	asrs	r1, r1, #4
 8008ff0:	2400      	movs	r4, #0
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	b929      	cbnz	r1, 8009002 <_dtoa_r+0x482>
 8008ff6:	2c00      	cmp	r4, #0
 8008ff8:	f43f af6a 	beq.w	8008ed0 <_dtoa_r+0x350>
 8008ffc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009000:	e766      	b.n	8008ed0 <_dtoa_r+0x350>
 8009002:	07cf      	lsls	r7, r1, #31
 8009004:	d505      	bpl.n	8009012 <_dtoa_r+0x492>
 8009006:	ed90 6b00 	vldr	d6, [r0]
 800900a:	3201      	adds	r2, #1
 800900c:	2401      	movs	r4, #1
 800900e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009012:	1049      	asrs	r1, r1, #1
 8009014:	3008      	adds	r0, #8
 8009016:	e7ed      	b.n	8008ff4 <_dtoa_r+0x474>
 8009018:	2202      	movs	r2, #2
 800901a:	e759      	b.n	8008ed0 <_dtoa_r+0x350>
 800901c:	465f      	mov	r7, fp
 800901e:	4648      	mov	r0, r9
 8009020:	e775      	b.n	8008f0e <_dtoa_r+0x38e>
 8009022:	ec42 1b17 	vmov	d7, r1, r2
 8009026:	4a5c      	ldr	r2, [pc, #368]	; (8009198 <_dtoa_r+0x618>)
 8009028:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800902c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009030:	9a01      	ldr	r2, [sp, #4]
 8009032:	1814      	adds	r4, r2, r0
 8009034:	9a07      	ldr	r2, [sp, #28]
 8009036:	b352      	cbz	r2, 800908e <_dtoa_r+0x50e>
 8009038:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800903c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009040:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009044:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009048:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800904c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009050:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009054:	ee14 2a90 	vmov	r2, s9
 8009058:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800905c:	3230      	adds	r2, #48	; 0x30
 800905e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009062:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906a:	f808 2b01 	strb.w	r2, [r8], #1
 800906e:	d439      	bmi.n	80090e4 <_dtoa_r+0x564>
 8009070:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009074:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800907c:	d472      	bmi.n	8009164 <_dtoa_r+0x5e4>
 800907e:	45a0      	cmp	r8, r4
 8009080:	f43f af6b 	beq.w	8008f5a <_dtoa_r+0x3da>
 8009084:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009088:	ee26 6b03 	vmul.f64	d6, d6, d3
 800908c:	e7e0      	b.n	8009050 <_dtoa_r+0x4d0>
 800908e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009092:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009096:	4621      	mov	r1, r4
 8009098:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800909c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80090a0:	ee14 2a90 	vmov	r2, s9
 80090a4:	3230      	adds	r2, #48	; 0x30
 80090a6:	f808 2b01 	strb.w	r2, [r8], #1
 80090aa:	45a0      	cmp	r8, r4
 80090ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80090b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80090b4:	d118      	bne.n	80090e8 <_dtoa_r+0x568>
 80090b6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80090ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 80090be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80090c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c6:	dc4d      	bgt.n	8009164 <_dtoa_r+0x5e4>
 80090c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80090cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80090d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d4:	f57f af41 	bpl.w	8008f5a <_dtoa_r+0x3da>
 80090d8:	4688      	mov	r8, r1
 80090da:	3901      	subs	r1, #1
 80090dc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80090e0:	2b30      	cmp	r3, #48	; 0x30
 80090e2:	d0f9      	beq.n	80090d8 <_dtoa_r+0x558>
 80090e4:	46bb      	mov	fp, r7
 80090e6:	e02a      	b.n	800913e <_dtoa_r+0x5be>
 80090e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80090ec:	e7d6      	b.n	800909c <_dtoa_r+0x51c>
 80090ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090f2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80090f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80090fa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80090fe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009102:	ee15 3a10 	vmov	r3, s10
 8009106:	3330      	adds	r3, #48	; 0x30
 8009108:	f808 3b01 	strb.w	r3, [r8], #1
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	eba8 0303 	sub.w	r3, r8, r3
 8009112:	4599      	cmp	r9, r3
 8009114:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009118:	eea3 7b46 	vfms.f64	d7, d3, d6
 800911c:	d133      	bne.n	8009186 <_dtoa_r+0x606>
 800911e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009122:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912a:	dc1a      	bgt.n	8009162 <_dtoa_r+0x5e2>
 800912c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009134:	d103      	bne.n	800913e <_dtoa_r+0x5be>
 8009136:	ee15 3a10 	vmov	r3, s10
 800913a:	07d9      	lsls	r1, r3, #31
 800913c:	d411      	bmi.n	8009162 <_dtoa_r+0x5e2>
 800913e:	4629      	mov	r1, r5
 8009140:	4630      	mov	r0, r6
 8009142:	f000 fd1f 	bl	8009b84 <_Bfree>
 8009146:	2300      	movs	r3, #0
 8009148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800914a:	f888 3000 	strb.w	r3, [r8]
 800914e:	f10b 0301 	add.w	r3, fp, #1
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009156:	2b00      	cmp	r3, #0
 8009158:	f43f ad61 	beq.w	8008c1e <_dtoa_r+0x9e>
 800915c:	f8c3 8000 	str.w	r8, [r3]
 8009160:	e55d      	b.n	8008c1e <_dtoa_r+0x9e>
 8009162:	465f      	mov	r7, fp
 8009164:	4643      	mov	r3, r8
 8009166:	4698      	mov	r8, r3
 8009168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800916c:	2a39      	cmp	r2, #57	; 0x39
 800916e:	d106      	bne.n	800917e <_dtoa_r+0x5fe>
 8009170:	9a01      	ldr	r2, [sp, #4]
 8009172:	429a      	cmp	r2, r3
 8009174:	d1f7      	bne.n	8009166 <_dtoa_r+0x5e6>
 8009176:	9901      	ldr	r1, [sp, #4]
 8009178:	2230      	movs	r2, #48	; 0x30
 800917a:	3701      	adds	r7, #1
 800917c:	700a      	strb	r2, [r1, #0]
 800917e:	781a      	ldrb	r2, [r3, #0]
 8009180:	3201      	adds	r2, #1
 8009182:	701a      	strb	r2, [r3, #0]
 8009184:	e7ae      	b.n	80090e4 <_dtoa_r+0x564>
 8009186:	ee27 7b04 	vmul.f64	d7, d7, d4
 800918a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800918e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009192:	d1b2      	bne.n	80090fa <_dtoa_r+0x57a>
 8009194:	e7d3      	b.n	800913e <_dtoa_r+0x5be>
 8009196:	bf00      	nop
 8009198:	0800acc0 	.word	0x0800acc0
 800919c:	0800ac98 	.word	0x0800ac98
 80091a0:	9907      	ldr	r1, [sp, #28]
 80091a2:	2900      	cmp	r1, #0
 80091a4:	f000 80d0 	beq.w	8009348 <_dtoa_r+0x7c8>
 80091a8:	9906      	ldr	r1, [sp, #24]
 80091aa:	2901      	cmp	r1, #1
 80091ac:	f300 80b4 	bgt.w	8009318 <_dtoa_r+0x798>
 80091b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091b2:	2900      	cmp	r1, #0
 80091b4:	f000 80ac 	beq.w	8009310 <_dtoa_r+0x790>
 80091b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80091bc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80091c0:	461c      	mov	r4, r3
 80091c2:	930a      	str	r3, [sp, #40]	; 0x28
 80091c4:	9b04      	ldr	r3, [sp, #16]
 80091c6:	4413      	add	r3, r2
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	9b05      	ldr	r3, [sp, #20]
 80091cc:	2101      	movs	r1, #1
 80091ce:	4413      	add	r3, r2
 80091d0:	4630      	mov	r0, r6
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	f000 fd8e 	bl	8009cf4 <__i2b>
 80091d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091da:	4607      	mov	r7, r0
 80091dc:	f1b8 0f00 	cmp.w	r8, #0
 80091e0:	dd0d      	ble.n	80091fe <_dtoa_r+0x67e>
 80091e2:	9a05      	ldr	r2, [sp, #20]
 80091e4:	2a00      	cmp	r2, #0
 80091e6:	dd0a      	ble.n	80091fe <_dtoa_r+0x67e>
 80091e8:	4542      	cmp	r2, r8
 80091ea:	9904      	ldr	r1, [sp, #16]
 80091ec:	bfa8      	it	ge
 80091ee:	4642      	movge	r2, r8
 80091f0:	1a89      	subs	r1, r1, r2
 80091f2:	9104      	str	r1, [sp, #16]
 80091f4:	9905      	ldr	r1, [sp, #20]
 80091f6:	eba8 0802 	sub.w	r8, r8, r2
 80091fa:	1a8a      	subs	r2, r1, r2
 80091fc:	9205      	str	r2, [sp, #20]
 80091fe:	b303      	cbz	r3, 8009242 <_dtoa_r+0x6c2>
 8009200:	9a07      	ldr	r2, [sp, #28]
 8009202:	2a00      	cmp	r2, #0
 8009204:	f000 80a5 	beq.w	8009352 <_dtoa_r+0x7d2>
 8009208:	2c00      	cmp	r4, #0
 800920a:	dd13      	ble.n	8009234 <_dtoa_r+0x6b4>
 800920c:	4639      	mov	r1, r7
 800920e:	4622      	mov	r2, r4
 8009210:	4630      	mov	r0, r6
 8009212:	930d      	str	r3, [sp, #52]	; 0x34
 8009214:	f000 fe2e 	bl	8009e74 <__pow5mult>
 8009218:	462a      	mov	r2, r5
 800921a:	4601      	mov	r1, r0
 800921c:	4607      	mov	r7, r0
 800921e:	4630      	mov	r0, r6
 8009220:	f000 fd7e 	bl	8009d20 <__multiply>
 8009224:	4629      	mov	r1, r5
 8009226:	900a      	str	r0, [sp, #40]	; 0x28
 8009228:	4630      	mov	r0, r6
 800922a:	f000 fcab 	bl	8009b84 <_Bfree>
 800922e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009232:	4615      	mov	r5, r2
 8009234:	1b1a      	subs	r2, r3, r4
 8009236:	d004      	beq.n	8009242 <_dtoa_r+0x6c2>
 8009238:	4629      	mov	r1, r5
 800923a:	4630      	mov	r0, r6
 800923c:	f000 fe1a 	bl	8009e74 <__pow5mult>
 8009240:	4605      	mov	r5, r0
 8009242:	2101      	movs	r1, #1
 8009244:	4630      	mov	r0, r6
 8009246:	f000 fd55 	bl	8009cf4 <__i2b>
 800924a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	f340 8081 	ble.w	8009356 <_dtoa_r+0x7d6>
 8009254:	461a      	mov	r2, r3
 8009256:	4601      	mov	r1, r0
 8009258:	4630      	mov	r0, r6
 800925a:	f000 fe0b 	bl	8009e74 <__pow5mult>
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	2b01      	cmp	r3, #1
 8009262:	4604      	mov	r4, r0
 8009264:	dd7a      	ble.n	800935c <_dtoa_r+0x7dc>
 8009266:	2300      	movs	r3, #0
 8009268:	930a      	str	r3, [sp, #40]	; 0x28
 800926a:	6922      	ldr	r2, [r4, #16]
 800926c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009270:	6910      	ldr	r0, [r2, #16]
 8009272:	f000 fcef 	bl	8009c54 <__hi0bits>
 8009276:	f1c0 0020 	rsb	r0, r0, #32
 800927a:	9b05      	ldr	r3, [sp, #20]
 800927c:	4418      	add	r0, r3
 800927e:	f010 001f 	ands.w	r0, r0, #31
 8009282:	f000 808c 	beq.w	800939e <_dtoa_r+0x81e>
 8009286:	f1c0 0220 	rsb	r2, r0, #32
 800928a:	2a04      	cmp	r2, #4
 800928c:	f340 8085 	ble.w	800939a <_dtoa_r+0x81a>
 8009290:	f1c0 001c 	rsb	r0, r0, #28
 8009294:	9b04      	ldr	r3, [sp, #16]
 8009296:	4403      	add	r3, r0
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	9b05      	ldr	r3, [sp, #20]
 800929c:	4403      	add	r3, r0
 800929e:	4480      	add	r8, r0
 80092a0:	9305      	str	r3, [sp, #20]
 80092a2:	9b04      	ldr	r3, [sp, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dd05      	ble.n	80092b4 <_dtoa_r+0x734>
 80092a8:	4629      	mov	r1, r5
 80092aa:	461a      	mov	r2, r3
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 fe3b 	bl	8009f28 <__lshift>
 80092b2:	4605      	mov	r5, r0
 80092b4:	9b05      	ldr	r3, [sp, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dd05      	ble.n	80092c6 <_dtoa_r+0x746>
 80092ba:	4621      	mov	r1, r4
 80092bc:	461a      	mov	r2, r3
 80092be:	4630      	mov	r0, r6
 80092c0:	f000 fe32 	bl	8009f28 <__lshift>
 80092c4:	4604      	mov	r4, r0
 80092c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d06a      	beq.n	80093a2 <_dtoa_r+0x822>
 80092cc:	4621      	mov	r1, r4
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 fe9a 	bl	800a008 <__mcmp>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	da64      	bge.n	80093a2 <_dtoa_r+0x822>
 80092d8:	2300      	movs	r3, #0
 80092da:	4629      	mov	r1, r5
 80092dc:	220a      	movs	r2, #10
 80092de:	4630      	mov	r0, r6
 80092e0:	f000 fc72 	bl	8009bc8 <__multadd>
 80092e4:	9b07      	ldr	r3, [sp, #28]
 80092e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092ea:	4605      	mov	r5, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 8191 	beq.w	8009614 <_dtoa_r+0xa94>
 80092f2:	4639      	mov	r1, r7
 80092f4:	2300      	movs	r3, #0
 80092f6:	220a      	movs	r2, #10
 80092f8:	4630      	mov	r0, r6
 80092fa:	f000 fc65 	bl	8009bc8 <__multadd>
 80092fe:	f1ba 0f00 	cmp.w	sl, #0
 8009302:	4607      	mov	r7, r0
 8009304:	f300 808d 	bgt.w	8009422 <_dtoa_r+0x8a2>
 8009308:	9b06      	ldr	r3, [sp, #24]
 800930a:	2b02      	cmp	r3, #2
 800930c:	dc50      	bgt.n	80093b0 <_dtoa_r+0x830>
 800930e:	e088      	b.n	8009422 <_dtoa_r+0x8a2>
 8009310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009312:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009316:	e751      	b.n	80091bc <_dtoa_r+0x63c>
 8009318:	f109 34ff 	add.w	r4, r9, #4294967295
 800931c:	42a3      	cmp	r3, r4
 800931e:	bfbf      	itttt	lt
 8009320:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009322:	1ae3      	sublt	r3, r4, r3
 8009324:	18d2      	addlt	r2, r2, r3
 8009326:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009328:	bfb6      	itet	lt
 800932a:	4623      	movlt	r3, r4
 800932c:	1b1c      	subge	r4, r3, r4
 800932e:	2400      	movlt	r4, #0
 8009330:	f1b9 0f00 	cmp.w	r9, #0
 8009334:	bfb5      	itete	lt
 8009336:	9a04      	ldrlt	r2, [sp, #16]
 8009338:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800933c:	eba2 0809 	sublt.w	r8, r2, r9
 8009340:	464a      	movge	r2, r9
 8009342:	bfb8      	it	lt
 8009344:	2200      	movlt	r2, #0
 8009346:	e73c      	b.n	80091c2 <_dtoa_r+0x642>
 8009348:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800934c:	9f07      	ldr	r7, [sp, #28]
 800934e:	461c      	mov	r4, r3
 8009350:	e744      	b.n	80091dc <_dtoa_r+0x65c>
 8009352:	461a      	mov	r2, r3
 8009354:	e770      	b.n	8009238 <_dtoa_r+0x6b8>
 8009356:	9b06      	ldr	r3, [sp, #24]
 8009358:	2b01      	cmp	r3, #1
 800935a:	dc18      	bgt.n	800938e <_dtoa_r+0x80e>
 800935c:	9b02      	ldr	r3, [sp, #8]
 800935e:	b9b3      	cbnz	r3, 800938e <_dtoa_r+0x80e>
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009366:	b9a2      	cbnz	r2, 8009392 <_dtoa_r+0x812>
 8009368:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800936c:	0d12      	lsrs	r2, r2, #20
 800936e:	0512      	lsls	r2, r2, #20
 8009370:	b18a      	cbz	r2, 8009396 <_dtoa_r+0x816>
 8009372:	9b04      	ldr	r3, [sp, #16]
 8009374:	3301      	adds	r3, #1
 8009376:	9304      	str	r3, [sp, #16]
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	3301      	adds	r3, #1
 800937c:	9305      	str	r3, [sp, #20]
 800937e:	2301      	movs	r3, #1
 8009380:	930a      	str	r3, [sp, #40]	; 0x28
 8009382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009384:	2b00      	cmp	r3, #0
 8009386:	f47f af70 	bne.w	800926a <_dtoa_r+0x6ea>
 800938a:	2001      	movs	r0, #1
 800938c:	e775      	b.n	800927a <_dtoa_r+0x6fa>
 800938e:	2300      	movs	r3, #0
 8009390:	e7f6      	b.n	8009380 <_dtoa_r+0x800>
 8009392:	9b02      	ldr	r3, [sp, #8]
 8009394:	e7f4      	b.n	8009380 <_dtoa_r+0x800>
 8009396:	920a      	str	r2, [sp, #40]	; 0x28
 8009398:	e7f3      	b.n	8009382 <_dtoa_r+0x802>
 800939a:	d082      	beq.n	80092a2 <_dtoa_r+0x722>
 800939c:	4610      	mov	r0, r2
 800939e:	301c      	adds	r0, #28
 80093a0:	e778      	b.n	8009294 <_dtoa_r+0x714>
 80093a2:	f1b9 0f00 	cmp.w	r9, #0
 80093a6:	dc37      	bgt.n	8009418 <_dtoa_r+0x898>
 80093a8:	9b06      	ldr	r3, [sp, #24]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	dd34      	ble.n	8009418 <_dtoa_r+0x898>
 80093ae:	46ca      	mov	sl, r9
 80093b0:	f1ba 0f00 	cmp.w	sl, #0
 80093b4:	d10d      	bne.n	80093d2 <_dtoa_r+0x852>
 80093b6:	4621      	mov	r1, r4
 80093b8:	4653      	mov	r3, sl
 80093ba:	2205      	movs	r2, #5
 80093bc:	4630      	mov	r0, r6
 80093be:	f000 fc03 	bl	8009bc8 <__multadd>
 80093c2:	4601      	mov	r1, r0
 80093c4:	4604      	mov	r4, r0
 80093c6:	4628      	mov	r0, r5
 80093c8:	f000 fe1e 	bl	800a008 <__mcmp>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	f73f adeb 	bgt.w	8008fa8 <_dtoa_r+0x428>
 80093d2:	9b08      	ldr	r3, [sp, #32]
 80093d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093d8:	ea6f 0b03 	mvn.w	fp, r3
 80093dc:	f04f 0900 	mov.w	r9, #0
 80093e0:	4621      	mov	r1, r4
 80093e2:	4630      	mov	r0, r6
 80093e4:	f000 fbce 	bl	8009b84 <_Bfree>
 80093e8:	2f00      	cmp	r7, #0
 80093ea:	f43f aea8 	beq.w	800913e <_dtoa_r+0x5be>
 80093ee:	f1b9 0f00 	cmp.w	r9, #0
 80093f2:	d005      	beq.n	8009400 <_dtoa_r+0x880>
 80093f4:	45b9      	cmp	r9, r7
 80093f6:	d003      	beq.n	8009400 <_dtoa_r+0x880>
 80093f8:	4649      	mov	r1, r9
 80093fa:	4630      	mov	r0, r6
 80093fc:	f000 fbc2 	bl	8009b84 <_Bfree>
 8009400:	4639      	mov	r1, r7
 8009402:	4630      	mov	r0, r6
 8009404:	f000 fbbe 	bl	8009b84 <_Bfree>
 8009408:	e699      	b.n	800913e <_dtoa_r+0x5be>
 800940a:	2400      	movs	r4, #0
 800940c:	4627      	mov	r7, r4
 800940e:	e7e0      	b.n	80093d2 <_dtoa_r+0x852>
 8009410:	46bb      	mov	fp, r7
 8009412:	4604      	mov	r4, r0
 8009414:	4607      	mov	r7, r0
 8009416:	e5c7      	b.n	8008fa8 <_dtoa_r+0x428>
 8009418:	9b07      	ldr	r3, [sp, #28]
 800941a:	46ca      	mov	sl, r9
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 8100 	beq.w	8009622 <_dtoa_r+0xaa2>
 8009422:	f1b8 0f00 	cmp.w	r8, #0
 8009426:	dd05      	ble.n	8009434 <_dtoa_r+0x8b4>
 8009428:	4639      	mov	r1, r7
 800942a:	4642      	mov	r2, r8
 800942c:	4630      	mov	r0, r6
 800942e:	f000 fd7b 	bl	8009f28 <__lshift>
 8009432:	4607      	mov	r7, r0
 8009434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009436:	2b00      	cmp	r3, #0
 8009438:	d05d      	beq.n	80094f6 <_dtoa_r+0x976>
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	4630      	mov	r0, r6
 800943e:	f000 fb61 	bl	8009b04 <_Balloc>
 8009442:	4680      	mov	r8, r0
 8009444:	b928      	cbnz	r0, 8009452 <_dtoa_r+0x8d2>
 8009446:	4b82      	ldr	r3, [pc, #520]	; (8009650 <_dtoa_r+0xad0>)
 8009448:	4602      	mov	r2, r0
 800944a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800944e:	f7ff bbaf 	b.w	8008bb0 <_dtoa_r+0x30>
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	3202      	adds	r2, #2
 8009456:	0092      	lsls	r2, r2, #2
 8009458:	f107 010c 	add.w	r1, r7, #12
 800945c:	300c      	adds	r0, #12
 800945e:	f000 fb29 	bl	8009ab4 <memcpy>
 8009462:	2201      	movs	r2, #1
 8009464:	4641      	mov	r1, r8
 8009466:	4630      	mov	r0, r6
 8009468:	f000 fd5e 	bl	8009f28 <__lshift>
 800946c:	9b01      	ldr	r3, [sp, #4]
 800946e:	3301      	adds	r3, #1
 8009470:	9304      	str	r3, [sp, #16]
 8009472:	9b01      	ldr	r3, [sp, #4]
 8009474:	4453      	add	r3, sl
 8009476:	9308      	str	r3, [sp, #32]
 8009478:	9b02      	ldr	r3, [sp, #8]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	46b9      	mov	r9, r7
 8009480:	9307      	str	r3, [sp, #28]
 8009482:	4607      	mov	r7, r0
 8009484:	9b04      	ldr	r3, [sp, #16]
 8009486:	4621      	mov	r1, r4
 8009488:	3b01      	subs	r3, #1
 800948a:	4628      	mov	r0, r5
 800948c:	9302      	str	r3, [sp, #8]
 800948e:	f7ff faec 	bl	8008a6a <quorem>
 8009492:	4603      	mov	r3, r0
 8009494:	3330      	adds	r3, #48	; 0x30
 8009496:	9005      	str	r0, [sp, #20]
 8009498:	4649      	mov	r1, r9
 800949a:	4628      	mov	r0, r5
 800949c:	9309      	str	r3, [sp, #36]	; 0x24
 800949e:	f000 fdb3 	bl	800a008 <__mcmp>
 80094a2:	463a      	mov	r2, r7
 80094a4:	4682      	mov	sl, r0
 80094a6:	4621      	mov	r1, r4
 80094a8:	4630      	mov	r0, r6
 80094aa:	f000 fdc9 	bl	800a040 <__mdiff>
 80094ae:	68c2      	ldr	r2, [r0, #12]
 80094b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b2:	4680      	mov	r8, r0
 80094b4:	bb0a      	cbnz	r2, 80094fa <_dtoa_r+0x97a>
 80094b6:	4601      	mov	r1, r0
 80094b8:	4628      	mov	r0, r5
 80094ba:	f000 fda5 	bl	800a008 <__mcmp>
 80094be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c0:	4602      	mov	r2, r0
 80094c2:	4641      	mov	r1, r8
 80094c4:	4630      	mov	r0, r6
 80094c6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80094ca:	f000 fb5b 	bl	8009b84 <_Bfree>
 80094ce:	9b06      	ldr	r3, [sp, #24]
 80094d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094d2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80094d6:	ea43 0102 	orr.w	r1, r3, r2
 80094da:	9b07      	ldr	r3, [sp, #28]
 80094dc:	430b      	orrs	r3, r1
 80094de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e0:	d10d      	bne.n	80094fe <_dtoa_r+0x97e>
 80094e2:	2b39      	cmp	r3, #57	; 0x39
 80094e4:	d029      	beq.n	800953a <_dtoa_r+0x9ba>
 80094e6:	f1ba 0f00 	cmp.w	sl, #0
 80094ea:	dd01      	ble.n	80094f0 <_dtoa_r+0x970>
 80094ec:	9b05      	ldr	r3, [sp, #20]
 80094ee:	3331      	adds	r3, #49	; 0x31
 80094f0:	9a02      	ldr	r2, [sp, #8]
 80094f2:	7013      	strb	r3, [r2, #0]
 80094f4:	e774      	b.n	80093e0 <_dtoa_r+0x860>
 80094f6:	4638      	mov	r0, r7
 80094f8:	e7b8      	b.n	800946c <_dtoa_r+0x8ec>
 80094fa:	2201      	movs	r2, #1
 80094fc:	e7e1      	b.n	80094c2 <_dtoa_r+0x942>
 80094fe:	f1ba 0f00 	cmp.w	sl, #0
 8009502:	db06      	blt.n	8009512 <_dtoa_r+0x992>
 8009504:	9906      	ldr	r1, [sp, #24]
 8009506:	ea41 0a0a 	orr.w	sl, r1, sl
 800950a:	9907      	ldr	r1, [sp, #28]
 800950c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009510:	d120      	bne.n	8009554 <_dtoa_r+0x9d4>
 8009512:	2a00      	cmp	r2, #0
 8009514:	ddec      	ble.n	80094f0 <_dtoa_r+0x970>
 8009516:	4629      	mov	r1, r5
 8009518:	2201      	movs	r2, #1
 800951a:	4630      	mov	r0, r6
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	f000 fd03 	bl	8009f28 <__lshift>
 8009522:	4621      	mov	r1, r4
 8009524:	4605      	mov	r5, r0
 8009526:	f000 fd6f 	bl	800a008 <__mcmp>
 800952a:	2800      	cmp	r0, #0
 800952c:	9b04      	ldr	r3, [sp, #16]
 800952e:	dc02      	bgt.n	8009536 <_dtoa_r+0x9b6>
 8009530:	d1de      	bne.n	80094f0 <_dtoa_r+0x970>
 8009532:	07da      	lsls	r2, r3, #31
 8009534:	d5dc      	bpl.n	80094f0 <_dtoa_r+0x970>
 8009536:	2b39      	cmp	r3, #57	; 0x39
 8009538:	d1d8      	bne.n	80094ec <_dtoa_r+0x96c>
 800953a:	9a02      	ldr	r2, [sp, #8]
 800953c:	2339      	movs	r3, #57	; 0x39
 800953e:	7013      	strb	r3, [r2, #0]
 8009540:	4643      	mov	r3, r8
 8009542:	4698      	mov	r8, r3
 8009544:	3b01      	subs	r3, #1
 8009546:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800954a:	2a39      	cmp	r2, #57	; 0x39
 800954c:	d051      	beq.n	80095f2 <_dtoa_r+0xa72>
 800954e:	3201      	adds	r2, #1
 8009550:	701a      	strb	r2, [r3, #0]
 8009552:	e745      	b.n	80093e0 <_dtoa_r+0x860>
 8009554:	2a00      	cmp	r2, #0
 8009556:	dd03      	ble.n	8009560 <_dtoa_r+0x9e0>
 8009558:	2b39      	cmp	r3, #57	; 0x39
 800955a:	d0ee      	beq.n	800953a <_dtoa_r+0x9ba>
 800955c:	3301      	adds	r3, #1
 800955e:	e7c7      	b.n	80094f0 <_dtoa_r+0x970>
 8009560:	9a04      	ldr	r2, [sp, #16]
 8009562:	9908      	ldr	r1, [sp, #32]
 8009564:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009568:	428a      	cmp	r2, r1
 800956a:	d02b      	beq.n	80095c4 <_dtoa_r+0xa44>
 800956c:	4629      	mov	r1, r5
 800956e:	2300      	movs	r3, #0
 8009570:	220a      	movs	r2, #10
 8009572:	4630      	mov	r0, r6
 8009574:	f000 fb28 	bl	8009bc8 <__multadd>
 8009578:	45b9      	cmp	r9, r7
 800957a:	4605      	mov	r5, r0
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	f04f 020a 	mov.w	r2, #10
 8009584:	4649      	mov	r1, r9
 8009586:	4630      	mov	r0, r6
 8009588:	d107      	bne.n	800959a <_dtoa_r+0xa1a>
 800958a:	f000 fb1d 	bl	8009bc8 <__multadd>
 800958e:	4681      	mov	r9, r0
 8009590:	4607      	mov	r7, r0
 8009592:	9b04      	ldr	r3, [sp, #16]
 8009594:	3301      	adds	r3, #1
 8009596:	9304      	str	r3, [sp, #16]
 8009598:	e774      	b.n	8009484 <_dtoa_r+0x904>
 800959a:	f000 fb15 	bl	8009bc8 <__multadd>
 800959e:	4639      	mov	r1, r7
 80095a0:	4681      	mov	r9, r0
 80095a2:	2300      	movs	r3, #0
 80095a4:	220a      	movs	r2, #10
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 fb0e 	bl	8009bc8 <__multadd>
 80095ac:	4607      	mov	r7, r0
 80095ae:	e7f0      	b.n	8009592 <_dtoa_r+0xa12>
 80095b0:	f1ba 0f00 	cmp.w	sl, #0
 80095b4:	9a01      	ldr	r2, [sp, #4]
 80095b6:	bfcc      	ite	gt
 80095b8:	46d0      	movgt	r8, sl
 80095ba:	f04f 0801 	movle.w	r8, #1
 80095be:	4490      	add	r8, r2
 80095c0:	f04f 0900 	mov.w	r9, #0
 80095c4:	4629      	mov	r1, r5
 80095c6:	2201      	movs	r2, #1
 80095c8:	4630      	mov	r0, r6
 80095ca:	9302      	str	r3, [sp, #8]
 80095cc:	f000 fcac 	bl	8009f28 <__lshift>
 80095d0:	4621      	mov	r1, r4
 80095d2:	4605      	mov	r5, r0
 80095d4:	f000 fd18 	bl	800a008 <__mcmp>
 80095d8:	2800      	cmp	r0, #0
 80095da:	dcb1      	bgt.n	8009540 <_dtoa_r+0x9c0>
 80095dc:	d102      	bne.n	80095e4 <_dtoa_r+0xa64>
 80095de:	9b02      	ldr	r3, [sp, #8]
 80095e0:	07db      	lsls	r3, r3, #31
 80095e2:	d4ad      	bmi.n	8009540 <_dtoa_r+0x9c0>
 80095e4:	4643      	mov	r3, r8
 80095e6:	4698      	mov	r8, r3
 80095e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095ec:	2a30      	cmp	r2, #48	; 0x30
 80095ee:	d0fa      	beq.n	80095e6 <_dtoa_r+0xa66>
 80095f0:	e6f6      	b.n	80093e0 <_dtoa_r+0x860>
 80095f2:	9a01      	ldr	r2, [sp, #4]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d1a4      	bne.n	8009542 <_dtoa_r+0x9c2>
 80095f8:	f10b 0b01 	add.w	fp, fp, #1
 80095fc:	2331      	movs	r3, #49	; 0x31
 80095fe:	e778      	b.n	80094f2 <_dtoa_r+0x972>
 8009600:	4b14      	ldr	r3, [pc, #80]	; (8009654 <_dtoa_r+0xad4>)
 8009602:	f7ff bb27 	b.w	8008c54 <_dtoa_r+0xd4>
 8009606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009608:	2b00      	cmp	r3, #0
 800960a:	f47f ab03 	bne.w	8008c14 <_dtoa_r+0x94>
 800960e:	4b12      	ldr	r3, [pc, #72]	; (8009658 <_dtoa_r+0xad8>)
 8009610:	f7ff bb20 	b.w	8008c54 <_dtoa_r+0xd4>
 8009614:	f1ba 0f00 	cmp.w	sl, #0
 8009618:	dc03      	bgt.n	8009622 <_dtoa_r+0xaa2>
 800961a:	9b06      	ldr	r3, [sp, #24]
 800961c:	2b02      	cmp	r3, #2
 800961e:	f73f aec7 	bgt.w	80093b0 <_dtoa_r+0x830>
 8009622:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009626:	4621      	mov	r1, r4
 8009628:	4628      	mov	r0, r5
 800962a:	f7ff fa1e 	bl	8008a6a <quorem>
 800962e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009632:	f808 3b01 	strb.w	r3, [r8], #1
 8009636:	9a01      	ldr	r2, [sp, #4]
 8009638:	eba8 0202 	sub.w	r2, r8, r2
 800963c:	4592      	cmp	sl, r2
 800963e:	ddb7      	ble.n	80095b0 <_dtoa_r+0xa30>
 8009640:	4629      	mov	r1, r5
 8009642:	2300      	movs	r3, #0
 8009644:	220a      	movs	r2, #10
 8009646:	4630      	mov	r0, r6
 8009648:	f000 fabe 	bl	8009bc8 <__multadd>
 800964c:	4605      	mov	r5, r0
 800964e:	e7ea      	b.n	8009626 <_dtoa_r+0xaa6>
 8009650:	0800abc4 	.word	0x0800abc4
 8009654:	0800ab21 	.word	0x0800ab21
 8009658:	0800ab45 	.word	0x0800ab45

0800965c <__sflush_r>:
 800965c:	898a      	ldrh	r2, [r1, #12]
 800965e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009662:	4605      	mov	r5, r0
 8009664:	0710      	lsls	r0, r2, #28
 8009666:	460c      	mov	r4, r1
 8009668:	d458      	bmi.n	800971c <__sflush_r+0xc0>
 800966a:	684b      	ldr	r3, [r1, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	dc05      	bgt.n	800967c <__sflush_r+0x20>
 8009670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009672:	2b00      	cmp	r3, #0
 8009674:	dc02      	bgt.n	800967c <__sflush_r+0x20>
 8009676:	2000      	movs	r0, #0
 8009678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800967c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800967e:	2e00      	cmp	r6, #0
 8009680:	d0f9      	beq.n	8009676 <__sflush_r+0x1a>
 8009682:	2300      	movs	r3, #0
 8009684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009688:	682f      	ldr	r7, [r5, #0]
 800968a:	602b      	str	r3, [r5, #0]
 800968c:	d032      	beq.n	80096f4 <__sflush_r+0x98>
 800968e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	075a      	lsls	r2, r3, #29
 8009694:	d505      	bpl.n	80096a2 <__sflush_r+0x46>
 8009696:	6863      	ldr	r3, [r4, #4]
 8009698:	1ac0      	subs	r0, r0, r3
 800969a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800969c:	b10b      	cbz	r3, 80096a2 <__sflush_r+0x46>
 800969e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096a0:	1ac0      	subs	r0, r0, r3
 80096a2:	2300      	movs	r3, #0
 80096a4:	4602      	mov	r2, r0
 80096a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096a8:	6a21      	ldr	r1, [r4, #32]
 80096aa:	4628      	mov	r0, r5
 80096ac:	47b0      	blx	r6
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	d106      	bne.n	80096c2 <__sflush_r+0x66>
 80096b4:	6829      	ldr	r1, [r5, #0]
 80096b6:	291d      	cmp	r1, #29
 80096b8:	d82c      	bhi.n	8009714 <__sflush_r+0xb8>
 80096ba:	4a2a      	ldr	r2, [pc, #168]	; (8009764 <__sflush_r+0x108>)
 80096bc:	40ca      	lsrs	r2, r1
 80096be:	07d6      	lsls	r6, r2, #31
 80096c0:	d528      	bpl.n	8009714 <__sflush_r+0xb8>
 80096c2:	2200      	movs	r2, #0
 80096c4:	6062      	str	r2, [r4, #4]
 80096c6:	04d9      	lsls	r1, r3, #19
 80096c8:	6922      	ldr	r2, [r4, #16]
 80096ca:	6022      	str	r2, [r4, #0]
 80096cc:	d504      	bpl.n	80096d8 <__sflush_r+0x7c>
 80096ce:	1c42      	adds	r2, r0, #1
 80096d0:	d101      	bne.n	80096d6 <__sflush_r+0x7a>
 80096d2:	682b      	ldr	r3, [r5, #0]
 80096d4:	b903      	cbnz	r3, 80096d8 <__sflush_r+0x7c>
 80096d6:	6560      	str	r0, [r4, #84]	; 0x54
 80096d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096da:	602f      	str	r7, [r5, #0]
 80096dc:	2900      	cmp	r1, #0
 80096de:	d0ca      	beq.n	8009676 <__sflush_r+0x1a>
 80096e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096e4:	4299      	cmp	r1, r3
 80096e6:	d002      	beq.n	80096ee <__sflush_r+0x92>
 80096e8:	4628      	mov	r0, r5
 80096ea:	f000 fda5 	bl	800a238 <_free_r>
 80096ee:	2000      	movs	r0, #0
 80096f0:	6360      	str	r0, [r4, #52]	; 0x34
 80096f2:	e7c1      	b.n	8009678 <__sflush_r+0x1c>
 80096f4:	6a21      	ldr	r1, [r4, #32]
 80096f6:	2301      	movs	r3, #1
 80096f8:	4628      	mov	r0, r5
 80096fa:	47b0      	blx	r6
 80096fc:	1c41      	adds	r1, r0, #1
 80096fe:	d1c7      	bne.n	8009690 <__sflush_r+0x34>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0c4      	beq.n	8009690 <__sflush_r+0x34>
 8009706:	2b1d      	cmp	r3, #29
 8009708:	d001      	beq.n	800970e <__sflush_r+0xb2>
 800970a:	2b16      	cmp	r3, #22
 800970c:	d101      	bne.n	8009712 <__sflush_r+0xb6>
 800970e:	602f      	str	r7, [r5, #0]
 8009710:	e7b1      	b.n	8009676 <__sflush_r+0x1a>
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009718:	81a3      	strh	r3, [r4, #12]
 800971a:	e7ad      	b.n	8009678 <__sflush_r+0x1c>
 800971c:	690f      	ldr	r7, [r1, #16]
 800971e:	2f00      	cmp	r7, #0
 8009720:	d0a9      	beq.n	8009676 <__sflush_r+0x1a>
 8009722:	0793      	lsls	r3, r2, #30
 8009724:	680e      	ldr	r6, [r1, #0]
 8009726:	bf08      	it	eq
 8009728:	694b      	ldreq	r3, [r1, #20]
 800972a:	600f      	str	r7, [r1, #0]
 800972c:	bf18      	it	ne
 800972e:	2300      	movne	r3, #0
 8009730:	eba6 0807 	sub.w	r8, r6, r7
 8009734:	608b      	str	r3, [r1, #8]
 8009736:	f1b8 0f00 	cmp.w	r8, #0
 800973a:	dd9c      	ble.n	8009676 <__sflush_r+0x1a>
 800973c:	6a21      	ldr	r1, [r4, #32]
 800973e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009740:	4643      	mov	r3, r8
 8009742:	463a      	mov	r2, r7
 8009744:	4628      	mov	r0, r5
 8009746:	47b0      	blx	r6
 8009748:	2800      	cmp	r0, #0
 800974a:	dc06      	bgt.n	800975a <__sflush_r+0xfe>
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009752:	81a3      	strh	r3, [r4, #12]
 8009754:	f04f 30ff 	mov.w	r0, #4294967295
 8009758:	e78e      	b.n	8009678 <__sflush_r+0x1c>
 800975a:	4407      	add	r7, r0
 800975c:	eba8 0800 	sub.w	r8, r8, r0
 8009760:	e7e9      	b.n	8009736 <__sflush_r+0xda>
 8009762:	bf00      	nop
 8009764:	20400001 	.word	0x20400001

08009768 <_fflush_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	690b      	ldr	r3, [r1, #16]
 800976c:	4605      	mov	r5, r0
 800976e:	460c      	mov	r4, r1
 8009770:	b913      	cbnz	r3, 8009778 <_fflush_r+0x10>
 8009772:	2500      	movs	r5, #0
 8009774:	4628      	mov	r0, r5
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	b118      	cbz	r0, 8009782 <_fflush_r+0x1a>
 800977a:	6983      	ldr	r3, [r0, #24]
 800977c:	b90b      	cbnz	r3, 8009782 <_fflush_r+0x1a>
 800977e:	f000 f887 	bl	8009890 <__sinit>
 8009782:	4b14      	ldr	r3, [pc, #80]	; (80097d4 <_fflush_r+0x6c>)
 8009784:	429c      	cmp	r4, r3
 8009786:	d11b      	bne.n	80097c0 <_fflush_r+0x58>
 8009788:	686c      	ldr	r4, [r5, #4]
 800978a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0ef      	beq.n	8009772 <_fflush_r+0xa>
 8009792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009794:	07d0      	lsls	r0, r2, #31
 8009796:	d404      	bmi.n	80097a2 <_fflush_r+0x3a>
 8009798:	0599      	lsls	r1, r3, #22
 800979a:	d402      	bmi.n	80097a2 <_fflush_r+0x3a>
 800979c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800979e:	f000 f91a 	bl	80099d6 <__retarget_lock_acquire_recursive>
 80097a2:	4628      	mov	r0, r5
 80097a4:	4621      	mov	r1, r4
 80097a6:	f7ff ff59 	bl	800965c <__sflush_r>
 80097aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ac:	07da      	lsls	r2, r3, #31
 80097ae:	4605      	mov	r5, r0
 80097b0:	d4e0      	bmi.n	8009774 <_fflush_r+0xc>
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	059b      	lsls	r3, r3, #22
 80097b6:	d4dd      	bmi.n	8009774 <_fflush_r+0xc>
 80097b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ba:	f000 f90d 	bl	80099d8 <__retarget_lock_release_recursive>
 80097be:	e7d9      	b.n	8009774 <_fflush_r+0xc>
 80097c0:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <_fflush_r+0x70>)
 80097c2:	429c      	cmp	r4, r3
 80097c4:	d101      	bne.n	80097ca <_fflush_r+0x62>
 80097c6:	68ac      	ldr	r4, [r5, #8]
 80097c8:	e7df      	b.n	800978a <_fflush_r+0x22>
 80097ca:	4b04      	ldr	r3, [pc, #16]	; (80097dc <_fflush_r+0x74>)
 80097cc:	429c      	cmp	r4, r3
 80097ce:	bf08      	it	eq
 80097d0:	68ec      	ldreq	r4, [r5, #12]
 80097d2:	e7da      	b.n	800978a <_fflush_r+0x22>
 80097d4:	0800abf8 	.word	0x0800abf8
 80097d8:	0800ac18 	.word	0x0800ac18
 80097dc:	0800abd8 	.word	0x0800abd8

080097e0 <std>:
 80097e0:	2300      	movs	r3, #0
 80097e2:	b510      	push	{r4, lr}
 80097e4:	4604      	mov	r4, r0
 80097e6:	e9c0 3300 	strd	r3, r3, [r0]
 80097ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ee:	6083      	str	r3, [r0, #8]
 80097f0:	8181      	strh	r1, [r0, #12]
 80097f2:	6643      	str	r3, [r0, #100]	; 0x64
 80097f4:	81c2      	strh	r2, [r0, #14]
 80097f6:	6183      	str	r3, [r0, #24]
 80097f8:	4619      	mov	r1, r3
 80097fa:	2208      	movs	r2, #8
 80097fc:	305c      	adds	r0, #92	; 0x5c
 80097fe:	f7fe faa9 	bl	8007d54 <memset>
 8009802:	4b05      	ldr	r3, [pc, #20]	; (8009818 <std+0x38>)
 8009804:	6263      	str	r3, [r4, #36]	; 0x24
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <std+0x3c>)
 8009808:	62a3      	str	r3, [r4, #40]	; 0x28
 800980a:	4b05      	ldr	r3, [pc, #20]	; (8009820 <std+0x40>)
 800980c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <std+0x44>)
 8009810:	6224      	str	r4, [r4, #32]
 8009812:	6323      	str	r3, [r4, #48]	; 0x30
 8009814:	bd10      	pop	{r4, pc}
 8009816:	bf00      	nop
 8009818:	0800a7b5 	.word	0x0800a7b5
 800981c:	0800a7d7 	.word	0x0800a7d7
 8009820:	0800a80f 	.word	0x0800a80f
 8009824:	0800a833 	.word	0x0800a833

08009828 <_cleanup_r>:
 8009828:	4901      	ldr	r1, [pc, #4]	; (8009830 <_cleanup_r+0x8>)
 800982a:	f000 b8af 	b.w	800998c <_fwalk_reent>
 800982e:	bf00      	nop
 8009830:	08009769 	.word	0x08009769

08009834 <__sfmoreglue>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	2268      	movs	r2, #104	; 0x68
 8009838:	1e4d      	subs	r5, r1, #1
 800983a:	4355      	muls	r5, r2
 800983c:	460e      	mov	r6, r1
 800983e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009842:	f000 fd65 	bl	800a310 <_malloc_r>
 8009846:	4604      	mov	r4, r0
 8009848:	b140      	cbz	r0, 800985c <__sfmoreglue+0x28>
 800984a:	2100      	movs	r1, #0
 800984c:	e9c0 1600 	strd	r1, r6, [r0]
 8009850:	300c      	adds	r0, #12
 8009852:	60a0      	str	r0, [r4, #8]
 8009854:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009858:	f7fe fa7c 	bl	8007d54 <memset>
 800985c:	4620      	mov	r0, r4
 800985e:	bd70      	pop	{r4, r5, r6, pc}

08009860 <__sfp_lock_acquire>:
 8009860:	4801      	ldr	r0, [pc, #4]	; (8009868 <__sfp_lock_acquire+0x8>)
 8009862:	f000 b8b8 	b.w	80099d6 <__retarget_lock_acquire_recursive>
 8009866:	bf00      	nop
 8009868:	240002e1 	.word	0x240002e1

0800986c <__sfp_lock_release>:
 800986c:	4801      	ldr	r0, [pc, #4]	; (8009874 <__sfp_lock_release+0x8>)
 800986e:	f000 b8b3 	b.w	80099d8 <__retarget_lock_release_recursive>
 8009872:	bf00      	nop
 8009874:	240002e1 	.word	0x240002e1

08009878 <__sinit_lock_acquire>:
 8009878:	4801      	ldr	r0, [pc, #4]	; (8009880 <__sinit_lock_acquire+0x8>)
 800987a:	f000 b8ac 	b.w	80099d6 <__retarget_lock_acquire_recursive>
 800987e:	bf00      	nop
 8009880:	240002e2 	.word	0x240002e2

08009884 <__sinit_lock_release>:
 8009884:	4801      	ldr	r0, [pc, #4]	; (800988c <__sinit_lock_release+0x8>)
 8009886:	f000 b8a7 	b.w	80099d8 <__retarget_lock_release_recursive>
 800988a:	bf00      	nop
 800988c:	240002e2 	.word	0x240002e2

08009890 <__sinit>:
 8009890:	b510      	push	{r4, lr}
 8009892:	4604      	mov	r4, r0
 8009894:	f7ff fff0 	bl	8009878 <__sinit_lock_acquire>
 8009898:	69a3      	ldr	r3, [r4, #24]
 800989a:	b11b      	cbz	r3, 80098a4 <__sinit+0x14>
 800989c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a0:	f7ff bff0 	b.w	8009884 <__sinit_lock_release>
 80098a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098a8:	6523      	str	r3, [r4, #80]	; 0x50
 80098aa:	4b13      	ldr	r3, [pc, #76]	; (80098f8 <__sinit+0x68>)
 80098ac:	4a13      	ldr	r2, [pc, #76]	; (80098fc <__sinit+0x6c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80098b2:	42a3      	cmp	r3, r4
 80098b4:	bf04      	itt	eq
 80098b6:	2301      	moveq	r3, #1
 80098b8:	61a3      	streq	r3, [r4, #24]
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 f820 	bl	8009900 <__sfp>
 80098c0:	6060      	str	r0, [r4, #4]
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 f81c 	bl	8009900 <__sfp>
 80098c8:	60a0      	str	r0, [r4, #8]
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 f818 	bl	8009900 <__sfp>
 80098d0:	2200      	movs	r2, #0
 80098d2:	60e0      	str	r0, [r4, #12]
 80098d4:	2104      	movs	r1, #4
 80098d6:	6860      	ldr	r0, [r4, #4]
 80098d8:	f7ff ff82 	bl	80097e0 <std>
 80098dc:	68a0      	ldr	r0, [r4, #8]
 80098de:	2201      	movs	r2, #1
 80098e0:	2109      	movs	r1, #9
 80098e2:	f7ff ff7d 	bl	80097e0 <std>
 80098e6:	68e0      	ldr	r0, [r4, #12]
 80098e8:	2202      	movs	r2, #2
 80098ea:	2112      	movs	r1, #18
 80098ec:	f7ff ff78 	bl	80097e0 <std>
 80098f0:	2301      	movs	r3, #1
 80098f2:	61a3      	str	r3, [r4, #24]
 80098f4:	e7d2      	b.n	800989c <__sinit+0xc>
 80098f6:	bf00      	nop
 80098f8:	0800aafc 	.word	0x0800aafc
 80098fc:	08009829 	.word	0x08009829

08009900 <__sfp>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	4607      	mov	r7, r0
 8009904:	f7ff ffac 	bl	8009860 <__sfp_lock_acquire>
 8009908:	4b1e      	ldr	r3, [pc, #120]	; (8009984 <__sfp+0x84>)
 800990a:	681e      	ldr	r6, [r3, #0]
 800990c:	69b3      	ldr	r3, [r6, #24]
 800990e:	b913      	cbnz	r3, 8009916 <__sfp+0x16>
 8009910:	4630      	mov	r0, r6
 8009912:	f7ff ffbd 	bl	8009890 <__sinit>
 8009916:	3648      	adds	r6, #72	; 0x48
 8009918:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800991c:	3b01      	subs	r3, #1
 800991e:	d503      	bpl.n	8009928 <__sfp+0x28>
 8009920:	6833      	ldr	r3, [r6, #0]
 8009922:	b30b      	cbz	r3, 8009968 <__sfp+0x68>
 8009924:	6836      	ldr	r6, [r6, #0]
 8009926:	e7f7      	b.n	8009918 <__sfp+0x18>
 8009928:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800992c:	b9d5      	cbnz	r5, 8009964 <__sfp+0x64>
 800992e:	4b16      	ldr	r3, [pc, #88]	; (8009988 <__sfp+0x88>)
 8009930:	60e3      	str	r3, [r4, #12]
 8009932:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009936:	6665      	str	r5, [r4, #100]	; 0x64
 8009938:	f000 f84c 	bl	80099d4 <__retarget_lock_init_recursive>
 800993c:	f7ff ff96 	bl	800986c <__sfp_lock_release>
 8009940:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009944:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009948:	6025      	str	r5, [r4, #0]
 800994a:	61a5      	str	r5, [r4, #24]
 800994c:	2208      	movs	r2, #8
 800994e:	4629      	mov	r1, r5
 8009950:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009954:	f7fe f9fe 	bl	8007d54 <memset>
 8009958:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800995c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009960:	4620      	mov	r0, r4
 8009962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009964:	3468      	adds	r4, #104	; 0x68
 8009966:	e7d9      	b.n	800991c <__sfp+0x1c>
 8009968:	2104      	movs	r1, #4
 800996a:	4638      	mov	r0, r7
 800996c:	f7ff ff62 	bl	8009834 <__sfmoreglue>
 8009970:	4604      	mov	r4, r0
 8009972:	6030      	str	r0, [r6, #0]
 8009974:	2800      	cmp	r0, #0
 8009976:	d1d5      	bne.n	8009924 <__sfp+0x24>
 8009978:	f7ff ff78 	bl	800986c <__sfp_lock_release>
 800997c:	230c      	movs	r3, #12
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	e7ee      	b.n	8009960 <__sfp+0x60>
 8009982:	bf00      	nop
 8009984:	0800aafc 	.word	0x0800aafc
 8009988:	ffff0001 	.word	0xffff0001

0800998c <_fwalk_reent>:
 800998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009990:	4606      	mov	r6, r0
 8009992:	4688      	mov	r8, r1
 8009994:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009998:	2700      	movs	r7, #0
 800999a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800999e:	f1b9 0901 	subs.w	r9, r9, #1
 80099a2:	d505      	bpl.n	80099b0 <_fwalk_reent+0x24>
 80099a4:	6824      	ldr	r4, [r4, #0]
 80099a6:	2c00      	cmp	r4, #0
 80099a8:	d1f7      	bne.n	800999a <_fwalk_reent+0xe>
 80099aa:	4638      	mov	r0, r7
 80099ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b0:	89ab      	ldrh	r3, [r5, #12]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d907      	bls.n	80099c6 <_fwalk_reent+0x3a>
 80099b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099ba:	3301      	adds	r3, #1
 80099bc:	d003      	beq.n	80099c6 <_fwalk_reent+0x3a>
 80099be:	4629      	mov	r1, r5
 80099c0:	4630      	mov	r0, r6
 80099c2:	47c0      	blx	r8
 80099c4:	4307      	orrs	r7, r0
 80099c6:	3568      	adds	r5, #104	; 0x68
 80099c8:	e7e9      	b.n	800999e <_fwalk_reent+0x12>
	...

080099cc <_localeconv_r>:
 80099cc:	4800      	ldr	r0, [pc, #0]	; (80099d0 <_localeconv_r+0x4>)
 80099ce:	4770      	bx	lr
 80099d0:	24000164 	.word	0x24000164

080099d4 <__retarget_lock_init_recursive>:
 80099d4:	4770      	bx	lr

080099d6 <__retarget_lock_acquire_recursive>:
 80099d6:	4770      	bx	lr

080099d8 <__retarget_lock_release_recursive>:
 80099d8:	4770      	bx	lr

080099da <__swhatbuf_r>:
 80099da:	b570      	push	{r4, r5, r6, lr}
 80099dc:	460e      	mov	r6, r1
 80099de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e2:	2900      	cmp	r1, #0
 80099e4:	b096      	sub	sp, #88	; 0x58
 80099e6:	4614      	mov	r4, r2
 80099e8:	461d      	mov	r5, r3
 80099ea:	da08      	bge.n	80099fe <__swhatbuf_r+0x24>
 80099ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	602a      	str	r2, [r5, #0]
 80099f4:	061a      	lsls	r2, r3, #24
 80099f6:	d410      	bmi.n	8009a1a <__swhatbuf_r+0x40>
 80099f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099fc:	e00e      	b.n	8009a1c <__swhatbuf_r+0x42>
 80099fe:	466a      	mov	r2, sp
 8009a00:	f000 ff3e 	bl	800a880 <_fstat_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	dbf1      	blt.n	80099ec <__swhatbuf_r+0x12>
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a12:	425a      	negs	r2, r3
 8009a14:	415a      	adcs	r2, r3
 8009a16:	602a      	str	r2, [r5, #0]
 8009a18:	e7ee      	b.n	80099f8 <__swhatbuf_r+0x1e>
 8009a1a:	2340      	movs	r3, #64	; 0x40
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	b016      	add	sp, #88	; 0x58
 8009a22:	bd70      	pop	{r4, r5, r6, pc}

08009a24 <__smakebuf_r>:
 8009a24:	898b      	ldrh	r3, [r1, #12]
 8009a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a28:	079d      	lsls	r5, r3, #30
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460c      	mov	r4, r1
 8009a2e:	d507      	bpl.n	8009a40 <__smakebuf_r+0x1c>
 8009a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	6123      	str	r3, [r4, #16]
 8009a38:	2301      	movs	r3, #1
 8009a3a:	6163      	str	r3, [r4, #20]
 8009a3c:	b002      	add	sp, #8
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	ab01      	add	r3, sp, #4
 8009a42:	466a      	mov	r2, sp
 8009a44:	f7ff ffc9 	bl	80099da <__swhatbuf_r>
 8009a48:	9900      	ldr	r1, [sp, #0]
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f000 fc5f 	bl	800a310 <_malloc_r>
 8009a52:	b948      	cbnz	r0, 8009a68 <__smakebuf_r+0x44>
 8009a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a58:	059a      	lsls	r2, r3, #22
 8009a5a:	d4ef      	bmi.n	8009a3c <__smakebuf_r+0x18>
 8009a5c:	f023 0303 	bic.w	r3, r3, #3
 8009a60:	f043 0302 	orr.w	r3, r3, #2
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	e7e3      	b.n	8009a30 <__smakebuf_r+0xc>
 8009a68:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <__smakebuf_r+0x7c>)
 8009a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	6020      	str	r0, [r4, #0]
 8009a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a74:	81a3      	strh	r3, [r4, #12]
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	6163      	str	r3, [r4, #20]
 8009a7a:	9b01      	ldr	r3, [sp, #4]
 8009a7c:	6120      	str	r0, [r4, #16]
 8009a7e:	b15b      	cbz	r3, 8009a98 <__smakebuf_r+0x74>
 8009a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a84:	4630      	mov	r0, r6
 8009a86:	f000 ff0d 	bl	800a8a4 <_isatty_r>
 8009a8a:	b128      	cbz	r0, 8009a98 <__smakebuf_r+0x74>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f023 0303 	bic.w	r3, r3, #3
 8009a92:	f043 0301 	orr.w	r3, r3, #1
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	89a0      	ldrh	r0, [r4, #12]
 8009a9a:	4305      	orrs	r5, r0
 8009a9c:	81a5      	strh	r5, [r4, #12]
 8009a9e:	e7cd      	b.n	8009a3c <__smakebuf_r+0x18>
 8009aa0:	08009829 	.word	0x08009829

08009aa4 <malloc>:
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <malloc+0xc>)
 8009aa6:	4601      	mov	r1, r0
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	f000 bc31 	b.w	800a310 <_malloc_r>
 8009aae:	bf00      	nop
 8009ab0:	24000010 	.word	0x24000010

08009ab4 <memcpy>:
 8009ab4:	440a      	add	r2, r1
 8009ab6:	4291      	cmp	r1, r2
 8009ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009abc:	d100      	bne.n	8009ac0 <memcpy+0xc>
 8009abe:	4770      	bx	lr
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aca:	4291      	cmp	r1, r2
 8009acc:	d1f9      	bne.n	8009ac2 <memcpy+0xe>
 8009ace:	bd10      	pop	{r4, pc}

08009ad0 <memmove>:
 8009ad0:	4288      	cmp	r0, r1
 8009ad2:	b510      	push	{r4, lr}
 8009ad4:	eb01 0402 	add.w	r4, r1, r2
 8009ad8:	d902      	bls.n	8009ae0 <memmove+0x10>
 8009ada:	4284      	cmp	r4, r0
 8009adc:	4623      	mov	r3, r4
 8009ade:	d807      	bhi.n	8009af0 <memmove+0x20>
 8009ae0:	1e43      	subs	r3, r0, #1
 8009ae2:	42a1      	cmp	r1, r4
 8009ae4:	d008      	beq.n	8009af8 <memmove+0x28>
 8009ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aee:	e7f8      	b.n	8009ae2 <memmove+0x12>
 8009af0:	4402      	add	r2, r0
 8009af2:	4601      	mov	r1, r0
 8009af4:	428a      	cmp	r2, r1
 8009af6:	d100      	bne.n	8009afa <memmove+0x2a>
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b02:	e7f7      	b.n	8009af4 <memmove+0x24>

08009b04 <_Balloc>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b08:	4604      	mov	r4, r0
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	b976      	cbnz	r6, 8009b2c <_Balloc+0x28>
 8009b0e:	2010      	movs	r0, #16
 8009b10:	f7ff ffc8 	bl	8009aa4 <malloc>
 8009b14:	4602      	mov	r2, r0
 8009b16:	6260      	str	r0, [r4, #36]	; 0x24
 8009b18:	b920      	cbnz	r0, 8009b24 <_Balloc+0x20>
 8009b1a:	4b18      	ldr	r3, [pc, #96]	; (8009b7c <_Balloc+0x78>)
 8009b1c:	4818      	ldr	r0, [pc, #96]	; (8009b80 <_Balloc+0x7c>)
 8009b1e:	2166      	movs	r1, #102	; 0x66
 8009b20:	f7fe f8be 	bl	8007ca0 <__assert_func>
 8009b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b28:	6006      	str	r6, [r0, #0]
 8009b2a:	60c6      	str	r6, [r0, #12]
 8009b2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b2e:	68f3      	ldr	r3, [r6, #12]
 8009b30:	b183      	cbz	r3, 8009b54 <_Balloc+0x50>
 8009b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b3a:	b9b8      	cbnz	r0, 8009b6c <_Balloc+0x68>
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	fa01 f605 	lsl.w	r6, r1, r5
 8009b42:	1d72      	adds	r2, r6, #5
 8009b44:	0092      	lsls	r2, r2, #2
 8009b46:	4620      	mov	r0, r4
 8009b48:	f000 fb60 	bl	800a20c <_calloc_r>
 8009b4c:	b160      	cbz	r0, 8009b68 <_Balloc+0x64>
 8009b4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b52:	e00e      	b.n	8009b72 <_Balloc+0x6e>
 8009b54:	2221      	movs	r2, #33	; 0x21
 8009b56:	2104      	movs	r1, #4
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fb57 	bl	800a20c <_calloc_r>
 8009b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b60:	60f0      	str	r0, [r6, #12]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e4      	bne.n	8009b32 <_Balloc+0x2e>
 8009b68:	2000      	movs	r0, #0
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	6802      	ldr	r2, [r0, #0]
 8009b6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b72:	2300      	movs	r3, #0
 8009b74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b78:	e7f7      	b.n	8009b6a <_Balloc+0x66>
 8009b7a:	bf00      	nop
 8009b7c:	0800ab52 	.word	0x0800ab52
 8009b80:	0800ac38 	.word	0x0800ac38

08009b84 <_Bfree>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b88:	4605      	mov	r5, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	b976      	cbnz	r6, 8009bac <_Bfree+0x28>
 8009b8e:	2010      	movs	r0, #16
 8009b90:	f7ff ff88 	bl	8009aa4 <malloc>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6268      	str	r0, [r5, #36]	; 0x24
 8009b98:	b920      	cbnz	r0, 8009ba4 <_Bfree+0x20>
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <_Bfree+0x3c>)
 8009b9c:	4809      	ldr	r0, [pc, #36]	; (8009bc4 <_Bfree+0x40>)
 8009b9e:	218a      	movs	r1, #138	; 0x8a
 8009ba0:	f7fe f87e 	bl	8007ca0 <__assert_func>
 8009ba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ba8:	6006      	str	r6, [r0, #0]
 8009baa:	60c6      	str	r6, [r0, #12]
 8009bac:	b13c      	cbz	r4, 8009bbe <_Bfree+0x3a>
 8009bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bb0:	6862      	ldr	r2, [r4, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bb8:	6021      	str	r1, [r4, #0]
 8009bba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	0800ab52 	.word	0x0800ab52
 8009bc4:	0800ac38 	.word	0x0800ac38

08009bc8 <__multadd>:
 8009bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bcc:	690d      	ldr	r5, [r1, #16]
 8009bce:	4607      	mov	r7, r0
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	461e      	mov	r6, r3
 8009bd4:	f101 0c14 	add.w	ip, r1, #20
 8009bd8:	2000      	movs	r0, #0
 8009bda:	f8dc 3000 	ldr.w	r3, [ip]
 8009bde:	b299      	uxth	r1, r3
 8009be0:	fb02 6101 	mla	r1, r2, r1, r6
 8009be4:	0c1e      	lsrs	r6, r3, #16
 8009be6:	0c0b      	lsrs	r3, r1, #16
 8009be8:	fb02 3306 	mla	r3, r2, r6, r3
 8009bec:	b289      	uxth	r1, r1
 8009bee:	3001      	adds	r0, #1
 8009bf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bf4:	4285      	cmp	r5, r0
 8009bf6:	f84c 1b04 	str.w	r1, [ip], #4
 8009bfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bfe:	dcec      	bgt.n	8009bda <__multadd+0x12>
 8009c00:	b30e      	cbz	r6, 8009c46 <__multadd+0x7e>
 8009c02:	68a3      	ldr	r3, [r4, #8]
 8009c04:	42ab      	cmp	r3, r5
 8009c06:	dc19      	bgt.n	8009c3c <__multadd+0x74>
 8009c08:	6861      	ldr	r1, [r4, #4]
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	3101      	adds	r1, #1
 8009c0e:	f7ff ff79 	bl	8009b04 <_Balloc>
 8009c12:	4680      	mov	r8, r0
 8009c14:	b928      	cbnz	r0, 8009c22 <__multadd+0x5a>
 8009c16:	4602      	mov	r2, r0
 8009c18:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <__multadd+0x84>)
 8009c1a:	480d      	ldr	r0, [pc, #52]	; (8009c50 <__multadd+0x88>)
 8009c1c:	21b5      	movs	r1, #181	; 0xb5
 8009c1e:	f7fe f83f 	bl	8007ca0 <__assert_func>
 8009c22:	6922      	ldr	r2, [r4, #16]
 8009c24:	3202      	adds	r2, #2
 8009c26:	f104 010c 	add.w	r1, r4, #12
 8009c2a:	0092      	lsls	r2, r2, #2
 8009c2c:	300c      	adds	r0, #12
 8009c2e:	f7ff ff41 	bl	8009ab4 <memcpy>
 8009c32:	4621      	mov	r1, r4
 8009c34:	4638      	mov	r0, r7
 8009c36:	f7ff ffa5 	bl	8009b84 <_Bfree>
 8009c3a:	4644      	mov	r4, r8
 8009c3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c40:	3501      	adds	r5, #1
 8009c42:	615e      	str	r6, [r3, #20]
 8009c44:	6125      	str	r5, [r4, #16]
 8009c46:	4620      	mov	r0, r4
 8009c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c4c:	0800abc4 	.word	0x0800abc4
 8009c50:	0800ac38 	.word	0x0800ac38

08009c54 <__hi0bits>:
 8009c54:	0c03      	lsrs	r3, r0, #16
 8009c56:	041b      	lsls	r3, r3, #16
 8009c58:	b9d3      	cbnz	r3, 8009c90 <__hi0bits+0x3c>
 8009c5a:	0400      	lsls	r0, r0, #16
 8009c5c:	2310      	movs	r3, #16
 8009c5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c62:	bf04      	itt	eq
 8009c64:	0200      	lsleq	r0, r0, #8
 8009c66:	3308      	addeq	r3, #8
 8009c68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c6c:	bf04      	itt	eq
 8009c6e:	0100      	lsleq	r0, r0, #4
 8009c70:	3304      	addeq	r3, #4
 8009c72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c76:	bf04      	itt	eq
 8009c78:	0080      	lsleq	r0, r0, #2
 8009c7a:	3302      	addeq	r3, #2
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	db05      	blt.n	8009c8c <__hi0bits+0x38>
 8009c80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c84:	f103 0301 	add.w	r3, r3, #1
 8009c88:	bf08      	it	eq
 8009c8a:	2320      	moveq	r3, #32
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	4770      	bx	lr
 8009c90:	2300      	movs	r3, #0
 8009c92:	e7e4      	b.n	8009c5e <__hi0bits+0xa>

08009c94 <__lo0bits>:
 8009c94:	6803      	ldr	r3, [r0, #0]
 8009c96:	f013 0207 	ands.w	r2, r3, #7
 8009c9a:	4601      	mov	r1, r0
 8009c9c:	d00b      	beq.n	8009cb6 <__lo0bits+0x22>
 8009c9e:	07da      	lsls	r2, r3, #31
 8009ca0:	d423      	bmi.n	8009cea <__lo0bits+0x56>
 8009ca2:	0798      	lsls	r0, r3, #30
 8009ca4:	bf49      	itett	mi
 8009ca6:	085b      	lsrmi	r3, r3, #1
 8009ca8:	089b      	lsrpl	r3, r3, #2
 8009caa:	2001      	movmi	r0, #1
 8009cac:	600b      	strmi	r3, [r1, #0]
 8009cae:	bf5c      	itt	pl
 8009cb0:	600b      	strpl	r3, [r1, #0]
 8009cb2:	2002      	movpl	r0, #2
 8009cb4:	4770      	bx	lr
 8009cb6:	b298      	uxth	r0, r3
 8009cb8:	b9a8      	cbnz	r0, 8009ce6 <__lo0bits+0x52>
 8009cba:	0c1b      	lsrs	r3, r3, #16
 8009cbc:	2010      	movs	r0, #16
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	b90a      	cbnz	r2, 8009cc6 <__lo0bits+0x32>
 8009cc2:	3008      	adds	r0, #8
 8009cc4:	0a1b      	lsrs	r3, r3, #8
 8009cc6:	071a      	lsls	r2, r3, #28
 8009cc8:	bf04      	itt	eq
 8009cca:	091b      	lsreq	r3, r3, #4
 8009ccc:	3004      	addeq	r0, #4
 8009cce:	079a      	lsls	r2, r3, #30
 8009cd0:	bf04      	itt	eq
 8009cd2:	089b      	lsreq	r3, r3, #2
 8009cd4:	3002      	addeq	r0, #2
 8009cd6:	07da      	lsls	r2, r3, #31
 8009cd8:	d403      	bmi.n	8009ce2 <__lo0bits+0x4e>
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	f100 0001 	add.w	r0, r0, #1
 8009ce0:	d005      	beq.n	8009cee <__lo0bits+0x5a>
 8009ce2:	600b      	str	r3, [r1, #0]
 8009ce4:	4770      	bx	lr
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	e7e9      	b.n	8009cbe <__lo0bits+0x2a>
 8009cea:	2000      	movs	r0, #0
 8009cec:	4770      	bx	lr
 8009cee:	2020      	movs	r0, #32
 8009cf0:	4770      	bx	lr
	...

08009cf4 <__i2b>:
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	f7ff ff03 	bl	8009b04 <_Balloc>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	b928      	cbnz	r0, 8009d0e <__i2b+0x1a>
 8009d02:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <__i2b+0x24>)
 8009d04:	4805      	ldr	r0, [pc, #20]	; (8009d1c <__i2b+0x28>)
 8009d06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d0a:	f7fd ffc9 	bl	8007ca0 <__assert_func>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	6144      	str	r4, [r0, #20]
 8009d12:	6103      	str	r3, [r0, #16]
 8009d14:	bd10      	pop	{r4, pc}
 8009d16:	bf00      	nop
 8009d18:	0800abc4 	.word	0x0800abc4
 8009d1c:	0800ac38 	.word	0x0800ac38

08009d20 <__multiply>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	4691      	mov	r9, r2
 8009d26:	690a      	ldr	r2, [r1, #16]
 8009d28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	bfb8      	it	lt
 8009d30:	460b      	movlt	r3, r1
 8009d32:	460c      	mov	r4, r1
 8009d34:	bfbc      	itt	lt
 8009d36:	464c      	movlt	r4, r9
 8009d38:	4699      	movlt	r9, r3
 8009d3a:	6927      	ldr	r7, [r4, #16]
 8009d3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d40:	68a3      	ldr	r3, [r4, #8]
 8009d42:	6861      	ldr	r1, [r4, #4]
 8009d44:	eb07 060a 	add.w	r6, r7, sl
 8009d48:	42b3      	cmp	r3, r6
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	bfb8      	it	lt
 8009d4e:	3101      	addlt	r1, #1
 8009d50:	f7ff fed8 	bl	8009b04 <_Balloc>
 8009d54:	b930      	cbnz	r0, 8009d64 <__multiply+0x44>
 8009d56:	4602      	mov	r2, r0
 8009d58:	4b44      	ldr	r3, [pc, #272]	; (8009e6c <__multiply+0x14c>)
 8009d5a:	4845      	ldr	r0, [pc, #276]	; (8009e70 <__multiply+0x150>)
 8009d5c:	f240 115d 	movw	r1, #349	; 0x15d
 8009d60:	f7fd ff9e 	bl	8007ca0 <__assert_func>
 8009d64:	f100 0514 	add.w	r5, r0, #20
 8009d68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d6c:	462b      	mov	r3, r5
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4543      	cmp	r3, r8
 8009d72:	d321      	bcc.n	8009db8 <__multiply+0x98>
 8009d74:	f104 0314 	add.w	r3, r4, #20
 8009d78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d7c:	f109 0314 	add.w	r3, r9, #20
 8009d80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d84:	9202      	str	r2, [sp, #8]
 8009d86:	1b3a      	subs	r2, r7, r4
 8009d88:	3a15      	subs	r2, #21
 8009d8a:	f022 0203 	bic.w	r2, r2, #3
 8009d8e:	3204      	adds	r2, #4
 8009d90:	f104 0115 	add.w	r1, r4, #21
 8009d94:	428f      	cmp	r7, r1
 8009d96:	bf38      	it	cc
 8009d98:	2204      	movcc	r2, #4
 8009d9a:	9201      	str	r2, [sp, #4]
 8009d9c:	9a02      	ldr	r2, [sp, #8]
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d80c      	bhi.n	8009dbe <__multiply+0x9e>
 8009da4:	2e00      	cmp	r6, #0
 8009da6:	dd03      	ble.n	8009db0 <__multiply+0x90>
 8009da8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d05a      	beq.n	8009e66 <__multiply+0x146>
 8009db0:	6106      	str	r6, [r0, #16]
 8009db2:	b005      	add	sp, #20
 8009db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db8:	f843 2b04 	str.w	r2, [r3], #4
 8009dbc:	e7d8      	b.n	8009d70 <__multiply+0x50>
 8009dbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8009dc2:	f1ba 0f00 	cmp.w	sl, #0
 8009dc6:	d024      	beq.n	8009e12 <__multiply+0xf2>
 8009dc8:	f104 0e14 	add.w	lr, r4, #20
 8009dcc:	46a9      	mov	r9, r5
 8009dce:	f04f 0c00 	mov.w	ip, #0
 8009dd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dd6:	f8d9 1000 	ldr.w	r1, [r9]
 8009dda:	fa1f fb82 	uxth.w	fp, r2
 8009dde:	b289      	uxth	r1, r1
 8009de0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009de4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009de8:	f8d9 2000 	ldr.w	r2, [r9]
 8009dec:	4461      	add	r1, ip
 8009dee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009df2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009df6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009dfa:	b289      	uxth	r1, r1
 8009dfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e00:	4577      	cmp	r7, lr
 8009e02:	f849 1b04 	str.w	r1, [r9], #4
 8009e06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e0a:	d8e2      	bhi.n	8009dd2 <__multiply+0xb2>
 8009e0c:	9a01      	ldr	r2, [sp, #4]
 8009e0e:	f845 c002 	str.w	ip, [r5, r2]
 8009e12:	9a03      	ldr	r2, [sp, #12]
 8009e14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	f1b9 0f00 	cmp.w	r9, #0
 8009e1e:	d020      	beq.n	8009e62 <__multiply+0x142>
 8009e20:	6829      	ldr	r1, [r5, #0]
 8009e22:	f104 0c14 	add.w	ip, r4, #20
 8009e26:	46ae      	mov	lr, r5
 8009e28:	f04f 0a00 	mov.w	sl, #0
 8009e2c:	f8bc b000 	ldrh.w	fp, [ip]
 8009e30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e34:	fb09 220b 	mla	r2, r9, fp, r2
 8009e38:	4492      	add	sl, r2
 8009e3a:	b289      	uxth	r1, r1
 8009e3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e40:	f84e 1b04 	str.w	r1, [lr], #4
 8009e44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e48:	f8be 1000 	ldrh.w	r1, [lr]
 8009e4c:	0c12      	lsrs	r2, r2, #16
 8009e4e:	fb09 1102 	mla	r1, r9, r2, r1
 8009e52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e56:	4567      	cmp	r7, ip
 8009e58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e5c:	d8e6      	bhi.n	8009e2c <__multiply+0x10c>
 8009e5e:	9a01      	ldr	r2, [sp, #4]
 8009e60:	50a9      	str	r1, [r5, r2]
 8009e62:	3504      	adds	r5, #4
 8009e64:	e79a      	b.n	8009d9c <__multiply+0x7c>
 8009e66:	3e01      	subs	r6, #1
 8009e68:	e79c      	b.n	8009da4 <__multiply+0x84>
 8009e6a:	bf00      	nop
 8009e6c:	0800abc4 	.word	0x0800abc4
 8009e70:	0800ac38 	.word	0x0800ac38

08009e74 <__pow5mult>:
 8009e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e78:	4615      	mov	r5, r2
 8009e7a:	f012 0203 	ands.w	r2, r2, #3
 8009e7e:	4606      	mov	r6, r0
 8009e80:	460f      	mov	r7, r1
 8009e82:	d007      	beq.n	8009e94 <__pow5mult+0x20>
 8009e84:	4c25      	ldr	r4, [pc, #148]	; (8009f1c <__pow5mult+0xa8>)
 8009e86:	3a01      	subs	r2, #1
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e8e:	f7ff fe9b 	bl	8009bc8 <__multadd>
 8009e92:	4607      	mov	r7, r0
 8009e94:	10ad      	asrs	r5, r5, #2
 8009e96:	d03d      	beq.n	8009f14 <__pow5mult+0xa0>
 8009e98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e9a:	b97c      	cbnz	r4, 8009ebc <__pow5mult+0x48>
 8009e9c:	2010      	movs	r0, #16
 8009e9e:	f7ff fe01 	bl	8009aa4 <malloc>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ea6:	b928      	cbnz	r0, 8009eb4 <__pow5mult+0x40>
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <__pow5mult+0xac>)
 8009eaa:	481e      	ldr	r0, [pc, #120]	; (8009f24 <__pow5mult+0xb0>)
 8009eac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009eb0:	f7fd fef6 	bl	8007ca0 <__assert_func>
 8009eb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009eb8:	6004      	str	r4, [r0, #0]
 8009eba:	60c4      	str	r4, [r0, #12]
 8009ebc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ec0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ec4:	b94c      	cbnz	r4, 8009eda <__pow5mult+0x66>
 8009ec6:	f240 2171 	movw	r1, #625	; 0x271
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ff12 	bl	8009cf4 <__i2b>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	6003      	str	r3, [r0, #0]
 8009eda:	f04f 0900 	mov.w	r9, #0
 8009ede:	07eb      	lsls	r3, r5, #31
 8009ee0:	d50a      	bpl.n	8009ef8 <__pow5mult+0x84>
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ff1a 	bl	8009d20 <__multiply>
 8009eec:	4639      	mov	r1, r7
 8009eee:	4680      	mov	r8, r0
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f7ff fe47 	bl	8009b84 <_Bfree>
 8009ef6:	4647      	mov	r7, r8
 8009ef8:	106d      	asrs	r5, r5, #1
 8009efa:	d00b      	beq.n	8009f14 <__pow5mult+0xa0>
 8009efc:	6820      	ldr	r0, [r4, #0]
 8009efe:	b938      	cbnz	r0, 8009f10 <__pow5mult+0x9c>
 8009f00:	4622      	mov	r2, r4
 8009f02:	4621      	mov	r1, r4
 8009f04:	4630      	mov	r0, r6
 8009f06:	f7ff ff0b 	bl	8009d20 <__multiply>
 8009f0a:	6020      	str	r0, [r4, #0]
 8009f0c:	f8c0 9000 	str.w	r9, [r0]
 8009f10:	4604      	mov	r4, r0
 8009f12:	e7e4      	b.n	8009ede <__pow5mult+0x6a>
 8009f14:	4638      	mov	r0, r7
 8009f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f1a:	bf00      	nop
 8009f1c:	0800ad88 	.word	0x0800ad88
 8009f20:	0800ab52 	.word	0x0800ab52
 8009f24:	0800ac38 	.word	0x0800ac38

08009f28 <__lshift>:
 8009f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	6849      	ldr	r1, [r1, #4]
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f36:	68a3      	ldr	r3, [r4, #8]
 8009f38:	4607      	mov	r7, r0
 8009f3a:	4691      	mov	r9, r2
 8009f3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f40:	f108 0601 	add.w	r6, r8, #1
 8009f44:	42b3      	cmp	r3, r6
 8009f46:	db0b      	blt.n	8009f60 <__lshift+0x38>
 8009f48:	4638      	mov	r0, r7
 8009f4a:	f7ff fddb 	bl	8009b04 <_Balloc>
 8009f4e:	4605      	mov	r5, r0
 8009f50:	b948      	cbnz	r0, 8009f66 <__lshift+0x3e>
 8009f52:	4602      	mov	r2, r0
 8009f54:	4b2a      	ldr	r3, [pc, #168]	; (800a000 <__lshift+0xd8>)
 8009f56:	482b      	ldr	r0, [pc, #172]	; (800a004 <__lshift+0xdc>)
 8009f58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f5c:	f7fd fea0 	bl	8007ca0 <__assert_func>
 8009f60:	3101      	adds	r1, #1
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	e7ee      	b.n	8009f44 <__lshift+0x1c>
 8009f66:	2300      	movs	r3, #0
 8009f68:	f100 0114 	add.w	r1, r0, #20
 8009f6c:	f100 0210 	add.w	r2, r0, #16
 8009f70:	4618      	mov	r0, r3
 8009f72:	4553      	cmp	r3, sl
 8009f74:	db37      	blt.n	8009fe6 <__lshift+0xbe>
 8009f76:	6920      	ldr	r0, [r4, #16]
 8009f78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f7c:	f104 0314 	add.w	r3, r4, #20
 8009f80:	f019 091f 	ands.w	r9, r9, #31
 8009f84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f8c:	d02f      	beq.n	8009fee <__lshift+0xc6>
 8009f8e:	f1c9 0e20 	rsb	lr, r9, #32
 8009f92:	468a      	mov	sl, r1
 8009f94:	f04f 0c00 	mov.w	ip, #0
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	fa02 f209 	lsl.w	r2, r2, r9
 8009f9e:	ea42 020c 	orr.w	r2, r2, ip
 8009fa2:	f84a 2b04 	str.w	r2, [sl], #4
 8009fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009faa:	4298      	cmp	r0, r3
 8009fac:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009fb0:	d8f2      	bhi.n	8009f98 <__lshift+0x70>
 8009fb2:	1b03      	subs	r3, r0, r4
 8009fb4:	3b15      	subs	r3, #21
 8009fb6:	f023 0303 	bic.w	r3, r3, #3
 8009fba:	3304      	adds	r3, #4
 8009fbc:	f104 0215 	add.w	r2, r4, #21
 8009fc0:	4290      	cmp	r0, r2
 8009fc2:	bf38      	it	cc
 8009fc4:	2304      	movcc	r3, #4
 8009fc6:	f841 c003 	str.w	ip, [r1, r3]
 8009fca:	f1bc 0f00 	cmp.w	ip, #0
 8009fce:	d001      	beq.n	8009fd4 <__lshift+0xac>
 8009fd0:	f108 0602 	add.w	r6, r8, #2
 8009fd4:	3e01      	subs	r6, #1
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	612e      	str	r6, [r5, #16]
 8009fda:	4621      	mov	r1, r4
 8009fdc:	f7ff fdd2 	bl	8009b84 <_Bfree>
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fea:	3301      	adds	r3, #1
 8009fec:	e7c1      	b.n	8009f72 <__lshift+0x4a>
 8009fee:	3904      	subs	r1, #4
 8009ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ff4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ff8:	4298      	cmp	r0, r3
 8009ffa:	d8f9      	bhi.n	8009ff0 <__lshift+0xc8>
 8009ffc:	e7ea      	b.n	8009fd4 <__lshift+0xac>
 8009ffe:	bf00      	nop
 800a000:	0800abc4 	.word	0x0800abc4
 800a004:	0800ac38 	.word	0x0800ac38

0800a008 <__mcmp>:
 800a008:	b530      	push	{r4, r5, lr}
 800a00a:	6902      	ldr	r2, [r0, #16]
 800a00c:	690c      	ldr	r4, [r1, #16]
 800a00e:	1b12      	subs	r2, r2, r4
 800a010:	d10e      	bne.n	800a030 <__mcmp+0x28>
 800a012:	f100 0314 	add.w	r3, r0, #20
 800a016:	3114      	adds	r1, #20
 800a018:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a01c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a020:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a024:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a028:	42a5      	cmp	r5, r4
 800a02a:	d003      	beq.n	800a034 <__mcmp+0x2c>
 800a02c:	d305      	bcc.n	800a03a <__mcmp+0x32>
 800a02e:	2201      	movs	r2, #1
 800a030:	4610      	mov	r0, r2
 800a032:	bd30      	pop	{r4, r5, pc}
 800a034:	4283      	cmp	r3, r0
 800a036:	d3f3      	bcc.n	800a020 <__mcmp+0x18>
 800a038:	e7fa      	b.n	800a030 <__mcmp+0x28>
 800a03a:	f04f 32ff 	mov.w	r2, #4294967295
 800a03e:	e7f7      	b.n	800a030 <__mcmp+0x28>

0800a040 <__mdiff>:
 800a040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	460c      	mov	r4, r1
 800a046:	4606      	mov	r6, r0
 800a048:	4611      	mov	r1, r2
 800a04a:	4620      	mov	r0, r4
 800a04c:	4690      	mov	r8, r2
 800a04e:	f7ff ffdb 	bl	800a008 <__mcmp>
 800a052:	1e05      	subs	r5, r0, #0
 800a054:	d110      	bne.n	800a078 <__mdiff+0x38>
 800a056:	4629      	mov	r1, r5
 800a058:	4630      	mov	r0, r6
 800a05a:	f7ff fd53 	bl	8009b04 <_Balloc>
 800a05e:	b930      	cbnz	r0, 800a06e <__mdiff+0x2e>
 800a060:	4b3a      	ldr	r3, [pc, #232]	; (800a14c <__mdiff+0x10c>)
 800a062:	4602      	mov	r2, r0
 800a064:	f240 2132 	movw	r1, #562	; 0x232
 800a068:	4839      	ldr	r0, [pc, #228]	; (800a150 <__mdiff+0x110>)
 800a06a:	f7fd fe19 	bl	8007ca0 <__assert_func>
 800a06e:	2301      	movs	r3, #1
 800a070:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a078:	bfa4      	itt	ge
 800a07a:	4643      	movge	r3, r8
 800a07c:	46a0      	movge	r8, r4
 800a07e:	4630      	mov	r0, r6
 800a080:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a084:	bfa6      	itte	ge
 800a086:	461c      	movge	r4, r3
 800a088:	2500      	movge	r5, #0
 800a08a:	2501      	movlt	r5, #1
 800a08c:	f7ff fd3a 	bl	8009b04 <_Balloc>
 800a090:	b920      	cbnz	r0, 800a09c <__mdiff+0x5c>
 800a092:	4b2e      	ldr	r3, [pc, #184]	; (800a14c <__mdiff+0x10c>)
 800a094:	4602      	mov	r2, r0
 800a096:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a09a:	e7e5      	b.n	800a068 <__mdiff+0x28>
 800a09c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0a0:	6926      	ldr	r6, [r4, #16]
 800a0a2:	60c5      	str	r5, [r0, #12]
 800a0a4:	f104 0914 	add.w	r9, r4, #20
 800a0a8:	f108 0514 	add.w	r5, r8, #20
 800a0ac:	f100 0e14 	add.w	lr, r0, #20
 800a0b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a0b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0b8:	f108 0210 	add.w	r2, r8, #16
 800a0bc:	46f2      	mov	sl, lr
 800a0be:	2100      	movs	r1, #0
 800a0c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0c8:	fa1f f883 	uxth.w	r8, r3
 800a0cc:	fa11 f18b 	uxtah	r1, r1, fp
 800a0d0:	0c1b      	lsrs	r3, r3, #16
 800a0d2:	eba1 0808 	sub.w	r8, r1, r8
 800a0d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0de:	fa1f f888 	uxth.w	r8, r8
 800a0e2:	1419      	asrs	r1, r3, #16
 800a0e4:	454e      	cmp	r6, r9
 800a0e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0ea:	f84a 3b04 	str.w	r3, [sl], #4
 800a0ee:	d8e7      	bhi.n	800a0c0 <__mdiff+0x80>
 800a0f0:	1b33      	subs	r3, r6, r4
 800a0f2:	3b15      	subs	r3, #21
 800a0f4:	f023 0303 	bic.w	r3, r3, #3
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	3415      	adds	r4, #21
 800a0fc:	42a6      	cmp	r6, r4
 800a0fe:	bf38      	it	cc
 800a100:	2304      	movcc	r3, #4
 800a102:	441d      	add	r5, r3
 800a104:	4473      	add	r3, lr
 800a106:	469e      	mov	lr, r3
 800a108:	462e      	mov	r6, r5
 800a10a:	4566      	cmp	r6, ip
 800a10c:	d30e      	bcc.n	800a12c <__mdiff+0xec>
 800a10e:	f10c 0203 	add.w	r2, ip, #3
 800a112:	1b52      	subs	r2, r2, r5
 800a114:	f022 0203 	bic.w	r2, r2, #3
 800a118:	3d03      	subs	r5, #3
 800a11a:	45ac      	cmp	ip, r5
 800a11c:	bf38      	it	cc
 800a11e:	2200      	movcc	r2, #0
 800a120:	441a      	add	r2, r3
 800a122:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a126:	b17b      	cbz	r3, 800a148 <__mdiff+0x108>
 800a128:	6107      	str	r7, [r0, #16]
 800a12a:	e7a3      	b.n	800a074 <__mdiff+0x34>
 800a12c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a130:	fa11 f288 	uxtah	r2, r1, r8
 800a134:	1414      	asrs	r4, r2, #16
 800a136:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a13a:	b292      	uxth	r2, r2
 800a13c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a140:	f84e 2b04 	str.w	r2, [lr], #4
 800a144:	1421      	asrs	r1, r4, #16
 800a146:	e7e0      	b.n	800a10a <__mdiff+0xca>
 800a148:	3f01      	subs	r7, #1
 800a14a:	e7ea      	b.n	800a122 <__mdiff+0xe2>
 800a14c:	0800abc4 	.word	0x0800abc4
 800a150:	0800ac38 	.word	0x0800ac38

0800a154 <__d2b>:
 800a154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a158:	4689      	mov	r9, r1
 800a15a:	2101      	movs	r1, #1
 800a15c:	ec57 6b10 	vmov	r6, r7, d0
 800a160:	4690      	mov	r8, r2
 800a162:	f7ff fccf 	bl	8009b04 <_Balloc>
 800a166:	4604      	mov	r4, r0
 800a168:	b930      	cbnz	r0, 800a178 <__d2b+0x24>
 800a16a:	4602      	mov	r2, r0
 800a16c:	4b25      	ldr	r3, [pc, #148]	; (800a204 <__d2b+0xb0>)
 800a16e:	4826      	ldr	r0, [pc, #152]	; (800a208 <__d2b+0xb4>)
 800a170:	f240 310a 	movw	r1, #778	; 0x30a
 800a174:	f7fd fd94 	bl	8007ca0 <__assert_func>
 800a178:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a17c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a180:	bb35      	cbnz	r5, 800a1d0 <__d2b+0x7c>
 800a182:	2e00      	cmp	r6, #0
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	d028      	beq.n	800a1da <__d2b+0x86>
 800a188:	4668      	mov	r0, sp
 800a18a:	9600      	str	r6, [sp, #0]
 800a18c:	f7ff fd82 	bl	8009c94 <__lo0bits>
 800a190:	9900      	ldr	r1, [sp, #0]
 800a192:	b300      	cbz	r0, 800a1d6 <__d2b+0x82>
 800a194:	9a01      	ldr	r2, [sp, #4]
 800a196:	f1c0 0320 	rsb	r3, r0, #32
 800a19a:	fa02 f303 	lsl.w	r3, r2, r3
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	40c2      	lsrs	r2, r0
 800a1a2:	6163      	str	r3, [r4, #20]
 800a1a4:	9201      	str	r2, [sp, #4]
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	61a3      	str	r3, [r4, #24]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bf14      	ite	ne
 800a1ae:	2202      	movne	r2, #2
 800a1b0:	2201      	moveq	r2, #1
 800a1b2:	6122      	str	r2, [r4, #16]
 800a1b4:	b1d5      	cbz	r5, 800a1ec <__d2b+0x98>
 800a1b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a1ba:	4405      	add	r5, r0
 800a1bc:	f8c9 5000 	str.w	r5, [r9]
 800a1c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1c4:	f8c8 0000 	str.w	r0, [r8]
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	b003      	add	sp, #12
 800a1cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1d4:	e7d5      	b.n	800a182 <__d2b+0x2e>
 800a1d6:	6161      	str	r1, [r4, #20]
 800a1d8:	e7e5      	b.n	800a1a6 <__d2b+0x52>
 800a1da:	a801      	add	r0, sp, #4
 800a1dc:	f7ff fd5a 	bl	8009c94 <__lo0bits>
 800a1e0:	9b01      	ldr	r3, [sp, #4]
 800a1e2:	6163      	str	r3, [r4, #20]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	6122      	str	r2, [r4, #16]
 800a1e8:	3020      	adds	r0, #32
 800a1ea:	e7e3      	b.n	800a1b4 <__d2b+0x60>
 800a1ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1f4:	f8c9 0000 	str.w	r0, [r9]
 800a1f8:	6918      	ldr	r0, [r3, #16]
 800a1fa:	f7ff fd2b 	bl	8009c54 <__hi0bits>
 800a1fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a202:	e7df      	b.n	800a1c4 <__d2b+0x70>
 800a204:	0800abc4 	.word	0x0800abc4
 800a208:	0800ac38 	.word	0x0800ac38

0800a20c <_calloc_r>:
 800a20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a20e:	fba1 2402 	umull	r2, r4, r1, r2
 800a212:	b94c      	cbnz	r4, 800a228 <_calloc_r+0x1c>
 800a214:	4611      	mov	r1, r2
 800a216:	9201      	str	r2, [sp, #4]
 800a218:	f000 f87a 	bl	800a310 <_malloc_r>
 800a21c:	9a01      	ldr	r2, [sp, #4]
 800a21e:	4605      	mov	r5, r0
 800a220:	b930      	cbnz	r0, 800a230 <_calloc_r+0x24>
 800a222:	4628      	mov	r0, r5
 800a224:	b003      	add	sp, #12
 800a226:	bd30      	pop	{r4, r5, pc}
 800a228:	220c      	movs	r2, #12
 800a22a:	6002      	str	r2, [r0, #0]
 800a22c:	2500      	movs	r5, #0
 800a22e:	e7f8      	b.n	800a222 <_calloc_r+0x16>
 800a230:	4621      	mov	r1, r4
 800a232:	f7fd fd8f 	bl	8007d54 <memset>
 800a236:	e7f4      	b.n	800a222 <_calloc_r+0x16>

0800a238 <_free_r>:
 800a238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a23a:	2900      	cmp	r1, #0
 800a23c:	d044      	beq.n	800a2c8 <_free_r+0x90>
 800a23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a242:	9001      	str	r0, [sp, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	f1a1 0404 	sub.w	r4, r1, #4
 800a24a:	bfb8      	it	lt
 800a24c:	18e4      	addlt	r4, r4, r3
 800a24e:	f000 fb5d 	bl	800a90c <__malloc_lock>
 800a252:	4a1e      	ldr	r2, [pc, #120]	; (800a2cc <_free_r+0x94>)
 800a254:	9801      	ldr	r0, [sp, #4]
 800a256:	6813      	ldr	r3, [r2, #0]
 800a258:	b933      	cbnz	r3, 800a268 <_free_r+0x30>
 800a25a:	6063      	str	r3, [r4, #4]
 800a25c:	6014      	str	r4, [r2, #0]
 800a25e:	b003      	add	sp, #12
 800a260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a264:	f000 bb58 	b.w	800a918 <__malloc_unlock>
 800a268:	42a3      	cmp	r3, r4
 800a26a:	d908      	bls.n	800a27e <_free_r+0x46>
 800a26c:	6825      	ldr	r5, [r4, #0]
 800a26e:	1961      	adds	r1, r4, r5
 800a270:	428b      	cmp	r3, r1
 800a272:	bf01      	itttt	eq
 800a274:	6819      	ldreq	r1, [r3, #0]
 800a276:	685b      	ldreq	r3, [r3, #4]
 800a278:	1949      	addeq	r1, r1, r5
 800a27a:	6021      	streq	r1, [r4, #0]
 800a27c:	e7ed      	b.n	800a25a <_free_r+0x22>
 800a27e:	461a      	mov	r2, r3
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	b10b      	cbz	r3, 800a288 <_free_r+0x50>
 800a284:	42a3      	cmp	r3, r4
 800a286:	d9fa      	bls.n	800a27e <_free_r+0x46>
 800a288:	6811      	ldr	r1, [r2, #0]
 800a28a:	1855      	adds	r5, r2, r1
 800a28c:	42a5      	cmp	r5, r4
 800a28e:	d10b      	bne.n	800a2a8 <_free_r+0x70>
 800a290:	6824      	ldr	r4, [r4, #0]
 800a292:	4421      	add	r1, r4
 800a294:	1854      	adds	r4, r2, r1
 800a296:	42a3      	cmp	r3, r4
 800a298:	6011      	str	r1, [r2, #0]
 800a29a:	d1e0      	bne.n	800a25e <_free_r+0x26>
 800a29c:	681c      	ldr	r4, [r3, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	6053      	str	r3, [r2, #4]
 800a2a2:	4421      	add	r1, r4
 800a2a4:	6011      	str	r1, [r2, #0]
 800a2a6:	e7da      	b.n	800a25e <_free_r+0x26>
 800a2a8:	d902      	bls.n	800a2b0 <_free_r+0x78>
 800a2aa:	230c      	movs	r3, #12
 800a2ac:	6003      	str	r3, [r0, #0]
 800a2ae:	e7d6      	b.n	800a25e <_free_r+0x26>
 800a2b0:	6825      	ldr	r5, [r4, #0]
 800a2b2:	1961      	adds	r1, r4, r5
 800a2b4:	428b      	cmp	r3, r1
 800a2b6:	bf04      	itt	eq
 800a2b8:	6819      	ldreq	r1, [r3, #0]
 800a2ba:	685b      	ldreq	r3, [r3, #4]
 800a2bc:	6063      	str	r3, [r4, #4]
 800a2be:	bf04      	itt	eq
 800a2c0:	1949      	addeq	r1, r1, r5
 800a2c2:	6021      	streq	r1, [r4, #0]
 800a2c4:	6054      	str	r4, [r2, #4]
 800a2c6:	e7ca      	b.n	800a25e <_free_r+0x26>
 800a2c8:	b003      	add	sp, #12
 800a2ca:	bd30      	pop	{r4, r5, pc}
 800a2cc:	240002e4 	.word	0x240002e4

0800a2d0 <sbrk_aligned>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	4e0e      	ldr	r6, [pc, #56]	; (800a30c <sbrk_aligned+0x3c>)
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	6831      	ldr	r1, [r6, #0]
 800a2d8:	4605      	mov	r5, r0
 800a2da:	b911      	cbnz	r1, 800a2e2 <sbrk_aligned+0x12>
 800a2dc:	f000 fa16 	bl	800a70c <_sbrk_r>
 800a2e0:	6030      	str	r0, [r6, #0]
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f000 fa11 	bl	800a70c <_sbrk_r>
 800a2ea:	1c43      	adds	r3, r0, #1
 800a2ec:	d00a      	beq.n	800a304 <sbrk_aligned+0x34>
 800a2ee:	1cc4      	adds	r4, r0, #3
 800a2f0:	f024 0403 	bic.w	r4, r4, #3
 800a2f4:	42a0      	cmp	r0, r4
 800a2f6:	d007      	beq.n	800a308 <sbrk_aligned+0x38>
 800a2f8:	1a21      	subs	r1, r4, r0
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 fa06 	bl	800a70c <_sbrk_r>
 800a300:	3001      	adds	r0, #1
 800a302:	d101      	bne.n	800a308 <sbrk_aligned+0x38>
 800a304:	f04f 34ff 	mov.w	r4, #4294967295
 800a308:	4620      	mov	r0, r4
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	240002e8 	.word	0x240002e8

0800a310 <_malloc_r>:
 800a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a314:	1ccd      	adds	r5, r1, #3
 800a316:	f025 0503 	bic.w	r5, r5, #3
 800a31a:	3508      	adds	r5, #8
 800a31c:	2d0c      	cmp	r5, #12
 800a31e:	bf38      	it	cc
 800a320:	250c      	movcc	r5, #12
 800a322:	2d00      	cmp	r5, #0
 800a324:	4607      	mov	r7, r0
 800a326:	db01      	blt.n	800a32c <_malloc_r+0x1c>
 800a328:	42a9      	cmp	r1, r5
 800a32a:	d905      	bls.n	800a338 <_malloc_r+0x28>
 800a32c:	230c      	movs	r3, #12
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	2600      	movs	r6, #0
 800a332:	4630      	mov	r0, r6
 800a334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a338:	4e2e      	ldr	r6, [pc, #184]	; (800a3f4 <_malloc_r+0xe4>)
 800a33a:	f000 fae7 	bl	800a90c <__malloc_lock>
 800a33e:	6833      	ldr	r3, [r6, #0]
 800a340:	461c      	mov	r4, r3
 800a342:	bb34      	cbnz	r4, 800a392 <_malloc_r+0x82>
 800a344:	4629      	mov	r1, r5
 800a346:	4638      	mov	r0, r7
 800a348:	f7ff ffc2 	bl	800a2d0 <sbrk_aligned>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	4604      	mov	r4, r0
 800a350:	d14d      	bne.n	800a3ee <_malloc_r+0xde>
 800a352:	6834      	ldr	r4, [r6, #0]
 800a354:	4626      	mov	r6, r4
 800a356:	2e00      	cmp	r6, #0
 800a358:	d140      	bne.n	800a3dc <_malloc_r+0xcc>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	4631      	mov	r1, r6
 800a35e:	4638      	mov	r0, r7
 800a360:	eb04 0803 	add.w	r8, r4, r3
 800a364:	f000 f9d2 	bl	800a70c <_sbrk_r>
 800a368:	4580      	cmp	r8, r0
 800a36a:	d13a      	bne.n	800a3e2 <_malloc_r+0xd2>
 800a36c:	6821      	ldr	r1, [r4, #0]
 800a36e:	3503      	adds	r5, #3
 800a370:	1a6d      	subs	r5, r5, r1
 800a372:	f025 0503 	bic.w	r5, r5, #3
 800a376:	3508      	adds	r5, #8
 800a378:	2d0c      	cmp	r5, #12
 800a37a:	bf38      	it	cc
 800a37c:	250c      	movcc	r5, #12
 800a37e:	4629      	mov	r1, r5
 800a380:	4638      	mov	r0, r7
 800a382:	f7ff ffa5 	bl	800a2d0 <sbrk_aligned>
 800a386:	3001      	adds	r0, #1
 800a388:	d02b      	beq.n	800a3e2 <_malloc_r+0xd2>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	442b      	add	r3, r5
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	e00e      	b.n	800a3b0 <_malloc_r+0xa0>
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	1b52      	subs	r2, r2, r5
 800a396:	d41e      	bmi.n	800a3d6 <_malloc_r+0xc6>
 800a398:	2a0b      	cmp	r2, #11
 800a39a:	d916      	bls.n	800a3ca <_malloc_r+0xba>
 800a39c:	1961      	adds	r1, r4, r5
 800a39e:	42a3      	cmp	r3, r4
 800a3a0:	6025      	str	r5, [r4, #0]
 800a3a2:	bf18      	it	ne
 800a3a4:	6059      	strne	r1, [r3, #4]
 800a3a6:	6863      	ldr	r3, [r4, #4]
 800a3a8:	bf08      	it	eq
 800a3aa:	6031      	streq	r1, [r6, #0]
 800a3ac:	5162      	str	r2, [r4, r5]
 800a3ae:	604b      	str	r3, [r1, #4]
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	f104 060b 	add.w	r6, r4, #11
 800a3b6:	f000 faaf 	bl	800a918 <__malloc_unlock>
 800a3ba:	f026 0607 	bic.w	r6, r6, #7
 800a3be:	1d23      	adds	r3, r4, #4
 800a3c0:	1af2      	subs	r2, r6, r3
 800a3c2:	d0b6      	beq.n	800a332 <_malloc_r+0x22>
 800a3c4:	1b9b      	subs	r3, r3, r6
 800a3c6:	50a3      	str	r3, [r4, r2]
 800a3c8:	e7b3      	b.n	800a332 <_malloc_r+0x22>
 800a3ca:	6862      	ldr	r2, [r4, #4]
 800a3cc:	42a3      	cmp	r3, r4
 800a3ce:	bf0c      	ite	eq
 800a3d0:	6032      	streq	r2, [r6, #0]
 800a3d2:	605a      	strne	r2, [r3, #4]
 800a3d4:	e7ec      	b.n	800a3b0 <_malloc_r+0xa0>
 800a3d6:	4623      	mov	r3, r4
 800a3d8:	6864      	ldr	r4, [r4, #4]
 800a3da:	e7b2      	b.n	800a342 <_malloc_r+0x32>
 800a3dc:	4634      	mov	r4, r6
 800a3de:	6876      	ldr	r6, [r6, #4]
 800a3e0:	e7b9      	b.n	800a356 <_malloc_r+0x46>
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	603b      	str	r3, [r7, #0]
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	f000 fa96 	bl	800a918 <__malloc_unlock>
 800a3ec:	e7a1      	b.n	800a332 <_malloc_r+0x22>
 800a3ee:	6025      	str	r5, [r4, #0]
 800a3f0:	e7de      	b.n	800a3b0 <_malloc_r+0xa0>
 800a3f2:	bf00      	nop
 800a3f4:	240002e4 	.word	0x240002e4

0800a3f8 <_realloc_r>:
 800a3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fc:	4680      	mov	r8, r0
 800a3fe:	4614      	mov	r4, r2
 800a400:	460e      	mov	r6, r1
 800a402:	b921      	cbnz	r1, 800a40e <_realloc_r+0x16>
 800a404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a408:	4611      	mov	r1, r2
 800a40a:	f7ff bf81 	b.w	800a310 <_malloc_r>
 800a40e:	b92a      	cbnz	r2, 800a41c <_realloc_r+0x24>
 800a410:	f7ff ff12 	bl	800a238 <_free_r>
 800a414:	4625      	mov	r5, r4
 800a416:	4628      	mov	r0, r5
 800a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a41c:	f000 fa82 	bl	800a924 <_malloc_usable_size_r>
 800a420:	4284      	cmp	r4, r0
 800a422:	4607      	mov	r7, r0
 800a424:	d802      	bhi.n	800a42c <_realloc_r+0x34>
 800a426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a42a:	d812      	bhi.n	800a452 <_realloc_r+0x5a>
 800a42c:	4621      	mov	r1, r4
 800a42e:	4640      	mov	r0, r8
 800a430:	f7ff ff6e 	bl	800a310 <_malloc_r>
 800a434:	4605      	mov	r5, r0
 800a436:	2800      	cmp	r0, #0
 800a438:	d0ed      	beq.n	800a416 <_realloc_r+0x1e>
 800a43a:	42bc      	cmp	r4, r7
 800a43c:	4622      	mov	r2, r4
 800a43e:	4631      	mov	r1, r6
 800a440:	bf28      	it	cs
 800a442:	463a      	movcs	r2, r7
 800a444:	f7ff fb36 	bl	8009ab4 <memcpy>
 800a448:	4631      	mov	r1, r6
 800a44a:	4640      	mov	r0, r8
 800a44c:	f7ff fef4 	bl	800a238 <_free_r>
 800a450:	e7e1      	b.n	800a416 <_realloc_r+0x1e>
 800a452:	4635      	mov	r5, r6
 800a454:	e7df      	b.n	800a416 <_realloc_r+0x1e>

0800a456 <__ssputs_r>:
 800a456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a45a:	688e      	ldr	r6, [r1, #8]
 800a45c:	429e      	cmp	r6, r3
 800a45e:	4682      	mov	sl, r0
 800a460:	460c      	mov	r4, r1
 800a462:	4690      	mov	r8, r2
 800a464:	461f      	mov	r7, r3
 800a466:	d838      	bhi.n	800a4da <__ssputs_r+0x84>
 800a468:	898a      	ldrh	r2, [r1, #12]
 800a46a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a46e:	d032      	beq.n	800a4d6 <__ssputs_r+0x80>
 800a470:	6825      	ldr	r5, [r4, #0]
 800a472:	6909      	ldr	r1, [r1, #16]
 800a474:	eba5 0901 	sub.w	r9, r5, r1
 800a478:	6965      	ldr	r5, [r4, #20]
 800a47a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a47e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a482:	3301      	adds	r3, #1
 800a484:	444b      	add	r3, r9
 800a486:	106d      	asrs	r5, r5, #1
 800a488:	429d      	cmp	r5, r3
 800a48a:	bf38      	it	cc
 800a48c:	461d      	movcc	r5, r3
 800a48e:	0553      	lsls	r3, r2, #21
 800a490:	d531      	bpl.n	800a4f6 <__ssputs_r+0xa0>
 800a492:	4629      	mov	r1, r5
 800a494:	f7ff ff3c 	bl	800a310 <_malloc_r>
 800a498:	4606      	mov	r6, r0
 800a49a:	b950      	cbnz	r0, 800a4b2 <__ssputs_r+0x5c>
 800a49c:	230c      	movs	r3, #12
 800a49e:	f8ca 3000 	str.w	r3, [sl]
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b2:	6921      	ldr	r1, [r4, #16]
 800a4b4:	464a      	mov	r2, r9
 800a4b6:	f7ff fafd 	bl	8009ab4 <memcpy>
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c4:	81a3      	strh	r3, [r4, #12]
 800a4c6:	6126      	str	r6, [r4, #16]
 800a4c8:	6165      	str	r5, [r4, #20]
 800a4ca:	444e      	add	r6, r9
 800a4cc:	eba5 0509 	sub.w	r5, r5, r9
 800a4d0:	6026      	str	r6, [r4, #0]
 800a4d2:	60a5      	str	r5, [r4, #8]
 800a4d4:	463e      	mov	r6, r7
 800a4d6:	42be      	cmp	r6, r7
 800a4d8:	d900      	bls.n	800a4dc <__ssputs_r+0x86>
 800a4da:	463e      	mov	r6, r7
 800a4dc:	6820      	ldr	r0, [r4, #0]
 800a4de:	4632      	mov	r2, r6
 800a4e0:	4641      	mov	r1, r8
 800a4e2:	f7ff faf5 	bl	8009ad0 <memmove>
 800a4e6:	68a3      	ldr	r3, [r4, #8]
 800a4e8:	1b9b      	subs	r3, r3, r6
 800a4ea:	60a3      	str	r3, [r4, #8]
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	4433      	add	r3, r6
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e7db      	b.n	800a4ae <__ssputs_r+0x58>
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	f7ff ff7e 	bl	800a3f8 <_realloc_r>
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d1e1      	bne.n	800a4c6 <__ssputs_r+0x70>
 800a502:	6921      	ldr	r1, [r4, #16]
 800a504:	4650      	mov	r0, sl
 800a506:	f7ff fe97 	bl	800a238 <_free_r>
 800a50a:	e7c7      	b.n	800a49c <__ssputs_r+0x46>

0800a50c <_svfiprintf_r>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	4698      	mov	r8, r3
 800a512:	898b      	ldrh	r3, [r1, #12]
 800a514:	061b      	lsls	r3, r3, #24
 800a516:	b09d      	sub	sp, #116	; 0x74
 800a518:	4607      	mov	r7, r0
 800a51a:	460d      	mov	r5, r1
 800a51c:	4614      	mov	r4, r2
 800a51e:	d50e      	bpl.n	800a53e <_svfiprintf_r+0x32>
 800a520:	690b      	ldr	r3, [r1, #16]
 800a522:	b963      	cbnz	r3, 800a53e <_svfiprintf_r+0x32>
 800a524:	2140      	movs	r1, #64	; 0x40
 800a526:	f7ff fef3 	bl	800a310 <_malloc_r>
 800a52a:	6028      	str	r0, [r5, #0]
 800a52c:	6128      	str	r0, [r5, #16]
 800a52e:	b920      	cbnz	r0, 800a53a <_svfiprintf_r+0x2e>
 800a530:	230c      	movs	r3, #12
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	e0d1      	b.n	800a6de <_svfiprintf_r+0x1d2>
 800a53a:	2340      	movs	r3, #64	; 0x40
 800a53c:	616b      	str	r3, [r5, #20]
 800a53e:	2300      	movs	r3, #0
 800a540:	9309      	str	r3, [sp, #36]	; 0x24
 800a542:	2320      	movs	r3, #32
 800a544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a548:	f8cd 800c 	str.w	r8, [sp, #12]
 800a54c:	2330      	movs	r3, #48	; 0x30
 800a54e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6f8 <_svfiprintf_r+0x1ec>
 800a552:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a556:	f04f 0901 	mov.w	r9, #1
 800a55a:	4623      	mov	r3, r4
 800a55c:	469a      	mov	sl, r3
 800a55e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a562:	b10a      	cbz	r2, 800a568 <_svfiprintf_r+0x5c>
 800a564:	2a25      	cmp	r2, #37	; 0x25
 800a566:	d1f9      	bne.n	800a55c <_svfiprintf_r+0x50>
 800a568:	ebba 0b04 	subs.w	fp, sl, r4
 800a56c:	d00b      	beq.n	800a586 <_svfiprintf_r+0x7a>
 800a56e:	465b      	mov	r3, fp
 800a570:	4622      	mov	r2, r4
 800a572:	4629      	mov	r1, r5
 800a574:	4638      	mov	r0, r7
 800a576:	f7ff ff6e 	bl	800a456 <__ssputs_r>
 800a57a:	3001      	adds	r0, #1
 800a57c:	f000 80aa 	beq.w	800a6d4 <_svfiprintf_r+0x1c8>
 800a580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a582:	445a      	add	r2, fp
 800a584:	9209      	str	r2, [sp, #36]	; 0x24
 800a586:	f89a 3000 	ldrb.w	r3, [sl]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 80a2 	beq.w	800a6d4 <_svfiprintf_r+0x1c8>
 800a590:	2300      	movs	r3, #0
 800a592:	f04f 32ff 	mov.w	r2, #4294967295
 800a596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a59a:	f10a 0a01 	add.w	sl, sl, #1
 800a59e:	9304      	str	r3, [sp, #16]
 800a5a0:	9307      	str	r3, [sp, #28]
 800a5a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a5a8:	4654      	mov	r4, sl
 800a5aa:	2205      	movs	r2, #5
 800a5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b0:	4851      	ldr	r0, [pc, #324]	; (800a6f8 <_svfiprintf_r+0x1ec>)
 800a5b2:	f7f5 fea5 	bl	8000300 <memchr>
 800a5b6:	9a04      	ldr	r2, [sp, #16]
 800a5b8:	b9d8      	cbnz	r0, 800a5f2 <_svfiprintf_r+0xe6>
 800a5ba:	06d0      	lsls	r0, r2, #27
 800a5bc:	bf44      	itt	mi
 800a5be:	2320      	movmi	r3, #32
 800a5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5c4:	0711      	lsls	r1, r2, #28
 800a5c6:	bf44      	itt	mi
 800a5c8:	232b      	movmi	r3, #43	; 0x2b
 800a5ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d4:	d015      	beq.n	800a602 <_svfiprintf_r+0xf6>
 800a5d6:	9a07      	ldr	r2, [sp, #28]
 800a5d8:	4654      	mov	r4, sl
 800a5da:	2000      	movs	r0, #0
 800a5dc:	f04f 0c0a 	mov.w	ip, #10
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5e6:	3b30      	subs	r3, #48	; 0x30
 800a5e8:	2b09      	cmp	r3, #9
 800a5ea:	d94e      	bls.n	800a68a <_svfiprintf_r+0x17e>
 800a5ec:	b1b0      	cbz	r0, 800a61c <_svfiprintf_r+0x110>
 800a5ee:	9207      	str	r2, [sp, #28]
 800a5f0:	e014      	b.n	800a61c <_svfiprintf_r+0x110>
 800a5f2:	eba0 0308 	sub.w	r3, r0, r8
 800a5f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	46a2      	mov	sl, r4
 800a600:	e7d2      	b.n	800a5a8 <_svfiprintf_r+0x9c>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	1d19      	adds	r1, r3, #4
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	9103      	str	r1, [sp, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	bfbb      	ittet	lt
 800a60e:	425b      	neglt	r3, r3
 800a610:	f042 0202 	orrlt.w	r2, r2, #2
 800a614:	9307      	strge	r3, [sp, #28]
 800a616:	9307      	strlt	r3, [sp, #28]
 800a618:	bfb8      	it	lt
 800a61a:	9204      	strlt	r2, [sp, #16]
 800a61c:	7823      	ldrb	r3, [r4, #0]
 800a61e:	2b2e      	cmp	r3, #46	; 0x2e
 800a620:	d10c      	bne.n	800a63c <_svfiprintf_r+0x130>
 800a622:	7863      	ldrb	r3, [r4, #1]
 800a624:	2b2a      	cmp	r3, #42	; 0x2a
 800a626:	d135      	bne.n	800a694 <_svfiprintf_r+0x188>
 800a628:	9b03      	ldr	r3, [sp, #12]
 800a62a:	1d1a      	adds	r2, r3, #4
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	9203      	str	r2, [sp, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	bfb8      	it	lt
 800a634:	f04f 33ff 	movlt.w	r3, #4294967295
 800a638:	3402      	adds	r4, #2
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a708 <_svfiprintf_r+0x1fc>
 800a640:	7821      	ldrb	r1, [r4, #0]
 800a642:	2203      	movs	r2, #3
 800a644:	4650      	mov	r0, sl
 800a646:	f7f5 fe5b 	bl	8000300 <memchr>
 800a64a:	b140      	cbz	r0, 800a65e <_svfiprintf_r+0x152>
 800a64c:	2340      	movs	r3, #64	; 0x40
 800a64e:	eba0 000a 	sub.w	r0, r0, sl
 800a652:	fa03 f000 	lsl.w	r0, r3, r0
 800a656:	9b04      	ldr	r3, [sp, #16]
 800a658:	4303      	orrs	r3, r0
 800a65a:	3401      	adds	r4, #1
 800a65c:	9304      	str	r3, [sp, #16]
 800a65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a662:	4826      	ldr	r0, [pc, #152]	; (800a6fc <_svfiprintf_r+0x1f0>)
 800a664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a668:	2206      	movs	r2, #6
 800a66a:	f7f5 fe49 	bl	8000300 <memchr>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d038      	beq.n	800a6e4 <_svfiprintf_r+0x1d8>
 800a672:	4b23      	ldr	r3, [pc, #140]	; (800a700 <_svfiprintf_r+0x1f4>)
 800a674:	bb1b      	cbnz	r3, 800a6be <_svfiprintf_r+0x1b2>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	3307      	adds	r3, #7
 800a67a:	f023 0307 	bic.w	r3, r3, #7
 800a67e:	3308      	adds	r3, #8
 800a680:	9303      	str	r3, [sp, #12]
 800a682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a684:	4433      	add	r3, r6
 800a686:	9309      	str	r3, [sp, #36]	; 0x24
 800a688:	e767      	b.n	800a55a <_svfiprintf_r+0x4e>
 800a68a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a68e:	460c      	mov	r4, r1
 800a690:	2001      	movs	r0, #1
 800a692:	e7a5      	b.n	800a5e0 <_svfiprintf_r+0xd4>
 800a694:	2300      	movs	r3, #0
 800a696:	3401      	adds	r4, #1
 800a698:	9305      	str	r3, [sp, #20]
 800a69a:	4619      	mov	r1, r3
 800a69c:	f04f 0c0a 	mov.w	ip, #10
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6a6:	3a30      	subs	r2, #48	; 0x30
 800a6a8:	2a09      	cmp	r2, #9
 800a6aa:	d903      	bls.n	800a6b4 <_svfiprintf_r+0x1a8>
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d0c5      	beq.n	800a63c <_svfiprintf_r+0x130>
 800a6b0:	9105      	str	r1, [sp, #20]
 800a6b2:	e7c3      	b.n	800a63c <_svfiprintf_r+0x130>
 800a6b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e7f0      	b.n	800a6a0 <_svfiprintf_r+0x194>
 800a6be:	ab03      	add	r3, sp, #12
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	462a      	mov	r2, r5
 800a6c4:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <_svfiprintf_r+0x1f8>)
 800a6c6:	a904      	add	r1, sp, #16
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	f7fd fd35 	bl	8008138 <_printf_float>
 800a6ce:	1c42      	adds	r2, r0, #1
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	d1d6      	bne.n	800a682 <_svfiprintf_r+0x176>
 800a6d4:	89ab      	ldrh	r3, [r5, #12]
 800a6d6:	065b      	lsls	r3, r3, #25
 800a6d8:	f53f af2c 	bmi.w	800a534 <_svfiprintf_r+0x28>
 800a6dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6de:	b01d      	add	sp, #116	; 0x74
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	ab03      	add	r3, sp, #12
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	4b06      	ldr	r3, [pc, #24]	; (800a704 <_svfiprintf_r+0x1f8>)
 800a6ec:	a904      	add	r1, sp, #16
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	f7fd ffae 	bl	8008650 <_printf_i>
 800a6f4:	e7eb      	b.n	800a6ce <_svfiprintf_r+0x1c2>
 800a6f6:	bf00      	nop
 800a6f8:	0800ab00 	.word	0x0800ab00
 800a6fc:	0800ab0a 	.word	0x0800ab0a
 800a700:	08008139 	.word	0x08008139
 800a704:	0800a457 	.word	0x0800a457
 800a708:	0800ab06 	.word	0x0800ab06

0800a70c <_sbrk_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d06      	ldr	r5, [pc, #24]	; (800a728 <_sbrk_r+0x1c>)
 800a710:	2300      	movs	r3, #0
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	f7f7 f954 	bl	80019c4 <_sbrk>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_sbrk_r+0x1a>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_sbrk_r+0x1a>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	240002ec 	.word	0x240002ec

0800a72c <_raise_r>:
 800a72c:	291f      	cmp	r1, #31
 800a72e:	b538      	push	{r3, r4, r5, lr}
 800a730:	4604      	mov	r4, r0
 800a732:	460d      	mov	r5, r1
 800a734:	d904      	bls.n	800a740 <_raise_r+0x14>
 800a736:	2316      	movs	r3, #22
 800a738:	6003      	str	r3, [r0, #0]
 800a73a:	f04f 30ff 	mov.w	r0, #4294967295
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a742:	b112      	cbz	r2, 800a74a <_raise_r+0x1e>
 800a744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a748:	b94b      	cbnz	r3, 800a75e <_raise_r+0x32>
 800a74a:	4620      	mov	r0, r4
 800a74c:	f000 f830 	bl	800a7b0 <_getpid_r>
 800a750:	462a      	mov	r2, r5
 800a752:	4601      	mov	r1, r0
 800a754:	4620      	mov	r0, r4
 800a756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a75a:	f000 b817 	b.w	800a78c <_kill_r>
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d00a      	beq.n	800a778 <_raise_r+0x4c>
 800a762:	1c59      	adds	r1, r3, #1
 800a764:	d103      	bne.n	800a76e <_raise_r+0x42>
 800a766:	2316      	movs	r3, #22
 800a768:	6003      	str	r3, [r0, #0]
 800a76a:	2001      	movs	r0, #1
 800a76c:	e7e7      	b.n	800a73e <_raise_r+0x12>
 800a76e:	2400      	movs	r4, #0
 800a770:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a774:	4628      	mov	r0, r5
 800a776:	4798      	blx	r3
 800a778:	2000      	movs	r0, #0
 800a77a:	e7e0      	b.n	800a73e <_raise_r+0x12>

0800a77c <raise>:
 800a77c:	4b02      	ldr	r3, [pc, #8]	; (800a788 <raise+0xc>)
 800a77e:	4601      	mov	r1, r0
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	f7ff bfd3 	b.w	800a72c <_raise_r>
 800a786:	bf00      	nop
 800a788:	24000010 	.word	0x24000010

0800a78c <_kill_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4d07      	ldr	r5, [pc, #28]	; (800a7ac <_kill_r+0x20>)
 800a790:	2300      	movs	r3, #0
 800a792:	4604      	mov	r4, r0
 800a794:	4608      	mov	r0, r1
 800a796:	4611      	mov	r1, r2
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	f7f7 f88b 	bl	80018b4 <_kill>
 800a79e:	1c43      	adds	r3, r0, #1
 800a7a0:	d102      	bne.n	800a7a8 <_kill_r+0x1c>
 800a7a2:	682b      	ldr	r3, [r5, #0]
 800a7a4:	b103      	cbz	r3, 800a7a8 <_kill_r+0x1c>
 800a7a6:	6023      	str	r3, [r4, #0]
 800a7a8:	bd38      	pop	{r3, r4, r5, pc}
 800a7aa:	bf00      	nop
 800a7ac:	240002ec 	.word	0x240002ec

0800a7b0 <_getpid_r>:
 800a7b0:	f7f7 b878 	b.w	80018a4 <_getpid>

0800a7b4 <__sread>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7bc:	f000 f8ba 	bl	800a934 <_read_r>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	bfab      	itete	ge
 800a7c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7c6:	89a3      	ldrhlt	r3, [r4, #12]
 800a7c8:	181b      	addge	r3, r3, r0
 800a7ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7ce:	bfac      	ite	ge
 800a7d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7d2:	81a3      	strhlt	r3, [r4, #12]
 800a7d4:	bd10      	pop	{r4, pc}

0800a7d6 <__swrite>:
 800a7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7da:	461f      	mov	r7, r3
 800a7dc:	898b      	ldrh	r3, [r1, #12]
 800a7de:	05db      	lsls	r3, r3, #23
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	4616      	mov	r6, r2
 800a7e6:	d505      	bpl.n	800a7f4 <__swrite+0x1e>
 800a7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f000 f868 	bl	800a8c4 <_lseek_r>
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	4632      	mov	r2, r6
 800a802:	463b      	mov	r3, r7
 800a804:	4628      	mov	r0, r5
 800a806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a80a:	f000 b817 	b.w	800a83c <_write_r>

0800a80e <__sseek>:
 800a80e:	b510      	push	{r4, lr}
 800a810:	460c      	mov	r4, r1
 800a812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a816:	f000 f855 	bl	800a8c4 <_lseek_r>
 800a81a:	1c43      	adds	r3, r0, #1
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	bf15      	itete	ne
 800a820:	6560      	strne	r0, [r4, #84]	; 0x54
 800a822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a82a:	81a3      	strheq	r3, [r4, #12]
 800a82c:	bf18      	it	ne
 800a82e:	81a3      	strhne	r3, [r4, #12]
 800a830:	bd10      	pop	{r4, pc}

0800a832 <__sclose>:
 800a832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a836:	f000 b813 	b.w	800a860 <_close_r>
	...

0800a83c <_write_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d07      	ldr	r5, [pc, #28]	; (800a85c <_write_r+0x20>)
 800a840:	4604      	mov	r4, r0
 800a842:	4608      	mov	r0, r1
 800a844:	4611      	mov	r1, r2
 800a846:	2200      	movs	r2, #0
 800a848:	602a      	str	r2, [r5, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	f7f7 f869 	bl	8001922 <_write>
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	d102      	bne.n	800a85a <_write_r+0x1e>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	b103      	cbz	r3, 800a85a <_write_r+0x1e>
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	240002ec 	.word	0x240002ec

0800a860 <_close_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d06      	ldr	r5, [pc, #24]	; (800a87c <_close_r+0x1c>)
 800a864:	2300      	movs	r3, #0
 800a866:	4604      	mov	r4, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	602b      	str	r3, [r5, #0]
 800a86c:	f7f7 f875 	bl	800195a <_close>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d102      	bne.n	800a87a <_close_r+0x1a>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	b103      	cbz	r3, 800a87a <_close_r+0x1a>
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	240002ec 	.word	0x240002ec

0800a880 <_fstat_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4d07      	ldr	r5, [pc, #28]	; (800a8a0 <_fstat_r+0x20>)
 800a884:	2300      	movs	r3, #0
 800a886:	4604      	mov	r4, r0
 800a888:	4608      	mov	r0, r1
 800a88a:	4611      	mov	r1, r2
 800a88c:	602b      	str	r3, [r5, #0]
 800a88e:	f7f7 f870 	bl	8001972 <_fstat>
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	d102      	bne.n	800a89c <_fstat_r+0x1c>
 800a896:	682b      	ldr	r3, [r5, #0]
 800a898:	b103      	cbz	r3, 800a89c <_fstat_r+0x1c>
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
 800a89e:	bf00      	nop
 800a8a0:	240002ec 	.word	0x240002ec

0800a8a4 <_isatty_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d06      	ldr	r5, [pc, #24]	; (800a8c0 <_isatty_r+0x1c>)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	602b      	str	r3, [r5, #0]
 800a8b0:	f7f7 f86f 	bl	8001992 <_isatty>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_isatty_r+0x1a>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_isatty_r+0x1a>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	240002ec 	.word	0x240002ec

0800a8c4 <_lseek_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d07      	ldr	r5, [pc, #28]	; (800a8e4 <_lseek_r+0x20>)
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	4608      	mov	r0, r1
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	602a      	str	r2, [r5, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f7f7 f868 	bl	80019a8 <_lseek>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d102      	bne.n	800a8e2 <_lseek_r+0x1e>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	b103      	cbz	r3, 800a8e2 <_lseek_r+0x1e>
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	240002ec 	.word	0x240002ec

0800a8e8 <__ascii_mbtowc>:
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	b901      	cbnz	r1, 800a8ee <__ascii_mbtowc+0x6>
 800a8ec:	a901      	add	r1, sp, #4
 800a8ee:	b142      	cbz	r2, 800a902 <__ascii_mbtowc+0x1a>
 800a8f0:	b14b      	cbz	r3, 800a906 <__ascii_mbtowc+0x1e>
 800a8f2:	7813      	ldrb	r3, [r2, #0]
 800a8f4:	600b      	str	r3, [r1, #0]
 800a8f6:	7812      	ldrb	r2, [r2, #0]
 800a8f8:	1e10      	subs	r0, r2, #0
 800a8fa:	bf18      	it	ne
 800a8fc:	2001      	movne	r0, #1
 800a8fe:	b002      	add	sp, #8
 800a900:	4770      	bx	lr
 800a902:	4610      	mov	r0, r2
 800a904:	e7fb      	b.n	800a8fe <__ascii_mbtowc+0x16>
 800a906:	f06f 0001 	mvn.w	r0, #1
 800a90a:	e7f8      	b.n	800a8fe <__ascii_mbtowc+0x16>

0800a90c <__malloc_lock>:
 800a90c:	4801      	ldr	r0, [pc, #4]	; (800a914 <__malloc_lock+0x8>)
 800a90e:	f7ff b862 	b.w	80099d6 <__retarget_lock_acquire_recursive>
 800a912:	bf00      	nop
 800a914:	240002e0 	.word	0x240002e0

0800a918 <__malloc_unlock>:
 800a918:	4801      	ldr	r0, [pc, #4]	; (800a920 <__malloc_unlock+0x8>)
 800a91a:	f7ff b85d 	b.w	80099d8 <__retarget_lock_release_recursive>
 800a91e:	bf00      	nop
 800a920:	240002e0 	.word	0x240002e0

0800a924 <_malloc_usable_size_r>:
 800a924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a928:	1f18      	subs	r0, r3, #4
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	bfbc      	itt	lt
 800a92e:	580b      	ldrlt	r3, [r1, r0]
 800a930:	18c0      	addlt	r0, r0, r3
 800a932:	4770      	bx	lr

0800a934 <_read_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d07      	ldr	r5, [pc, #28]	; (800a954 <_read_r+0x20>)
 800a938:	4604      	mov	r4, r0
 800a93a:	4608      	mov	r0, r1
 800a93c:	4611      	mov	r1, r2
 800a93e:	2200      	movs	r2, #0
 800a940:	602a      	str	r2, [r5, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f7f6 ffd0 	bl	80018e8 <_read>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_read_r+0x1e>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_read_r+0x1e>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	240002ec 	.word	0x240002ec

0800a958 <__ascii_wctomb>:
 800a958:	b149      	cbz	r1, 800a96e <__ascii_wctomb+0x16>
 800a95a:	2aff      	cmp	r2, #255	; 0xff
 800a95c:	bf85      	ittet	hi
 800a95e:	238a      	movhi	r3, #138	; 0x8a
 800a960:	6003      	strhi	r3, [r0, #0]
 800a962:	700a      	strbls	r2, [r1, #0]
 800a964:	f04f 30ff 	movhi.w	r0, #4294967295
 800a968:	bf98      	it	ls
 800a96a:	2001      	movls	r0, #1
 800a96c:	4770      	bx	lr
 800a96e:	4608      	mov	r0, r1
 800a970:	4770      	bx	lr
	...

0800a974 <_init>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	bf00      	nop
 800a978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97a:	bc08      	pop	{r3}
 800a97c:	469e      	mov	lr, r3
 800a97e:	4770      	bx	lr

0800a980 <_fini>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	bf00      	nop
 800a984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a986:	bc08      	pop	{r3}
 800a988:	469e      	mov	lr, r3
 800a98a:	4770      	bx	lr

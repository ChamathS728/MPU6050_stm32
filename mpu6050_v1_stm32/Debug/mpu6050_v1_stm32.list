
mpu6050_v1_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc64  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800bf18  0800bf18  0001bf18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c428  0800c428  0001c428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c430  0800c430  0001c430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c434  0800c434  0001c434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800c438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000200  240001e0  0800c618  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003e0  0800c618  000203e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000154b4  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002668  00000000  00000000  000356c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f20  00000000  00000000  00037d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e38  00000000  00000000  00038c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003043d  00000000  00000000  00039a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015413  00000000  00000000  00069ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136672  00000000  00000000  0007f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b594a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d54  00000000  00000000  001b599c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800befc 	.word	0x0800befc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800befc 	.word	0x0800befc

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MPU6050_readRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


HAL_StatusTypeDef MPU6050_readRegister(MPU6050* mpu6050, uint8_t reg, uint8_t* data) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af04      	add	r7, sp, #16
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
  /*
  Reads 1 byte from the specified register using I2C configuration from the MPU6050 instance
  Info is stored away into the data array
  */
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1, HAL_MAX_DELAY);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	b299      	uxth	r1, r3
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	f004 fa0c 	bl	8004aec <HAL_I2C_Mem_Read>
 80006d4:	4603      	mov	r3, r0
 80006d6:	75fb      	strb	r3, [r7, #23]
  return result;
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <MPU6050_writeRegister>:

HAL_StatusTypeDef MPU6050_writeRegister(MPU6050* mpu6050, uint8_t reg, uint8_t* data) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b08a      	sub	sp, #40	; 0x28
 80006e6:	af04      	add	r7, sp, #16
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	460b      	mov	r3, r1
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	72fb      	strb	r3, [r7, #11]
  /*
  Writes 1 byte from the data array into the specified register reg using I2C configuration from the MPU6050 instance
  */  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1, HAL_MAX_DELAY);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	b299      	uxth	r1, r3
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	9302      	str	r3, [sp, #8]
 8000704:	2301      	movs	r3, #1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	f004 f8d9 	bl	80048c4 <HAL_I2C_Mem_Write>
 8000712:	4603      	mov	r3, r0
 8000714:	75fb      	strb	r3, [r7, #23]
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MPU6050_readRegisters>:

HAL_StatusTypeDef MPU6050_readRegisters(MPU6050* mpu6050, uint8_t reg, uint8_t* data, uint8_t length) {
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b08b      	sub	sp, #44	; 0x2c
 8000724:	af04      	add	r7, sp, #16
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	461a      	mov	r2, r3
 800072c:	460b      	mov	r3, r1
 800072e:	72fb      	strb	r3, [r7, #11]
 8000730:	4613      	mov	r3, r2
 8000732:	72bb      	strb	r3, [r7, #10]
  Reads 1 byte from the specified register using I2C configuration from the MPU6050 instance
  Info is stored away into the data array
  */  
  // NOTE: Length is the number of bytes we wanna read from the register -> 1 means read that register. 2 would mean reading this register then the next one
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length, HAL_MAX_DELAY);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	b299      	uxth	r1, r3
 800073e:	7afb      	ldrb	r3, [r7, #11]
 8000740:	b29a      	uxth	r2, r3
 8000742:	7abb      	ldrb	r3, [r7, #10]
 8000744:	b29b      	uxth	r3, r3
 8000746:	f04f 34ff 	mov.w	r4, #4294967295
 800074a:	9402      	str	r4, [sp, #8]
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2301      	movs	r3, #1
 8000754:	f004 f9ca 	bl	8004aec <HAL_I2C_Mem_Read>
 8000758:	4603      	mov	r3, r0
 800075a:	75fb      	strb	r3, [r7, #23]
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	371c      	adds	r7, #28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd90      	pop	{r4, r7, pc}

08000766 <MPU6050_wakeup>:


HAL_StatusTypeDef MPU6050_wakeup(MPU6050* mpu6050) {
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  // Write 0's to the PWR_MGMT_1 register to wake it up
  // It sets clock source as internal 8MHz clock, and it is woken up
  // uint8_t zero = 0;
  // HAL_StatusTypeDef res = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &zero, sizeof(zero), TIMEOUT_DEFAULT);

  HAL_StatusTypeDef res = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	216b      	movs	r1, #107	; 0x6b
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffb5 	bl	80006e2 <MPU6050_writeRegister>
 8000778:	4603      	mov	r3, r0
 800077a:	73fb      	strb	r3, [r7, #15]
  return res;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MPU6050_set_pwr_mgmt>:

HAL_StatusTypeDef MPU6050_set_pwr_mgmt(MPU6050* mpu6050, int dev_rst, int sleep, int cycle, int temp_dis, int clksel) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	603b      	str	r3, [r7, #0]
  // Assumption is that the first 4 inputs are 1 bit (0 or 1), and clksel is 3 bit (0 to 7)
  assert(dev_rst >= 0 && dev_rst <= 1);
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db02      	blt.n	80007a2 <MPU6050_set_pwr_mgmt+0x1a>
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	dd05      	ble.n	80007ae <MPU6050_set_pwr_mgmt+0x26>
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <MPU6050_set_pwr_mgmt+0xd4>)
 80007a4:	4a2e      	ldr	r2, [pc, #184]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 80007a6:	21bb      	movs	r1, #187	; 0xbb
 80007a8:	482e      	ldr	r0, [pc, #184]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 80007aa:	f008 ff07 	bl	80095bc <__assert_func>
  assert(sleep >= 0 && sleep <= 1);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	db02      	blt.n	80007ba <MPU6050_set_pwr_mgmt+0x32>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	dd05      	ble.n	80007c6 <MPU6050_set_pwr_mgmt+0x3e>
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MPU6050_set_pwr_mgmt+0xe0>)
 80007bc:	4a28      	ldr	r2, [pc, #160]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 80007be:	21bc      	movs	r1, #188	; 0xbc
 80007c0:	4828      	ldr	r0, [pc, #160]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 80007c2:	f008 fefb 	bl	80095bc <__assert_func>
  assert(cycle >= 0 && cycle <= 1);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db02      	blt.n	80007d2 <MPU6050_set_pwr_mgmt+0x4a>
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	dd05      	ble.n	80007de <MPU6050_set_pwr_mgmt+0x56>
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <MPU6050_set_pwr_mgmt+0xe4>)
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 80007d6:	21bd      	movs	r1, #189	; 0xbd
 80007d8:	4822      	ldr	r0, [pc, #136]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 80007da:	f008 feef 	bl	80095bc <__assert_func>
  assert(temp_dis >= 0 && temp_dis <= 1);
 80007de:	6a3b      	ldr	r3, [r7, #32]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db02      	blt.n	80007ea <MPU6050_set_pwr_mgmt+0x62>
 80007e4:	6a3b      	ldr	r3, [r7, #32]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	dd05      	ble.n	80007f6 <MPU6050_set_pwr_mgmt+0x6e>
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MPU6050_set_pwr_mgmt+0xe8>)
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 80007ee:	21be      	movs	r1, #190	; 0xbe
 80007f0:	481c      	ldr	r0, [pc, #112]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 80007f2:	f008 fee3 	bl	80095bc <__assert_func>
  assert(clksel >= 0 && clksel <= 7);
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db02      	blt.n	8000802 <MPU6050_set_pwr_mgmt+0x7a>
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	2b07      	cmp	r3, #7
 8000800:	dd05      	ble.n	800080e <MPU6050_set_pwr_mgmt+0x86>
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MPU6050_set_pwr_mgmt+0xec>)
 8000804:	4a16      	ldr	r2, [pc, #88]	; (8000860 <MPU6050_set_pwr_mgmt+0xd8>)
 8000806:	21bf      	movs	r1, #191	; 0xbf
 8000808:	4816      	ldr	r0, [pc, #88]	; (8000864 <MPU6050_set_pwr_mgmt+0xdc>)
 800080a:	f008 fed7 	bl	80095bc <__assert_func>

  // Create bit string to put into the register
  uint8_t res =  0 | (dev_rst << 7) | (sleep << 6) | (cycle << 5) | (temp_dis << 3) | clksel;
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	01db      	lsls	r3, r3, #7
 8000812:	b25a      	sxtb	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	019b      	lsls	r3, r3, #6
 8000818:	b25b      	sxtb	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b25a      	sxtb	r2, r3
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	015b      	lsls	r3, r3, #5
 8000822:	b25b      	sxtb	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b25a      	sxtb	r2, r3
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	b25b      	sxtb	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b25a      	sxtb	r2, r3
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	75bb      	strb	r3, [r7, #22]
  
  // Write to the register over I2C
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, &res);
 800083e:	f107 0316 	add.w	r3, r7, #22
 8000842:	461a      	mov	r2, r3
 8000844:	216b      	movs	r1, #107	; 0x6b
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f7ff ff4b 	bl	80006e2 <MPU6050_writeRegister>
 800084c:	4603      	mov	r3, r0
 800084e:	75fb      	strb	r3, [r7, #23]

  return result;
 8000850:	7dfb      	ldrb	r3, [r7, #23]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	0800bf18 	.word	0x0800bf18
 8000860:	0800bfe0 	.word	0x0800bfe0
 8000864:	0800bf38 	.word	0x0800bf38
 8000868:	0800bf4c 	.word	0x0800bf4c
 800086c:	0800bf68 	.word	0x0800bf68
 8000870:	0800bf84 	.word	0x0800bf84
 8000874:	0800bfa4 	.word	0x0800bfa4

08000878 <MPU6050_set_dlpf>:

HAL_StatusTypeDef MPU6050_set_dlpf(uint8_t* dlpf, MPU6050* mpu6050) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  /*
  Just set DLPF_CFG = 001 (so register )
  */

  // Ensure that dlpf is a number between 0 and 7
  assert((*dlpf >= 0) && (*dlpf <= 7));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b07      	cmp	r3, #7
 8000888:	d905      	bls.n	8000896 <MPU6050_set_dlpf+0x1e>
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MPU6050_set_dlpf+0x40>)
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <MPU6050_set_dlpf+0x44>)
 800088e:	21d1      	movs	r1, #209	; 0xd1
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MPU6050_set_dlpf+0x48>)
 8000892:	f008 fe93 	bl	80095bc <__assert_func>
  // assert(*dlpf >= 0);
  // assert(*dlpf <= 7);

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, DLPF, I2C_MEMADD_SIZE_8BIT, dlpf, sizeof(*dlpf), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, dlpf);
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	216b      	movs	r1, #107	; 0x6b
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	f7ff ff21 	bl	80006e2 <MPU6050_writeRegister>
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]
  

  // Store the dlpf number in the struct
  mpu6050->dlpf = *dlpf;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	719a      	strb	r2, [r3, #6]
  return result;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	0800bfc0 	.word	0x0800bfc0
 80008bc:	0800bff8 	.word	0x0800bff8
 80008c0:	0800bf38 	.word	0x0800bf38

080008c4 <MPU6050_set_sample_rate>:

// REVIEW - Maths behind the smplrt_div_input may not be good due to division.
HAL_StatusTypeDef MPU6050_set_sample_rate(uint8_t* freq_ptr, MPU6050* mpu6050) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]

  We need to calculate what needs to go into the SMPLRT_DIV register to get the desired frequency
  This also assumes that the gyro output rate is at 1kHz
  */
  
  uint8_t smplrt_div_input = (mpu6050->gyro_smplrt)/(*freq_ptr) - 1;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	795a      	ldrb	r2, [r3, #5]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &smplrt_div_input, sizeof(smplrt_div_input), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, SMPLRT_DIV, &smplrt_div_input);
 80008e2:	f107 030e 	add.w	r3, r7, #14
 80008e6:	461a      	mov	r2, r3
 80008e8:	2119      	movs	r1, #25
 80008ea:	6838      	ldr	r0, [r7, #0]
 80008ec:	f7ff fef9 	bl	80006e2 <MPU6050_writeRegister>
 80008f0:	4603      	mov	r3, r0
 80008f2:	73fb      	strb	r3, [r7, #15]

  // Store the new sample rate divider in the struct
  mpu6050->gyro_smplrt = *freq_ptr;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	715a      	strb	r2, [r3, #5]
  return result;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <MPU6050_set_gyro_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_gyro_FSR(Gyro_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d822      	bhi.n	8000960 <MPU6050_set_gyro_FSR+0x58>
 800091a:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <MPU6050_set_gyro_FSR+0x18>)
 800091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000920:	08000931 	.word	0x08000931
 8000924:	0800093d 	.word	0x0800093d
 8000928:	08000949 	.word	0x08000949
 800092c:	08000955 	.word	0x08000955
    // For each possibility, set the correct data to be written and store the setting away
    // Left shift data bits by 3 so that we only overwrite bits 4 and 3
    case GYRO_FSR_250:
      pData = (0 << 3);
 8000930:	2300      	movs	r3, #0
 8000932:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_250;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	2200      	movs	r2, #0
 8000938:	71da      	strb	r2, [r3, #7]
      break;
 800093a:	e011      	b.n	8000960 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_500:
      pData = (1 << 3);
 800093c:	2308      	movs	r3, #8
 800093e:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_500;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2201      	movs	r2, #1
 8000944:	71da      	strb	r2, [r3, #7]
      break;
 8000946:	e00b      	b.n	8000960 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_1000:
      pData = (2 << 3);
 8000948:	2310      	movs	r3, #16
 800094a:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_1000;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	2202      	movs	r2, #2
 8000950:	71da      	strb	r2, [r3, #7]
      break;
 8000952:	e005      	b.n	8000960 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_2000:
      pData = (3 << 3);
 8000954:	2318      	movs	r3, #24
 8000956:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_2000;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	2203      	movs	r2, #3
 800095c:	71da      	strb	r2, [r3, #7]
      break;
 800095e:	bf00      	nop
  }
  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, GYRO_CONFIG, &pData);  
 8000960:	f107 030e 	add.w	r3, r7, #14
 8000964:	461a      	mov	r2, r3
 8000966:	211b      	movs	r1, #27
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	f7ff feba 	bl	80006e2 <MPU6050_writeRegister>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
  
  return result;
 8000972:	7bfb      	ldrb	r3, [r7, #15]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <MPU6050_set_accel_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_accel_FSR(Accel_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d822      	bhi.n	80009d4 <MPU6050_set_accel_FSR+0x58>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <MPU6050_set_accel_FSR+0x18>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	080009a5 	.word	0x080009a5
 8000998:	080009b1 	.word	0x080009b1
 800099c:	080009bd 	.word	0x080009bd
 80009a0:	080009c9 	.word	0x080009c9
    case ACCEL_FSR_2g:
      pData = (0 << 3);
 80009a4:	2300      	movs	r3, #0
 80009a6:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_2g;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2200      	movs	r2, #0
 80009ac:	721a      	strb	r2, [r3, #8]
      break;
 80009ae:	e011      	b.n	80009d4 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_4g:
      pData = (1 << 3);
 80009b0:	2308      	movs	r3, #8
 80009b2:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_4g;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	2201      	movs	r2, #1
 80009b8:	721a      	strb	r2, [r3, #8]
      break;
 80009ba:	e00b      	b.n	80009d4 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_8g:
      pData = (2 << 3);
 80009bc:	2310      	movs	r3, #16
 80009be:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_8g;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2202      	movs	r2, #2
 80009c4:	721a      	strb	r2, [r3, #8]
      break;
 80009c6:	e005      	b.n	80009d4 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_16g:
      pData = (3 << 3);
 80009c8:	2318      	movs	r3, #24
 80009ca:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_16g;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2203      	movs	r2, #3
 80009d0:	721a      	strb	r2, [r3, #8]
      break;
 80009d2:	bf00      	nop
  }
  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, ACCEL_CONFIG, &pData);    
 80009d4:	f107 030e 	add.w	r3, r7, #14
 80009d8:	461a      	mov	r2, r3
 80009da:	211c      	movs	r1, #28
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f7ff fe80 	bl	80006e2 <MPU6050_writeRegister>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]
  
  return result;  
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <MPU6050_FIFO_enable>:


HAL_StatusTypeDef MPU6050_FIFO_enable(MPU6050* mpu6050) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  // Write a 1 to bit 6 of register 0x6A
  uint8_t res = (1 << 6);
 80009f8:	2340      	movs	r3, #64	; 0x40
 80009fa:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, USER_CTRL, &res);     
 80009fc:	f107 030e 	add.w	r3, r7, #14
 8000a00:	461a      	mov	r2, r3
 8000a02:	216a      	movs	r1, #106	; 0x6a
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff fe6c 	bl	80006e2 <MPU6050_writeRegister>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	73fb      	strb	r3, [r7, #15]
  return result;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <MPU6050_FIFO_reset>:

HAL_StatusTypeDef MPU6050_FIFO_reset(MPU6050* mpu6050) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  // Assumes that MPU6050 FIFO buffer is enabled. FIFO enable bit is driven low ONLY when MPU is power cycled (turned off and back on)
  // Write a 2 to bit 2 of register 0x6A -> this gets written to 0 once FIFO is reset anyway
  uint8_t res = (1 << 2);
 8000a20:	2304      	movs	r3, #4
 8000a22:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, USER_CTRL, &res);  
 8000a24:	f107 030e 	add.w	r3, r7, #14
 8000a28:	461a      	mov	r2, r3
 8000a2a:	216a      	movs	r1, #106	; 0x6a
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fe58 	bl	80006e2 <MPU6050_writeRegister>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]

  return result;  
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MPU6050_init>:

HAL_StatusTypeDef MPU6050_init(MPU6050* mpu6050_ptr, uint8_t* dlpf, uint8_t* smpl_frq, Gyro_FSR_SEL_TypeDef gyro_setting, Accel_FSR_SEL_TypeDef accel_setting) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	70fb      	strb	r3, [r7, #3]
  // Check that we have the correct device by checking its address
  uint8_t check = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	75bb      	strb	r3, [r7, #22]
  // uint8_t check[4];
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &check, sizeof(check), TIMEOUT_DEFAULT);
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &check, sizeof(check), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_readRegister(mpu6050_ptr, WHO_AM_I, &check);
 8000a52:	f107 0316 	add.w	r3, r7, #22
 8000a56:	461a      	mov	r2, r3
 8000a58:	2175      	movs	r1, #117	; 0x75
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f7ff fe22 	bl	80006a4 <MPU6050_readRegister>
 8000a60:	4603      	mov	r3, r0
 8000a62:	75fb      	strb	r3, [r7, #23]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, WHO_AM_I, 1, check, 1, 1000);

  if (result == HAL_OK && check == 0x68) { //check == 0x68
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d118      	bne.n	8000a9c <MPU6050_init+0x5c>
 8000a6a:	7dbb      	ldrb	r3, [r7, #22]
 8000a6c:	2b68      	cmp	r3, #104	; 0x68
 8000a6e:	d115      	bne.n	8000a9c <MPU6050_init+0x5c>
    // Device is identified as the MPU6050 yay -> Wake it up
    MPU6050_wakeup(mpu6050_ptr);
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fe78 	bl	8000766 <MPU6050_wakeup>

    // Configure DLPF_CFG and store away settings
    MPU6050_set_dlpf(dlpf, mpu6050_ptr);
 8000a76:	68f9      	ldr	r1, [r7, #12]
 8000a78:	68b8      	ldr	r0, [r7, #8]
 8000a7a:	f7ff fefd 	bl	8000878 <MPU6050_set_dlpf>

    // Configure the gyro sample rate and store away settings
    MPU6050_set_sample_rate(smpl_frq, mpu6050_ptr);
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff1f 	bl	80008c4 <MPU6050_set_sample_rate>

    // Set the full scale range for the gyroscope and accelerometer
    MPU6050_set_gyro_FSR(gyro_setting, mpu6050_ptr);
 8000a86:	78fb      	ldrb	r3, [r7, #3]
 8000a88:	68f9      	ldr	r1, [r7, #12]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff3c 	bl	8000908 <MPU6050_set_gyro_FSR>
    MPU6050_set_accel_FSR(accel_setting, mpu6050_ptr);
 8000a90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a94:	68f9      	ldr	r1, [r7, #12]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff70 	bl	800097c <MPU6050_set_accel_FSR>
  }

  return result;
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <MPU6050_read_gyro_reg>:

HAL_StatusTypeDef MPU6050_read_gyro_reg(MPU6050* mpu6050) {
 8000aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000aac:	b089      	sub	sp, #36	; 0x24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	466b      	mov	r3, sp
 8000ab4:	461e      	mov	r6, r3
  // Initialise temporary variables
  int16_t gx_raw = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	83fb      	strh	r3, [r7, #30]
  int16_t gy_raw = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	83bb      	strh	r3, [r7, #28]
  int16_t gz_raw = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	837b      	strh	r3, [r7, #26]

  uint8_t num_of_bytes = 6;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	767b      	strb	r3, [r7, #25]
  int8_t g_raw[num_of_bytes];
 8000ac6:	7e79      	ldrb	r1, [r7, #25]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	3b01      	subs	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	b2cb      	uxtb	r3, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4698      	mov	r8, r3
 8000ad4:	4691      	mov	r9, r2
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	f04f 0300 	mov.w	r3, #0
 8000ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000aea:	b2cb      	uxtb	r3, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	461c      	mov	r4, r3
 8000af0:	4615      	mov	r5, r2
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	00eb      	lsls	r3, r5, #3
 8000afc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b00:	00e2      	lsls	r2, r4, #3
 8000b02:	460b      	mov	r3, r1
 8000b04:	3307      	adds	r3, #7
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b0e:	466b      	mov	r3, sp
 8000b10:	3300      	adds	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]

  // Read X gyro registers and store the raw gyroscope value away
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
  
  // Read all gyroscope registers starting from GYRO_XOUT_H and ending at GYRO_ZOUT_L
  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, GYRO_XOUT_H, g_raw, num_of_bytes);
 8000b14:	7e7b      	ldrb	r3, [r7, #25]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	2143      	movs	r1, #67	; 0x43
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fe00 	bl	8000720 <MPU6050_readRegisters>
 8000b20:	4603      	mov	r3, r0
 8000b22:	73fb      	strb	r3, [r7, #15]

  // Get the raw x, y and z values
  gx_raw = (g_raw[0] << 8) | (g_raw[1]);
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	83fb      	strh	r3, [r7, #30]
  gy_raw = (g_raw[2] << 8) | (g_raw[3]);
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	83bb      	strh	r3, [r7, #28]
  gz_raw = (g_raw[4] << 8) | (g_raw[5]);
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	837b      	strh	r3, [r7, #26]
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_ZOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_ZOUT_L, I2C_MEMADD_SIZE_8BIT, &g_raw_L, sizeof(g_raw_L), TIMEOUT_DEFAULT);
  // gz_raw = (g_raw[4] << 8) | (g_raw[5]);

  // Rescale raw readings according to gyro FSR
  switch(mpu6050->gyro_FSR) {
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	79db      	ldrb	r3, [r3, #7]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	f200 80c4 	bhi.w	8000cf8 <MPU6050_read_gyro_reg+0x250>
 8000b70:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <MPU6050_read_gyro_reg+0xd0>)
 8000b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b76:	bf00      	nop
 8000b78:	08000b89 	.word	0x08000b89
 8000b7c:	08000bd9 	.word	0x08000bd9
 8000b80:	08000c29 	.word	0x08000c29
 8000b84:	08000c91 	.word	0x08000c91
    case GYRO_FSR_250:
      mpu6050->gx = ((float) gx_raw) / 131.0;
 8000b88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b94:	eddf 6a60 	vldr	s13, [pc, #384]	; 8000d18 <MPU6050_read_gyro_reg+0x270>
 8000b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 131.0;
 8000ba2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bae:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8000d18 <MPU6050_read_gyro_reg+0x270>
 8000bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 131.0;
 8000bbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc8:	eddf 6a53 	vldr	s13, [pc, #332]	; 8000d18 <MPU6050_read_gyro_reg+0x270>
 8000bcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000bd6:	e08f      	b.n	8000cf8 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_500:
      mpu6050->gx = ((float) gx_raw) / 65.5;
 8000bd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bdc:	ee07 3a90 	vmov	s15, r3
 8000be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be4:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000d1c <MPU6050_read_gyro_reg+0x274>
 8000be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 65.5;
 8000bf2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000bf6:	ee07 3a90 	vmov	s15, r3
 8000bfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bfe:	eddf 6a47 	vldr	s13, [pc, #284]	; 8000d1c <MPU6050_read_gyro_reg+0x274>
 8000c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 65.5;
 8000c0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c18:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000d1c <MPU6050_read_gyro_reg+0x274>
 8000c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000c26:	e067      	b.n	8000cf8 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_1000:
      mpu6050->gx = ((float) gx_raw) / 32.8;
 8000c28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c34:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c38:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000d08 <MPU6050_read_gyro_reg+0x260>
 8000c3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 32.8;
 8000c4a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000c4e:	ee07 3a90 	vmov	s15, r3
 8000c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c56:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c5a:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8000d08 <MPU6050_read_gyro_reg+0x260>
 8000c5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 32.8;
 8000c6c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c70:	ee07 3a90 	vmov	s15, r3
 8000c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c7c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8000d08 <MPU6050_read_gyro_reg+0x260>
 8000c80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000c8e:	e033      	b.n	8000cf8 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_2000:
      mpu6050->gx = ((float) gx_raw) / 16.4;
 8000c90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ca0:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000d10 <MPU6050_read_gyro_reg+0x268>
 8000ca4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 16.4;
 8000cb2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000cb6:	ee07 3a90 	vmov	s15, r3
 8000cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cbe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cc2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000d10 <MPU6050_read_gyro_reg+0x268>
 8000cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 16.4;
 8000cd4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ce4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000d10 <MPU6050_read_gyro_reg+0x268>
 8000ce8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000cf6:	bf00      	nop
  }

  return result;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	46b5      	mov	sp, r6
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3724      	adds	r7, #36	; 0x24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d06:	bf00      	nop
 8000d08:	66666666 	.word	0x66666666
 8000d0c:	40406666 	.word	0x40406666
 8000d10:	66666666 	.word	0x66666666
 8000d14:	40306666 	.word	0x40306666
 8000d18:	43030000 	.word	0x43030000
 8000d1c:	42830000 	.word	0x42830000

08000d20 <MPU6050_read_accel_reg>:

HAL_StatusTypeDef MPU6050_read_accel_reg(MPU6050* mpu6050) {
 8000d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d24:	b089      	sub	sp, #36	; 0x24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	466b      	mov	r3, sp
 8000d2c:	461e      	mov	r6, r3
  // Initialise temporary variables
  int16_t ax_raw = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	83fb      	strh	r3, [r7, #30]
  int16_t ay_raw = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	83bb      	strh	r3, [r7, #28]
  int16_t az_raw = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	837b      	strh	r3, [r7, #26]

  uint8_t num_of_bytes = 6;
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	767b      	strb	r3, [r7, #25]
  int8_t a_raw[num_of_bytes];
 8000d3e:	7e79      	ldrb	r1, [r7, #25]
 8000d40:	460b      	mov	r3, r1
 8000d42:	3b01      	subs	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	b2cb      	uxtb	r3, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d62:	b2cb      	uxtb	r3, r1
 8000d64:	2200      	movs	r2, #0
 8000d66:	461c      	mov	r4, r3
 8000d68:	4615      	mov	r5, r2
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	00eb      	lsls	r3, r5, #3
 8000d74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d78:	00e2      	lsls	r2, r4, #3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	3307      	adds	r3, #7
 8000d7e:	08db      	lsrs	r3, r3, #3
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	ebad 0d03 	sub.w	sp, sp, r3
 8000d86:	466b      	mov	r3, sp
 8000d88:	3300      	adds	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]

  // Read all gyroscope registers starting from GYRO_XOUT_H and ending at GYRO_ZOUT_L
  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, ACCEL_XOUT_H, a_raw, num_of_bytes);
 8000d8c:	7e7b      	ldrb	r3, [r7, #25]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	213b      	movs	r1, #59	; 0x3b
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fcc4 	bl	8000720 <MPU6050_readRegisters>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	73fb      	strb	r3, [r7, #15]

  // Get the raw x, y and z values
  ax_raw = (a_raw[0] << 8) | (a_raw[1]);
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	83fb      	strh	r3, [r7, #30]
  ay_raw = (a_raw[2] << 8) | (a_raw[3]);
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	b21a      	sxth	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	83bb      	strh	r3, [r7, #28]
  az_raw = (a_raw[4] << 8) | (a_raw[5]);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	837b      	strh	r3, [r7, #26]
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_ZOUT_H, I2C_MEMADD_SIZE_8BIT, &a_raw_H, sizeof(a_raw_H), TIMEOUT_DEFAULT);
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, ACCEL_ZOUT_L, I2C_MEMADD_SIZE_8BIT, &a_raw_L, sizeof(a_raw_L), TIMEOUT_DEFAULT);
  // az_raw = (a_raw_H << 8) | (a_raw_L);

  // Rescale them according to accel FSR
  switch(mpu6050->accel_FSR) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7a1b      	ldrb	r3, [r3, #8]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	f200 80ac 	bhi.w	8000f40 <MPU6050_read_accel_reg+0x220>
 8000de8:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <MPU6050_read_accel_reg+0xd0>)
 8000dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dee:	bf00      	nop
 8000df0:	08000e01 	.word	0x08000e01
 8000df4:	08000e51 	.word	0x08000e51
 8000df8:	08000ea1 	.word	0x08000ea1
 8000dfc:	08000ef1 	.word	0x08000ef1
    case ACCEL_FSR_2g:
      mpu6050->ax = ((float) ax_raw) / 16384.0;
 8000e00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e04:	ee07 3a90 	vmov	s15, r3
 8000e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e0c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8000f50 <MPU6050_read_accel_reg+0x230>
 8000e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 16384.0;
 8000e1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e26:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8000f50 <MPU6050_read_accel_reg+0x230>
 8000e2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 16384.0;
 8000e34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e40:	eddf 6a43 	vldr	s13, [pc, #268]	; 8000f50 <MPU6050_read_accel_reg+0x230>
 8000e44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000e4e:	e077      	b.n	8000f40 <MPU6050_read_accel_reg+0x220>
    case ACCEL_FSR_4g:
      mpu6050->ax = ((float) ax_raw) / 8192.0;
 8000e50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e5c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000f54 <MPU6050_read_accel_reg+0x234>
 8000e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 8192.0;
 8000e6a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e76:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000f54 <MPU6050_read_accel_reg+0x234>
 8000e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 8192.0;
 8000e84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e90:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000f54 <MPU6050_read_accel_reg+0x234>
 8000e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000e9e:	e04f      	b.n	8000f40 <MPU6050_read_accel_reg+0x220>
    case ACCEL_FSR_8g:
      mpu6050->ax = ((float) ax_raw) / 4096.0;
 8000ea0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ea4:	ee07 3a90 	vmov	s15, r3
 8000ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eac:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000f58 <MPU6050_read_accel_reg+0x238>
 8000eb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 4096.0;
 8000eba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ec6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000f58 <MPU6050_read_accel_reg+0x238>
 8000eca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 4096.0;
 8000ed4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000f58 <MPU6050_read_accel_reg+0x238>
 8000ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000eee:	e027      	b.n	8000f40 <MPU6050_read_accel_reg+0x220>
    case ACCEL_FSR_16g:
      mpu6050->ax = ((float) ax_raw) / 2048.0;
 8000ef0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efc:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000f5c <MPU6050_read_accel_reg+0x23c>
 8000f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 2048.0;
 8000f0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f16:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000f5c <MPU6050_read_accel_reg+0x23c>
 8000f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 2048.0;
 8000f24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f30:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000f5c <MPU6050_read_accel_reg+0x23c>
 8000f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8000f3e:	bf00      	nop
  }

  return result;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	46b5      	mov	sp, r6
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3724      	adds	r7, #36	; 0x24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f4e:	bf00      	nop
 8000f50:	46800000 	.word	0x46800000
 8000f54:	46000000 	.word	0x46000000
 8000f58:	45800000 	.word	0x45800000
 8000f5c:	45000000 	.word	0x45000000

08000f60 <MPU6050_read_temp_reg>:

HAL_StatusTypeDef MPU6050_read_temp_reg(MPU6050* mpu6050) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  int16_t raw_temp = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	81fb      	strh	r3, [r7, #14]

  uint8_t num_of_bytes = 2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	737b      	strb	r3, [r7, #13]
  int8_t temp[2];

  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, TEMP_OUT_H, temp, num_of_bytes);
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	2141      	movs	r1, #65	; 0x41
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fbd1 	bl	8000720 <MPU6050_readRegisters>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	733b      	strb	r3, [r7, #12]
  raw_temp = (temp[0] << 8) | (temp[1]);
 8000f82:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	81fb      	strh	r3, [r7, #14]
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, &temp_H, sizeof(temp_H), TIMEOUT_DEFAULT);
  // result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, &temp_L, sizeof(temp_L), TIMEOUT_DEFAULT);
  // raw_temp = (temp_H << 8) | (temp_L);

  // Fix the readings to be in celsius
  mpu6050->temp = ((float) raw_temp)/340.0 + 36.53;
 8000f94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fa4:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000fc8 <MPU6050_read_temp_reg+0x68>
 8000fa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000fd0 <MPU6050_read_temp_reg+0x70>
 8000fb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	40754000 	.word	0x40754000
 8000fd0:	0a3d70a4 	.word	0x0a3d70a4
 8000fd4:	404243d7 	.word	0x404243d7

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	; 0x38
 8000fdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fdbf 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f85d 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 f995 	bl	8001314 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fea:	f000 f90f 	bl	800120c <MX_USART3_UART_Init>
  MX_BDMA2_Init();
 8000fee:	f000 f961 	bl	80012b4 <MX_BDMA2_Init>
  MX_I2C4_Init();
 8000ff2:	f000 f8cb 	bl	800118c <MX_I2C4_Init>
  MX_USB_OTG_HS_USB_Init();
 8000ff6:	f000 f955 	bl	80012a4 <MX_USB_OTG_HS_USB_Init>
  float ax, ay, az; // 16 bit integer
  float gx, gy, gz; // 16 bit integer with 3 entries for x, y and z rotational velocities
  float temp; // 16 bit integer
*/

  MPU6050 mpu6050 = {
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2228      	movs	r2, #40	; 0x28
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f008 fb34 	bl	8009670 <memset>
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <main+0xc4>)
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	23d0      	movs	r3, #208	; 0xd0
 800100e:	733b      	strb	r3, [r7, #12]
    .gz = 0,
    .temp = 0,
  };
  
  // Wake up the MPU6050 as well
  MPU6050_wakeup(&mpu6050);
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fba6 	bl	8000766 <MPU6050_wakeup>

  // Initialise the MPU6050
  uint8_t dlpf = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
  uint8_t smplfrq = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	71bb      	strb	r3, [r7, #6]
  MPU6050_init(&mpu6050, &dlpf, &smplfrq, GYRO_FSR_250, ACCEL_FSR_2g);
 8001022:	1dba      	adds	r2, r7, #6
 8001024:	1df9      	adds	r1, r7, #7
 8001026:	f107 0008 	add.w	r0, r7, #8
 800102a:	2300      	movs	r3, #0
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	f7ff fd06 	bl	8000a40 <MPU6050_init>
  MPU6050_set_pwr_mgmt(&mpu6050, 0, 0, 0, 0, 1);
 8001034:	f107 0008 	add.w	r0, r7, #8
 8001038:	2301      	movs	r3, #1
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	2300      	movs	r3, #0
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2300      	movs	r3, #0
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	f7ff fb9f 	bl	8000788 <MPU6050_set_pwr_mgmt>

  // Enable the FIFO buffer
  MPU6050_FIFO_enable(&mpu6050);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fcce 	bl	80009f0 <MPU6050_FIFO_enable>
  // Reset it as well so that it can be burst read or something -> https://stackoverflow.com/questions/60419390/mpu-6050-correctly-reading-data-from-the-fifo-register
  MPU6050_FIFO_reset(&mpu6050);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fcdd 	bl	8000a18 <MPU6050_FIFO_reset>
  MPU6050_FIFO_enable(&mpu6050);
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fcc4 	bl	80009f0 <MPU6050_FIFO_enable>
    // MPU6050_read_accel_fifo(&mpu6050);
    // HAL_Delay(100); // Delays in between just for timing??
    // MPU6050_read_temp_fifo(&mpu6050);
    // HAL_Delay(100); // Delays in between just for timing??

    MPU6050_read_gyro_reg(&mpu6050);
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fd1b 	bl	8000aa8 <MPU6050_read_gyro_reg>
    HAL_Delay(100); // Delays in between just for timing??
 8001072:	2064      	movs	r0, #100	; 0x64
 8001074:	f000 fe06 	bl	8001c84 <HAL_Delay>
    MPU6050_read_accel_reg(&mpu6050);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fe4f 	bl	8000d20 <MPU6050_read_accel_reg>
    HAL_Delay(100); // Delays in between just for timing??
 8001082:	2064      	movs	r0, #100	; 0x64
 8001084:	f000 fdfe 	bl	8001c84 <HAL_Delay>
    MPU6050_read_temp_reg(&mpu6050);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff67 	bl	8000f60 <MPU6050_read_temp_reg>
    HAL_Delay(100); // Delays in between just for timing??
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f000 fdf6 	bl	8001c84 <HAL_Delay>
    MPU6050_read_gyro_reg(&mpu6050);
 8001098:	e7e6      	b.n	8001068 <main+0x90>
 800109a:	bf00      	nop
 800109c:	240001fc 	.word	0x240001fc

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09c      	sub	sp, #112	; 0x70
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	224c      	movs	r2, #76	; 0x4c
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f008 fade 	bl	8009670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2220      	movs	r2, #32
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f008 fad8 	bl	8009670 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <SystemClock_Config+0xe4>)
 80010c2:	f04f 32ff 	mov.w	r2, #4294967295
 80010c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80010ca:	2004      	movs	r0, #4
 80010cc:	f004 f966 	bl	800539c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <SystemClock_Config+0xe8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a2b      	ldr	r2, [pc, #172]	; (8001188 <SystemClock_Config+0xe8>)
 80010da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <SystemClock_Config+0xe8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010ec:	bf00      	nop
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <SystemClock_Config+0xe8>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010fa:	d1f8      	bne.n	80010ee <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010fc:	2321      	movs	r3, #33	; 0x21
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001100:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001106:	2301      	movs	r3, #1
 8001108:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	2302      	movs	r3, #2
 8001110:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001116:	2346      	movs	r3, #70	; 0x46
 8001118:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800111e:	2304      	movs	r3, #4
 8001120:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001122:	2302      	movs	r3, #2
 8001124:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001126:	230c      	movs	r3, #12
 8001128:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800112a:	2300      	movs	r3, #0
 800112c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4618      	mov	r0, r3
 8001138:	f004 f98a 	bl	8005450 <HAL_RCC_OscConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001142:	f000 fa01 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001146:	233f      	movs	r3, #63	; 0x3f
 8001148:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114a:	2303      	movs	r3, #3
 800114c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001156:	2340      	movs	r3, #64	; 0x40
 8001158:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800115a:	2340      	movs	r3, #64	; 0x40
 800115c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800115e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001162:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001164:	2340      	movs	r3, #64	; 0x40
 8001166:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2107      	movs	r1, #7
 800116c:	4618      	mov	r0, r3
 800116e:	f004 fd73 	bl	8005c58 <HAL_RCC_ClockConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001178:	f000 f9e6 	bl	8001548 <Error_Handler>
  }
}
 800117c:	bf00      	nop
 800117e:	3770      	adds	r7, #112	; 0x70
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58024400 	.word	0x58024400
 8001188:	58024800 	.word	0x58024800

0800118c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_I2C4_Init+0x74>)
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <MX_I2C4_Init+0x78>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_I2C4_Init+0x74>)
 8001198:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <MX_I2C4_Init+0x7c>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_I2C4_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_I2C4_Init+0x74>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_I2C4_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_I2C4_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_I2C4_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_I2C4_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_I2C4_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80011c6:	480e      	ldr	r0, [pc, #56]	; (8001200 <MX_I2C4_Init+0x74>)
 80011c8:	f003 faec 	bl	80047a4 <HAL_I2C_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80011d2:	f000 f9b9 	bl	8001548 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011d6:	2100      	movs	r1, #0
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <MX_I2C4_Init+0x74>)
 80011da:	f004 f847 	bl	800526c <HAL_I2CEx_ConfigAnalogFilter>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80011e4:	f000 f9b0 	bl	8001548 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_I2C4_Init+0x74>)
 80011ec:	f004 f889 	bl	8005302 <HAL_I2CEx_ConfigDigitalFilter>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f000 f9a7 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	240001fc 	.word	0x240001fc
 8001204:	58001c00 	.word	0x58001c00
 8001208:	20b0ccff 	.word	0x20b0ccff

0800120c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001212:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <MX_USART3_UART_Init+0x94>)
 8001214:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_USART3_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_USART3_UART_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART3_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001256:	f006 fbb9 	bl	80079cc <HAL_UART_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001260:	f000 f972 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001268:	f008 f8de 	bl	8009428 <HAL_UARTEx_SetTxFifoThreshold>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001272:	f000 f969 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <MX_USART3_UART_Init+0x90>)
 800127a:	f008 f913 	bl	80094a4 <HAL_UARTEx_SetRxFifoThreshold>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001284:	f000 f960 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_USART3_UART_Init+0x90>)
 800128a:	f008 f894 	bl	80093b6 <HAL_UARTEx_DisableFifoMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001294:	f000 f958 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	24000338 	.word	0x24000338
 80012a0:	40004800 	.word	0x40004800

080012a4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <MX_BDMA2_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA2_CLK_ENABLE();
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_BDMA2_Init+0x5c>)
 80012bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012c0:	4a13      	ldr	r2, [pc, #76]	; (8001310 <MX_BDMA2_Init+0x5c>)
 80012c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_BDMA2_Init+0x5c>)
 80012cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2080      	movs	r0, #128	; 0x80
 80012de:	f000 fdd0 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 80012e2:	2080      	movs	r0, #128	; 0x80
 80012e4:	f000 fde7 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* BDMA2_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA2_Channel0_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2081      	movs	r0, #129	; 0x81
 80012ee:	f000 fdc8 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA2_Channel0_IRQn);
 80012f2:	2081      	movs	r0, #129	; 0x81
 80012f4:	f000 fddf 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* BDMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA2_Channel1_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2082      	movs	r0, #130	; 0x82
 80012fe:	f000 fdc0 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA2_Channel1_IRQn);
 8001302:	2082      	movs	r0, #130	; 0x82
 8001304:	f000 fdd7 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	58024400 	.word	0x58024400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	4b80      	ldr	r3, [pc, #512]	; (800152c <MX_GPIO_Init+0x218>)
 800132c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001330:	4a7e      	ldr	r2, [pc, #504]	; (800152c <MX_GPIO_Init+0x218>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800133a:	4b7c      	ldr	r3, [pc, #496]	; (800152c <MX_GPIO_Init+0x218>)
 800133c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	623b      	str	r3, [r7, #32]
 8001346:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001348:	4b78      	ldr	r3, [pc, #480]	; (800152c <MX_GPIO_Init+0x218>)
 800134a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800134e:	4a77      	ldr	r2, [pc, #476]	; (800152c <MX_GPIO_Init+0x218>)
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001358:	4b74      	ldr	r3, [pc, #464]	; (800152c <MX_GPIO_Init+0x218>)
 800135a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	4b71      	ldr	r3, [pc, #452]	; (800152c <MX_GPIO_Init+0x218>)
 8001368:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800136c:	4a6f      	ldr	r2, [pc, #444]	; (800152c <MX_GPIO_Init+0x218>)
 800136e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001372:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001376:	4b6d      	ldr	r3, [pc, #436]	; (800152c <MX_GPIO_Init+0x218>)
 8001378:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800137c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b69      	ldr	r3, [pc, #420]	; (800152c <MX_GPIO_Init+0x218>)
 8001386:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138a:	4a68      	ldr	r2, [pc, #416]	; (800152c <MX_GPIO_Init+0x218>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001394:	4b65      	ldr	r3, [pc, #404]	; (800152c <MX_GPIO_Init+0x218>)
 8001396:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	4b62      	ldr	r3, [pc, #392]	; (800152c <MX_GPIO_Init+0x218>)
 80013a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a8:	4a60      	ldr	r2, [pc, #384]	; (800152c <MX_GPIO_Init+0x218>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013b2:	4b5e      	ldr	r3, [pc, #376]	; (800152c <MX_GPIO_Init+0x218>)
 80013b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c0:	4b5a      	ldr	r3, [pc, #360]	; (800152c <MX_GPIO_Init+0x218>)
 80013c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c6:	4a59      	ldr	r2, [pc, #356]	; (800152c <MX_GPIO_Init+0x218>)
 80013c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013d0:	4b56      	ldr	r3, [pc, #344]	; (800152c <MX_GPIO_Init+0x218>)
 80013d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b53      	ldr	r3, [pc, #332]	; (800152c <MX_GPIO_Init+0x218>)
 80013e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013e4:	4a51      	ldr	r2, [pc, #324]	; (800152c <MX_GPIO_Init+0x218>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013ee:	4b4f      	ldr	r3, [pc, #316]	; (800152c <MX_GPIO_Init+0x218>)
 80013f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fc:	4b4b      	ldr	r3, [pc, #300]	; (800152c <MX_GPIO_Init+0x218>)
 80013fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001402:	4a4a      	ldr	r2, [pc, #296]	; (800152c <MX_GPIO_Init+0x218>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <MX_GPIO_Init+0x218>)
 800140e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001420:	4843      	ldr	r0, [pc, #268]	; (8001530 <MX_GPIO_Init+0x21c>)
 8001422:	f003 f9a5 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f244 0101 	movw	r1, #16385	; 0x4001
 800142c:	4841      	ldr	r0, [pc, #260]	; (8001534 <MX_GPIO_Init+0x220>)
 800142e:	f003 f99f 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2102      	movs	r1, #2
 8001436:	4840      	ldr	r0, [pc, #256]	; (8001538 <MX_GPIO_Init+0x224>)
 8001438:	f003 f99a 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800143c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	483a      	ldr	r0, [pc, #232]	; (800153c <MX_GPIO_Init+0x228>)
 8001452:	f002 ffdd 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	4830      	ldr	r0, [pc, #192]	; (8001530 <MX_GPIO_Init+0x21c>)
 8001470:	f002 ffce 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001474:	f244 0301 	movw	r3, #16385	; 0x4001
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4829      	ldr	r0, [pc, #164]	; (8001534 <MX_GPIO_Init+0x220>)
 800148e:	f002 ffbf 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001496:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	4826      	ldr	r0, [pc, #152]	; (8001540 <MX_GPIO_Init+0x22c>)
 80014a8:	f002 ffb2 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80014ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4820      	ldr	r0, [pc, #128]	; (8001544 <MX_GPIO_Init+0x230>)
 80014c2:	f002 ffa5 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80014c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80014d8:	230a      	movs	r3, #10
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4818      	ldr	r0, [pc, #96]	; (8001544 <MX_GPIO_Init+0x230>)
 80014e4:	f002 ff94 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80014e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4810      	ldr	r0, [pc, #64]	; (8001544 <MX_GPIO_Init+0x230>)
 8001502:	f002 ff85 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001506:	2302      	movs	r3, #2
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	4619      	mov	r1, r3
 800151c:	4806      	ldr	r0, [pc, #24]	; (8001538 <MX_GPIO_Init+0x224>)
 800151e:	f002 ff77 	bl	8004410 <HAL_GPIO_Init>

}
 8001522:	bf00      	nop
 8001524:	3738      	adds	r7, #56	; 0x38
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	58024400 	.word	0x58024400
 8001530:	58021400 	.word	0x58021400
 8001534:	58020400 	.word	0x58020400
 8001538:	58021000 	.word	0x58021000
 800153c:	58020800 	.word	0x58020800
 8001540:	58021800 	.word	0x58021800
 8001544:	58020000 	.word	0x58020000

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	e7fe      	b.n	8001550 <Error_Handler+0x8>
	...

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_MspInit+0x30>)
 800155c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001560:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_MspInit+0x30>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_MspInit+0x30>)
 800156c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	58024400 	.word	0x58024400

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0b8      	sub	sp, #224	; 0xe0
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	22b8      	movs	r2, #184	; 0xb8
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f008 f861 	bl	8009670 <memset>
  if(hi2c->Instance==I2C4)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a51      	ldr	r2, [pc, #324]	; (80016f8 <HAL_I2C_MspInit+0x170>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	f040 809b 	bne.w	80016f0 <HAL_I2C_MspInit+0x168>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015ba:	2310      	movs	r3, #16
 80015bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fed1 	bl	8006370 <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80015d4:	f7ff ffb8 	bl	8001548 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d8:	4b48      	ldr	r3, [pc, #288]	; (80016fc <HAL_I2C_MspInit+0x174>)
 80015da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015de:	4a47      	ldr	r2, [pc, #284]	; (80016fc <HAL_I2C_MspInit+0x174>)
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015e8:	4b44      	ldr	r3, [pc, #272]	; (80016fc <HAL_I2C_MspInit+0x174>)
 80015ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fe:	2312      	movs	r3, #18
 8001600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001610:	2304      	movs	r3, #4
 8001612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001616:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800161a:	4619      	mov	r1, r3
 800161c:	4838      	ldr	r0, [pc, #224]	; (8001700 <HAL_I2C_MspInit+0x178>)
 800161e:	f002 fef7 	bl	8004410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <HAL_I2C_MspInit+0x174>)
 8001624:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001628:	4a34      	ldr	r2, [pc, #208]	; (80016fc <HAL_I2C_MspInit+0x174>)
 800162a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001632:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_I2C_MspInit+0x174>)
 8001634:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = BDMA2_Channel0;
 8001640:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 8001642:	4a31      	ldr	r2, [pc, #196]	; (8001708 <HAL_I2C_MspInit+0x180>)
 8001644:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 8001648:	220e      	movs	r2, #14
 800164a:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 800165a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165e:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 8001662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001666:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 800166a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800166e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 800167c:	4821      	ldr	r0, [pc, #132]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 800167e:	f000 fc35 	bl	8001eec <HAL_DMA_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8001688:	f7ff ff5e 	bl	8001548 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 8001690:	639a      	str	r2, [r3, #56]	; 0x38
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = BDMA2_Channel1;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_I2C_MspInit+0x184>)
 800169a:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_I2C_MspInit+0x188>)
 800169c:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016a0:	220d      	movs	r2, #13
 80016a2:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b6:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016be:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c6:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016d6:	f000 fc09 	bl	8001eec <HAL_DMA_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_MspInit+0x15c>
    {
      Error_Handler();
 80016e0:	f7ff ff32 	bl	8001548 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c4_rx);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_I2C_MspInit+0x184>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	37e0      	adds	r7, #224	; 0xe0
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	58001c00 	.word	0x58001c00
 80016fc:	58024400 	.word	0x58024400
 8001700:	58021400 	.word	0x58021400
 8001704:	24000248 	.word	0x24000248
 8001708:	58025408 	.word	0x58025408
 800170c:	240002c0 	.word	0x240002c0
 8001710:	5802541c 	.word	0x5802541c

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0b8      	sub	sp, #224	; 0xe0
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	22b8      	movs	r2, #184	; 0xb8
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f007 ff9b 	bl	8009670 <memset>
  if(huart->Instance==USART3)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <HAL_UART_MspInit+0xd0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d14a      	bne.n	80017da <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001744:	2302      	movs	r3, #2
 8001746:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fe0c 	bl	8006370 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800175e:	f7ff fef3 	bl	8001548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_UART_MspInit+0xd4>)
 8001764:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_UART_MspInit+0xd4>)
 800176a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_UART_MspInit+0xd4>)
 8001774:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0xd4>)
 8001782:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_UART_MspInit+0xd4>)
 8001788:	f043 0308 	orr.w	r3, r3, #8
 800178c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_UART_MspInit+0xd4>)
 8001792:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800179e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b8:	2307      	movs	r3, #7
 80017ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017c2:	4619      	mov	r1, r3
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <HAL_UART_MspInit+0xd8>)
 80017c6:	f002 fe23 	bl	8004410 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2027      	movs	r0, #39	; 0x27
 80017d0:	f000 fb57 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017d4:	2027      	movs	r0, #39	; 0x27
 80017d6:	f000 fb6e 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	37e0      	adds	r7, #224	; 0xe0
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40004800 	.word	0x40004800
 80017e8:	58024400 	.word	0x58024400
 80017ec:	58020c00 	.word	0x58020c00

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 fa02 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <USART3_IRQHandler+0x10>)
 800184a:	f006 f90f 	bl	8007a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	24000338 	.word	0x24000338

08001858 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX2_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <BDMA2_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA2 channel0 global interrupt.
  */
void BDMA2_Channel0_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA2_Channel0_IRQn 0 */

  /* USER CODE END BDMA2_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <BDMA2_Channel0_IRQHandler+0x10>)
 800186e:	f001 fc31 	bl	80030d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA2_Channel0_IRQn 1 */

  /* USER CODE END BDMA2_Channel0_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	24000248 	.word	0x24000248

0800187c <BDMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA2 channel1 global interrupt.
  */
void BDMA2_Channel1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA2_Channel1_IRQn 0 */

  /* USER CODE END BDMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <BDMA2_Channel1_IRQHandler+0x10>)
 8001882:	f001 fc27 	bl	80030d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA2_Channel1_IRQn 1 */

  /* USER CODE END BDMA2_Channel1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	240002c0 	.word	0x240002c0

08001890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_kill>:

int _kill(int pid, int sig)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018aa:	f007 fea5 	bl	80095f8 <__errno>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2216      	movs	r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
	return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_exit>:

void _exit (int status)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe7 	bl	80018a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018d2:	e7fe      	b.n	80018d2 <_exit+0x12>

080018d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00a      	b.n	80018fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e6:	f3af 8000 	nop.w
 80018ea:	4601      	mov	r1, r0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf0      	blt.n	80018e6 <_read+0x12>
	}

return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e009      	b.n	8001934 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	60ba      	str	r2, [r7, #8]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf1      	blt.n	8001920 <_write+0x12>
	}
	return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_close>:

int _close(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
	return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196e:	605a      	str	r2, [r3, #4]
	return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_isatty>:

int _isatty(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
	return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f007 fe0a 	bl	80095f8 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	24100000 	.word	0x24100000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	240003c8 	.word	0x240003c8
 8001a18:	240003e0 	.word	0x240003e0

08001a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a20:	4b32      	ldr	r3, [pc, #200]	; (8001aec <SystemInit+0xd0>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a31      	ldr	r2, [pc, #196]	; (8001aec <SystemInit+0xd0>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a30:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <SystemInit+0xd4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d807      	bhi.n	8001a4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <SystemInit+0xd4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 030f 	bic.w	r3, r3, #15
 8001a44:	4a2a      	ldr	r2, [pc, #168]	; (8001af0 <SystemInit+0xd4>)
 8001a46:	f043 0303 	orr.w	r3, r3, #3
 8001a4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a4c:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <SystemInit+0xd8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a28      	ldr	r2, [pc, #160]	; (8001af4 <SystemInit+0xd8>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <SystemInit+0xd8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <SystemInit+0xd8>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4924      	ldr	r1, [pc, #144]	; (8001af4 <SystemInit+0xd8>)
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <SystemInit+0xdc>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <SystemInit+0xd4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <SystemInit+0xd4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 030f 	bic.w	r3, r3, #15
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <SystemInit+0xd4>)
 8001a80:	f043 0303 	orr.w	r3, r3, #3
 8001a84:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <SystemInit+0xd8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <SystemInit+0xd8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <SystemInit+0xd8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <SystemInit+0xd8>)
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <SystemInit+0xe0>)
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <SystemInit+0xd8>)
 8001aa0:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <SystemInit+0xe4>)
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <SystemInit+0xd8>)
 8001aa6:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <SystemInit+0xe8>)
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <SystemInit+0xd8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <SystemInit+0xd8>)
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <SystemInit+0xe8>)
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <SystemInit+0xd8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <SystemInit+0xd8>)
 8001abe:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <SystemInit+0xe8>)
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <SystemInit+0xd8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <SystemInit+0xd8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <SystemInit+0xd8>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <SystemInit+0xd8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <SystemInit+0xec>)
 8001adc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ae0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	52002000 	.word	0x52002000
 8001af4:	58024400 	.word	0x58024400
 8001af8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001afc:	02020200 	.word	0x02020200
 8001b00:	01ff0000 	.word	0x01ff0000
 8001b04:	01010280 	.word	0x01010280
 8001b08:	52004000 	.word	0x52004000

08001b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b10:	f7ff ff84 	bl	8001a1c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b16:	490d      	ldr	r1, [pc, #52]	; (8001b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b1c:	e002      	b.n	8001b24 <LoopCopyDataInit>

08001b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b22:	3304      	adds	r3, #4

08001b24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b28:	d3f9      	bcc.n	8001b1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b2c:	4c0a      	ldr	r4, [pc, #40]	; (8001b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b30:	e001      	b.n	8001b36 <LoopFillZerobss>

08001b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b34:	3204      	adds	r2, #4

08001b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b38:	d3fb      	bcc.n	8001b32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f007 fd75 	bl	8009628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3e:	f7ff fa4b 	bl	8000fd8 <main>
  bx  lr
 8001b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b44:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001b48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b4c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001b50:	0800c438 	.word	0x0800c438
  ldr r2, =_sbss
 8001b54:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001b58:	240003e0 	.word	0x240003e0

08001b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b66:	2003      	movs	r0, #3
 8001b68:	f000 f980 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b6c:	f004 fa2a 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_Init+0x68>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	4913      	ldr	r1, [pc, #76]	; (8001bcc <HAL_Init+0x6c>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_Init+0x68>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <HAL_Init+0x6c>)
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <HAL_Init+0x70>)
 8001ba2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <HAL_Init+0x74>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f814 	bl	8001bd8 <HAL_InitTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e002      	b.n	8001bc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bba:	f7ff fccb 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	0800c00c 	.word	0x0800c00c
 8001bd0:	24000004 	.word	0x24000004
 8001bd4:	24000000 	.word	0x24000000

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_InitTick+0x60>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e021      	b.n	8001c30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_InitTick+0x64>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_InitTick+0x60>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f965 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f92f 	bl	8001e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_InitTick+0x68>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2400000c 	.word	0x2400000c
 8001c3c:	24000000 	.word	0x24000000
 8001c40:	24000008 	.word	0x24000008

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	2400000c 	.word	0x2400000c
 8001c68:	240003cc 	.word	0x240003cc

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	240003cc 	.word	0x240003cc

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2400000c 	.word	0x2400000c

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	05fa0000 	.word	0x05fa0000

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <__NVIC_EnableIRQ+0x38>)
 8001d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d301      	bcc.n	8001e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00f      	b.n	8001e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <SysTick_Config+0x40>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e46:	210f      	movs	r1, #15
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f7ff ff8e 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SysTick_Config+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SysTick_Config+0x40>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff29 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff40 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff90 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5f 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff33 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa4 	bl	8001e28 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff feba 	bl	8001c6c <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e37f      	b.n	8002604 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a66      	ldr	r2, [pc, #408]	; (80020a4 <HAL_DMA_Init+0x1b8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d04a      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <HAL_DMA_Init+0x1bc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d045      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a63      	ldr	r2, [pc, #396]	; (80020ac <HAL_DMA_Init+0x1c0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d040      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a62      	ldr	r2, [pc, #392]	; (80020b0 <HAL_DMA_Init+0x1c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d03b      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a60      	ldr	r2, [pc, #384]	; (80020b4 <HAL_DMA_Init+0x1c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d036      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5f      	ldr	r2, [pc, #380]	; (80020b8 <HAL_DMA_Init+0x1cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d031      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5d      	ldr	r2, [pc, #372]	; (80020bc <HAL_DMA_Init+0x1d0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02c      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5c      	ldr	r2, [pc, #368]	; (80020c0 <HAL_DMA_Init+0x1d4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d027      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5a      	ldr	r2, [pc, #360]	; (80020c4 <HAL_DMA_Init+0x1d8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d022      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a59      	ldr	r2, [pc, #356]	; (80020c8 <HAL_DMA_Init+0x1dc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d01d      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a57      	ldr	r2, [pc, #348]	; (80020cc <HAL_DMA_Init+0x1e0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d018      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a56      	ldr	r2, [pc, #344]	; (80020d0 <HAL_DMA_Init+0x1e4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a54      	ldr	r2, [pc, #336]	; (80020d4 <HAL_DMA_Init+0x1e8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00e      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a53      	ldr	r2, [pc, #332]	; (80020d8 <HAL_DMA_Init+0x1ec>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a51      	ldr	r2, [pc, #324]	; (80020dc <HAL_DMA_Init+0x1f0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a50      	ldr	r2, [pc, #320]	; (80020e0 <HAL_DMA_Init+0x1f4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Init+0xbc>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_Init+0xbe>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 813c 	beq.w	8002228 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a37      	ldr	r2, [pc, #220]	; (80020a4 <HAL_DMA_Init+0x1b8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d04a      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a36      	ldr	r2, [pc, #216]	; (80020a8 <HAL_DMA_Init+0x1bc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d045      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a34      	ldr	r2, [pc, #208]	; (80020ac <HAL_DMA_Init+0x1c0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d040      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a33      	ldr	r2, [pc, #204]	; (80020b0 <HAL_DMA_Init+0x1c4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d03b      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a31      	ldr	r2, [pc, #196]	; (80020b4 <HAL_DMA_Init+0x1c8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d036      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <HAL_DMA_Init+0x1cc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d031      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <HAL_DMA_Init+0x1d0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02c      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2d      	ldr	r2, [pc, #180]	; (80020c0 <HAL_DMA_Init+0x1d4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d027      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2b      	ldr	r2, [pc, #172]	; (80020c4 <HAL_DMA_Init+0x1d8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d022      	beq.n	8002060 <HAL_DMA_Init+0x174>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <HAL_DMA_Init+0x1dc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d01d      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <HAL_DMA_Init+0x1e0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d018      	beq.n	8002060 <HAL_DMA_Init+0x174>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_DMA_Init+0x1e4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <HAL_DMA_Init+0x1e8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00e      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <HAL_DMA_Init+0x1ec>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_DMA_Init+0x174>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_DMA_Init+0x1f0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d004      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <HAL_DMA_Init+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d108      	bne.n	8002072 <HAL_DMA_Init+0x186>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e007      	b.n	8002082 <HAL_DMA_Init+0x196>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002082:	e02f      	b.n	80020e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002084:	f7ff fdf2 	bl	8001c6c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b05      	cmp	r3, #5
 8002090:	d928      	bls.n	80020e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2203      	movs	r2, #3
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e2af      	b.n	8002604 <HAL_DMA_Init+0x718>
 80020a4:	40020010 	.word	0x40020010
 80020a8:	40020028 	.word	0x40020028
 80020ac:	40020040 	.word	0x40020040
 80020b0:	40020058 	.word	0x40020058
 80020b4:	40020070 	.word	0x40020070
 80020b8:	40020088 	.word	0x40020088
 80020bc:	400200a0 	.word	0x400200a0
 80020c0:	400200b8 	.word	0x400200b8
 80020c4:	40020410 	.word	0x40020410
 80020c8:	40020428 	.word	0x40020428
 80020cc:	40020440 	.word	0x40020440
 80020d0:	40020458 	.word	0x40020458
 80020d4:	40020470 	.word	0x40020470
 80020d8:	40020488 	.word	0x40020488
 80020dc:	400204a0 	.word	0x400204a0
 80020e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1c8      	bne.n	8002084 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4b73      	ldr	r3, [pc, #460]	; (80022cc <HAL_DMA_Init+0x3e0>)
 80020fe:	4013      	ands	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800210a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002116:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2b04      	cmp	r3, #4
 8002136:	d107      	bne.n	8002148 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4313      	orrs	r3, r2
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b28      	cmp	r3, #40	; 0x28
 800214e:	d903      	bls.n	8002158 <HAL_DMA_Init+0x26c>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b2e      	cmp	r3, #46	; 0x2e
 8002156:	d91f      	bls.n	8002198 <HAL_DMA_Init+0x2ac>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b3e      	cmp	r3, #62	; 0x3e
 800215e:	d903      	bls.n	8002168 <HAL_DMA_Init+0x27c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b42      	cmp	r3, #66	; 0x42
 8002166:	d917      	bls.n	8002198 <HAL_DMA_Init+0x2ac>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b46      	cmp	r3, #70	; 0x46
 800216e:	d903      	bls.n	8002178 <HAL_DMA_Init+0x28c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b48      	cmp	r3, #72	; 0x48
 8002176:	d90f      	bls.n	8002198 <HAL_DMA_Init+0x2ac>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b4e      	cmp	r3, #78	; 0x4e
 800217e:	d903      	bls.n	8002188 <HAL_DMA_Init+0x29c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b52      	cmp	r3, #82	; 0x52
 8002186:	d907      	bls.n	8002198 <HAL_DMA_Init+0x2ac>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b73      	cmp	r3, #115	; 0x73
 800218e:	d905      	bls.n	800219c <HAL_DMA_Init+0x2b0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b77      	cmp	r3, #119	; 0x77
 8002196:	d801      	bhi.n	800219c <HAL_DMA_Init+0x2b0>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_DMA_Init+0x2b2>
 800219c:	2300      	movs	r3, #0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f023 0307 	bic.w	r3, r3, #7
 80021c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d117      	bne.n	8002204 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00e      	beq.n	8002204 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f001 ff88 	bl	80040fc <DMA_CheckFifoParam>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2240      	movs	r2, #64	; 0x40
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e1ff      	b.n	8002604 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f001 fec3 	bl	8003f98 <DMA_CalcBaseAndBitshift>
 8002212:	4603      	mov	r3, r0
 8002214:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	223f      	movs	r2, #63	; 0x3f
 8002220:	409a      	lsls	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	e0fe      	b.n	8002426 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <HAL_DMA_Init+0x3e4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d04a      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <HAL_DMA_Init+0x3e8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d045      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <HAL_DMA_Init+0x3ec>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d040      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a24      	ldr	r2, [pc, #144]	; (80022dc <HAL_DMA_Init+0x3f0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d03b      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a22      	ldr	r2, [pc, #136]	; (80022e0 <HAL_DMA_Init+0x3f4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d036      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <HAL_DMA_Init+0x3f8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d031      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_DMA_Init+0x3fc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02c      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <HAL_DMA_Init+0x400>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d027      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_DMA_Init+0x404>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d022      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <HAL_DMA_Init+0x408>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d01d      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_DMA_Init+0x40c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d018      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a18      	ldr	r2, [pc, #96]	; (80022fc <HAL_DMA_Init+0x410>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d013      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a16      	ldr	r2, [pc, #88]	; (8002300 <HAL_DMA_Init+0x414>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00e      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a15      	ldr	r2, [pc, #84]	; (8002304 <HAL_DMA_Init+0x418>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d009      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a13      	ldr	r2, [pc, #76]	; (8002308 <HAL_DMA_Init+0x41c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d004      	beq.n	80022c8 <HAL_DMA_Init+0x3dc>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <HAL_DMA_Init+0x420>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d123      	bne.n	8002310 <HAL_DMA_Init+0x424>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e022      	b.n	8002312 <HAL_DMA_Init+0x426>
 80022cc:	fe10803f 	.word	0xfe10803f
 80022d0:	48022c08 	.word	0x48022c08
 80022d4:	48022c1c 	.word	0x48022c1c
 80022d8:	48022c30 	.word	0x48022c30
 80022dc:	48022c44 	.word	0x48022c44
 80022e0:	48022c58 	.word	0x48022c58
 80022e4:	48022c6c 	.word	0x48022c6c
 80022e8:	48022c80 	.word	0x48022c80
 80022ec:	48022c94 	.word	0x48022c94
 80022f0:	58025408 	.word	0x58025408
 80022f4:	5802541c 	.word	0x5802541c
 80022f8:	58025430 	.word	0x58025430
 80022fc:	58025444 	.word	0x58025444
 8002300:	58025458 	.word	0x58025458
 8002304:	5802546c 	.word	0x5802546c
 8002308:	58025480 	.word	0x58025480
 800230c:	58025494 	.word	0x58025494
 8002310:	2300      	movs	r3, #0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d07e      	beq.n	8002414 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a80      	ldr	r2, [pc, #512]	; (800251c <HAL_DMA_Init+0x630>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d021      	beq.n	8002364 <HAL_DMA_Init+0x478>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a7e      	ldr	r2, [pc, #504]	; (8002520 <HAL_DMA_Init+0x634>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01c      	beq.n	8002364 <HAL_DMA_Init+0x478>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7d      	ldr	r2, [pc, #500]	; (8002524 <HAL_DMA_Init+0x638>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d017      	beq.n	8002364 <HAL_DMA_Init+0x478>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a7b      	ldr	r2, [pc, #492]	; (8002528 <HAL_DMA_Init+0x63c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d012      	beq.n	8002364 <HAL_DMA_Init+0x478>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7a      	ldr	r2, [pc, #488]	; (800252c <HAL_DMA_Init+0x640>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_DMA_Init+0x478>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a78      	ldr	r2, [pc, #480]	; (8002530 <HAL_DMA_Init+0x644>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d008      	beq.n	8002364 <HAL_DMA_Init+0x478>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a77      	ldr	r2, [pc, #476]	; (8002534 <HAL_DMA_Init+0x648>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d003      	beq.n	8002364 <HAL_DMA_Init+0x478>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a75      	ldr	r2, [pc, #468]	; (8002538 <HAL_DMA_Init+0x64c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4b6e      	ldr	r3, [pc, #440]	; (800253c <HAL_DMA_Init+0x650>)
 8002382:	4013      	ands	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b40      	cmp	r3, #64	; 0x40
 800238c:	d008      	beq.n	80023a0 <HAL_DMA_Init+0x4b4>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b80      	cmp	r3, #128	; 0x80
 8002394:	d102      	bne.n	800239c <HAL_DMA_Init+0x4b0>
 8002396:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800239a:	e002      	b.n	80023a2 <HAL_DMA_Init+0x4b6>
 800239c:	2300      	movs	r3, #0
 800239e:	e000      	b.n	80023a2 <HAL_DMA_Init+0x4b6>
 80023a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68d2      	ldr	r2, [r2, #12]
 80023a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b56      	ldr	r3, [pc, #344]	; (8002540 <HAL_DMA_Init+0x654>)
 80023e8:	4413      	add	r3, r2
 80023ea:	4a56      	ldr	r2, [pc, #344]	; (8002544 <HAL_DMA_Init+0x658>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	009a      	lsls	r2, r3, #2
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f001 fdcd 	bl	8003f98 <DMA_CalcBaseAndBitshift>
 80023fe:	4603      	mov	r3, r0
 8002400:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2201      	movs	r2, #1
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	e008      	b.n	8002426 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2240      	movs	r2, #64	; 0x40
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2203      	movs	r2, #3
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0ee      	b.n	8002604 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a47      	ldr	r2, [pc, #284]	; (8002548 <HAL_DMA_Init+0x65c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d072      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a45      	ldr	r2, [pc, #276]	; (800254c <HAL_DMA_Init+0x660>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d06d      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a44      	ldr	r2, [pc, #272]	; (8002550 <HAL_DMA_Init+0x664>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d068      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <HAL_DMA_Init+0x668>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d063      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a41      	ldr	r2, [pc, #260]	; (8002558 <HAL_DMA_Init+0x66c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d05e      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3f      	ldr	r2, [pc, #252]	; (800255c <HAL_DMA_Init+0x670>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d059      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <HAL_DMA_Init+0x674>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d054      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3c      	ldr	r2, [pc, #240]	; (8002564 <HAL_DMA_Init+0x678>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d04f      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <HAL_DMA_Init+0x67c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d04a      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a39      	ldr	r2, [pc, #228]	; (800256c <HAL_DMA_Init+0x680>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d045      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a38      	ldr	r2, [pc, #224]	; (8002570 <HAL_DMA_Init+0x684>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d040      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a36      	ldr	r2, [pc, #216]	; (8002574 <HAL_DMA_Init+0x688>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d03b      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a35      	ldr	r2, [pc, #212]	; (8002578 <HAL_DMA_Init+0x68c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d036      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_DMA_Init+0x690>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d031      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a32      	ldr	r2, [pc, #200]	; (8002580 <HAL_DMA_Init+0x694>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d02c      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a30      	ldr	r2, [pc, #192]	; (8002584 <HAL_DMA_Init+0x698>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d027      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a14      	ldr	r2, [pc, #80]	; (800251c <HAL_DMA_Init+0x630>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d022      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <HAL_DMA_Init+0x634>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01d      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a11      	ldr	r2, [pc, #68]	; (8002524 <HAL_DMA_Init+0x638>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d018      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_DMA_Init+0x63c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <HAL_DMA_Init+0x640>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00e      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <HAL_DMA_Init+0x644>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d009      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <HAL_DMA_Init+0x648>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d004      	beq.n	8002516 <HAL_DMA_Init+0x62a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_DMA_Init+0x64c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d138      	bne.n	8002588 <HAL_DMA_Init+0x69c>
 8002516:	2301      	movs	r3, #1
 8002518:	e037      	b.n	800258a <HAL_DMA_Init+0x69e>
 800251a:	bf00      	nop
 800251c:	58025408 	.word	0x58025408
 8002520:	5802541c 	.word	0x5802541c
 8002524:	58025430 	.word	0x58025430
 8002528:	58025444 	.word	0x58025444
 800252c:	58025458 	.word	0x58025458
 8002530:	5802546c 	.word	0x5802546c
 8002534:	58025480 	.word	0x58025480
 8002538:	58025494 	.word	0x58025494
 800253c:	fffe000f 	.word	0xfffe000f
 8002540:	a7fdabf8 	.word	0xa7fdabf8
 8002544:	cccccccd 	.word	0xcccccccd
 8002548:	40020010 	.word	0x40020010
 800254c:	40020028 	.word	0x40020028
 8002550:	40020040 	.word	0x40020040
 8002554:	40020058 	.word	0x40020058
 8002558:	40020070 	.word	0x40020070
 800255c:	40020088 	.word	0x40020088
 8002560:	400200a0 	.word	0x400200a0
 8002564:	400200b8 	.word	0x400200b8
 8002568:	40020410 	.word	0x40020410
 800256c:	40020428 	.word	0x40020428
 8002570:	40020440 	.word	0x40020440
 8002574:	40020458 	.word	0x40020458
 8002578:	40020470 	.word	0x40020470
 800257c:	40020488 	.word	0x40020488
 8002580:	400204a0 	.word	0x400204a0
 8002584:	400204b8 	.word	0x400204b8
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d032      	beq.n	80025f4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f001 fe30 	bl	80041f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b80      	cmp	r3, #128	; 0x80
 800259a:	d102      	bne.n	80025a2 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025b6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <HAL_DMA_Init+0x6f6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d80c      	bhi.n	80025e2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f001 fead 	bl	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	e008      	b.n	80025f4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff fb2a 	bl	8001c6c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e2dc      	b.n	8002bde <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d008      	beq.n	8002642 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e2cd      	b.n	8002bde <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a76      	ldr	r2, [pc, #472]	; (8002820 <HAL_DMA_Abort+0x214>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d04a      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a74      	ldr	r2, [pc, #464]	; (8002824 <HAL_DMA_Abort+0x218>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d045      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a73      	ldr	r2, [pc, #460]	; (8002828 <HAL_DMA_Abort+0x21c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d040      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a71      	ldr	r2, [pc, #452]	; (800282c <HAL_DMA_Abort+0x220>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d03b      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a70      	ldr	r2, [pc, #448]	; (8002830 <HAL_DMA_Abort+0x224>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d036      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6e      	ldr	r2, [pc, #440]	; (8002834 <HAL_DMA_Abort+0x228>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d031      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6d      	ldr	r2, [pc, #436]	; (8002838 <HAL_DMA_Abort+0x22c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d02c      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6b      	ldr	r2, [pc, #428]	; (800283c <HAL_DMA_Abort+0x230>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d027      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6a      	ldr	r2, [pc, #424]	; (8002840 <HAL_DMA_Abort+0x234>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d022      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a68      	ldr	r2, [pc, #416]	; (8002844 <HAL_DMA_Abort+0x238>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01d      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a67      	ldr	r2, [pc, #412]	; (8002848 <HAL_DMA_Abort+0x23c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_DMA_Abort+0x240>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a64      	ldr	r2, [pc, #400]	; (8002850 <HAL_DMA_Abort+0x244>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00e      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a62      	ldr	r2, [pc, #392]	; (8002854 <HAL_DMA_Abort+0x248>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a61      	ldr	r2, [pc, #388]	; (8002858 <HAL_DMA_Abort+0x24c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_DMA_Abort+0xd6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5f      	ldr	r2, [pc, #380]	; (800285c <HAL_DMA_Abort+0x250>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Abort+0xda>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_DMA_Abort+0xdc>
 80026e6:	2300      	movs	r3, #0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 021e 	bic.w	r2, r2, #30
 80026fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800270a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e00a      	b.n	800272a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 020e 	bic.w	r2, r2, #14
 8002722:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a3c      	ldr	r2, [pc, #240]	; (8002820 <HAL_DMA_Abort+0x214>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d072      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <HAL_DMA_Abort+0x218>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d06d      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a39      	ldr	r2, [pc, #228]	; (8002828 <HAL_DMA_Abort+0x21c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d068      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a37      	ldr	r2, [pc, #220]	; (800282c <HAL_DMA_Abort+0x220>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d063      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a36      	ldr	r2, [pc, #216]	; (8002830 <HAL_DMA_Abort+0x224>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d05e      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a34      	ldr	r2, [pc, #208]	; (8002834 <HAL_DMA_Abort+0x228>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d059      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a33      	ldr	r2, [pc, #204]	; (8002838 <HAL_DMA_Abort+0x22c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d054      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <HAL_DMA_Abort+0x230>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d04f      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a30      	ldr	r2, [pc, #192]	; (8002840 <HAL_DMA_Abort+0x234>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04a      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2e      	ldr	r2, [pc, #184]	; (8002844 <HAL_DMA_Abort+0x238>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d045      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2d      	ldr	r2, [pc, #180]	; (8002848 <HAL_DMA_Abort+0x23c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d040      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_DMA_Abort+0x240>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d03b      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2a      	ldr	r2, [pc, #168]	; (8002850 <HAL_DMA_Abort+0x244>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d036      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a28      	ldr	r2, [pc, #160]	; (8002854 <HAL_DMA_Abort+0x248>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_DMA_Abort+0x24c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d02c      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a25      	ldr	r2, [pc, #148]	; (800285c <HAL_DMA_Abort+0x250>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d027      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a24      	ldr	r2, [pc, #144]	; (8002860 <HAL_DMA_Abort+0x254>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a22      	ldr	r2, [pc, #136]	; (8002864 <HAL_DMA_Abort+0x258>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a21      	ldr	r2, [pc, #132]	; (8002868 <HAL_DMA_Abort+0x25c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_DMA_Abort+0x260>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <HAL_DMA_Abort+0x264>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_DMA_Abort+0x268>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_DMA_Abort+0x26c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_DMA_Abort+0x20e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_DMA_Abort+0x270>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d132      	bne.n	8002880 <HAL_DMA_Abort+0x274>
 800281a:	2301      	movs	r3, #1
 800281c:	e031      	b.n	8002882 <HAL_DMA_Abort+0x276>
 800281e:	bf00      	nop
 8002820:	40020010 	.word	0x40020010
 8002824:	40020028 	.word	0x40020028
 8002828:	40020040 	.word	0x40020040
 800282c:	40020058 	.word	0x40020058
 8002830:	40020070 	.word	0x40020070
 8002834:	40020088 	.word	0x40020088
 8002838:	400200a0 	.word	0x400200a0
 800283c:	400200b8 	.word	0x400200b8
 8002840:	40020410 	.word	0x40020410
 8002844:	40020428 	.word	0x40020428
 8002848:	40020440 	.word	0x40020440
 800284c:	40020458 	.word	0x40020458
 8002850:	40020470 	.word	0x40020470
 8002854:	40020488 	.word	0x40020488
 8002858:	400204a0 	.word	0x400204a0
 800285c:	400204b8 	.word	0x400204b8
 8002860:	58025408 	.word	0x58025408
 8002864:	5802541c 	.word	0x5802541c
 8002868:	58025430 	.word	0x58025430
 800286c:	58025444 	.word	0x58025444
 8002870:	58025458 	.word	0x58025458
 8002874:	5802546c 	.word	0x5802546c
 8002878:	58025480 	.word	0x58025480
 800287c:	58025494 	.word	0x58025494
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002894:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6d      	ldr	r2, [pc, #436]	; (8002a50 <HAL_DMA_Abort+0x444>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d04a      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a6b      	ldr	r2, [pc, #428]	; (8002a54 <HAL_DMA_Abort+0x448>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d045      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6a      	ldr	r2, [pc, #424]	; (8002a58 <HAL_DMA_Abort+0x44c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d040      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a68      	ldr	r2, [pc, #416]	; (8002a5c <HAL_DMA_Abort+0x450>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d03b      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a67      	ldr	r2, [pc, #412]	; (8002a60 <HAL_DMA_Abort+0x454>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d036      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <HAL_DMA_Abort+0x458>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d031      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a64      	ldr	r2, [pc, #400]	; (8002a68 <HAL_DMA_Abort+0x45c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d02c      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a62      	ldr	r2, [pc, #392]	; (8002a6c <HAL_DMA_Abort+0x460>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d027      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a61      	ldr	r2, [pc, #388]	; (8002a70 <HAL_DMA_Abort+0x464>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d022      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a5f      	ldr	r2, [pc, #380]	; (8002a74 <HAL_DMA_Abort+0x468>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01d      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a5e      	ldr	r2, [pc, #376]	; (8002a78 <HAL_DMA_Abort+0x46c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d018      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a5c      	ldr	r2, [pc, #368]	; (8002a7c <HAL_DMA_Abort+0x470>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a5b      	ldr	r2, [pc, #364]	; (8002a80 <HAL_DMA_Abort+0x474>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00e      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a59      	ldr	r2, [pc, #356]	; (8002a84 <HAL_DMA_Abort+0x478>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_DMA_Abort+0x47c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_DMA_Abort+0x32a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a56      	ldr	r2, [pc, #344]	; (8002a8c <HAL_DMA_Abort+0x480>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d108      	bne.n	8002948 <HAL_DMA_Abort+0x33c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e007      	b.n	8002958 <HAL_DMA_Abort+0x34c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002958:	e013      	b.n	8002982 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800295a:	f7ff f987 	bl	8001c6c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b05      	cmp	r3, #5
 8002966:	d90c      	bls.n	8002982 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e12d      	b.n	8002bde <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e5      	bne.n	800295a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <HAL_DMA_Abort+0x444>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04a      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <HAL_DMA_Abort+0x448>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d045      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2c      	ldr	r2, [pc, #176]	; (8002a58 <HAL_DMA_Abort+0x44c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d040      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <HAL_DMA_Abort+0x450>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d03b      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <HAL_DMA_Abort+0x454>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d036      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <HAL_DMA_Abort+0x458>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d031      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <HAL_DMA_Abort+0x45c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d02c      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <HAL_DMA_Abort+0x460>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d027      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <HAL_DMA_Abort+0x464>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <HAL_DMA_Abort+0x468>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01d      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a20      	ldr	r2, [pc, #128]	; (8002a78 <HAL_DMA_Abort+0x46c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <HAL_DMA_Abort+0x470>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <HAL_DMA_Abort+0x474>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <HAL_DMA_Abort+0x478>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <HAL_DMA_Abort+0x47c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Abort+0x422>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_DMA_Abort+0x480>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_DMA_Abort+0x426>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_DMA_Abort+0x428>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d02b      	beq.n	8002a90 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	223f      	movs	r2, #63	; 0x3f
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	e02a      	b.n	8002aa6 <HAL_DMA_Abort+0x49a>
 8002a50:	40020010 	.word	0x40020010
 8002a54:	40020028 	.word	0x40020028
 8002a58:	40020040 	.word	0x40020040
 8002a5c:	40020058 	.word	0x40020058
 8002a60:	40020070 	.word	0x40020070
 8002a64:	40020088 	.word	0x40020088
 8002a68:	400200a0 	.word	0x400200a0
 8002a6c:	400200b8 	.word	0x400200b8
 8002a70:	40020410 	.word	0x40020410
 8002a74:	40020428 	.word	0x40020428
 8002a78:	40020440 	.word	0x40020440
 8002a7c:	40020458 	.word	0x40020458
 8002a80:	40020470 	.word	0x40020470
 8002a84:	40020488 	.word	0x40020488
 8002a88:	400204a0 	.word	0x400204a0
 8002a8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a4f      	ldr	r2, [pc, #316]	; (8002be8 <HAL_DMA_Abort+0x5dc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d072      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a4d      	ldr	r2, [pc, #308]	; (8002bec <HAL_DMA_Abort+0x5e0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d06d      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a4c      	ldr	r2, [pc, #304]	; (8002bf0 <HAL_DMA_Abort+0x5e4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d068      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a4a      	ldr	r2, [pc, #296]	; (8002bf4 <HAL_DMA_Abort+0x5e8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d063      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a49      	ldr	r2, [pc, #292]	; (8002bf8 <HAL_DMA_Abort+0x5ec>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d05e      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_DMA_Abort+0x5f0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d059      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a46      	ldr	r2, [pc, #280]	; (8002c00 <HAL_DMA_Abort+0x5f4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d054      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a44      	ldr	r2, [pc, #272]	; (8002c04 <HAL_DMA_Abort+0x5f8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d04f      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a43      	ldr	r2, [pc, #268]	; (8002c08 <HAL_DMA_Abort+0x5fc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d04a      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a41      	ldr	r2, [pc, #260]	; (8002c0c <HAL_DMA_Abort+0x600>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d045      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a40      	ldr	r2, [pc, #256]	; (8002c10 <HAL_DMA_Abort+0x604>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d040      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a3e      	ldr	r2, [pc, #248]	; (8002c14 <HAL_DMA_Abort+0x608>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d03b      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a3d      	ldr	r2, [pc, #244]	; (8002c18 <HAL_DMA_Abort+0x60c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d036      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <HAL_DMA_Abort+0x610>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a3a      	ldr	r2, [pc, #232]	; (8002c20 <HAL_DMA_Abort+0x614>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d02c      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a38      	ldr	r2, [pc, #224]	; (8002c24 <HAL_DMA_Abort+0x618>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d027      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a37      	ldr	r2, [pc, #220]	; (8002c28 <HAL_DMA_Abort+0x61c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d022      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a35      	ldr	r2, [pc, #212]	; (8002c2c <HAL_DMA_Abort+0x620>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01d      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a34      	ldr	r2, [pc, #208]	; (8002c30 <HAL_DMA_Abort+0x624>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <HAL_DMA_Abort+0x628>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a31      	ldr	r2, [pc, #196]	; (8002c38 <HAL_DMA_Abort+0x62c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2f      	ldr	r2, [pc, #188]	; (8002c3c <HAL_DMA_Abort+0x630>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <HAL_DMA_Abort+0x634>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_DMA_Abort+0x58a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2c      	ldr	r2, [pc, #176]	; (8002c44 <HAL_DMA_Abort+0x638>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_DMA_Abort+0x58e>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_DMA_Abort+0x590>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ba8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40020010 	.word	0x40020010
 8002bec:	40020028 	.word	0x40020028
 8002bf0:	40020040 	.word	0x40020040
 8002bf4:	40020058 	.word	0x40020058
 8002bf8:	40020070 	.word	0x40020070
 8002bfc:	40020088 	.word	0x40020088
 8002c00:	400200a0 	.word	0x400200a0
 8002c04:	400200b8 	.word	0x400200b8
 8002c08:	40020410 	.word	0x40020410
 8002c0c:	40020428 	.word	0x40020428
 8002c10:	40020440 	.word	0x40020440
 8002c14:	40020458 	.word	0x40020458
 8002c18:	40020470 	.word	0x40020470
 8002c1c:	40020488 	.word	0x40020488
 8002c20:	400204a0 	.word	0x400204a0
 8002c24:	400204b8 	.word	0x400204b8
 8002c28:	58025408 	.word	0x58025408
 8002c2c:	5802541c 	.word	0x5802541c
 8002c30:	58025430 	.word	0x58025430
 8002c34:	58025444 	.word	0x58025444
 8002c38:	58025458 	.word	0x58025458
 8002c3c:	5802546c 	.word	0x5802546c
 8002c40:	58025480 	.word	0x58025480
 8002c44:	58025494 	.word	0x58025494

08002c48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e237      	b.n	80030ca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d004      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e22c      	b.n	80030ca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <HAL_DMA_Abort_IT+0x1a0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d04a      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5b      	ldr	r2, [pc, #364]	; (8002dec <HAL_DMA_Abort_IT+0x1a4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d045      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a59      	ldr	r2, [pc, #356]	; (8002df0 <HAL_DMA_Abort_IT+0x1a8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d040      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a58      	ldr	r2, [pc, #352]	; (8002df4 <HAL_DMA_Abort_IT+0x1ac>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d03b      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a56      	ldr	r2, [pc, #344]	; (8002df8 <HAL_DMA_Abort_IT+0x1b0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d036      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a55      	ldr	r2, [pc, #340]	; (8002dfc <HAL_DMA_Abort_IT+0x1b4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d031      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a53      	ldr	r2, [pc, #332]	; (8002e00 <HAL_DMA_Abort_IT+0x1b8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02c      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a52      	ldr	r2, [pc, #328]	; (8002e04 <HAL_DMA_Abort_IT+0x1bc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d027      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a50      	ldr	r2, [pc, #320]	; (8002e08 <HAL_DMA_Abort_IT+0x1c0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d022      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a4f      	ldr	r2, [pc, #316]	; (8002e0c <HAL_DMA_Abort_IT+0x1c4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d01d      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a4d      	ldr	r2, [pc, #308]	; (8002e10 <HAL_DMA_Abort_IT+0x1c8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d018      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_DMA_Abort_IT+0x1cc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a4a      	ldr	r2, [pc, #296]	; (8002e18 <HAL_DMA_Abort_IT+0x1d0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00e      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a49      	ldr	r2, [pc, #292]	; (8002e1c <HAL_DMA_Abort_IT+0x1d4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a47      	ldr	r2, [pc, #284]	; (8002e20 <HAL_DMA_Abort_IT+0x1d8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_DMA_Abort_IT+0xc8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a46      	ldr	r2, [pc, #280]	; (8002e24 <HAL_DMA_Abort_IT+0x1dc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_DMA_Abort_IT+0xcc>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_DMA_Abort_IT+0xce>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8086 	beq.w	8002e28 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <HAL_DMA_Abort_IT+0x1a0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d04a      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2e      	ldr	r2, [pc, #184]	; (8002dec <HAL_DMA_Abort_IT+0x1a4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d045      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2c      	ldr	r2, [pc, #176]	; (8002df0 <HAL_DMA_Abort_IT+0x1a8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d040      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2b      	ldr	r2, [pc, #172]	; (8002df4 <HAL_DMA_Abort_IT+0x1ac>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d03b      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <HAL_DMA_Abort_IT+0x1b0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d036      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <HAL_DMA_Abort_IT+0x1b4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d031      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_DMA_Abort_IT+0x1b8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02c      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <HAL_DMA_Abort_IT+0x1bc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d027      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <HAL_DMA_Abort_IT+0x1c0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d022      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a22      	ldr	r2, [pc, #136]	; (8002e0c <HAL_DMA_Abort_IT+0x1c4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01d      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <HAL_DMA_Abort_IT+0x1c8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <HAL_DMA_Abort_IT+0x1cc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <HAL_DMA_Abort_IT+0x1d0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00e      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_DMA_Abort_IT+0x1d4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <HAL_DMA_Abort_IT+0x1d8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x17c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_DMA_Abort_IT+0x1dc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <HAL_DMA_Abort_IT+0x18e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e178      	b.n	80030c8 <HAL_DMA_Abort_IT+0x480>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e16f      	b.n	80030c8 <HAL_DMA_Abort_IT+0x480>
 8002de8:	40020010 	.word	0x40020010
 8002dec:	40020028 	.word	0x40020028
 8002df0:	40020040 	.word	0x40020040
 8002df4:	40020058 	.word	0x40020058
 8002df8:	40020070 	.word	0x40020070
 8002dfc:	40020088 	.word	0x40020088
 8002e00:	400200a0 	.word	0x400200a0
 8002e04:	400200b8 	.word	0x400200b8
 8002e08:	40020410 	.word	0x40020410
 8002e0c:	40020428 	.word	0x40020428
 8002e10:	40020440 	.word	0x40020440
 8002e14:	40020458 	.word	0x40020458
 8002e18:	40020470 	.word	0x40020470
 8002e1c:	40020488 	.word	0x40020488
 8002e20:	400204a0 	.word	0x400204a0
 8002e24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 020e 	bic.w	r2, r2, #14
 8002e36:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a6c      	ldr	r2, [pc, #432]	; (8002ff0 <HAL_DMA_Abort_IT+0x3a8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d04a      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6b      	ldr	r2, [pc, #428]	; (8002ff4 <HAL_DMA_Abort_IT+0x3ac>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d045      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a69      	ldr	r2, [pc, #420]	; (8002ff8 <HAL_DMA_Abort_IT+0x3b0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d040      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a68      	ldr	r2, [pc, #416]	; (8002ffc <HAL_DMA_Abort_IT+0x3b4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d03b      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a66      	ldr	r2, [pc, #408]	; (8003000 <HAL_DMA_Abort_IT+0x3b8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d036      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a65      	ldr	r2, [pc, #404]	; (8003004 <HAL_DMA_Abort_IT+0x3bc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d031      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a63      	ldr	r2, [pc, #396]	; (8003008 <HAL_DMA_Abort_IT+0x3c0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02c      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a62      	ldr	r2, [pc, #392]	; (800300c <HAL_DMA_Abort_IT+0x3c4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d027      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a60      	ldr	r2, [pc, #384]	; (8003010 <HAL_DMA_Abort_IT+0x3c8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d022      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a5f      	ldr	r2, [pc, #380]	; (8003014 <HAL_DMA_Abort_IT+0x3cc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01d      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a5d      	ldr	r2, [pc, #372]	; (8003018 <HAL_DMA_Abort_IT+0x3d0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a5c      	ldr	r2, [pc, #368]	; (800301c <HAL_DMA_Abort_IT+0x3d4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a5a      	ldr	r2, [pc, #360]	; (8003020 <HAL_DMA_Abort_IT+0x3d8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a59      	ldr	r2, [pc, #356]	; (8003024 <HAL_DMA_Abort_IT+0x3dc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a57      	ldr	r2, [pc, #348]	; (8003028 <HAL_DMA_Abort_IT+0x3e0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x290>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a56      	ldr	r2, [pc, #344]	; (800302c <HAL_DMA_Abort_IT+0x3e4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <HAL_DMA_Abort_IT+0x2a2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	e007      	b.n	8002efa <HAL_DMA_Abort_IT+0x2b2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3c      	ldr	r2, [pc, #240]	; (8002ff0 <HAL_DMA_Abort_IT+0x3a8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d072      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a3a      	ldr	r2, [pc, #232]	; (8002ff4 <HAL_DMA_Abort_IT+0x3ac>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d06d      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a39      	ldr	r2, [pc, #228]	; (8002ff8 <HAL_DMA_Abort_IT+0x3b0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d068      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a37      	ldr	r2, [pc, #220]	; (8002ffc <HAL_DMA_Abort_IT+0x3b4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d063      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a36      	ldr	r2, [pc, #216]	; (8003000 <HAL_DMA_Abort_IT+0x3b8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d05e      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a34      	ldr	r2, [pc, #208]	; (8003004 <HAL_DMA_Abort_IT+0x3bc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d059      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a33      	ldr	r2, [pc, #204]	; (8003008 <HAL_DMA_Abort_IT+0x3c0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d054      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a31      	ldr	r2, [pc, #196]	; (800300c <HAL_DMA_Abort_IT+0x3c4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d04f      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a30      	ldr	r2, [pc, #192]	; (8003010 <HAL_DMA_Abort_IT+0x3c8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d04a      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2e      	ldr	r2, [pc, #184]	; (8003014 <HAL_DMA_Abort_IT+0x3cc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d045      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2d      	ldr	r2, [pc, #180]	; (8003018 <HAL_DMA_Abort_IT+0x3d0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d040      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	; (800301c <HAL_DMA_Abort_IT+0x3d4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d03b      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <HAL_DMA_Abort_IT+0x3d8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d036      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a28      	ldr	r2, [pc, #160]	; (8003024 <HAL_DMA_Abort_IT+0x3dc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d031      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a27      	ldr	r2, [pc, #156]	; (8003028 <HAL_DMA_Abort_IT+0x3e0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d02c      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a25      	ldr	r2, [pc, #148]	; (800302c <HAL_DMA_Abort_IT+0x3e4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d027      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a24      	ldr	r2, [pc, #144]	; (8003030 <HAL_DMA_Abort_IT+0x3e8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d022      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a22      	ldr	r2, [pc, #136]	; (8003034 <HAL_DMA_Abort_IT+0x3ec>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01d      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a21      	ldr	r2, [pc, #132]	; (8003038 <HAL_DMA_Abort_IT+0x3f0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d018      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	; (800303c <HAL_DMA_Abort_IT+0x3f4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <HAL_DMA_Abort_IT+0x3f8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00e      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <HAL_DMA_Abort_IT+0x3fc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d009      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <HAL_DMA_Abort_IT+0x400>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_DMA_Abort_IT+0x3a2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_DMA_Abort_IT+0x404>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d132      	bne.n	8003050 <HAL_DMA_Abort_IT+0x408>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e031      	b.n	8003052 <HAL_DMA_Abort_IT+0x40a>
 8002fee:	bf00      	nop
 8002ff0:	40020010 	.word	0x40020010
 8002ff4:	40020028 	.word	0x40020028
 8002ff8:	40020040 	.word	0x40020040
 8002ffc:	40020058 	.word	0x40020058
 8003000:	40020070 	.word	0x40020070
 8003004:	40020088 	.word	0x40020088
 8003008:	400200a0 	.word	0x400200a0
 800300c:	400200b8 	.word	0x400200b8
 8003010:	40020410 	.word	0x40020410
 8003014:	40020428 	.word	0x40020428
 8003018:	40020440 	.word	0x40020440
 800301c:	40020458 	.word	0x40020458
 8003020:	40020470 	.word	0x40020470
 8003024:	40020488 	.word	0x40020488
 8003028:	400204a0 	.word	0x400204a0
 800302c:	400204b8 	.word	0x400204b8
 8003030:	58025408 	.word	0x58025408
 8003034:	5802541c 	.word	0x5802541c
 8003038:	58025430 	.word	0x58025430
 800303c:	58025444 	.word	0x58025444
 8003040:	58025458 	.word	0x58025458
 8003044:	5802546c 	.word	0x5802546c
 8003048:	58025480 	.word	0x58025480
 800304c:	58025494 	.word	0x58025494
 8003050:	2300      	movs	r3, #0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d028      	beq.n	80030a8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003064:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2201      	movs	r2, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003084:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800309c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop

080030d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030e0:	4b67      	ldr	r3, [pc, #412]	; (8003280 <HAL_DMA_IRQHandler+0x1ac>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a67      	ldr	r2, [pc, #412]	; (8003284 <HAL_DMA_IRQHandler+0x1b0>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5f      	ldr	r2, [pc, #380]	; (8003288 <HAL_DMA_IRQHandler+0x1b4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d04a      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a5d      	ldr	r2, [pc, #372]	; (800328c <HAL_DMA_IRQHandler+0x1b8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d045      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a5c      	ldr	r2, [pc, #368]	; (8003290 <HAL_DMA_IRQHandler+0x1bc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d040      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a5a      	ldr	r2, [pc, #360]	; (8003294 <HAL_DMA_IRQHandler+0x1c0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d03b      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a59      	ldr	r2, [pc, #356]	; (8003298 <HAL_DMA_IRQHandler+0x1c4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d036      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a57      	ldr	r2, [pc, #348]	; (800329c <HAL_DMA_IRQHandler+0x1c8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d031      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a56      	ldr	r2, [pc, #344]	; (80032a0 <HAL_DMA_IRQHandler+0x1cc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d02c      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a54      	ldr	r2, [pc, #336]	; (80032a4 <HAL_DMA_IRQHandler+0x1d0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d027      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a53      	ldr	r2, [pc, #332]	; (80032a8 <HAL_DMA_IRQHandler+0x1d4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d022      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a51      	ldr	r2, [pc, #324]	; (80032ac <HAL_DMA_IRQHandler+0x1d8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01d      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a50      	ldr	r2, [pc, #320]	; (80032b0 <HAL_DMA_IRQHandler+0x1dc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d018      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a4e      	ldr	r2, [pc, #312]	; (80032b4 <HAL_DMA_IRQHandler+0x1e0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a4d      	ldr	r2, [pc, #308]	; (80032b8 <HAL_DMA_IRQHandler+0x1e4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00e      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a4b      	ldr	r2, [pc, #300]	; (80032bc <HAL_DMA_IRQHandler+0x1e8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d009      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a4a      	ldr	r2, [pc, #296]	; (80032c0 <HAL_DMA_IRQHandler+0x1ec>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xd2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a48      	ldr	r2, [pc, #288]	; (80032c4 <HAL_DMA_IRQHandler+0x1f0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_IRQHandler+0xd6>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_DMA_IRQHandler+0xd8>
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 842b 	beq.w	8003a08 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2208      	movs	r2, #8
 80031bc:	409a      	lsls	r2, r3
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80a2 	beq.w	800330c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2e      	ldr	r2, [pc, #184]	; (8003288 <HAL_DMA_IRQHandler+0x1b4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d04a      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2d      	ldr	r2, [pc, #180]	; (800328c <HAL_DMA_IRQHandler+0x1b8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d045      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <HAL_DMA_IRQHandler+0x1bc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d040      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <HAL_DMA_IRQHandler+0x1c0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d03b      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a28      	ldr	r2, [pc, #160]	; (8003298 <HAL_DMA_IRQHandler+0x1c4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d036      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_DMA_IRQHandler+0x1c8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d031      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a25      	ldr	r2, [pc, #148]	; (80032a0 <HAL_DMA_IRQHandler+0x1cc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d02c      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a24      	ldr	r2, [pc, #144]	; (80032a4 <HAL_DMA_IRQHandler+0x1d0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d027      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <HAL_DMA_IRQHandler+0x1d4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <HAL_DMA_IRQHandler+0x1d8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01d      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <HAL_DMA_IRQHandler+0x1dc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d018      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <HAL_DMA_IRQHandler+0x1e0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_DMA_IRQHandler+0x1e4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00e      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <HAL_DMA_IRQHandler+0x1e8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <HAL_DMA_IRQHandler+0x1ec>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_DMA_IRQHandler+0x194>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <HAL_DMA_IRQHandler+0x1f0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d12f      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x1f4>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	e02e      	b.n	80032dc <HAL_DMA_IRQHandler+0x208>
 800327e:	bf00      	nop
 8003280:	24000000 	.word	0x24000000
 8003284:	1b4e81b5 	.word	0x1b4e81b5
 8003288:	40020010 	.word	0x40020010
 800328c:	40020028 	.word	0x40020028
 8003290:	40020040 	.word	0x40020040
 8003294:	40020058 	.word	0x40020058
 8003298:	40020070 	.word	0x40020070
 800329c:	40020088 	.word	0x40020088
 80032a0:	400200a0 	.word	0x400200a0
 80032a4:	400200b8 	.word	0x400200b8
 80032a8:	40020410 	.word	0x40020410
 80032ac:	40020428 	.word	0x40020428
 80032b0:	40020440 	.word	0x40020440
 80032b4:	40020458 	.word	0x40020458
 80032b8:	40020470 	.word	0x40020470
 80032bc:	40020488 	.word	0x40020488
 80032c0:	400204a0 	.word	0x400204a0
 80032c4:	400204b8 	.word	0x400204b8
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0204 	bic.w	r2, r2, #4
 80032ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2208      	movs	r2, #8
 80032fa:	409a      	lsls	r2, r3
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d06e      	beq.n	8003400 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a69      	ldr	r2, [pc, #420]	; (80034cc <HAL_DMA_IRQHandler+0x3f8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d04a      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a67      	ldr	r2, [pc, #412]	; (80034d0 <HAL_DMA_IRQHandler+0x3fc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d045      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a66      	ldr	r2, [pc, #408]	; (80034d4 <HAL_DMA_IRQHandler+0x400>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d040      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a64      	ldr	r2, [pc, #400]	; (80034d8 <HAL_DMA_IRQHandler+0x404>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d03b      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a63      	ldr	r2, [pc, #396]	; (80034dc <HAL_DMA_IRQHandler+0x408>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d036      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a61      	ldr	r2, [pc, #388]	; (80034e0 <HAL_DMA_IRQHandler+0x40c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a60      	ldr	r2, [pc, #384]	; (80034e4 <HAL_DMA_IRQHandler+0x410>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d02c      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a5e      	ldr	r2, [pc, #376]	; (80034e8 <HAL_DMA_IRQHandler+0x414>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d027      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5d      	ldr	r2, [pc, #372]	; (80034ec <HAL_DMA_IRQHandler+0x418>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5b      	ldr	r2, [pc, #364]	; (80034f0 <HAL_DMA_IRQHandler+0x41c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01d      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5a      	ldr	r2, [pc, #360]	; (80034f4 <HAL_DMA_IRQHandler+0x420>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_DMA_IRQHandler+0x424>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a57      	ldr	r2, [pc, #348]	; (80034fc <HAL_DMA_IRQHandler+0x428>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a55      	ldr	r2, [pc, #340]	; (8003500 <HAL_DMA_IRQHandler+0x42c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a54      	ldr	r2, [pc, #336]	; (8003504 <HAL_DMA_IRQHandler+0x430>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x2ee>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a52      	ldr	r2, [pc, #328]	; (8003508 <HAL_DMA_IRQHandler+0x434>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d10a      	bne.n	80033d8 <HAL_DMA_IRQHandler+0x304>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e003      	b.n	80033e0 <HAL_DMA_IRQHandler+0x30c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2201      	movs	r2, #1
 80033ee:	409a      	lsls	r2, r3
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f043 0202 	orr.w	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2204      	movs	r2, #4
 800340a:	409a      	lsls	r2, r3
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 808f 	beq.w	8003534 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <HAL_DMA_IRQHandler+0x3f8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04a      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <HAL_DMA_IRQHandler+0x3fc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d045      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <HAL_DMA_IRQHandler+0x400>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d040      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <HAL_DMA_IRQHandler+0x404>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d03b      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a26      	ldr	r2, [pc, #152]	; (80034dc <HAL_DMA_IRQHandler+0x408>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d036      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <HAL_DMA_IRQHandler+0x40c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d031      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <HAL_DMA_IRQHandler+0x410>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d02c      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <HAL_DMA_IRQHandler+0x414>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d027      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a20      	ldr	r2, [pc, #128]	; (80034ec <HAL_DMA_IRQHandler+0x418>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1e      	ldr	r2, [pc, #120]	; (80034f0 <HAL_DMA_IRQHandler+0x41c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01d      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_DMA_IRQHandler+0x420>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1b      	ldr	r2, [pc, #108]	; (80034f8 <HAL_DMA_IRQHandler+0x424>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_DMA_IRQHandler+0x428>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_DMA_IRQHandler+0x42c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_DMA_IRQHandler+0x430>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x3e2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_DMA_IRQHandler+0x434>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d12a      	bne.n	800350c <HAL_DMA_IRQHandler+0x438>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e023      	b.n	8003514 <HAL_DMA_IRQHandler+0x440>
 80034cc:	40020010 	.word	0x40020010
 80034d0:	40020028 	.word	0x40020028
 80034d4:	40020040 	.word	0x40020040
 80034d8:	40020058 	.word	0x40020058
 80034dc:	40020070 	.word	0x40020070
 80034e0:	40020088 	.word	0x40020088
 80034e4:	400200a0 	.word	0x400200a0
 80034e8:	400200b8 	.word	0x400200b8
 80034ec:	40020410 	.word	0x40020410
 80034f0:	40020428 	.word	0x40020428
 80034f4:	40020440 	.word	0x40020440
 80034f8:	40020458 	.word	0x40020458
 80034fc:	40020470 	.word	0x40020470
 8003500:	40020488 	.word	0x40020488
 8003504:	400204a0 	.word	0x400204a0
 8003508:	400204b8 	.word	0x400204b8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2300      	movs	r3, #0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00d      	beq.n	8003534 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2204      	movs	r2, #4
 8003522:	409a      	lsls	r2, r3
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f043 0204 	orr.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	2210      	movs	r2, #16
 800353e:	409a      	lsls	r2, r3
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a6 	beq.w	8003696 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a85      	ldr	r2, [pc, #532]	; (8003764 <HAL_DMA_IRQHandler+0x690>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d04a      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a83      	ldr	r2, [pc, #524]	; (8003768 <HAL_DMA_IRQHandler+0x694>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d045      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a82      	ldr	r2, [pc, #520]	; (800376c <HAL_DMA_IRQHandler+0x698>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d040      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a80      	ldr	r2, [pc, #512]	; (8003770 <HAL_DMA_IRQHandler+0x69c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d03b      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7f      	ldr	r2, [pc, #508]	; (8003774 <HAL_DMA_IRQHandler+0x6a0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d036      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a7d      	ldr	r2, [pc, #500]	; (8003778 <HAL_DMA_IRQHandler+0x6a4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d031      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7c      	ldr	r2, [pc, #496]	; (800377c <HAL_DMA_IRQHandler+0x6a8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d02c      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7a      	ldr	r2, [pc, #488]	; (8003780 <HAL_DMA_IRQHandler+0x6ac>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d027      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a79      	ldr	r2, [pc, #484]	; (8003784 <HAL_DMA_IRQHandler+0x6b0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a77      	ldr	r2, [pc, #476]	; (8003788 <HAL_DMA_IRQHandler+0x6b4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01d      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a76      	ldr	r2, [pc, #472]	; (800378c <HAL_DMA_IRQHandler+0x6b8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d018      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a74      	ldr	r2, [pc, #464]	; (8003790 <HAL_DMA_IRQHandler+0x6bc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a73      	ldr	r2, [pc, #460]	; (8003794 <HAL_DMA_IRQHandler+0x6c0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a71      	ldr	r2, [pc, #452]	; (8003798 <HAL_DMA_IRQHandler+0x6c4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a70      	ldr	r2, [pc, #448]	; (800379c <HAL_DMA_IRQHandler+0x6c8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_IRQHandler+0x516>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6e      	ldr	r2, [pc, #440]	; (80037a0 <HAL_DMA_IRQHandler+0x6cc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10a      	bne.n	8003600 <HAL_DMA_IRQHandler+0x52c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e009      	b.n	8003614 <HAL_DMA_IRQHandler+0x540>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	bf14      	ite	ne
 800360e:	2301      	movne	r3, #1
 8003610:	2300      	moveq	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d03e      	beq.n	8003696 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2210      	movs	r2, #16
 8003622:	409a      	lsls	r2, r3
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d018      	beq.n	8003668 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d108      	bne.n	8003656 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d024      	beq.n	8003696 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
 8003654:	e01f      	b.n	8003696 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01b      	beq.n	8003696 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
 8003666:	e016      	b.n	8003696 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0208 	bic.w	r2, r2, #8
 8003684:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2220      	movs	r2, #32
 80036a0:	409a      	lsls	r2, r3
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8110 	beq.w	80038cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <HAL_DMA_IRQHandler+0x690>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d04a      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <HAL_DMA_IRQHandler+0x694>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d045      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a29      	ldr	r2, [pc, #164]	; (800376c <HAL_DMA_IRQHandler+0x698>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d040      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a28      	ldr	r2, [pc, #160]	; (8003770 <HAL_DMA_IRQHandler+0x69c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d03b      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <HAL_DMA_IRQHandler+0x6a0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d036      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a25      	ldr	r2, [pc, #148]	; (8003778 <HAL_DMA_IRQHandler+0x6a4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d031      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a23      	ldr	r2, [pc, #140]	; (800377c <HAL_DMA_IRQHandler+0x6a8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d02c      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a22      	ldr	r2, [pc, #136]	; (8003780 <HAL_DMA_IRQHandler+0x6ac>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d027      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a20      	ldr	r2, [pc, #128]	; (8003784 <HAL_DMA_IRQHandler+0x6b0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d022      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_DMA_IRQHandler+0x6b4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d01d      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_DMA_IRQHandler+0x6b8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d018      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_DMA_IRQHandler+0x6bc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d013      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_DMA_IRQHandler+0x6c0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_DMA_IRQHandler+0x6c4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d009      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a17      	ldr	r2, [pc, #92]	; (800379c <HAL_DMA_IRQHandler+0x6c8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_DMA_IRQHandler+0x678>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <HAL_DMA_IRQHandler+0x6cc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d12b      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x6d0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e02a      	b.n	80037b8 <HAL_DMA_IRQHandler+0x6e4>
 8003762:	bf00      	nop
 8003764:	40020010 	.word	0x40020010
 8003768:	40020028 	.word	0x40020028
 800376c:	40020040 	.word	0x40020040
 8003770:	40020058 	.word	0x40020058
 8003774:	40020070 	.word	0x40020070
 8003778:	40020088 	.word	0x40020088
 800377c:	400200a0 	.word	0x400200a0
 8003780:	400200b8 	.word	0x400200b8
 8003784:	40020410 	.word	0x40020410
 8003788:	40020428 	.word	0x40020428
 800378c:	40020440 	.word	0x40020440
 8003790:	40020458 	.word	0x40020458
 8003794:	40020470 	.word	0x40020470
 8003798:	40020488 	.word	0x40020488
 800379c:	400204a0 	.word	0x400204a0
 80037a0:	400204b8 	.word	0x400204b8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bf14      	ite	ne
 80037b2:	2301      	movne	r3, #1
 80037b4:	2300      	moveq	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8087 	beq.w	80038cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2220      	movs	r2, #32
 80037c8:	409a      	lsls	r2, r3
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d139      	bne.n	800384e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0216 	bic.w	r2, r2, #22
 80037e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_DMA_IRQHandler+0x736>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0208 	bic.w	r2, r2, #8
 8003818:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	223f      	movs	r2, #63	; 0x3f
 8003824:	409a      	lsls	r2, r3
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8382 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
          }
          return;
 800384c:	e37c      	b.n	8003f48 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d018      	beq.n	800388e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d108      	bne.n	800387c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	2b00      	cmp	r3, #0
 8003870:	d02c      	beq.n	80038cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
 800387a:	e027      	b.n	80038cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d023      	beq.n	80038cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
 800388c:	e01e      	b.n	80038cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10f      	bne.n	80038bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0210 	bic.w	r2, r2, #16
 80038aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 833e 	beq.w	8003f52 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8088 	beq.w	80039f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2204      	movs	r2, #4
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a89      	ldr	r2, [pc, #548]	; (8003b18 <HAL_DMA_IRQHandler+0xa44>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d04a      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a88      	ldr	r2, [pc, #544]	; (8003b1c <HAL_DMA_IRQHandler+0xa48>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d045      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a86      	ldr	r2, [pc, #536]	; (8003b20 <HAL_DMA_IRQHandler+0xa4c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d040      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a85      	ldr	r2, [pc, #532]	; (8003b24 <HAL_DMA_IRQHandler+0xa50>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d03b      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a83      	ldr	r2, [pc, #524]	; (8003b28 <HAL_DMA_IRQHandler+0xa54>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d036      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a82      	ldr	r2, [pc, #520]	; (8003b2c <HAL_DMA_IRQHandler+0xa58>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d031      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a80      	ldr	r2, [pc, #512]	; (8003b30 <HAL_DMA_IRQHandler+0xa5c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02c      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a7f      	ldr	r2, [pc, #508]	; (8003b34 <HAL_DMA_IRQHandler+0xa60>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d027      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a7d      	ldr	r2, [pc, #500]	; (8003b38 <HAL_DMA_IRQHandler+0xa64>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7c      	ldr	r2, [pc, #496]	; (8003b3c <HAL_DMA_IRQHandler+0xa68>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01d      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7a      	ldr	r2, [pc, #488]	; (8003b40 <HAL_DMA_IRQHandler+0xa6c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a79      	ldr	r2, [pc, #484]	; (8003b44 <HAL_DMA_IRQHandler+0xa70>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a77      	ldr	r2, [pc, #476]	; (8003b48 <HAL_DMA_IRQHandler+0xa74>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a76      	ldr	r2, [pc, #472]	; (8003b4c <HAL_DMA_IRQHandler+0xa78>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a74      	ldr	r2, [pc, #464]	; (8003b50 <HAL_DMA_IRQHandler+0xa7c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_DMA_IRQHandler+0x8b8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a73      	ldr	r2, [pc, #460]	; (8003b54 <HAL_DMA_IRQHandler+0xa80>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <HAL_DMA_IRQHandler+0x8ca>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e007      	b.n	80039ae <HAL_DMA_IRQHandler+0x8da>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3301      	adds	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d307      	bcc.n	80039ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f2      	bne.n	80039ae <HAL_DMA_IRQHandler+0x8da>
 80039c8:	e000      	b.n	80039cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80039ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2203      	movs	r2, #3
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039e2:	e003      	b.n	80039ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 82aa 	beq.w	8003f52 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
 8003a06:	e2a4      	b.n	8003f52 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a52      	ldr	r2, [pc, #328]	; (8003b58 <HAL_DMA_IRQHandler+0xa84>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d04a      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a51      	ldr	r2, [pc, #324]	; (8003b5c <HAL_DMA_IRQHandler+0xa88>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d045      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a4f      	ldr	r2, [pc, #316]	; (8003b60 <HAL_DMA_IRQHandler+0xa8c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d040      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a4e      	ldr	r2, [pc, #312]	; (8003b64 <HAL_DMA_IRQHandler+0xa90>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d03b      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a4c      	ldr	r2, [pc, #304]	; (8003b68 <HAL_DMA_IRQHandler+0xa94>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d036      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a4b      	ldr	r2, [pc, #300]	; (8003b6c <HAL_DMA_IRQHandler+0xa98>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d031      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a49      	ldr	r2, [pc, #292]	; (8003b70 <HAL_DMA_IRQHandler+0xa9c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02c      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a48      	ldr	r2, [pc, #288]	; (8003b74 <HAL_DMA_IRQHandler+0xaa0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d027      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a46      	ldr	r2, [pc, #280]	; (8003b78 <HAL_DMA_IRQHandler+0xaa4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a45      	ldr	r2, [pc, #276]	; (8003b7c <HAL_DMA_IRQHandler+0xaa8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d01d      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a43      	ldr	r2, [pc, #268]	; (8003b80 <HAL_DMA_IRQHandler+0xaac>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d018      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a42      	ldr	r2, [pc, #264]	; (8003b84 <HAL_DMA_IRQHandler+0xab0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <HAL_DMA_IRQHandler+0xab4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a3f      	ldr	r2, [pc, #252]	; (8003b8c <HAL_DMA_IRQHandler+0xab8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3d      	ldr	r2, [pc, #244]	; (8003b90 <HAL_DMA_IRQHandler+0xabc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x9d4>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a3c      	ldr	r2, [pc, #240]	; (8003b94 <HAL_DMA_IRQHandler+0xac0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_DMA_IRQHandler+0x9d8>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_DMA_IRQHandler+0x9da>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 824f 	beq.w	8003f52 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80dd 	beq.w	8003c8c <HAL_DMA_IRQHandler+0xbb8>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80d7 	beq.w	8003c8c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d059      	beq.n	8003bac <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d14a      	bne.n	8003b98 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8220 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b14:	e21a      	b.n	8003f4c <HAL_DMA_IRQHandler+0xe78>
 8003b16:	bf00      	nop
 8003b18:	40020010 	.word	0x40020010
 8003b1c:	40020028 	.word	0x40020028
 8003b20:	40020040 	.word	0x40020040
 8003b24:	40020058 	.word	0x40020058
 8003b28:	40020070 	.word	0x40020070
 8003b2c:	40020088 	.word	0x40020088
 8003b30:	400200a0 	.word	0x400200a0
 8003b34:	400200b8 	.word	0x400200b8
 8003b38:	40020410 	.word	0x40020410
 8003b3c:	40020428 	.word	0x40020428
 8003b40:	40020440 	.word	0x40020440
 8003b44:	40020458 	.word	0x40020458
 8003b48:	40020470 	.word	0x40020470
 8003b4c:	40020488 	.word	0x40020488
 8003b50:	400204a0 	.word	0x400204a0
 8003b54:	400204b8 	.word	0x400204b8
 8003b58:	48022c08 	.word	0x48022c08
 8003b5c:	48022c1c 	.word	0x48022c1c
 8003b60:	48022c30 	.word	0x48022c30
 8003b64:	48022c44 	.word	0x48022c44
 8003b68:	48022c58 	.word	0x48022c58
 8003b6c:	48022c6c 	.word	0x48022c6c
 8003b70:	48022c80 	.word	0x48022c80
 8003b74:	48022c94 	.word	0x48022c94
 8003b78:	58025408 	.word	0x58025408
 8003b7c:	5802541c 	.word	0x5802541c
 8003b80:	58025430 	.word	0x58025430
 8003b84:	58025444 	.word	0x58025444
 8003b88:	58025458 	.word	0x58025458
 8003b8c:	5802546c 	.word	0x5802546c
 8003b90:	58025480 	.word	0x58025480
 8003b94:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 81d5 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003baa:	e1cf      	b.n	8003f4c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d160      	bne.n	8003c78 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7f      	ldr	r2, [pc, #508]	; (8003db8 <HAL_DMA_IRQHandler+0xce4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d04a      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a7d      	ldr	r2, [pc, #500]	; (8003dbc <HAL_DMA_IRQHandler+0xce8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d045      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7c      	ldr	r2, [pc, #496]	; (8003dc0 <HAL_DMA_IRQHandler+0xcec>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d040      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a7a      	ldr	r2, [pc, #488]	; (8003dc4 <HAL_DMA_IRQHandler+0xcf0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d03b      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a79      	ldr	r2, [pc, #484]	; (8003dc8 <HAL_DMA_IRQHandler+0xcf4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d036      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a77      	ldr	r2, [pc, #476]	; (8003dcc <HAL_DMA_IRQHandler+0xcf8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d031      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a76      	ldr	r2, [pc, #472]	; (8003dd0 <HAL_DMA_IRQHandler+0xcfc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d02c      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a74      	ldr	r2, [pc, #464]	; (8003dd4 <HAL_DMA_IRQHandler+0xd00>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d027      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a73      	ldr	r2, [pc, #460]	; (8003dd8 <HAL_DMA_IRQHandler+0xd04>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a71      	ldr	r2, [pc, #452]	; (8003ddc <HAL_DMA_IRQHandler+0xd08>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01d      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a70      	ldr	r2, [pc, #448]	; (8003de0 <HAL_DMA_IRQHandler+0xd0c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6e      	ldr	r2, [pc, #440]	; (8003de4 <HAL_DMA_IRQHandler+0xd10>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6d      	ldr	r2, [pc, #436]	; (8003de8 <HAL_DMA_IRQHandler+0xd14>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6b      	ldr	r2, [pc, #428]	; (8003dec <HAL_DMA_IRQHandler+0xd18>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a6a      	ldr	r2, [pc, #424]	; (8003df0 <HAL_DMA_IRQHandler+0xd1c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xb82>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a68      	ldr	r2, [pc, #416]	; (8003df4 <HAL_DMA_IRQHandler+0xd20>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d108      	bne.n	8003c68 <HAL_DMA_IRQHandler+0xb94>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0208 	bic.w	r2, r2, #8
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e007      	b.n	8003c78 <HAL_DMA_IRQHandler+0xba4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0204 	bic.w	r2, r2, #4
 8003c76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8165 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c8a:	e15f      	b.n	8003f4c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2202      	movs	r2, #2
 8003c96:	409a      	lsls	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80c5 	beq.w	8003e2c <HAL_DMA_IRQHandler+0xd58>
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80bf 	beq.w	8003e2c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 813a 	beq.w	8003f50 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce4:	e134      	b.n	8003f50 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8130 	beq.w	8003f50 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf8:	e12a      	b.n	8003f50 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 8089 	bne.w	8003e18 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2b      	ldr	r2, [pc, #172]	; (8003db8 <HAL_DMA_IRQHandler+0xce4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d04a      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <HAL_DMA_IRQHandler+0xce8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d045      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a28      	ldr	r2, [pc, #160]	; (8003dc0 <HAL_DMA_IRQHandler+0xcec>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d040      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a26      	ldr	r2, [pc, #152]	; (8003dc4 <HAL_DMA_IRQHandler+0xcf0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d03b      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a25      	ldr	r2, [pc, #148]	; (8003dc8 <HAL_DMA_IRQHandler+0xcf4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d036      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a23      	ldr	r2, [pc, #140]	; (8003dcc <HAL_DMA_IRQHandler+0xcf8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d031      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a22      	ldr	r2, [pc, #136]	; (8003dd0 <HAL_DMA_IRQHandler+0xcfc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d02c      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a20      	ldr	r2, [pc, #128]	; (8003dd4 <HAL_DMA_IRQHandler+0xd00>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d027      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <HAL_DMA_IRQHandler+0xd04>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d022      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_DMA_IRQHandler+0xd08>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01d      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <HAL_DMA_IRQHandler+0xd0c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d018      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <HAL_DMA_IRQHandler+0xd10>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a19      	ldr	r2, [pc, #100]	; (8003de8 <HAL_DMA_IRQHandler+0xd14>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a17      	ldr	r2, [pc, #92]	; (8003dec <HAL_DMA_IRQHandler+0xd18>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <HAL_DMA_IRQHandler+0xd1c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xcd2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <HAL_DMA_IRQHandler+0xd20>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d128      	bne.n	8003df8 <HAL_DMA_IRQHandler+0xd24>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0214 	bic.w	r2, r2, #20
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e027      	b.n	8003e08 <HAL_DMA_IRQHandler+0xd34>
 8003db8:	40020010 	.word	0x40020010
 8003dbc:	40020028 	.word	0x40020028
 8003dc0:	40020040 	.word	0x40020040
 8003dc4:	40020058 	.word	0x40020058
 8003dc8:	40020070 	.word	0x40020070
 8003dcc:	40020088 	.word	0x40020088
 8003dd0:	400200a0 	.word	0x400200a0
 8003dd4:	400200b8 	.word	0x400200b8
 8003dd8:	40020410 	.word	0x40020410
 8003ddc:	40020428 	.word	0x40020428
 8003de0:	40020440 	.word	0x40020440
 8003de4:	40020458 	.word	0x40020458
 8003de8:	40020470 	.word	0x40020470
 8003dec:	40020488 	.word	0x40020488
 8003df0:	400204a0 	.word	0x400204a0
 8003df4:	400204b8 	.word	0x400204b8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020a 	bic.w	r2, r2, #10
 8003e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8097 	beq.w	8003f50 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e2a:	e091      	b.n	8003f50 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2208      	movs	r2, #8
 8003e36:	409a      	lsls	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8088 	beq.w	8003f52 <HAL_DMA_IRQHandler+0xe7e>
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8082 	beq.w	8003f52 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a41      	ldr	r2, [pc, #260]	; (8003f58 <HAL_DMA_IRQHandler+0xe84>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d04a      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a3f      	ldr	r2, [pc, #252]	; (8003f5c <HAL_DMA_IRQHandler+0xe88>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d045      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a3e      	ldr	r2, [pc, #248]	; (8003f60 <HAL_DMA_IRQHandler+0xe8c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d040      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a3c      	ldr	r2, [pc, #240]	; (8003f64 <HAL_DMA_IRQHandler+0xe90>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d03b      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a3b      	ldr	r2, [pc, #236]	; (8003f68 <HAL_DMA_IRQHandler+0xe94>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d036      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a39      	ldr	r2, [pc, #228]	; (8003f6c <HAL_DMA_IRQHandler+0xe98>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d031      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a38      	ldr	r2, [pc, #224]	; (8003f70 <HAL_DMA_IRQHandler+0xe9c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d02c      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a36      	ldr	r2, [pc, #216]	; (8003f74 <HAL_DMA_IRQHandler+0xea0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d027      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a35      	ldr	r2, [pc, #212]	; (8003f78 <HAL_DMA_IRQHandler+0xea4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d022      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a33      	ldr	r2, [pc, #204]	; (8003f7c <HAL_DMA_IRQHandler+0xea8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01d      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a32      	ldr	r2, [pc, #200]	; (8003f80 <HAL_DMA_IRQHandler+0xeac>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d018      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a30      	ldr	r2, [pc, #192]	; (8003f84 <HAL_DMA_IRQHandler+0xeb0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <HAL_DMA_IRQHandler+0xeb4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <HAL_DMA_IRQHandler+0xeb8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <HAL_DMA_IRQHandler+0xebc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe1a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <HAL_DMA_IRQHandler+0xec0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <HAL_DMA_IRQHandler+0xe2c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 021c 	bic.w	r2, r2, #28
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e007      	b.n	8003f10 <HAL_DMA_IRQHandler+0xe3c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 020e 	bic.w	r2, r2, #14
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2201      	movs	r2, #1
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
 8003f46:	e004      	b.n	8003f52 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003f48:	bf00      	nop
 8003f4a:	e002      	b.n	8003f52 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f4c:	bf00      	nop
 8003f4e:	e000      	b.n	8003f52 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f50:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f52:	3728      	adds	r7, #40	; 0x28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40020010 	.word	0x40020010
 8003f5c:	40020028 	.word	0x40020028
 8003f60:	40020040 	.word	0x40020040
 8003f64:	40020058 	.word	0x40020058
 8003f68:	40020070 	.word	0x40020070
 8003f6c:	40020088 	.word	0x40020088
 8003f70:	400200a0 	.word	0x400200a0
 8003f74:	400200b8 	.word	0x400200b8
 8003f78:	40020410 	.word	0x40020410
 8003f7c:	40020428 	.word	0x40020428
 8003f80:	40020440 	.word	0x40020440
 8003f84:	40020458 	.word	0x40020458
 8003f88:	40020470 	.word	0x40020470
 8003f8c:	40020488 	.word	0x40020488
 8003f90:	400204a0 	.word	0x400204a0
 8003f94:	400204b8 	.word	0x400204b8

08003f98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a42      	ldr	r2, [pc, #264]	; (80040b0 <DMA_CalcBaseAndBitshift+0x118>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d04a      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a41      	ldr	r2, [pc, #260]	; (80040b4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d045      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a3f      	ldr	r2, [pc, #252]	; (80040b8 <DMA_CalcBaseAndBitshift+0x120>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d040      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a3e      	ldr	r2, [pc, #248]	; (80040bc <DMA_CalcBaseAndBitshift+0x124>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d03b      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a3c      	ldr	r2, [pc, #240]	; (80040c0 <DMA_CalcBaseAndBitshift+0x128>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d036      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a3b      	ldr	r2, [pc, #236]	; (80040c4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d031      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a39      	ldr	r2, [pc, #228]	; (80040c8 <DMA_CalcBaseAndBitshift+0x130>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02c      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a38      	ldr	r2, [pc, #224]	; (80040cc <DMA_CalcBaseAndBitshift+0x134>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d027      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a36      	ldr	r2, [pc, #216]	; (80040d0 <DMA_CalcBaseAndBitshift+0x138>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d022      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a35      	ldr	r2, [pc, #212]	; (80040d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d01d      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a33      	ldr	r2, [pc, #204]	; (80040d8 <DMA_CalcBaseAndBitshift+0x140>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d018      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a32      	ldr	r2, [pc, #200]	; (80040dc <DMA_CalcBaseAndBitshift+0x144>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a30      	ldr	r2, [pc, #192]	; (80040e0 <DMA_CalcBaseAndBitshift+0x148>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <DMA_CalcBaseAndBitshift+0x150>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <DMA_CalcBaseAndBitshift+0xa8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2c      	ldr	r2, [pc, #176]	; (80040ec <DMA_CalcBaseAndBitshift+0x154>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <DMA_CalcBaseAndBitshift+0xac>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <DMA_CalcBaseAndBitshift+0xae>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d024      	beq.n	8004094 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3b10      	subs	r3, #16
 8004052:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <DMA_CalcBaseAndBitshift+0x158>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	4a24      	ldr	r2, [pc, #144]	; (80040f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004064:	5cd3      	ldrb	r3, [r2, r3]
 8004066:	461a      	mov	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b03      	cmp	r3, #3
 8004070:	d908      	bls.n	8004084 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <DMA_CalcBaseAndBitshift+0x160>)
 800407a:	4013      	ands	r3, r2
 800407c:	1d1a      	adds	r2, r3, #4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	659a      	str	r2, [r3, #88]	; 0x58
 8004082:	e00d      	b.n	80040a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <DMA_CalcBaseAndBitshift+0x160>)
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6593      	str	r3, [r2, #88]	; 0x58
 8004092:	e005      	b.n	80040a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40020010 	.word	0x40020010
 80040b4:	40020028 	.word	0x40020028
 80040b8:	40020040 	.word	0x40020040
 80040bc:	40020058 	.word	0x40020058
 80040c0:	40020070 	.word	0x40020070
 80040c4:	40020088 	.word	0x40020088
 80040c8:	400200a0 	.word	0x400200a0
 80040cc:	400200b8 	.word	0x400200b8
 80040d0:	40020410 	.word	0x40020410
 80040d4:	40020428 	.word	0x40020428
 80040d8:	40020440 	.word	0x40020440
 80040dc:	40020458 	.word	0x40020458
 80040e0:	40020470 	.word	0x40020470
 80040e4:	40020488 	.word	0x40020488
 80040e8:	400204a0 	.word	0x400204a0
 80040ec:	400204b8 	.word	0x400204b8
 80040f0:	aaaaaaab 	.word	0xaaaaaaab
 80040f4:	0800c01c 	.word	0x0800c01c
 80040f8:	fffffc00 	.word	0xfffffc00

080040fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d120      	bne.n	8004152 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	2b03      	cmp	r3, #3
 8004116:	d858      	bhi.n	80041ca <DMA_CheckFifoParam+0xce>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <DMA_CheckFifoParam+0x24>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004131 	.word	0x08004131
 8004124:	08004143 	.word	0x08004143
 8004128:	08004131 	.word	0x08004131
 800412c:	080041cb 	.word	0x080041cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d048      	beq.n	80041ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004140:	e045      	b.n	80041ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800414a:	d142      	bne.n	80041d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004150:	e03f      	b.n	80041d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415a:	d123      	bne.n	80041a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	2b03      	cmp	r3, #3
 8004162:	d838      	bhi.n	80041d6 <DMA_CheckFifoParam+0xda>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <DMA_CheckFifoParam+0x70>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004183 	.word	0x08004183
 8004174:	0800417d 	.word	0x0800417d
 8004178:	08004195 	.word	0x08004195
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
        break;
 8004180:	e030      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d025      	beq.n	80041da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004192:	e022      	b.n	80041da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800419c:	d11f      	bne.n	80041de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041a2:	e01c      	b.n	80041de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d902      	bls.n	80041b2 <DMA_CheckFifoParam+0xb6>
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d003      	beq.n	80041b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041b0:	e018      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
        break;
 80041b6:	e015      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
    break;
 80041c8:	e00b      	b.n	80041e2 <DMA_CheckFifoParam+0xe6>
        break;
 80041ca:	bf00      	nop
 80041cc:	e00a      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
        break;
 80041ce:	bf00      	nop
 80041d0:	e008      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
        break;
 80041d2:	bf00      	nop
 80041d4:	e006      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
        break;
 80041d6:	bf00      	nop
 80041d8:	e004      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
        break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
        break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
    break;
 80041e2:	bf00      	nop
    }
  }

  return status;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a38      	ldr	r2, [pc, #224]	; (80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d022      	beq.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a36      	ldr	r2, [pc, #216]	; (80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d01d      	beq.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a35      	ldr	r2, [pc, #212]	; (80042f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d018      	beq.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a33      	ldr	r2, [pc, #204]	; (80042f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a32      	ldr	r2, [pc, #200]	; (80042f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00e      	beq.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a30      	ldr	r2, [pc, #192]	; (80042fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d009      	beq.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d004      	beq.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a2d      	ldr	r2, [pc, #180]	; (8004304 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d101      	bne.n	8004256 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004256:	2300      	movs	r3, #0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01a      	beq.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	3b08      	subs	r3, #8
 8004264:	4a28      	ldr	r2, [pc, #160]	; (8004308 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4b26      	ldr	r3, [pc, #152]	; (800430c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a24      	ldr	r2, [pc, #144]	; (8004310 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004280:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2201      	movs	r2, #1
 800428a:	409a      	lsls	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004290:	e024      	b.n	80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	3b10      	subs	r3, #16
 800429a:	4a1e      	ldr	r2, [pc, #120]	; (8004314 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4a1c      	ldr	r2, [pc, #112]	; (8004318 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d806      	bhi.n	80042ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4a1b      	ldr	r2, [pc, #108]	; (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d902      	bls.n	80042ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3308      	adds	r3, #8
 80042b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4b18      	ldr	r3, [pc, #96]	; (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	461a      	mov	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80042cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	58025408 	.word	0x58025408
 80042ec:	5802541c 	.word	0x5802541c
 80042f0:	58025430 	.word	0x58025430
 80042f4:	58025444 	.word	0x58025444
 80042f8:	58025458 	.word	0x58025458
 80042fc:	5802546c 	.word	0x5802546c
 8004300:	58025480 	.word	0x58025480
 8004304:	58025494 	.word	0x58025494
 8004308:	cccccccd 	.word	0xcccccccd
 800430c:	16009600 	.word	0x16009600
 8004310:	58025880 	.word	0x58025880
 8004314:	aaaaaaab 	.word	0xaaaaaaab
 8004318:	400204b8 	.word	0x400204b8
 800431c:	4002040f 	.word	0x4002040f
 8004320:	10008200 	.word	0x10008200
 8004324:	40020880 	.word	0x40020880

08004328 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d04a      	beq.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d847      	bhi.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a25      	ldr	r2, [pc, #148]	; (80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a24      	ldr	r2, [pc, #144]	; (80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01d      	beq.n	8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a22      	ldr	r2, [pc, #136]	; (80043e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a21      	ldr	r2, [pc, #132]	; (80043ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4b17      	ldr	r3, [pc, #92]	; (8004400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	461a      	mov	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a15      	ldr	r2, [pc, #84]	; (8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043b0:	671a      	str	r2, [r3, #112]	; 0x70
 80043b2:	e009      	b.n	80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a11      	ldr	r2, [pc, #68]	; (800440c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	2201      	movs	r2, #1
 80043ce:	409a      	lsls	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	58025408 	.word	0x58025408
 80043e4:	5802541c 	.word	0x5802541c
 80043e8:	58025430 	.word	0x58025430
 80043ec:	58025444 	.word	0x58025444
 80043f0:	58025458 	.word	0x58025458
 80043f4:	5802546c 	.word	0x5802546c
 80043f8:	58025480 	.word	0x58025480
 80043fc:	58025494 	.word	0x58025494
 8004400:	1600963f 	.word	0x1600963f
 8004404:	58025940 	.word	0x58025940
 8004408:	1000823f 	.word	0x1000823f
 800440c:	40020940 	.word	0x40020940

08004410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800441e:	4b89      	ldr	r3, [pc, #548]	; (8004644 <HAL_GPIO_Init+0x234>)
 8004420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004422:	e194      	b.n	800474e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2101      	movs	r1, #1
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	fa01 f303 	lsl.w	r3, r1, r3
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8186 	beq.w	8004748 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d005      	beq.n	8004454 <HAL_GPIO_Init+0x44>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d130      	bne.n	80044b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	2203      	movs	r2, #3
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800448a:	2201      	movs	r2, #1
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	f003 0201 	and.w	r2, r3, #1
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d017      	beq.n	80044f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	2203      	movs	r2, #3
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d123      	bne.n	8004546 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	08da      	lsrs	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3208      	adds	r2, #8
 8004506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	220f      	movs	r2, #15
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	08da      	lsrs	r2, r3, #3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3208      	adds	r2, #8
 8004540:	69b9      	ldr	r1, [r7, #24]
 8004542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	2203      	movs	r2, #3
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0203 	and.w	r2, r3, #3
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80e0 	beq.w	8004748 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_GPIO_Init+0x238>)
 800458a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800458e:	4a2e      	ldr	r2, [pc, #184]	; (8004648 <HAL_GPIO_Init+0x238>)
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004598:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <HAL_GPIO_Init+0x238>)
 800459a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045a6:	4a29      	ldr	r2, [pc, #164]	; (800464c <HAL_GPIO_Init+0x23c>)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	3302      	adds	r3, #2
 80045ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	220f      	movs	r2, #15
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a20      	ldr	r2, [pc, #128]	; (8004650 <HAL_GPIO_Init+0x240>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d052      	beq.n	8004678 <HAL_GPIO_Init+0x268>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <HAL_GPIO_Init+0x244>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d031      	beq.n	800463e <HAL_GPIO_Init+0x22e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <HAL_GPIO_Init+0x248>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d02b      	beq.n	800463a <HAL_GPIO_Init+0x22a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_GPIO_Init+0x24c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d025      	beq.n	8004636 <HAL_GPIO_Init+0x226>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <HAL_GPIO_Init+0x250>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01f      	beq.n	8004632 <HAL_GPIO_Init+0x222>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <HAL_GPIO_Init+0x254>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d019      	beq.n	800462e <HAL_GPIO_Init+0x21e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1a      	ldr	r2, [pc, #104]	; (8004668 <HAL_GPIO_Init+0x258>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_GPIO_Init+0x21a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <HAL_GPIO_Init+0x25c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00d      	beq.n	8004626 <HAL_GPIO_Init+0x216>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_GPIO_Init+0x260>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <HAL_GPIO_Init+0x212>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a17      	ldr	r2, [pc, #92]	; (8004674 <HAL_GPIO_Init+0x264>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_GPIO_Init+0x20e>
 800461a:	2309      	movs	r3, #9
 800461c:	e02d      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800461e:	230a      	movs	r3, #10
 8004620:	e02b      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004622:	2308      	movs	r3, #8
 8004624:	e029      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004626:	2307      	movs	r3, #7
 8004628:	e027      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800462a:	2306      	movs	r3, #6
 800462c:	e025      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800462e:	2305      	movs	r3, #5
 8004630:	e023      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004632:	2304      	movs	r3, #4
 8004634:	e021      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004636:	2303      	movs	r3, #3
 8004638:	e01f      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800463a:	2302      	movs	r3, #2
 800463c:	e01d      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800463e:	2301      	movs	r3, #1
 8004640:	e01b      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004642:	bf00      	nop
 8004644:	58000080 	.word	0x58000080
 8004648:	58024400 	.word	0x58024400
 800464c:	58000400 	.word	0x58000400
 8004650:	58020000 	.word	0x58020000
 8004654:	58020400 	.word	0x58020400
 8004658:	58020800 	.word	0x58020800
 800465c:	58020c00 	.word	0x58020c00
 8004660:	58021000 	.word	0x58021000
 8004664:	58021400 	.word	0x58021400
 8004668:	58021800 	.word	0x58021800
 800466c:	58021c00 	.word	0x58021c00
 8004670:	58022000 	.word	0x58022000
 8004674:	58022400 	.word	0x58022400
 8004678:	2300      	movs	r3, #0
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	f002 0203 	and.w	r2, r2, #3
 8004680:	0092      	lsls	r2, r2, #2
 8004682:	4093      	lsls	r3, r2
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800468a:	4938      	ldr	r1, [pc, #224]	; (800476c <HAL_GPIO_Init+0x35c>)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	3302      	adds	r3, #2
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	3301      	adds	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f ae63 	bne.w	8004424 <HAL_GPIO_Init+0x14>
  }
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	3724      	adds	r7, #36	; 0x24
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	58000400 	.word	0x58000400

08004770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
 800477c:	4613      	mov	r3, r2
 800477e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004780:	787b      	ldrb	r3, [r7, #1]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800478c:	e003      	b.n	8004796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	041a      	lsls	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	619a      	str	r2, [r3, #24]
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e07f      	b.n	80048b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fc fedc 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2224      	movs	r2, #36	; 0x24
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004804:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	e006      	b.n	800482c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800482a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d104      	bne.n	800483e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800483c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <HAL_I2C_Init+0x11c>)
 800484a:	430b      	orrs	r3, r1
 800484c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800485c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69d9      	ldr	r1, [r3, #28]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1a      	ldr	r2, [r3, #32]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	02008000 	.word	0x02008000

080048c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	460b      	mov	r3, r1
 80048d8:	813b      	strh	r3, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	f040 80f9 	bne.w	8004ade <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_I2C_Mem_Write+0x34>
 80048f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0ed      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_I2C_Mem_Write+0x4e>
 800490e:	2302      	movs	r3, #2
 8004910:	e0e6      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800491a:	f7fd f9a7 	bl	8001c6c <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2319      	movs	r3, #25
 8004926:	2201      	movs	r2, #1
 8004928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fac3 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0d1      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2221      	movs	r2, #33	; 0x21
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004964:	88f8      	ldrh	r0, [r7, #6]
 8004966:	893a      	ldrh	r2, [r7, #8]
 8004968:	8979      	ldrh	r1, [r7, #10]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4603      	mov	r3, r0
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f9d3 	bl	8004d20 <I2C_RequestMemoryWrite>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0a9      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2bff      	cmp	r3, #255	; 0xff
 8004994:	d90e      	bls.n	80049b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22ff      	movs	r2, #255	; 0xff
 800499a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	8979      	ldrh	r1, [r7, #10]
 80049a4:	2300      	movs	r3, #0
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fc2b 	bl	8005208 <I2C_TransferConfig>
 80049b2:	e00f      	b.n	80049d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	8979      	ldrh	r1, [r7, #10]
 80049c6:	2300      	movs	r3, #0
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 fc1a 	bl	8005208 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 faad 	bl	8004f38 <I2C_WaitOnTXISFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e07b      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d034      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x1c8>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d130      	bne.n	8004a8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	2200      	movs	r2, #0
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fa3f 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e04d      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2bff      	cmp	r3, #255	; 0xff
 8004a4c:	d90e      	bls.n	8004a6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	22ff      	movs	r2, #255	; 0xff
 8004a52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	8979      	ldrh	r1, [r7, #10]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fbcf 	bl	8005208 <I2C_TransferConfig>
 8004a6a:	e00f      	b.n	8004a8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	8979      	ldrh	r1, [r7, #10]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fbbe 	bl	8005208 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d19e      	bne.n	80049d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fa8c 	bl	8004fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e01a      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_I2C_Mem_Write+0x224>)
 8004abe:	400b      	ands	r3, r1
 8004ac0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	fe00e800 	.word	0xfe00e800

08004aec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	461a      	mov	r2, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	817b      	strh	r3, [r7, #10]
 8004afe:	460b      	mov	r3, r1
 8004b00:	813b      	strh	r3, [r7, #8]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	f040 80fd 	bne.w	8004d0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_I2C_Mem_Read+0x34>
 8004b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0f1      	b.n	8004d10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x4e>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e0ea      	b.n	8004d10 <HAL_I2C_Mem_Read+0x224>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b42:	f7fd f893 	bl	8001c6c <HAL_GetTick>
 8004b46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2319      	movs	r3, #25
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f9af 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0d5      	b.n	8004d10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2222      	movs	r2, #34	; 0x22
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2240      	movs	r2, #64	; 0x40
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a3a      	ldr	r2, [r7, #32]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b8c:	88f8      	ldrh	r0, [r7, #6]
 8004b8e:	893a      	ldrh	r2, [r7, #8]
 8004b90:	8979      	ldrh	r1, [r7, #10]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f913 	bl	8004dc8 <I2C_RequestMemoryRead>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0ad      	b.n	8004d10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2bff      	cmp	r3, #255	; 0xff
 8004bbc:	d90e      	bls.n	8004bdc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	22ff      	movs	r2, #255	; 0xff
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	8979      	ldrh	r1, [r7, #10]
 8004bcc:	4b52      	ldr	r3, [pc, #328]	; (8004d18 <HAL_I2C_Mem_Read+0x22c>)
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fb17 	bl	8005208 <I2C_TransferConfig>
 8004bda:	e00f      	b.n	8004bfc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	8979      	ldrh	r1, [r7, #10]
 8004bee:	4b4a      	ldr	r3, [pc, #296]	; (8004d18 <HAL_I2C_Mem_Read+0x22c>)
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fb06 	bl	8005208 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	2200      	movs	r2, #0
 8004c04:	2104      	movs	r1, #4
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f956 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e07c      	b.n	8004d10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d034      	beq.n	8004cbc <HAL_I2C_Mem_Read+0x1d0>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d130      	bne.n	8004cbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	2200      	movs	r2, #0
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f927 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e04d      	b.n	8004d10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2bff      	cmp	r3, #255	; 0xff
 8004c7c:	d90e      	bls.n	8004c9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	22ff      	movs	r2, #255	; 0xff
 8004c82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	8979      	ldrh	r1, [r7, #10]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fab7 	bl	8005208 <I2C_TransferConfig>
 8004c9a:	e00f      	b.n	8004cbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	8979      	ldrh	r1, [r7, #10]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 faa6 	bl	8005208 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d19a      	bne.n	8004bfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f974 	bl	8004fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e01a      	b.n	8004d10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6859      	ldr	r1, [r3, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_I2C_Mem_Read+0x230>)
 8004cee:	400b      	ands	r3, r1
 8004cf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e000      	b.n	8004d10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
  }
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	80002400 	.word	0x80002400
 8004d1c:	fe00e800 	.word	0xfe00e800

08004d20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	817b      	strh	r3, [r7, #10]
 8004d32:	460b      	mov	r3, r1
 8004d34:	813b      	strh	r3, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	8979      	ldrh	r1, [r7, #10]
 8004d40:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <I2C_RequestMemoryWrite+0xa4>)
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 fa5d 	bl	8005208 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	69b9      	ldr	r1, [r7, #24]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f8f0 	bl	8004f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e02c      	b.n	8004dbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d68:	893b      	ldrh	r3, [r7, #8]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	629a      	str	r2, [r3, #40]	; 0x28
 8004d72:	e015      	b.n	8004da0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d74:	893b      	ldrh	r3, [r7, #8]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f8d6 	bl	8004f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e012      	b.n	8004dbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d96:	893b      	ldrh	r3, [r7, #8]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2200      	movs	r2, #0
 8004da8:	2180      	movs	r1, #128	; 0x80
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f884 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	80002000 	.word	0x80002000

08004dc8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	817b      	strh	r3, [r7, #10]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	813b      	strh	r3, [r7, #8]
 8004dde:	4613      	mov	r3, r2
 8004de0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	8979      	ldrh	r1, [r7, #10]
 8004de8:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <I2C_RequestMemoryRead+0xa4>)
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2300      	movs	r3, #0
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fa0a 	bl	8005208 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	69b9      	ldr	r1, [r7, #24]
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f89d 	bl	8004f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e02c      	b.n	8004e62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d105      	bne.n	8004e1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0e:	893b      	ldrh	r3, [r7, #8]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
 8004e18:	e015      	b.n	8004e46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e1a:	893b      	ldrh	r3, [r7, #8]
 8004e1c:	0a1b      	lsrs	r3, r3, #8
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	69b9      	ldr	r1, [r7, #24]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f883 	bl	8004f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e012      	b.n	8004e62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3c:	893b      	ldrh	r3, [r7, #8]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2140      	movs	r1, #64	; 0x40
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f831 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	80002000 	.word	0x80002000

08004e70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d103      	bne.n	8004e8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d007      	beq.n	8004eac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	619a      	str	r2, [r3, #24]
  }
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec8:	e022      	b.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d01e      	beq.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fc fecb 	bl	8001c6c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d113      	bne.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e00f      	b.n	8004f30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d0cd      	beq.n	8004eca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f44:	e02c      	b.n	8004fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f870 	bl	8005030 <I2C_IsErrorOccurred>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e02a      	b.n	8004fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d01e      	beq.n	8004fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fc fe83 	bl	8001c6c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e007      	b.n	8004fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d1cb      	bne.n	8004f46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fc4:	e028      	b.n	8005018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f830 	bl	8005030 <I2C_IsErrorOccurred>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e026      	b.n	8005028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fda:	f7fc fe47 	bl	8001c6c <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d302      	bcc.n	8004ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d113      	bne.n	8005018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	f043 0220 	orr.w	r2, r3, #32
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e007      	b.n	8005028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b20      	cmp	r3, #32
 8005024:	d1cf      	bne.n	8004fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d075      	beq.n	8005148 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2210      	movs	r2, #16
 8005062:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005064:	e056      	b.n	8005114 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d052      	beq.n	8005114 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800506e:	f7fc fdfd 	bl	8001c6c <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <I2C_IsErrorOccurred+0x54>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d147      	bne.n	8005114 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005096:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a6:	d12e      	bne.n	8005106 <I2C_IsErrorOccurred+0xd6>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ae:	d02a      	beq.n	8005106 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80050b0:	7cfb      	ldrb	r3, [r7, #19]
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d027      	beq.n	8005106 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050c4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80050c6:	f7fc fdd1 	bl	8001c6c <HAL_GetTick>
 80050ca:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050cc:	e01b      	b.n	8005106 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80050ce:	f7fc fdcd 	bl	8001c6c <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b19      	cmp	r3, #25
 80050da:	d914      	bls.n	8005106 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e0:	f043 0220 	orr.w	r2, r3, #32
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b20      	cmp	r3, #32
 8005112:	d1dc      	bne.n	80050ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b20      	cmp	r3, #32
 8005120:	d003      	beq.n	800512a <I2C_IsErrorOccurred+0xfa>
 8005122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005126:	2b00      	cmp	r3, #0
 8005128:	d09d      	beq.n	8005066 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800512a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2220      	movs	r2, #32
 8005138:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f043 0304 	orr.w	r3, r3, #4
 8005140:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800516a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00b      	beq.n	8005194 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	f043 0308 	orr.w	r3, r3, #8
 8005182:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800518c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80051b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01c      	beq.n	80051f8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff fe56 	bl	8004e70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <I2C_IsErrorOccurred+0x1d4>)
 80051d0:	400b      	ands	r3, r1
 80051d2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	431a      	orrs	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80051f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3728      	adds	r7, #40	; 0x28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	fe00e800 	.word	0xfe00e800

08005208 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	460b      	mov	r3, r1
 8005214:	817b      	strh	r3, [r7, #10]
 8005216:	4613      	mov	r3, r2
 8005218:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800521a:	897b      	ldrh	r3, [r7, #10]
 800521c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005220:	7a7b      	ldrb	r3, [r7, #9]
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005228:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	4313      	orrs	r3, r2
 8005232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005236:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	0d5b      	lsrs	r3, r3, #21
 8005242:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005246:	4b08      	ldr	r3, [pc, #32]	; (8005268 <I2C_TransferConfig+0x60>)
 8005248:	430b      	orrs	r3, r1
 800524a:	43db      	mvns	r3, r3
 800524c:	ea02 0103 	and.w	r1, r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	03ff63ff 	.word	0x03ff63ff

0800526c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b20      	cmp	r3, #32
 8005280:	d138      	bne.n	80052f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800528c:	2302      	movs	r3, #2
 800528e:	e032      	b.n	80052f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	; 0x24
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6819      	ldr	r1, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b20      	cmp	r3, #32
 8005316:	d139      	bne.n	800538c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005322:	2302      	movs	r3, #2
 8005324:	e033      	b.n	800538e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2224      	movs	r2, #36	; 0x24
 8005332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005354:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	e000      	b.n	800538e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80053a4:	4b29      	ldr	r3, [pc, #164]	; (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	2b06      	cmp	r3, #6
 80053ae:	d00a      	beq.n	80053c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80053b0:	4b26      	ldr	r3, [pc, #152]	; (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d001      	beq.n	80053c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e040      	b.n	8005444 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e03e      	b.n	8005444 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80053c6:	4b21      	ldr	r3, [pc, #132]	; (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80053ce:	491f      	ldr	r1, [pc, #124]	; (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80053d6:	f7fc fc49 	bl	8001c6c <HAL_GetTick>
 80053da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053dc:	e009      	b.n	80053f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053de:	f7fc fc45 	bl	8001c6c <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ec:	d901      	bls.n	80053f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e028      	b.n	8005444 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053f2:	4b16      	ldr	r3, [pc, #88]	; (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fe:	d1ee      	bne.n	80053de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b1e      	cmp	r3, #30
 8005404:	d008      	beq.n	8005418 <HAL_PWREx_ConfigSupply+0x7c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b2e      	cmp	r3, #46	; 0x2e
 800540a:	d005      	beq.n	8005418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b1d      	cmp	r3, #29
 8005410:	d002      	beq.n	8005418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b2d      	cmp	r3, #45	; 0x2d
 8005416:	d114      	bne.n	8005442 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005418:	f7fc fc28 	bl	8001c6c <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800541e:	e009      	b.n	8005434 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005420:	f7fc fc24 	bl	8001c6c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800542e:	d901      	bls.n	8005434 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e007      	b.n	8005444 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d1ee      	bne.n	8005420 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	58024800 	.word	0x58024800

08005450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08c      	sub	sp, #48	; 0x30
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e3f4      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80b3 	beq.w	80055d6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005470:	4b95      	ldr	r3, [pc, #596]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800547a:	4b93      	ldr	r3, [pc, #588]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	2b10      	cmp	r3, #16
 8005484:	d007      	beq.n	8005496 <HAL_RCC_OscConfig+0x46>
 8005486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005488:	2b18      	cmp	r3, #24
 800548a:	d112      	bne.n	80054b2 <HAL_RCC_OscConfig+0x62>
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d10d      	bne.n	80054b2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005496:	4b8c      	ldr	r3, [pc, #560]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 8098 	beq.w	80055d4 <HAL_RCC_OscConfig+0x184>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f040 8093 	bne.w	80055d4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e3cc      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ba:	d106      	bne.n	80054ca <HAL_RCC_OscConfig+0x7a>
 80054bc:	4b82      	ldr	r3, [pc, #520]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a81      	ldr	r2, [pc, #516]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e058      	b.n	800557c <HAL_RCC_OscConfig+0x12c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d112      	bne.n	80054f8 <HAL_RCC_OscConfig+0xa8>
 80054d2:	4b7d      	ldr	r3, [pc, #500]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a7c      	ldr	r2, [pc, #496]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4b7a      	ldr	r3, [pc, #488]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a79      	ldr	r2, [pc, #484]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b77      	ldr	r3, [pc, #476]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a76      	ldr	r2, [pc, #472]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e041      	b.n	800557c <HAL_RCC_OscConfig+0x12c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005500:	d112      	bne.n	8005528 <HAL_RCC_OscConfig+0xd8>
 8005502:	4b71      	ldr	r3, [pc, #452]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a70      	ldr	r2, [pc, #448]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b6e      	ldr	r3, [pc, #440]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a6d      	ldr	r2, [pc, #436]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005514:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	4b6b      	ldr	r3, [pc, #428]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6a      	ldr	r2, [pc, #424]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e029      	b.n	800557c <HAL_RCC_OscConfig+0x12c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005530:	d112      	bne.n	8005558 <HAL_RCC_OscConfig+0x108>
 8005532:	4b65      	ldr	r3, [pc, #404]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a64      	ldr	r2, [pc, #400]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	4b62      	ldr	r3, [pc, #392]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a61      	ldr	r2, [pc, #388]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4b5f      	ldr	r3, [pc, #380]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a5e      	ldr	r2, [pc, #376]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e011      	b.n	800557c <HAL_RCC_OscConfig+0x12c>
 8005558:	4b5b      	ldr	r3, [pc, #364]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a5a      	ldr	r2, [pc, #360]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800555e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b58      	ldr	r3, [pc, #352]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a57      	ldr	r2, [pc, #348]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800556a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	4b55      	ldr	r3, [pc, #340]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a54      	ldr	r2, [pc, #336]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005576:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800557a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d013      	beq.n	80055ac <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fc fb72 	bl	8001c6c <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800558c:	f7fc fb6e 	bl	8001c6c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e356      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800559e:	4b4a      	ldr	r3, [pc, #296]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x13c>
 80055aa:	e014      	b.n	80055d6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fc fb5e 	bl	8001c6c <HAL_GetTick>
 80055b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fc fb5a 	bl	8001c6c <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e342      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055c6:	4b40      	ldr	r3, [pc, #256]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f0      	bne.n	80055b4 <HAL_RCC_OscConfig+0x164>
 80055d2:	e000      	b.n	80055d6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 808d 	beq.w	80056fe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e4:	4b38      	ldr	r3, [pc, #224]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055ee:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_RCC_OscConfig+0x1ba>
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	2b18      	cmp	r3, #24
 80055fe:	d137      	bne.n	8005670 <HAL_RCC_OscConfig+0x220>
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d132      	bne.n	8005670 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800560a:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_RCC_OscConfig+0x1d2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e314      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005622:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 0219 	bic.w	r2, r3, #25
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4926      	ldr	r1, [pc, #152]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005630:	4313      	orrs	r3, r2
 8005632:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005634:	f7fc fb1a 	bl	8001c6c <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563c:	f7fc fb16 	bl	8001c6c <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e2fe      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800564e:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	4917      	ldr	r1, [pc, #92]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800566a:	4313      	orrs	r3, r2
 800566c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800566e:	e046      	b.n	80056fe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d029      	beq.n	80056cc <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f023 0219 	bic.w	r2, r3, #25
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4910      	ldr	r1, [pc, #64]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568a:	f7fc faef 	bl	8001c6c <HAL_GetTick>
 800568e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005692:	f7fc faeb 	bl	8001c6c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e2d3      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056a4:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	061b      	lsls	r3, r3, #24
 80056be:	4902      	ldr	r1, [pc, #8]	; (80056c8 <HAL_RCC_OscConfig+0x278>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	604b      	str	r3, [r1, #4]
 80056c4:	e01b      	b.n	80056fe <HAL_RCC_OscConfig+0x2ae>
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056cc:	4b97      	ldr	r3, [pc, #604]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a96      	ldr	r2, [pc, #600]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fc fac8 	bl	8001c6c <HAL_GetTick>
 80056dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e0:	f7fc fac4 	bl	8001c6c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e2ac      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056f2:	4b8e      	ldr	r3, [pc, #568]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06a      	beq.n	80057e0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800570a:	4b88      	ldr	r3, [pc, #544]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005712:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005714:	4b85      	ldr	r3, [pc, #532]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d007      	beq.n	8005730 <HAL_RCC_OscConfig+0x2e0>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b18      	cmp	r3, #24
 8005724:	d11b      	bne.n	800575e <HAL_RCC_OscConfig+0x30e>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d116      	bne.n	800575e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005730:	4b7e      	ldr	r3, [pc, #504]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_RCC_OscConfig+0x2f8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	2b80      	cmp	r3, #128	; 0x80
 8005742:	d001      	beq.n	8005748 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e281      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005748:	4b78      	ldr	r3, [pc, #480]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	4975      	ldr	r1, [pc, #468]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005758:	4313      	orrs	r3, r2
 800575a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800575c:	e040      	b.n	80057e0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d023      	beq.n	80057ae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005766:	4b71      	ldr	r3, [pc, #452]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a70      	ldr	r2, [pc, #448]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 800576c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fc fa7b 	bl	8001c6c <HAL_GetTick>
 8005776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800577a:	f7fc fa77 	bl	8001c6c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e25f      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800578c:	4b67      	ldr	r3, [pc, #412]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005798:	4b64      	ldr	r3, [pc, #400]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	4961      	ldr	r1, [pc, #388]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60cb      	str	r3, [r1, #12]
 80057ac:	e018      	b.n	80057e0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80057ae:	4b5f      	ldr	r3, [pc, #380]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a5e      	ldr	r2, [pc, #376]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ba:	f7fc fa57 	bl	8001c6c <HAL_GetTick>
 80057be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057c2:	f7fc fa53 	bl	8001c6c <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e23b      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057d4:	4b55      	ldr	r3, [pc, #340]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1f0      	bne.n	80057c2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d036      	beq.n	800585a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d019      	beq.n	8005828 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057f4:	4b4d      	ldr	r3, [pc, #308]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f8:	4a4c      	ldr	r2, [pc, #304]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005800:	f7fc fa34 	bl	8001c6c <HAL_GetTick>
 8005804:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005808:	f7fc fa30 	bl	8001c6c <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e218      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800581a:	4b44      	ldr	r3, [pc, #272]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 800581c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x3b8>
 8005826:	e018      	b.n	800585a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005828:	4b40      	ldr	r3, [pc, #256]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 800582a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582c:	4a3f      	ldr	r2, [pc, #252]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7fc fa1a 	bl	8001c6c <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800583c:	f7fc fa16 	bl	8001c6c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e1fe      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800584e:	4b37      	ldr	r3, [pc, #220]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d036      	beq.n	80058d4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d019      	beq.n	80058a2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800586e:	4b2f      	ldr	r3, [pc, #188]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a2e      	ldr	r2, [pc, #184]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005878:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800587a:	f7fc f9f7 	bl	8001c6c <HAL_GetTick>
 800587e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005882:	f7fc f9f3 	bl	8001c6c <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e1db      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x432>
 80058a0:	e018      	b.n	80058d4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058a2:	4b22      	ldr	r3, [pc, #136]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a21      	ldr	r2, [pc, #132]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80058a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058ae:	f7fc f9dd 	bl	8001c6c <HAL_GetTick>
 80058b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058b6:	f7fc f9d9 	bl	8001c6c <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e1c1      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058c8:	4b18      	ldr	r3, [pc, #96]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f0      	bne.n	80058b6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80af 	beq.w	8005a40 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058e2:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_RCC_OscConfig+0x4e0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a12      	ldr	r2, [pc, #72]	; (8005930 <HAL_RCC_OscConfig+0x4e0>)
 80058e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ee:	f7fc f9bd 	bl	8001c6c <HAL_GetTick>
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058f6:	f7fc f9b9 	bl	8001c6c <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b64      	cmp	r3, #100	; 0x64
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e1a1      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005908:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_RCC_OscConfig+0x4e0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d10b      	bne.n	8005934 <HAL_RCC_OscConfig+0x4e4>
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	4a02      	ldr	r2, [pc, #8]	; (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	6713      	str	r3, [r2, #112]	; 0x70
 8005928:	e05b      	b.n	80059e2 <HAL_RCC_OscConfig+0x592>
 800592a:	bf00      	nop
 800592c:	58024400 	.word	0x58024400
 8005930:	58024800 	.word	0x58024800
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d112      	bne.n	8005962 <HAL_RCC_OscConfig+0x512>
 800593c:	4b9d      	ldr	r3, [pc, #628]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	4a9c      	ldr	r2, [pc, #624]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	; 0x70
 8005948:	4b9a      	ldr	r3, [pc, #616]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	4a99      	ldr	r2, [pc, #612]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800594e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005952:	6713      	str	r3, [r2, #112]	; 0x70
 8005954:	4b97      	ldr	r3, [pc, #604]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	4a96      	ldr	r2, [pc, #600]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	6713      	str	r3, [r2, #112]	; 0x70
 8005960:	e03f      	b.n	80059e2 <HAL_RCC_OscConfig+0x592>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b05      	cmp	r3, #5
 8005968:	d112      	bne.n	8005990 <HAL_RCC_OscConfig+0x540>
 800596a:	4b92      	ldr	r3, [pc, #584]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596e:	4a91      	ldr	r2, [pc, #580]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005970:	f043 0304 	orr.w	r3, r3, #4
 8005974:	6713      	str	r3, [r2, #112]	; 0x70
 8005976:	4b8f      	ldr	r3, [pc, #572]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	4a8e      	ldr	r2, [pc, #568]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800597c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005980:	6713      	str	r3, [r2, #112]	; 0x70
 8005982:	4b8c      	ldr	r3, [pc, #560]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005986:	4a8b      	ldr	r2, [pc, #556]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	6713      	str	r3, [r2, #112]	; 0x70
 800598e:	e028      	b.n	80059e2 <HAL_RCC_OscConfig+0x592>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b85      	cmp	r3, #133	; 0x85
 8005996:	d112      	bne.n	80059be <HAL_RCC_OscConfig+0x56e>
 8005998:	4b86      	ldr	r3, [pc, #536]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	4a85      	ldr	r2, [pc, #532]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800599e:	f043 0304 	orr.w	r3, r3, #4
 80059a2:	6713      	str	r3, [r2, #112]	; 0x70
 80059a4:	4b83      	ldr	r3, [pc, #524]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	4a82      	ldr	r2, [pc, #520]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ae:	6713      	str	r3, [r2, #112]	; 0x70
 80059b0:	4b80      	ldr	r3, [pc, #512]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	4a7f      	ldr	r2, [pc, #508]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	6713      	str	r3, [r2, #112]	; 0x70
 80059bc:	e011      	b.n	80059e2 <HAL_RCC_OscConfig+0x592>
 80059be:	4b7d      	ldr	r3, [pc, #500]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	4a7c      	ldr	r2, [pc, #496]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ca:	4b7a      	ldr	r3, [pc, #488]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	4a79      	ldr	r2, [pc, #484]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059d0:	f023 0304 	bic.w	r3, r3, #4
 80059d4:	6713      	str	r3, [r2, #112]	; 0x70
 80059d6:	4b77      	ldr	r3, [pc, #476]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	4a76      	ldr	r2, [pc, #472]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d015      	beq.n	8005a16 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ea:	f7fc f93f 	bl	8001c6c <HAL_GetTick>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059f0:	e00a      	b.n	8005a08 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f2:	f7fc f93b 	bl	8001c6c <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e121      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a08:	4b6a      	ldr	r3, [pc, #424]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0ee      	beq.n	80059f2 <HAL_RCC_OscConfig+0x5a2>
 8005a14:	e014      	b.n	8005a40 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a16:	f7fc f929 	bl	8001c6c <HAL_GetTick>
 8005a1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a1c:	e00a      	b.n	8005a34 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7fc f925 	bl	8001c6c <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e10b      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a34:	4b5f      	ldr	r3, [pc, #380]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ee      	bne.n	8005a1e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8100 	beq.w	8005c4a <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a4a:	4b5a      	ldr	r3, [pc, #360]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a52:	2b18      	cmp	r3, #24
 8005a54:	f000 80bb 	beq.w	8005bce <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	f040 8095 	bne.w	8005b8c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a62:	4b54      	ldr	r3, [pc, #336]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a53      	ldr	r2, [pc, #332]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fc f8fd 	bl	8001c6c <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a76:	f7fc f8f9 	bl	8001c6c <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e0e1      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a88:	4b4a      	ldr	r3, [pc, #296]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f0      	bne.n	8005a76 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a94:	4b47      	ldr	r3, [pc, #284]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a98:	4b47      	ldr	r3, [pc, #284]	; (8005bb8 <HAL_RCC_OscConfig+0x768>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005aa4:	0112      	lsls	r2, r2, #4
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	4942      	ldr	r1, [pc, #264]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	628b      	str	r3, [r1, #40]	; 0x28
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	3b01      	subs	r3, #1
 8005abe:	025b      	lsls	r3, r3, #9
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	061b      	lsls	r3, r3, #24
 8005ada:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ade:	4935      	ldr	r1, [pc, #212]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005ae4:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4a32      	ldr	r2, [pc, #200]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005af0:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af4:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <HAL_RCC_OscConfig+0x76c>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005afc:	00d2      	lsls	r2, r2, #3
 8005afe:	492d      	ldr	r1, [pc, #180]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b04:	4b2b      	ldr	r3, [pc, #172]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	f023 020c 	bic.w	r2, r3, #12
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	4928      	ldr	r1, [pc, #160]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b16:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	f023 0202 	bic.w	r2, r3, #2
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	4924      	ldr	r1, [pc, #144]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b28:	4b22      	ldr	r3, [pc, #136]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a21      	ldr	r2, [pc, #132]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b34:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b40:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005b4c:	4b19      	ldr	r3, [pc, #100]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b58:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc f882 	bl	8001c6c <HAL_GetTick>
 8005b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b6c:	f7fc f87e 	bl	8001c6c <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e066      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x71c>
 8005b8a:	e05e      	b.n	8005c4a <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a08      	ldr	r2, [pc, #32]	; (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fc f868 	bl	8001c6c <HAL_GetTick>
 8005b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b9e:	e00f      	b.n	8005bc0 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fc f864 	bl	8001c6c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d908      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e04c      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
 8005bb2:	bf00      	nop
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	fffffc0c 	.word	0xfffffc0c
 8005bbc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc0:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_RCC_OscConfig+0x804>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e9      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x750>
 8005bcc:	e03d      	b.n	8005c4a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005bce:	4b21      	ldr	r3, [pc, #132]	; (8005c54 <HAL_RCC_OscConfig+0x804>)
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bd4:	4b1f      	ldr	r3, [pc, #124]	; (8005c54 <HAL_RCC_OscConfig+0x804>)
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d031      	beq.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f003 0203 	and.w	r2, r3, #3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d12a      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d122      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d11a      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	0a5b      	lsrs	r3, r3, #9
 8005c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d111      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d108      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	0e1b      	lsrs	r3, r3, #24
 8005c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d001      	beq.n	8005c4a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3730      	adds	r7, #48	; 0x30
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	58024400 	.word	0x58024400

08005c58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e19c      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c6c:	4b8a      	ldr	r3, [pc, #552]	; (8005e98 <HAL_RCC_ClockConfig+0x240>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d910      	bls.n	8005c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7a:	4b87      	ldr	r3, [pc, #540]	; (8005e98 <HAL_RCC_ClockConfig+0x240>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f023 020f 	bic.w	r2, r3, #15
 8005c82:	4985      	ldr	r1, [pc, #532]	; (8005e98 <HAL_RCC_ClockConfig+0x240>)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8a:	4b83      	ldr	r3, [pc, #524]	; (8005e98 <HAL_RCC_ClockConfig+0x240>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e184      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d010      	beq.n	8005cca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	4b7b      	ldr	r3, [pc, #492]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d908      	bls.n	8005cca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cb8:	4b78      	ldr	r3, [pc, #480]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	4975      	ldr	r1, [pc, #468]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d010      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	4b70      	ldr	r3, [pc, #448]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d908      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ce6:	4b6d      	ldr	r3, [pc, #436]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	496a      	ldr	r1, [pc, #424]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	4b64      	ldr	r3, [pc, #400]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d908      	bls.n	8005d26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d14:	4b61      	ldr	r3, [pc, #388]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	495e      	ldr	r1, [pc, #376]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d010      	beq.n	8005d54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69da      	ldr	r2, [r3, #28]
 8005d36:	4b59      	ldr	r3, [pc, #356]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d908      	bls.n	8005d54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d42:	4b56      	ldr	r3, [pc, #344]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	4953      	ldr	r1, [pc, #332]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d010      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	4b4d      	ldr	r3, [pc, #308]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d908      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d70:	4b4a      	ldr	r3, [pc, #296]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	f023 020f 	bic.w	r2, r3, #15
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4947      	ldr	r1, [pc, #284]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d055      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d8e:	4b43      	ldr	r3, [pc, #268]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4940      	ldr	r1, [pc, #256]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d107      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005da8:	4b3c      	ldr	r3, [pc, #240]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d121      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0f6      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d107      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dc0:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d115      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0ea      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d107      	bne.n	8005de8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dd8:	4b30      	ldr	r3, [pc, #192]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0de      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005de8:	4b2c      	ldr	r3, [pc, #176]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0d6      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005df8:	4b28      	ldr	r3, [pc, #160]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f023 0207 	bic.w	r2, r3, #7
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4925      	ldr	r1, [pc, #148]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0a:	f7fb ff2f 	bl	8001c6c <HAL_GetTick>
 8005e0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e12:	f7fb ff2b 	bl	8001c6c <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e0be      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e28:	4b1c      	ldr	r3, [pc, #112]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d1eb      	bne.n	8005e12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d010      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d208      	bcs.n	8005e68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e56:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f023 020f 	bic.w	r2, r3, #15
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	490e      	ldr	r1, [pc, #56]	; (8005e9c <HAL_RCC_ClockConfig+0x244>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_ClockConfig+0x240>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d214      	bcs.n	8005ea0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e76:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <HAL_RCC_ClockConfig+0x240>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f023 020f 	bic.w	r2, r3, #15
 8005e7e:	4906      	ldr	r1, [pc, #24]	; (8005e98 <HAL_RCC_ClockConfig+0x240>)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e86:	4b04      	ldr	r3, [pc, #16]	; (8005e98 <HAL_RCC_ClockConfig+0x240>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d005      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e086      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x34e>
 8005e98:	52002000 	.word	0x52002000
 8005e9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d010      	beq.n	8005ece <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d208      	bcs.n	8005ece <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ebc:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	4939      	ldr	r1, [pc, #228]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d010      	beq.n	8005efc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	4b34      	ldr	r3, [pc, #208]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d208      	bcs.n	8005efc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005eea:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	492e      	ldr	r1, [pc, #184]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	4b28      	ldr	r3, [pc, #160]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d208      	bcs.n	8005f2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	4922      	ldr	r1, [pc, #136]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d010      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69da      	ldr	r2, [r3, #28]
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d208      	bcs.n	8005f58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f46:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	4917      	ldr	r1, [pc, #92]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005f58:	f000 f834 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	4912      	ldr	r1, [pc, #72]	; (8005fb4 <HAL_RCC_ClockConfig+0x35c>)
 8005f6a:	5ccb      	ldrb	r3, [r1, r3]
 8005f6c:	f003 031f 	and.w	r3, r3, #31
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
 8005f74:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005f76:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <HAL_RCC_ClockConfig+0x358>)
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	4a0d      	ldr	r2, [pc, #52]	; (8005fb4 <HAL_RCC_ClockConfig+0x35c>)
 8005f80:	5cd3      	ldrb	r3, [r2, r3]
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8c:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <HAL_RCC_ClockConfig+0x360>)
 8005f8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f90:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <HAL_RCC_ClockConfig+0x364>)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f96:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <HAL_RCC_ClockConfig+0x368>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fb fe1c 	bl	8001bd8 <HAL_InitTick>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	0800c00c 	.word	0x0800c00c
 8005fb8:	24000004 	.word	0x24000004
 8005fbc:	24000000 	.word	0x24000000
 8005fc0:	24000008 	.word	0x24000008

08005fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b089      	sub	sp, #36	; 0x24
 8005fc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fca:	4bb3      	ldr	r3, [pc, #716]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fd2:	2b18      	cmp	r3, #24
 8005fd4:	f200 8155 	bhi.w	8006282 <HAL_RCC_GetSysClockFreq+0x2be>
 8005fd8:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	08006045 	.word	0x08006045
 8005fe4:	08006283 	.word	0x08006283
 8005fe8:	08006283 	.word	0x08006283
 8005fec:	08006283 	.word	0x08006283
 8005ff0:	08006283 	.word	0x08006283
 8005ff4:	08006283 	.word	0x08006283
 8005ff8:	08006283 	.word	0x08006283
 8005ffc:	08006283 	.word	0x08006283
 8006000:	0800606b 	.word	0x0800606b
 8006004:	08006283 	.word	0x08006283
 8006008:	08006283 	.word	0x08006283
 800600c:	08006283 	.word	0x08006283
 8006010:	08006283 	.word	0x08006283
 8006014:	08006283 	.word	0x08006283
 8006018:	08006283 	.word	0x08006283
 800601c:	08006283 	.word	0x08006283
 8006020:	08006071 	.word	0x08006071
 8006024:	08006283 	.word	0x08006283
 8006028:	08006283 	.word	0x08006283
 800602c:	08006283 	.word	0x08006283
 8006030:	08006283 	.word	0x08006283
 8006034:	08006283 	.word	0x08006283
 8006038:	08006283 	.word	0x08006283
 800603c:	08006283 	.word	0x08006283
 8006040:	08006077 	.word	0x08006077
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006044:	4b94      	ldr	r3, [pc, #592]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006050:	4b91      	ldr	r3, [pc, #580]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	08db      	lsrs	r3, r3, #3
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	4a90      	ldr	r2, [pc, #576]	; (800629c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
 8006060:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006062:	e111      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006064:	4b8d      	ldr	r3, [pc, #564]	; (800629c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006066:	61bb      	str	r3, [r7, #24]
    break;
 8006068:	e10e      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800606a:	4b8d      	ldr	r3, [pc, #564]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800606c:	61bb      	str	r3, [r7, #24]
    break;
 800606e:	e10b      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006070:	4b8c      	ldr	r3, [pc, #560]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006072:	61bb      	str	r3, [r7, #24]
    break;
 8006074:	e108      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006076:	4b88      	ldr	r3, [pc, #544]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006080:	4b85      	ldr	r3, [pc, #532]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800608a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800608c:	4b82      	ldr	r3, [pc, #520]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006096:	4b80      	ldr	r3, [pc, #512]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	08db      	lsrs	r3, r3, #3
 800609c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	fb02 f303 	mul.w	r3, r2, r3
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80e1 	beq.w	800627c <HAL_RCC_GetSysClockFreq+0x2b8>
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	f000 8083 	beq.w	80061c8 <HAL_RCC_GetSysClockFreq+0x204>
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	f200 80a1 	bhi.w	800620c <HAL_RCC_GetSysClockFreq+0x248>
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_RCC_GetSysClockFreq+0x114>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d056      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0x1c0>
 80060d6:	e099      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060d8:	4b6f      	ldr	r3, [pc, #444]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02d      	beq.n	8006140 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060e4:	4b6c      	ldr	r3, [pc, #432]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	4a6b      	ldr	r2, [pc, #428]	; (800629c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
 80060f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610e:	4b62      	ldr	r3, [pc, #392]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006122:	eddf 5a61 	vldr	s11, [pc, #388]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800613e:	e087      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80062ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800614e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006152:	4b51      	ldr	r3, [pc, #324]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006162:	ed97 6a02 	vldr	s12, [r7, #8]
 8006166:	eddf 5a50 	vldr	s11, [pc, #320]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800616a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800617a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006182:	e065      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80062b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006196:	4b40      	ldr	r3, [pc, #256]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061c6:	e043      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80062b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80061d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061da:	4b2f      	ldr	r3, [pc, #188]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800620a:	e021      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006216:	eddf 6a26 	vldr	s13, [pc, #152]	; 80062b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800621a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800621e:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800622e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006232:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800623e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800624e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	0a5b      	lsrs	r3, r3, #9
 8006256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800625a:	3301      	adds	r3, #1
 800625c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	ee07 3a90 	vmov	s15, r3
 8006264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006268:	edd7 6a07 	vldr	s13, [r7, #28]
 800626c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006274:	ee17 3a90 	vmov	r3, s15
 8006278:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800627a:	e005      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	61bb      	str	r3, [r7, #24]
    break;
 8006280:	e002      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006282:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006284:	61bb      	str	r3, [r7, #24]
    break;
 8006286:	bf00      	nop
  }

  return sysclockfreq;
 8006288:	69bb      	ldr	r3, [r7, #24]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3724      	adds	r7, #36	; 0x24
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
 800629c:	03d09000 	.word	0x03d09000
 80062a0:	003d0900 	.word	0x003d0900
 80062a4:	007a1200 	.word	0x007a1200
 80062a8:	46000000 	.word	0x46000000
 80062ac:	4c742400 	.word	0x4c742400
 80062b0:	4a742400 	.word	0x4a742400
 80062b4:	4af42400 	.word	0x4af42400

080062b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80062be:	f7ff fe81 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 80062c2:	4602      	mov	r2, r0
 80062c4:	4b10      	ldr	r3, [pc, #64]	; (8006308 <HAL_RCC_GetHCLKFreq+0x50>)
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	490f      	ldr	r1, [pc, #60]	; (800630c <HAL_RCC_GetHCLKFreq+0x54>)
 80062d0:	5ccb      	ldrb	r3, [r1, r3]
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	fa22 f303 	lsr.w	r3, r2, r3
 80062da:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <HAL_RCC_GetHCLKFreq+0x50>)
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	4a09      	ldr	r2, [pc, #36]	; (800630c <HAL_RCC_GetHCLKFreq+0x54>)
 80062e6:	5cd3      	ldrb	r3, [r2, r3]
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	fa22 f303 	lsr.w	r3, r2, r3
 80062f2:	4a07      	ldr	r2, [pc, #28]	; (8006310 <HAL_RCC_GetHCLKFreq+0x58>)
 80062f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062f6:	4a07      	ldr	r2, [pc, #28]	; (8006314 <HAL_RCC_GetHCLKFreq+0x5c>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80062fc:	4b04      	ldr	r3, [pc, #16]	; (8006310 <HAL_RCC_GetHCLKFreq+0x58>)
 80062fe:	681b      	ldr	r3, [r3, #0]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	58024400 	.word	0x58024400
 800630c:	0800c00c 	.word	0x0800c00c
 8006310:	24000004 	.word	0x24000004
 8006314:	24000000 	.word	0x24000000

08006318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800631c:	f7ff ffcc 	bl	80062b8 <HAL_RCC_GetHCLKFreq>
 8006320:	4602      	mov	r2, r0
 8006322:	4b06      	ldr	r3, [pc, #24]	; (800633c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	091b      	lsrs	r3, r3, #4
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	4904      	ldr	r1, [pc, #16]	; (8006340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800632e:	5ccb      	ldrb	r3, [r1, r3]
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006338:	4618      	mov	r0, r3
 800633a:	bd80      	pop	{r7, pc}
 800633c:	58024400 	.word	0x58024400
 8006340:	0800c00c 	.word	0x0800c00c

08006344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006348:	f7ff ffb6 	bl	80062b8 <HAL_RCC_GetHCLKFreq>
 800634c:	4602      	mov	r2, r0
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	4904      	ldr	r1, [pc, #16]	; (800636c <HAL_RCC_GetPCLK2Freq+0x28>)
 800635a:	5ccb      	ldrb	r3, [r1, r3]
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006364:	4618      	mov	r0, r3
 8006366:	bd80      	pop	{r7, pc}
 8006368:	58024400 	.word	0x58024400
 800636c:	0800c00c 	.word	0x0800c00c

08006370 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006378:	2300      	movs	r3, #0
 800637a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800637c:	2300      	movs	r3, #0
 800637e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d03f      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006390:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006394:	d02a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006396:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800639a:	d824      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800639c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a0:	d018      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a6:	d81e      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80063ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b0:	d007      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80063b2:	e018      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b4:	4b9f      	ldr	r3, [pc, #636]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	4a9e      	ldr	r2, [pc, #632]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80063c0:	e015      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	2102      	movs	r1, #2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 f99b 	bl	8007704 <RCCEx_PLL2_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80063d2:	e00c      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3324      	adds	r3, #36	; 0x24
 80063d8:	2102      	movs	r1, #2
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 fa44 	bl	8007868 <RCCEx_PLL3_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80063e4:	e003      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ea:	e000      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80063ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d109      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80063f4:	4b8f      	ldr	r3, [pc, #572]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006400:	498c      	ldr	r1, [pc, #560]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006402:	4313      	orrs	r3, r2
 8006404:	650b      	str	r3, [r1, #80]	; 0x50
 8006406:	e001      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d03d      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641c:	2b04      	cmp	r3, #4
 800641e:	d826      	bhi.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	0800643d 	.word	0x0800643d
 800642c:	0800644b 	.word	0x0800644b
 8006430:	0800645d 	.word	0x0800645d
 8006434:	08006475 	.word	0x08006475
 8006438:	08006475 	.word	0x08006475
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800643c:	4b7d      	ldr	r3, [pc, #500]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	4a7c      	ldr	r2, [pc, #496]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006446:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006448:	e015      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3304      	adds	r3, #4
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f001 f957 	bl	8007704 <RCCEx_PLL2_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800645a:	e00c      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3324      	adds	r3, #36	; 0x24
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f001 fa00 	bl	8007868 <RCCEx_PLL3_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800646c:	e003      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	75fb      	strb	r3, [r7, #23]
      break;
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800647c:	4b6d      	ldr	r3, [pc, #436]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	f023 0207 	bic.w	r2, r3, #7
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006488:	496a      	ldr	r1, [pc, #424]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800648a:	4313      	orrs	r3, r2
 800648c:	650b      	str	r3, [r1, #80]	; 0x50
 800648e:	e001      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800649c:	2b00      	cmp	r3, #0
 800649e:	d04a      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80064a8:	d031      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80064aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80064ae:	d82b      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80064b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b4:	d02d      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80064b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ba:	d825      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80064bc:	2bc0      	cmp	r3, #192	; 0xc0
 80064be:	d02a      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80064c0:	2bc0      	cmp	r3, #192	; 0xc0
 80064c2:	d821      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80064c4:	2b80      	cmp	r3, #128	; 0x80
 80064c6:	d016      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80064c8:	2b80      	cmp	r3, #128	; 0x80
 80064ca:	d81d      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d007      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80064d4:	e018      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d6:	4b57      	ldr	r3, [pc, #348]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	4a56      	ldr	r2, [pc, #344]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80064e2:	e019      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f90a 	bl	8007704 <RCCEx_PLL2_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80064f4:	e010      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3324      	adds	r3, #36	; 0x24
 80064fa:	2100      	movs	r1, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 f9b3 	bl	8007868 <RCCEx_PLL3_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006506:	e007      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
      break;
 800650c:	e004      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800650e:	bf00      	nop
 8006510:	e002      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006512:	bf00      	nop
 8006514:	e000      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800651e:	4b45      	ldr	r3, [pc, #276]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006522:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652a:	4942      	ldr	r1, [pc, #264]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800652c:	4313      	orrs	r3, r2
 800652e:	650b      	str	r3, [r1, #80]	; 0x50
 8006530:	e001      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653e:	2b00      	cmp	r3, #0
 8006540:	d04f      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006546:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800654a:	d036      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800654c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006550:	d830      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006556:	d032      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8006558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655c:	d82a      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800655e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006562:	d02e      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8006564:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006568:	d824      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800656a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656e:	d018      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006574:	d81e      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800657a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657e:	d007      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8006580:	e018      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006582:	4b2c      	ldr	r3, [pc, #176]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	4a2b      	ldr	r2, [pc, #172]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800658c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800658e:	e019      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f001 f8b4 	bl	8007704 <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80065a0:	e010      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3324      	adds	r3, #36	; 0x24
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f001 f95d 	bl	8007868 <RCCEx_PLL3_Config>
 80065ae:	4603      	mov	r3, r0
 80065b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80065b2:	e007      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	75fb      	strb	r3, [r7, #23]
      break;
 80065b8:	e004      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80065ba:	bf00      	nop
 80065bc:	e002      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80065be:	bf00      	nop
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80065c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80065ca:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80065cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ce:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d6:	4917      	ldr	r1, [pc, #92]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	650b      	str	r3, [r1, #80]	; 0x50
 80065dc:	e001      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d034      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f2:	2b30      	cmp	r3, #48	; 0x30
 80065f4:	d01c      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80065f6:	2b30      	cmp	r3, #48	; 0x30
 80065f8:	d817      	bhi.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d00c      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d813      	bhi.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d018      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8006606:	2b10      	cmp	r3, #16
 8006608:	d10f      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	4a09      	ldr	r2, [pc, #36]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006616:	e010      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	2102      	movs	r1, #2
 800661e:	4618      	mov	r0, r3
 8006620:	f001 f870 	bl	8007704 <RCCEx_PLL2_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006628:	e007      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	75fb      	strb	r3, [r7, #23]
      break;
 800662e:	e004      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8006630:	bf00      	nop
 8006632:	e002      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006634:	58024400 	.word	0x58024400
      break;
 8006638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006640:	4b9b      	ldr	r3, [pc, #620]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006644:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664c:	4998      	ldr	r1, [pc, #608]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800664e:	4313      	orrs	r3, r2
 8006650:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006652:	e001      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006654:	7dfb      	ldrb	r3, [r7, #23]
 8006656:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d047      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800666c:	d030      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800666e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006672:	d82a      	bhi.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006674:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006678:	d02c      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800667a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800667e:	d824      	bhi.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006684:	d018      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800668a:	d81e      	bhi.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006694:	d007      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006696:	e018      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006698:	4b85      	ldr	r3, [pc, #532]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	4a84      	ldr	r2, [pc, #528]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800669e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066a4:	e017      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3304      	adds	r3, #4
 80066aa:	2100      	movs	r1, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 f829 	bl	8007704 <RCCEx_PLL2_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066b6:	e00e      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3324      	adds	r3, #36	; 0x24
 80066bc:	2100      	movs	r1, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 f8d2 	bl	8007868 <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066c8:	e005      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]
      break;
 80066ce:	e002      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80066d0:	bf00      	nop
 80066d2:	e000      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80066d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d109      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066dc:	4b74      	ldr	r3, [pc, #464]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80066de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e8:	4971      	ldr	r1, [pc, #452]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	650b      	str	r3, [r1, #80]	; 0x50
 80066ee:	e001      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d049      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006708:	d02e      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800670a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800670e:	d828      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006714:	d02a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006716:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800671a:	d822      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800671c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006720:	d026      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006722:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006726:	d81c      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800672c:	d010      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800672e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006732:	d816      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01d      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673c:	d111      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3304      	adds	r3, #4
 8006742:	2101      	movs	r1, #1
 8006744:	4618      	mov	r0, r3
 8006746:	f000 ffdd 	bl	8007704 <RCCEx_PLL2_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800674e:	e012      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	2101      	movs	r1, #1
 8006756:	4618      	mov	r0, r3
 8006758:	f001 f886 	bl	8007868 <RCCEx_PLL3_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006760:	e009      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
      break;
 8006766:	e006      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006768:	bf00      	nop
 800676a:	e004      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800676c:	bf00      	nop
 800676e:	e002      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006770:	bf00      	nop
 8006772:	e000      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d109      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800677c:	4b4c      	ldr	r3, [pc, #304]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006780:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006788:	4949      	ldr	r1, [pc, #292]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800678a:	4313      	orrs	r3, r2
 800678c:	650b      	str	r3, [r1, #80]	; 0x50
 800678e:	e001      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d053      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80067aa:	d034      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80067ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80067b0:	d82e      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80067b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067b6:	d030      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80067b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067bc:	d828      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80067be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c2:	d02c      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c8:	d822      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80067ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067ce:	d028      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80067d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067d4:	d81c      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80067d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067da:	d010      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80067dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e0:	d816      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01f      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80067e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ea:	d111      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3304      	adds	r3, #4
 80067f0:	2101      	movs	r1, #1
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 ff86 	bl	8007704 <RCCEx_PLL2_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067fc:	e014      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3324      	adds	r3, #36	; 0x24
 8006802:	2101      	movs	r1, #1
 8006804:	4618      	mov	r0, r3
 8006806:	f001 f82f 	bl	8007868 <RCCEx_PLL3_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800680e:	e00b      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	75fb      	strb	r3, [r7, #23]
      break;
 8006814:	e008      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006816:	bf00      	nop
 8006818:	e006      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800681a:	bf00      	nop
 800681c:	e004      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800681e:	bf00      	nop
 8006820:	e002      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006822:	bf00      	nop
 8006824:	e000      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800682e:	4b20      	ldr	r3, [pc, #128]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006832:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800683c:	491c      	ldr	r1, [pc, #112]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800683e:	4313      	orrs	r3, r2
 8006840:	658b      	str	r3, [r1, #88]	; 0x58
 8006842:	e001      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d031      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685c:	d00e      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800685e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006862:	d814      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d015      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686c:	d10f      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800686e:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	4a0f      	ldr	r2, [pc, #60]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800687a:	e00c      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3304      	adds	r3, #4
 8006880:	2101      	movs	r1, #1
 8006882:	4618      	mov	r0, r3
 8006884:	f000 ff3e 	bl	8007704 <RCCEx_PLL2_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800688c:	e003      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
      break;
 8006892:	e000      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8006894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800689c:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800689e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a8:	4901      	ldr	r1, [pc, #4]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	650b      	str	r3, [r1, #80]	; 0x50
 80068ae:	e003      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80068b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d032      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d81b      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	0800690b 	.word	0x0800690b
 80068d8:	080068e5 	.word	0x080068e5
 80068dc:	080068f3 	.word	0x080068f3
 80068e0:	0800690b 	.word	0x0800690b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e4:	4bb2      	ldr	r3, [pc, #712]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	4ab1      	ldr	r2, [pc, #708]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80068ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068f0:	e00c      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3304      	adds	r3, #4
 80068f6:	2102      	movs	r1, #2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 ff03 	bl	8007704 <RCCEx_PLL2_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006902:	e003      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	75fb      	strb	r3, [r7, #23]
      break;
 8006908:	e000      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800690a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006912:	4ba7      	ldr	r3, [pc, #668]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006916:	f023 0203 	bic.w	r2, r3, #3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	49a4      	ldr	r1, [pc, #656]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006920:	4313      	orrs	r3, r2
 8006922:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006924:	e001      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 8086 	beq.w	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006938:	4b9e      	ldr	r3, [pc, #632]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a9d      	ldr	r2, [pc, #628]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800693e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006942:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006944:	f7fb f992 	bl	8001c6c <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800694a:	e009      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694c:	f7fb f98e 	bl	8001c6c <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b64      	cmp	r3, #100	; 0x64
 8006958:	d902      	bls.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	75fb      	strb	r3, [r7, #23]
        break;
 800695e:	e005      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006960:	4b94      	ldr	r3, [pc, #592]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0ef      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800696c:	7dfb      	ldrb	r3, [r7, #23]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d166      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006972:	4b8f      	ldr	r3, [pc, #572]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800697c:	4053      	eors	r3, r2
 800697e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006982:	2b00      	cmp	r3, #0
 8006984:	d013      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006986:	4b8a      	ldr	r3, [pc, #552]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006990:	4b87      	ldr	r3, [pc, #540]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006994:	4a86      	ldr	r2, [pc, #536]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800699a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800699c:	4b84      	ldr	r3, [pc, #528]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	4a83      	ldr	r2, [pc, #524]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80069a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069a8:	4a81      	ldr	r2, [pc, #516]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b8:	d115      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ba:	f7fb f957 	bl	8001c6c <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069c0:	e00b      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c2:	f7fb f953 	bl	8001c6c <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d902      	bls.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	75fb      	strb	r3, [r7, #23]
            break;
 80069d8:	e005      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069da:	4b75      	ldr	r3, [pc, #468]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0ed      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d126      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069fa:	d10d      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80069fc:	4b6c      	ldr	r3, [pc, #432]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a0a:	0919      	lsrs	r1, r3, #4
 8006a0c:	4b6a      	ldr	r3, [pc, #424]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006a0e:	400b      	ands	r3, r1
 8006a10:	4967      	ldr	r1, [pc, #412]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	610b      	str	r3, [r1, #16]
 8006a16:	e005      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8006a18:	4b65      	ldr	r3, [pc, #404]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	4a64      	ldr	r2, [pc, #400]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006a1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a22:	6113      	str	r3, [r2, #16]
 8006a24:	4b62      	ldr	r3, [pc, #392]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006a26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a32:	495f      	ldr	r1, [pc, #380]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	670b      	str	r3, [r1, #112]	; 0x70
 8006a38:	e004      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	75bb      	strb	r3, [r7, #22]
 8006a3e:	e001      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d07f      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a56:	2b28      	cmp	r3, #40	; 0x28
 8006a58:	d866      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8006a5a:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006b2f 	.word	0x08006b2f
 8006a64:	08006b29 	.word	0x08006b29
 8006a68:	08006b29 	.word	0x08006b29
 8006a6c:	08006b29 	.word	0x08006b29
 8006a70:	08006b29 	.word	0x08006b29
 8006a74:	08006b29 	.word	0x08006b29
 8006a78:	08006b29 	.word	0x08006b29
 8006a7c:	08006b29 	.word	0x08006b29
 8006a80:	08006b05 	.word	0x08006b05
 8006a84:	08006b29 	.word	0x08006b29
 8006a88:	08006b29 	.word	0x08006b29
 8006a8c:	08006b29 	.word	0x08006b29
 8006a90:	08006b29 	.word	0x08006b29
 8006a94:	08006b29 	.word	0x08006b29
 8006a98:	08006b29 	.word	0x08006b29
 8006a9c:	08006b29 	.word	0x08006b29
 8006aa0:	08006b17 	.word	0x08006b17
 8006aa4:	08006b29 	.word	0x08006b29
 8006aa8:	08006b29 	.word	0x08006b29
 8006aac:	08006b29 	.word	0x08006b29
 8006ab0:	08006b29 	.word	0x08006b29
 8006ab4:	08006b29 	.word	0x08006b29
 8006ab8:	08006b29 	.word	0x08006b29
 8006abc:	08006b29 	.word	0x08006b29
 8006ac0:	08006b2f 	.word	0x08006b2f
 8006ac4:	08006b29 	.word	0x08006b29
 8006ac8:	08006b29 	.word	0x08006b29
 8006acc:	08006b29 	.word	0x08006b29
 8006ad0:	08006b29 	.word	0x08006b29
 8006ad4:	08006b29 	.word	0x08006b29
 8006ad8:	08006b29 	.word	0x08006b29
 8006adc:	08006b29 	.word	0x08006b29
 8006ae0:	08006b2f 	.word	0x08006b2f
 8006ae4:	08006b29 	.word	0x08006b29
 8006ae8:	08006b29 	.word	0x08006b29
 8006aec:	08006b29 	.word	0x08006b29
 8006af0:	08006b29 	.word	0x08006b29
 8006af4:	08006b29 	.word	0x08006b29
 8006af8:	08006b29 	.word	0x08006b29
 8006afc:	08006b29 	.word	0x08006b29
 8006b00:	08006b2f 	.word	0x08006b2f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3304      	adds	r3, #4
 8006b08:	2101      	movs	r1, #1
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fdfa 	bl	8007704 <RCCEx_PLL2_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b14:	e00c      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3324      	adds	r3, #36	; 0x24
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fea3 	bl	8007868 <RCCEx_PLL3_Config>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b26:	e003      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2c:	e000      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8006b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b36:	4b1e      	ldr	r3, [pc, #120]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b44:	491a      	ldr	r1, [pc, #104]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	654b      	str	r3, [r1, #84]	; 0x54
 8006b4a:	e001      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d03f      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b60:	2b05      	cmp	r3, #5
 8006b62:	d821      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8006b64:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006bbd 	.word	0x08006bbd
 8006b70:	08006b85 	.word	0x08006b85
 8006b74:	08006b97 	.word	0x08006b97
 8006b78:	08006bbd 	.word	0x08006bbd
 8006b7c:	08006bbd 	.word	0x08006bbd
 8006b80:	08006bbd 	.word	0x08006bbd
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3304      	adds	r3, #4
 8006b88:	2101      	movs	r1, #1
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fdba 	bl	8007704 <RCCEx_PLL2_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b94:	e013      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3324      	adds	r3, #36	; 0x24
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 fe63 	bl	8007868 <RCCEx_PLL3_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006ba6:	e00a      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bac:	e007      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8006bae:	bf00      	nop
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	58024800 	.word	0x58024800
 8006bb8:	00ffffcf 	.word	0x00ffffcf
      break;
 8006bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d109      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bc4:	4b9f      	ldr	r3, [pc, #636]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	f023 0207 	bic.w	r2, r3, #7
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd0:	499c      	ldr	r1, [pc, #624]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	654b      	str	r3, [r1, #84]	; 0x54
 8006bd6:	e001      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
 8006bda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d039      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d820      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c3b 	.word	0x08006c3b
 8006bfc:	08006c11 	.word	0x08006c11
 8006c00:	08006c23 	.word	0x08006c23
 8006c04:	08006c3b 	.word	0x08006c3b
 8006c08:	08006c3b 	.word	0x08006c3b
 8006c0c:	08006c3b 	.word	0x08006c3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3304      	adds	r3, #4
 8006c14:	2101      	movs	r1, #1
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fd74 	bl	8007704 <RCCEx_PLL2_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c20:	e00c      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3324      	adds	r3, #36	; 0x24
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fe1d 	bl	8007868 <RCCEx_PLL3_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]
      break;
 8006c38:	e000      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8006c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c42:	4b80      	ldr	r3, [pc, #512]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c46:	f023 0207 	bic.w	r2, r3, #7
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c50:	497c      	ldr	r1, [pc, #496]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	658b      	str	r3, [r1, #88]	; 0x58
 8006c56:	e001      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d04b      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c72:	d02e      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8006c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c78:	d828      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7e:	d02a      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c84:	d822      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006c86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c8a:	d026      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006c8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c90:	d81c      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c96:	d010      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8006c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9c:	d816      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d01d      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ca6:	d111      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3304      	adds	r3, #4
 8006cac:	2100      	movs	r1, #0
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fd28 	bl	8007704 <RCCEx_PLL2_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006cb8:	e012      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3324      	adds	r3, #36	; 0x24
 8006cbe:	2102      	movs	r1, #2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fdd1 	bl	8007868 <RCCEx_PLL3_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006cca:	e009      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd0:	e006      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006cd2:	bf00      	nop
 8006cd4:	e004      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006cd6:	bf00      	nop
 8006cd8:	e002      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006cda:	bf00      	nop
 8006cdc:	e000      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ce6:	4b57      	ldr	r3, [pc, #348]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf4:	4953      	ldr	r1, [pc, #332]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	654b      	str	r3, [r1, #84]	; 0x54
 8006cfa:	e001      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d04b      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d16:	d02e      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006d18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d1c:	d828      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	d02a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d28:	d822      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d2e:	d026      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d34:	d81c      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3a:	d010      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d40:	d816      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01d      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4a:	d111      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fcd6 	bl	8007704 <RCCEx_PLL2_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d5c:	e012      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3324      	adds	r3, #36	; 0x24
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fd7f 	bl	8007868 <RCCEx_PLL3_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d6e:	e009      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
      break;
 8006d74:	e006      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006d76:	bf00      	nop
 8006d78:	e004      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006d7a:	bf00      	nop
 8006d7c:	e002      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e000      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d8a:	4b2e      	ldr	r3, [pc, #184]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d98:	492a      	ldr	r1, [pc, #168]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	658b      	str	r3, [r1, #88]	; 0x58
 8006d9e:	e001      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d04d      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006db6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006dba:	d02e      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8006dbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006dc0:	d828      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc6:	d02a      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dcc:	d822      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006dce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006dd2:	d026      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006dd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006dd8:	d81c      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dde:	d010      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8006de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de4:	d816      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01d      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dee:	d111      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	2100      	movs	r1, #0
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fc84 	bl	8007704 <RCCEx_PLL2_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e00:	e012      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3324      	adds	r3, #36	; 0x24
 8006e06:	2102      	movs	r1, #2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fd2d 	bl	8007868 <RCCEx_PLL3_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e12:	e009      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	75fb      	strb	r3, [r7, #23]
      break;
 8006e18:	e006      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006e1a:	bf00      	nop
 8006e1c:	e004      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006e1e:	bf00      	nop
 8006e20:	e002      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006e22:	bf00      	nop
 8006e24:	e000      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10c      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e2e:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e3c:	4901      	ldr	r1, [pc, #4]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	658b      	str	r3, [r1, #88]	; 0x58
 8006e42:	e003      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006e44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e62:	d10a      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3324      	adds	r3, #36	; 0x24
 8006e68:	2102      	movs	r1, #2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fcfc 	bl	8007868 <RCCEx_PLL3_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e7a:	4b8c      	ldr	r3, [pc, #560]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e88:	4988      	ldr	r1, [pc, #544]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0310 	and.w	r3, r3, #16
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01a      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea4:	d10a      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3324      	adds	r3, #36	; 0x24
 8006eaa:	2102      	movs	r1, #2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fcdb 	bl	8007868 <RCCEx_PLL3_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ebc:	4b7b      	ldr	r3, [pc, #492]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eca:	4978      	ldr	r1, [pc, #480]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d034      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee6:	d01d      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8006ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eec:	d817      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8006ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef6:	d009      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006ef8:	e011      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	2100      	movs	r1, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fbff 	bl	8007704 <RCCEx_PLL2_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f0a:	e00c      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3324      	adds	r3, #36	; 0x24
 8006f10:	2102      	movs	r1, #2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fca8 	bl	8007868 <RCCEx_PLL3_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f1c:	e003      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	75fb      	strb	r3, [r7, #23]
      break;
 8006f22:	e000      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f2c:	4b5f      	ldr	r3, [pc, #380]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f3a:	495c      	ldr	r1, [pc, #368]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	658b      	str	r3, [r1, #88]	; 0x58
 8006f40:	e001      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d033      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f5c:	d01c      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006f5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f62:	d816      	bhi.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f68:	d003      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f6e:	d007      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006f70:	e00f      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f72:	4b4e      	ldr	r3, [pc, #312]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4a4d      	ldr	r2, [pc, #308]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f7e:	e00c      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3324      	adds	r3, #36	; 0x24
 8006f84:	2101      	movs	r1, #1
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fc6e 	bl	8007868 <RCCEx_PLL3_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f90:	e003      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
      break;
 8006f96:	e000      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fa0:	4b42      	ldr	r3, [pc, #264]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fae:	493f      	ldr	r1, [pc, #252]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	654b      	str	r3, [r1, #84]	; 0x54
 8006fb4:	e001      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d029      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8006fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd2:	d007      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006fd4:	e00f      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd6:	4b35      	ldr	r3, [pc, #212]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fda:	4a34      	ldr	r2, [pc, #208]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fe2:	e00b      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	2102      	movs	r1, #2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fb8a 	bl	8007704 <RCCEx_PLL2_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ff4:	e002      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007002:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007006:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700e:	4927      	ldr	r1, [pc, #156]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007010:	4313      	orrs	r3, r2
 8007012:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007014:	e001      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3324      	adds	r3, #36	; 0x24
 800702a:	2102      	movs	r1, #2
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fc1b 	bl	8007868 <RCCEx_PLL3_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d035      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800704e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007052:	d017      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007058:	d811      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800705a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800705e:	d013      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007064:	d80b      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d010      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800706a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706e:	d106      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007070:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	4a0d      	ldr	r2, [pc, #52]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800707c:	e007      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
      break;
 8007082:	e004      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800708c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10d      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070a2:	4902      	ldr	r1, [pc, #8]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	654b      	str	r3, [r1, #84]	; 0x54
 80070a8:	e004      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070c0:	4b30      	ldr	r3, [pc, #192]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070cc:	492d      	ldr	r1, [pc, #180]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d008      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070de:	4b29      	ldr	r3, [pc, #164]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ea:	4926      	ldr	r1, [pc, #152]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d008      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80070fc:	4b21      	ldr	r3, [pc, #132]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007100:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007108:	491e      	ldr	r1, [pc, #120]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800710a:	4313      	orrs	r3, r2
 800710c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800711a:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	4a19      	ldr	r2, [pc, #100]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007120:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007124:	6113      	str	r3, [r2, #16]
 8007126:	4b17      	ldr	r3, [pc, #92]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007130:	4914      	ldr	r1, [pc, #80]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007132:	4313      	orrs	r3, r2
 8007134:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	da08      	bge.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714a:	490e      	ldr	r1, [pc, #56]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800714c:	4313      	orrs	r3, r2
 800714e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800715c:	4b09      	ldr	r3, [pc, #36]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800715e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	4906      	ldr	r1, [pc, #24]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800716c:	4313      	orrs	r3, r2
 800716e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007170:	7dbb      	ldrb	r3, [r7, #22]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	e000      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	58024400 	.word	0x58024400

08007188 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800718c:	f7ff f894 	bl	80062b8 <HAL_RCC_GetHCLKFreq>
 8007190:	4602      	mov	r2, r0
 8007192:	4b06      	ldr	r3, [pc, #24]	; (80071ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	091b      	lsrs	r3, r3, #4
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	4904      	ldr	r1, [pc, #16]	; (80071b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800719e:	5ccb      	ldrb	r3, [r1, r3]
 80071a0:	f003 031f 	and.w	r3, r3, #31
 80071a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	58024400 	.word	0x58024400
 80071b0:	0800c00c 	.word	0x0800c00c

080071b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b089      	sub	sp, #36	; 0x24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071bc:	4ba1      	ldr	r3, [pc, #644]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80071c6:	4b9f      	ldr	r3, [pc, #636]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	0b1b      	lsrs	r3, r3, #12
 80071cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071d2:	4b9c      	ldr	r3, [pc, #624]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	091b      	lsrs	r3, r3, #4
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071de:	4b99      	ldr	r3, [pc, #612]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e2:	08db      	lsrs	r3, r3, #3
 80071e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	fb02 f303 	mul.w	r3, r2, r3
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8111 	beq.w	8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b02      	cmp	r3, #2
 8007206:	f000 8083 	beq.w	8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b02      	cmp	r3, #2
 800720e:	f200 80a1 	bhi.w	8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d056      	beq.n	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800721e:	e099      	b.n	8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007220:	4b88      	ldr	r3, [pc, #544]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02d      	beq.n	8007288 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800722c:	4b85      	ldr	r3, [pc, #532]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	08db      	lsrs	r3, r3, #3
 8007232:	f003 0303 	and.w	r3, r3, #3
 8007236:	4a84      	ldr	r2, [pc, #528]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
 800723c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007256:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007266:	ed97 6a03 	vldr	s12, [r7, #12]
 800726a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800744c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800726e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800727a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007282:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007286:	e087      	b.n	8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b6a      	ldr	r3, [pc, #424]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800744c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072ca:	e065      	b.n	8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	4b59      	ldr	r3, [pc, #356]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800744c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800730e:	e043      	b.n	8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	4b48      	ldr	r3, [pc, #288]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007332:	ed97 6a03 	vldr	s12, [r7, #12]
 8007336:	eddf 5a45 	vldr	s11, [pc, #276]	; 800744c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800733a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007352:	e021      	b.n	8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b37      	ldr	r3, [pc, #220]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a03 	vldr	s12, [r7, #12]
 800737a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800744c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007396:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007398:	4b2a      	ldr	r3, [pc, #168]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	0a5b      	lsrs	r3, r3, #9
 800739e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073be:	ee17 2a90 	vmov	r2, s15
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80073c6:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d0:	ee07 3a90 	vmov	s15, r3
 80073d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ec:	ee17 2a90 	vmov	r2, s15
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073f4:	4b13      	ldr	r3, [pc, #76]	; (8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	0e1b      	lsrs	r3, r3, #24
 80073fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800740a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800741a:	ee17 2a90 	vmov	r2, s15
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007422:	e008      	b.n	8007436 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	609a      	str	r2, [r3, #8]
}
 8007436:	bf00      	nop
 8007438:	3724      	adds	r7, #36	; 0x24
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
 8007448:	03d09000 	.word	0x03d09000
 800744c:	46000000 	.word	0x46000000
 8007450:	4c742400 	.word	0x4c742400
 8007454:	4a742400 	.word	0x4a742400
 8007458:	4af42400 	.word	0x4af42400

0800745c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800745c:	b480      	push	{r7}
 800745e:	b089      	sub	sp, #36	; 0x24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007464:	4ba1      	ldr	r3, [pc, #644]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	f003 0303 	and.w	r3, r3, #3
 800746c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800746e:	4b9f      	ldr	r3, [pc, #636]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	0d1b      	lsrs	r3, r3, #20
 8007474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007478:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800747a:	4b9c      	ldr	r3, [pc, #624]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007486:	4b99      	ldr	r3, [pc, #612]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748a:	08db      	lsrs	r3, r3, #3
 800748c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	fb02 f303 	mul.w	r3, r2, r3
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8111 	beq.w	80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	f000 8083 	beq.w	80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	f200 80a1 	bhi.w	80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d056      	beq.n	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074c6:	e099      	b.n	80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c8:	4b88      	ldr	r3, [pc, #544]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d02d      	beq.n	8007530 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074d4:	4b85      	ldr	r3, [pc, #532]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	08db      	lsrs	r3, r3, #3
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	4a84      	ldr	r2, [pc, #528]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074e0:	fa22 f303 	lsr.w	r3, r2, r3
 80074e4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	ee07 3a90 	vmov	s15, r3
 80074ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fe:	4b7b      	ldr	r3, [pc, #492]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007512:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800752e:	e087      	b.n	8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800753e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007542:	4b6a      	ldr	r3, [pc, #424]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007552:	ed97 6a03 	vldr	s12, [r7, #12]
 8007556:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800755a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007572:	e065      	b.n	8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007586:	4b59      	ldr	r3, [pc, #356]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007596:	ed97 6a03 	vldr	s12, [r7, #12]
 800759a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800759e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075b6:	e043      	b.n	8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ca:	4b48      	ldr	r3, [pc, #288]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075da:	ed97 6a03 	vldr	s12, [r7, #12]
 80075de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075fa:	e021      	b.n	8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800760a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760e:	4b37      	ldr	r3, [pc, #220]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007622:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800763e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007640:	4b2a      	ldr	r3, [pc, #168]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007644:	0a5b      	lsrs	r3, r3, #9
 8007646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800765a:	edd7 6a07 	vldr	s13, [r7, #28]
 800765e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007666:	ee17 2a90 	vmov	r2, s15
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800766e:	4b1f      	ldr	r3, [pc, #124]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007684:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007688:	edd7 6a07 	vldr	s13, [r7, #28]
 800768c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007694:	ee17 2a90 	vmov	r2, s15
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800769c:	4b13      	ldr	r3, [pc, #76]	; (80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	0e1b      	lsrs	r3, r3, #24
 80076a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c2:	ee17 2a90 	vmov	r2, s15
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076ca:	e008      	b.n	80076de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	609a      	str	r2, [r3, #8]
}
 80076de:	bf00      	nop
 80076e0:	3724      	adds	r7, #36	; 0x24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	58024400 	.word	0x58024400
 80076f0:	03d09000 	.word	0x03d09000
 80076f4:	46000000 	.word	0x46000000
 80076f8:	4c742400 	.word	0x4c742400
 80076fc:	4a742400 	.word	0x4a742400
 8007700:	4af42400 	.word	0x4af42400

08007704 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007712:	4b53      	ldr	r3, [pc, #332]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b03      	cmp	r3, #3
 800771c:	d101      	bne.n	8007722 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e099      	b.n	8007856 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007722:	4b4f      	ldr	r3, [pc, #316]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a4e      	ldr	r2, [pc, #312]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 8007728:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800772c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772e:	f7fa fa9d 	bl	8001c6c <HAL_GetTick>
 8007732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007734:	e008      	b.n	8007748 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007736:	f7fa fa99 	bl	8001c6c <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e086      	b.n	8007856 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007748:	4b45      	ldr	r3, [pc, #276]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1f0      	bne.n	8007736 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007754:	4b42      	ldr	r3, [pc, #264]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	031b      	lsls	r3, r3, #12
 8007762:	493f      	ldr	r1, [pc, #252]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 8007764:	4313      	orrs	r3, r2
 8007766:	628b      	str	r3, [r1, #40]	; 0x28
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	3b01      	subs	r3, #1
 800776e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	3b01      	subs	r3, #1
 8007778:	025b      	lsls	r3, r3, #9
 800777a:	b29b      	uxth	r3, r3
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	3b01      	subs	r3, #1
 8007784:	041b      	lsls	r3, r3, #16
 8007786:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	3b01      	subs	r3, #1
 8007792:	061b      	lsls	r3, r3, #24
 8007794:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007798:	4931      	ldr	r1, [pc, #196]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 800779a:	4313      	orrs	r3, r2
 800779c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800779e:	4b30      	ldr	r3, [pc, #192]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	492d      	ldr	r1, [pc, #180]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077b0:	4b2b      	ldr	r3, [pc, #172]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	f023 0220 	bic.w	r2, r3, #32
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	4928      	ldr	r1, [pc, #160]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077c2:	4b27      	ldr	r3, [pc, #156]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	4a26      	ldr	r2, [pc, #152]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077c8:	f023 0310 	bic.w	r3, r3, #16
 80077cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077ce:	4b24      	ldr	r3, [pc, #144]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077d2:	4b24      	ldr	r3, [pc, #144]	; (8007864 <RCCEx_PLL2_Config+0x160>)
 80077d4:	4013      	ands	r3, r2
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	69d2      	ldr	r2, [r2, #28]
 80077da:	00d2      	lsls	r2, r2, #3
 80077dc:	4920      	ldr	r1, [pc, #128]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077e2:	4b1f      	ldr	r3, [pc, #124]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	4a1e      	ldr	r2, [pc, #120]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077e8:	f043 0310 	orr.w	r3, r3, #16
 80077ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077f4:	4b1a      	ldr	r3, [pc, #104]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	4a19      	ldr	r2, [pc, #100]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 80077fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007800:	e00f      	b.n	8007822 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d106      	bne.n	8007816 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	4a14      	ldr	r2, [pc, #80]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 800780e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007814:	e005      	b.n	8007822 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	4a11      	ldr	r2, [pc, #68]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 800781c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007820:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007822:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a0e      	ldr	r2, [pc, #56]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 8007828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800782c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782e:	f7fa fa1d 	bl	8001c6c <HAL_GetTick>
 8007832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007834:	e008      	b.n	8007848 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007836:	f7fa fa19 	bl	8001c6c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e006      	b.n	8007856 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007848:	4b05      	ldr	r3, [pc, #20]	; (8007860 <RCCEx_PLL2_Config+0x15c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0f0      	beq.n	8007836 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	58024400 	.word	0x58024400
 8007864:	ffff0007 	.word	0xffff0007

08007868 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007876:	4b53      	ldr	r3, [pc, #332]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	2b03      	cmp	r3, #3
 8007880:	d101      	bne.n	8007886 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e099      	b.n	80079ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007886:	4b4f      	ldr	r3, [pc, #316]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a4e      	ldr	r2, [pc, #312]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 800788c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007892:	f7fa f9eb 	bl	8001c6c <HAL_GetTick>
 8007896:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007898:	e008      	b.n	80078ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800789a:	f7fa f9e7 	bl	8001c6c <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e086      	b.n	80079ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078ac:	4b45      	ldr	r3, [pc, #276]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1f0      	bne.n	800789a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078b8:	4b42      	ldr	r3, [pc, #264]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	051b      	lsls	r3, r3, #20
 80078c6:	493f      	ldr	r1, [pc, #252]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	628b      	str	r3, [r1, #40]	; 0x28
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	3b01      	subs	r3, #1
 80078dc:	025b      	lsls	r3, r3, #9
 80078de:	b29b      	uxth	r3, r3
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	061b      	lsls	r3, r3, #24
 80078f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078fc:	4931      	ldr	r1, [pc, #196]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007902:	4b30      	ldr	r3, [pc, #192]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	492d      	ldr	r1, [pc, #180]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007910:	4313      	orrs	r3, r2
 8007912:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007914:	4b2b      	ldr	r3, [pc, #172]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	4928      	ldr	r1, [pc, #160]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007922:	4313      	orrs	r3, r2
 8007924:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007926:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	4a26      	ldr	r2, [pc, #152]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 800792c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007936:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <RCCEx_PLL3_Config+0x160>)
 8007938:	4013      	ands	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	69d2      	ldr	r2, [r2, #28]
 800793e:	00d2      	lsls	r2, r2, #3
 8007940:	4920      	ldr	r1, [pc, #128]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007942:	4313      	orrs	r3, r2
 8007944:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007946:	4b1f      	ldr	r3, [pc, #124]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	4a1e      	ldr	r2, [pc, #120]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 800794c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d106      	bne.n	8007966 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007958:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	4a19      	ldr	r2, [pc, #100]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 800795e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007962:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007964:	e00f      	b.n	8007986 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d106      	bne.n	800797a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800796c:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	4a14      	ldr	r2, [pc, #80]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007978:	e005      	b.n	8007986 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	4a11      	ldr	r2, [pc, #68]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007984:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a0e      	ldr	r2, [pc, #56]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 800798c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007992:	f7fa f96b 	bl	8001c6c <HAL_GetTick>
 8007996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007998:	e008      	b.n	80079ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800799a:	f7fa f967 	bl	8001c6c <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d901      	bls.n	80079ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e006      	b.n	80079ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079ac:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <RCCEx_PLL3_Config+0x15c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0f0      	beq.n	800799a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	58024400 	.word	0x58024400
 80079c8:	ffff0007 	.word	0xffff0007

080079cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e042      	b.n	8007a64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7f9 fe8f 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2224      	movs	r2, #36	; 0x24
 80079fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0201 	bic.w	r2, r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fbea 	bl	80081e8 <UART_SetConfig>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e022      	b.n	8007a64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fa4a 	bl	8008ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fad1 	bl	8009004 <UART_CheckIdleState>
 8007a62:	4603      	mov	r3, r0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b0ba      	sub	sp, #232	; 0xe8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a96:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d11b      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d015      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d105      	bne.n	8007acc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d009      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 835a 	beq.w	800818a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
      }
      return;
 8007ade:	e354      	b.n	800818a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 811f 	beq.w	8007d28 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007aea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007aee:	4b8b      	ldr	r3, [pc, #556]	; (8007d1c <HAL_UART_IRQHandler+0x2b0>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007af6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007afa:	4b89      	ldr	r3, [pc, #548]	; (8007d20 <HAL_UART_IRQHandler+0x2b4>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 8112 	beq.w	8007d28 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d011      	beq.n	8007b34 <HAL_UART_IRQHandler+0xc8>
 8007b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2201      	movs	r2, #1
 8007b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2a:	f043 0201 	orr.w	r2, r3, #1
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d011      	beq.n	8007b64 <HAL_UART_IRQHandler+0xf8>
 8007b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2202      	movs	r2, #2
 8007b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b5a:	f043 0204 	orr.w	r2, r3, #4
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d011      	beq.n	8007b94 <HAL_UART_IRQHandler+0x128>
 8007b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2204      	movs	r2, #4
 8007b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b8a:	f043 0202 	orr.w	r2, r3, #2
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d017      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d105      	bne.n	8007bb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007bac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007bb0:	4b5a      	ldr	r3, [pc, #360]	; (8007d1c <HAL_UART_IRQHandler+0x2b0>)
 8007bb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00b      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2208      	movs	r2, #8
 8007bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc6:	f043 0208 	orr.w	r2, r3, #8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d012      	beq.n	8007c02 <HAL_UART_IRQHandler+0x196>
 8007bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00c      	beq.n	8007c02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf8:	f043 0220 	orr.w	r2, r3, #32
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 82c0 	beq.w	800818e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d013      	beq.n	8007c42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d105      	bne.n	8007c32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d005      	beq.n	8007c66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d04f      	beq.n	8007d06 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 fae0 	bl	800922c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c76:	2b40      	cmp	r3, #64	; 0x40
 8007c78:	d141      	bne.n	8007cfe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3308      	adds	r3, #8
 8007c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1d9      	bne.n	8007c7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d013      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd2:	4a14      	ldr	r2, [pc, #80]	; (8007d24 <HAL_UART_IRQHandler+0x2b8>)
 8007cd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fa ffb4 	bl	8002c48 <HAL_DMA_Abort_IT>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d017      	beq.n	8007d16 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf4:	e00f      	b.n	8007d16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa60 	bl	80081bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfc:	e00b      	b.n	8007d16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa5c 	bl	80081bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d04:	e007      	b.n	8007d16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fa58 	bl	80081bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007d14:	e23b      	b.n	800818e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d16:	bf00      	nop
    return;
 8007d18:	e239      	b.n	800818e <HAL_UART_IRQHandler+0x722>
 8007d1a:	bf00      	nop
 8007d1c:	10000001 	.word	0x10000001
 8007d20:	04000120 	.word	0x04000120
 8007d24:	080092f9 	.word	0x080092f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	f040 81ce 	bne.w	80080ce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 81c7 	beq.w	80080ce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 81c0 	beq.w	80080ce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2210      	movs	r2, #16
 8007d54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	f040 813b 	bne.w	8007fdc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a8b      	ldr	r2, [pc, #556]	; (8007f9c <HAL_UART_IRQHandler+0x530>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d059      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a89      	ldr	r2, [pc, #548]	; (8007fa0 <HAL_UART_IRQHandler+0x534>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d053      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a87      	ldr	r2, [pc, #540]	; (8007fa4 <HAL_UART_IRQHandler+0x538>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d04d      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a85      	ldr	r2, [pc, #532]	; (8007fa8 <HAL_UART_IRQHandler+0x53c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d047      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a83      	ldr	r2, [pc, #524]	; (8007fac <HAL_UART_IRQHandler+0x540>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d041      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a81      	ldr	r2, [pc, #516]	; (8007fb0 <HAL_UART_IRQHandler+0x544>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d03b      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a7f      	ldr	r2, [pc, #508]	; (8007fb4 <HAL_UART_IRQHandler+0x548>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d035      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a7d      	ldr	r2, [pc, #500]	; (8007fb8 <HAL_UART_IRQHandler+0x54c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d02f      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a7b      	ldr	r2, [pc, #492]	; (8007fbc <HAL_UART_IRQHandler+0x550>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d029      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a79      	ldr	r2, [pc, #484]	; (8007fc0 <HAL_UART_IRQHandler+0x554>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d023      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a77      	ldr	r2, [pc, #476]	; (8007fc4 <HAL_UART_IRQHandler+0x558>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01d      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a75      	ldr	r2, [pc, #468]	; (8007fc8 <HAL_UART_IRQHandler+0x55c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d017      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a73      	ldr	r2, [pc, #460]	; (8007fcc <HAL_UART_IRQHandler+0x560>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d011      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a71      	ldr	r2, [pc, #452]	; (8007fd0 <HAL_UART_IRQHandler+0x564>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00b      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a6f      	ldr	r2, [pc, #444]	; (8007fd4 <HAL_UART_IRQHandler+0x568>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d005      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ba>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a6d      	ldr	r2, [pc, #436]	; (8007fd8 <HAL_UART_IRQHandler+0x56c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d105      	bne.n	8007e32 <HAL_UART_IRQHandler+0x3c6>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	e004      	b.n	8007e3c <HAL_UART_IRQHandler+0x3d0>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 81a4 	beq.w	8008192 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e54:	429a      	cmp	r2, r3
 8007e56:	f080 819c 	bcs.w	8008192 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e6e:	f000 8086 	beq.w	8007f7e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ea0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ea8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1da      	bne.n	8007e72 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ece:	f023 0301 	bic.w	r3, r3, #1
 8007ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3308      	adds	r3, #8
 8007edc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ee0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ee8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e1      	bne.n	8007ebc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3308      	adds	r3, #8
 8007f18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f24:	e841 2300 	strex	r3, r2, [r1]
 8007f28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1e3      	bne.n	8007ef8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f4e:	f023 0310 	bic.w	r3, r3, #16
 8007f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f60:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e4      	bne.n	8007f3e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fa fb47 	bl	800260c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f91c 	bl	80081d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f98:	e0fb      	b.n	8008192 <HAL_UART_IRQHandler+0x726>
 8007f9a:	bf00      	nop
 8007f9c:	40020010 	.word	0x40020010
 8007fa0:	40020028 	.word	0x40020028
 8007fa4:	40020040 	.word	0x40020040
 8007fa8:	40020058 	.word	0x40020058
 8007fac:	40020070 	.word	0x40020070
 8007fb0:	40020088 	.word	0x40020088
 8007fb4:	400200a0 	.word	0x400200a0
 8007fb8:	400200b8 	.word	0x400200b8
 8007fbc:	40020410 	.word	0x40020410
 8007fc0:	40020428 	.word	0x40020428
 8007fc4:	40020440 	.word	0x40020440
 8007fc8:	40020458 	.word	0x40020458
 8007fcc:	40020470 	.word	0x40020470
 8007fd0:	40020488 	.word	0x40020488
 8007fd4:	400204a0 	.word	0x400204a0
 8007fd8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 80cc 	beq.w	8008196 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007ffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 80c7 	beq.w	8008196 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800801c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800802a:	647b      	str	r3, [r7, #68]	; 0x44
 800802c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e4      	bne.n	8008008 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3308      	adds	r3, #8
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	623b      	str	r3, [r7, #32]
   return(result);
 800804e:	6a3a      	ldr	r2, [r7, #32]
 8008050:	4b54      	ldr	r3, [pc, #336]	; (80081a4 <HAL_UART_IRQHandler+0x738>)
 8008052:	4013      	ands	r3, r2
 8008054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3308      	adds	r3, #8
 800805e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008062:	633a      	str	r2, [r7, #48]	; 0x30
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e3      	bne.n	800803e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	60fb      	str	r3, [r7, #12]
   return(result);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0310 	bic.w	r3, r3, #16
 800809e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080ac:	61fb      	str	r3, [r7, #28]
 80080ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	69b9      	ldr	r1, [r7, #24]
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	617b      	str	r3, [r7, #20]
   return(result);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e4      	bne.n	800808a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f882 	bl	80081d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080cc:	e063      	b.n	8008196 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00e      	beq.n	80080f8 <HAL_UART_IRQHandler+0x68c>
 80080da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d008      	beq.n	80080f8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 f942 	bl	800937a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f6:	e051      	b.n	800819c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008100:	2b00      	cmp	r3, #0
 8008102:	d014      	beq.n	800812e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810c:	2b00      	cmp	r3, #0
 800810e:	d105      	bne.n	800811c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d008      	beq.n	800812e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008120:	2b00      	cmp	r3, #0
 8008122:	d03a      	beq.n	800819a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
    }
    return;
 800812c:	e035      	b.n	800819a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800812e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <HAL_UART_IRQHandler+0x6e2>
 800813a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800813e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 f8ec 	bl	8009324 <UART_EndTransmit_IT>
    return;
 800814c:	e026      	b.n	800819c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800814e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d009      	beq.n	800816e <HAL_UART_IRQHandler+0x702>
 800815a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f91b 	bl	80093a2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800816c:	e016      	b.n	800819c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d010      	beq.n	800819c <HAL_UART_IRQHandler+0x730>
 800817a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817e:	2b00      	cmp	r3, #0
 8008180:	da0c      	bge.n	800819c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f001 f903 	bl	800938e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008188:	e008      	b.n	800819c <HAL_UART_IRQHandler+0x730>
      return;
 800818a:	bf00      	nop
 800818c:	e006      	b.n	800819c <HAL_UART_IRQHandler+0x730>
    return;
 800818e:	bf00      	nop
 8008190:	e004      	b.n	800819c <HAL_UART_IRQHandler+0x730>
      return;
 8008192:	bf00      	nop
 8008194:	e002      	b.n	800819c <HAL_UART_IRQHandler+0x730>
      return;
 8008196:	bf00      	nop
 8008198:	e000      	b.n	800819c <HAL_UART_IRQHandler+0x730>
    return;
 800819a:	bf00      	nop
  }
}
 800819c:	37e8      	adds	r7, #232	; 0xe8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	effffffe 	.word	0xeffffffe

080081a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081ec:	b092      	sub	sp, #72	; 0x48
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	431a      	orrs	r2, r3
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	431a      	orrs	r2, r3
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	4313      	orrs	r3, r2
 800820e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4bbe      	ldr	r3, [pc, #760]	; (8008510 <UART_SetConfig+0x328>)
 8008218:	4013      	ands	r3, r2
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	6812      	ldr	r2, [r2, #0]
 800821e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008220:	430b      	orrs	r3, r1
 8008222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4ab3      	ldr	r2, [pc, #716]	; (8008514 <UART_SetConfig+0x32c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d004      	beq.n	8008254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008250:	4313      	orrs	r3, r2
 8008252:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	4baf      	ldr	r3, [pc, #700]	; (8008518 <UART_SetConfig+0x330>)
 800825c:	4013      	ands	r3, r2
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008264:	430b      	orrs	r3, r1
 8008266:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	f023 010f 	bic.w	r1, r3, #15
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4aa6      	ldr	r2, [pc, #664]	; (800851c <UART_SetConfig+0x334>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d177      	bne.n	8008378 <UART_SetConfig+0x190>
 8008288:	4ba5      	ldr	r3, [pc, #660]	; (8008520 <UART_SetConfig+0x338>)
 800828a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008290:	2b28      	cmp	r3, #40	; 0x28
 8008292:	d86d      	bhi.n	8008370 <UART_SetConfig+0x188>
 8008294:	a201      	add	r2, pc, #4	; (adr r2, 800829c <UART_SetConfig+0xb4>)
 8008296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829a:	bf00      	nop
 800829c:	08008341 	.word	0x08008341
 80082a0:	08008371 	.word	0x08008371
 80082a4:	08008371 	.word	0x08008371
 80082a8:	08008371 	.word	0x08008371
 80082ac:	08008371 	.word	0x08008371
 80082b0:	08008371 	.word	0x08008371
 80082b4:	08008371 	.word	0x08008371
 80082b8:	08008371 	.word	0x08008371
 80082bc:	08008349 	.word	0x08008349
 80082c0:	08008371 	.word	0x08008371
 80082c4:	08008371 	.word	0x08008371
 80082c8:	08008371 	.word	0x08008371
 80082cc:	08008371 	.word	0x08008371
 80082d0:	08008371 	.word	0x08008371
 80082d4:	08008371 	.word	0x08008371
 80082d8:	08008371 	.word	0x08008371
 80082dc:	08008351 	.word	0x08008351
 80082e0:	08008371 	.word	0x08008371
 80082e4:	08008371 	.word	0x08008371
 80082e8:	08008371 	.word	0x08008371
 80082ec:	08008371 	.word	0x08008371
 80082f0:	08008371 	.word	0x08008371
 80082f4:	08008371 	.word	0x08008371
 80082f8:	08008371 	.word	0x08008371
 80082fc:	08008359 	.word	0x08008359
 8008300:	08008371 	.word	0x08008371
 8008304:	08008371 	.word	0x08008371
 8008308:	08008371 	.word	0x08008371
 800830c:	08008371 	.word	0x08008371
 8008310:	08008371 	.word	0x08008371
 8008314:	08008371 	.word	0x08008371
 8008318:	08008371 	.word	0x08008371
 800831c:	08008361 	.word	0x08008361
 8008320:	08008371 	.word	0x08008371
 8008324:	08008371 	.word	0x08008371
 8008328:	08008371 	.word	0x08008371
 800832c:	08008371 	.word	0x08008371
 8008330:	08008371 	.word	0x08008371
 8008334:	08008371 	.word	0x08008371
 8008338:	08008371 	.word	0x08008371
 800833c:	08008369 	.word	0x08008369
 8008340:	2301      	movs	r3, #1
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e326      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008348:	2304      	movs	r3, #4
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e322      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008350:	2308      	movs	r3, #8
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e31e      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e31a      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008360:	2320      	movs	r3, #32
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e316      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e312      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008370:	2380      	movs	r3, #128	; 0x80
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e30e      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a69      	ldr	r2, [pc, #420]	; (8008524 <UART_SetConfig+0x33c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d130      	bne.n	80083e4 <UART_SetConfig+0x1fc>
 8008382:	4b67      	ldr	r3, [pc, #412]	; (8008520 <UART_SetConfig+0x338>)
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b05      	cmp	r3, #5
 800838c:	d826      	bhi.n	80083dc <UART_SetConfig+0x1f4>
 800838e:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <UART_SetConfig+0x1ac>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	080083ad 	.word	0x080083ad
 8008398:	080083b5 	.word	0x080083b5
 800839c:	080083bd 	.word	0x080083bd
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e2f0      	b.n	8008996 <UART_SetConfig+0x7ae>
 80083b4:	2304      	movs	r3, #4
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e2ec      	b.n	8008996 <UART_SetConfig+0x7ae>
 80083bc:	2308      	movs	r3, #8
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e2e8      	b.n	8008996 <UART_SetConfig+0x7ae>
 80083c4:	2310      	movs	r3, #16
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e2e4      	b.n	8008996 <UART_SetConfig+0x7ae>
 80083cc:	2320      	movs	r3, #32
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e2e0      	b.n	8008996 <UART_SetConfig+0x7ae>
 80083d4:	2340      	movs	r3, #64	; 0x40
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e2dc      	b.n	8008996 <UART_SetConfig+0x7ae>
 80083dc:	2380      	movs	r3, #128	; 0x80
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e2d8      	b.n	8008996 <UART_SetConfig+0x7ae>
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a4f      	ldr	r2, [pc, #316]	; (8008528 <UART_SetConfig+0x340>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d130      	bne.n	8008450 <UART_SetConfig+0x268>
 80083ee:	4b4c      	ldr	r3, [pc, #304]	; (8008520 <UART_SetConfig+0x338>)
 80083f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	d826      	bhi.n	8008448 <UART_SetConfig+0x260>
 80083fa:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <UART_SetConfig+0x218>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008419 	.word	0x08008419
 8008404:	08008421 	.word	0x08008421
 8008408:	08008429 	.word	0x08008429
 800840c:	08008431 	.word	0x08008431
 8008410:	08008439 	.word	0x08008439
 8008414:	08008441 	.word	0x08008441
 8008418:	2300      	movs	r3, #0
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e2ba      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008420:	2304      	movs	r3, #4
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e2b6      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008428:	2308      	movs	r3, #8
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e2b2      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008430:	2310      	movs	r3, #16
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e2ae      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008438:	2320      	movs	r3, #32
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e2aa      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008440:	2340      	movs	r3, #64	; 0x40
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e2a6      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008448:	2380      	movs	r3, #128	; 0x80
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e2a2      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a35      	ldr	r2, [pc, #212]	; (800852c <UART_SetConfig+0x344>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d130      	bne.n	80084bc <UART_SetConfig+0x2d4>
 800845a:	4b31      	ldr	r3, [pc, #196]	; (8008520 <UART_SetConfig+0x338>)
 800845c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	2b05      	cmp	r3, #5
 8008464:	d826      	bhi.n	80084b4 <UART_SetConfig+0x2cc>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <UART_SetConfig+0x284>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	08008485 	.word	0x08008485
 8008470:	0800848d 	.word	0x0800848d
 8008474:	08008495 	.word	0x08008495
 8008478:	0800849d 	.word	0x0800849d
 800847c:	080084a5 	.word	0x080084a5
 8008480:	080084ad 	.word	0x080084ad
 8008484:	2300      	movs	r3, #0
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e284      	b.n	8008996 <UART_SetConfig+0x7ae>
 800848c:	2304      	movs	r3, #4
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e280      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008494:	2308      	movs	r3, #8
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e27c      	b.n	8008996 <UART_SetConfig+0x7ae>
 800849c:	2310      	movs	r3, #16
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e278      	b.n	8008996 <UART_SetConfig+0x7ae>
 80084a4:	2320      	movs	r3, #32
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e274      	b.n	8008996 <UART_SetConfig+0x7ae>
 80084ac:	2340      	movs	r3, #64	; 0x40
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e270      	b.n	8008996 <UART_SetConfig+0x7ae>
 80084b4:	2380      	movs	r3, #128	; 0x80
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e26c      	b.n	8008996 <UART_SetConfig+0x7ae>
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a1b      	ldr	r2, [pc, #108]	; (8008530 <UART_SetConfig+0x348>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d142      	bne.n	800854c <UART_SetConfig+0x364>
 80084c6:	4b16      	ldr	r3, [pc, #88]	; (8008520 <UART_SetConfig+0x338>)
 80084c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	2b05      	cmp	r3, #5
 80084d0:	d838      	bhi.n	8008544 <UART_SetConfig+0x35c>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <UART_SetConfig+0x2f0>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084f1 	.word	0x080084f1
 80084dc:	080084f9 	.word	0x080084f9
 80084e0:	08008501 	.word	0x08008501
 80084e4:	08008509 	.word	0x08008509
 80084e8:	08008535 	.word	0x08008535
 80084ec:	0800853d 	.word	0x0800853d
 80084f0:	2300      	movs	r3, #0
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f6:	e24e      	b.n	8008996 <UART_SetConfig+0x7ae>
 80084f8:	2304      	movs	r3, #4
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fe:	e24a      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008500:	2308      	movs	r3, #8
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008506:	e246      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008508:	2310      	movs	r3, #16
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850e:	e242      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008510:	cfff69f3 	.word	0xcfff69f3
 8008514:	58000c00 	.word	0x58000c00
 8008518:	11fff4ff 	.word	0x11fff4ff
 800851c:	40011000 	.word	0x40011000
 8008520:	58024400 	.word	0x58024400
 8008524:	40004400 	.word	0x40004400
 8008528:	40004800 	.word	0x40004800
 800852c:	40004c00 	.word	0x40004c00
 8008530:	40005000 	.word	0x40005000
 8008534:	2320      	movs	r3, #32
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853a:	e22c      	b.n	8008996 <UART_SetConfig+0x7ae>
 800853c:	2340      	movs	r3, #64	; 0x40
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008542:	e228      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008544:	2380      	movs	r3, #128	; 0x80
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854a:	e224      	b.n	8008996 <UART_SetConfig+0x7ae>
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4ab1      	ldr	r2, [pc, #708]	; (8008818 <UART_SetConfig+0x630>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d176      	bne.n	8008644 <UART_SetConfig+0x45c>
 8008556:	4bb1      	ldr	r3, [pc, #708]	; (800881c <UART_SetConfig+0x634>)
 8008558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800855e:	2b28      	cmp	r3, #40	; 0x28
 8008560:	d86c      	bhi.n	800863c <UART_SetConfig+0x454>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <UART_SetConfig+0x380>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	0800860d 	.word	0x0800860d
 800856c:	0800863d 	.word	0x0800863d
 8008570:	0800863d 	.word	0x0800863d
 8008574:	0800863d 	.word	0x0800863d
 8008578:	0800863d 	.word	0x0800863d
 800857c:	0800863d 	.word	0x0800863d
 8008580:	0800863d 	.word	0x0800863d
 8008584:	0800863d 	.word	0x0800863d
 8008588:	08008615 	.word	0x08008615
 800858c:	0800863d 	.word	0x0800863d
 8008590:	0800863d 	.word	0x0800863d
 8008594:	0800863d 	.word	0x0800863d
 8008598:	0800863d 	.word	0x0800863d
 800859c:	0800863d 	.word	0x0800863d
 80085a0:	0800863d 	.word	0x0800863d
 80085a4:	0800863d 	.word	0x0800863d
 80085a8:	0800861d 	.word	0x0800861d
 80085ac:	0800863d 	.word	0x0800863d
 80085b0:	0800863d 	.word	0x0800863d
 80085b4:	0800863d 	.word	0x0800863d
 80085b8:	0800863d 	.word	0x0800863d
 80085bc:	0800863d 	.word	0x0800863d
 80085c0:	0800863d 	.word	0x0800863d
 80085c4:	0800863d 	.word	0x0800863d
 80085c8:	08008625 	.word	0x08008625
 80085cc:	0800863d 	.word	0x0800863d
 80085d0:	0800863d 	.word	0x0800863d
 80085d4:	0800863d 	.word	0x0800863d
 80085d8:	0800863d 	.word	0x0800863d
 80085dc:	0800863d 	.word	0x0800863d
 80085e0:	0800863d 	.word	0x0800863d
 80085e4:	0800863d 	.word	0x0800863d
 80085e8:	0800862d 	.word	0x0800862d
 80085ec:	0800863d 	.word	0x0800863d
 80085f0:	0800863d 	.word	0x0800863d
 80085f4:	0800863d 	.word	0x0800863d
 80085f8:	0800863d 	.word	0x0800863d
 80085fc:	0800863d 	.word	0x0800863d
 8008600:	0800863d 	.word	0x0800863d
 8008604:	0800863d 	.word	0x0800863d
 8008608:	08008635 	.word	0x08008635
 800860c:	2301      	movs	r3, #1
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e1c0      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008614:	2304      	movs	r3, #4
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e1bc      	b.n	8008996 <UART_SetConfig+0x7ae>
 800861c:	2308      	movs	r3, #8
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e1b8      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008624:	2310      	movs	r3, #16
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e1b4      	b.n	8008996 <UART_SetConfig+0x7ae>
 800862c:	2320      	movs	r3, #32
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e1b0      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008634:	2340      	movs	r3, #64	; 0x40
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863a:	e1ac      	b.n	8008996 <UART_SetConfig+0x7ae>
 800863c:	2380      	movs	r3, #128	; 0x80
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008642:	e1a8      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a75      	ldr	r2, [pc, #468]	; (8008820 <UART_SetConfig+0x638>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d130      	bne.n	80086b0 <UART_SetConfig+0x4c8>
 800864e:	4b73      	ldr	r3, [pc, #460]	; (800881c <UART_SetConfig+0x634>)
 8008650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	2b05      	cmp	r3, #5
 8008658:	d826      	bhi.n	80086a8 <UART_SetConfig+0x4c0>
 800865a:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <UART_SetConfig+0x478>)
 800865c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008660:	08008679 	.word	0x08008679
 8008664:	08008681 	.word	0x08008681
 8008668:	08008689 	.word	0x08008689
 800866c:	08008691 	.word	0x08008691
 8008670:	08008699 	.word	0x08008699
 8008674:	080086a1 	.word	0x080086a1
 8008678:	2300      	movs	r3, #0
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e18a      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008680:	2304      	movs	r3, #4
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008686:	e186      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008688:	2308      	movs	r3, #8
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e182      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008690:	2310      	movs	r3, #16
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e17e      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008698:	2320      	movs	r3, #32
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869e:	e17a      	b.n	8008996 <UART_SetConfig+0x7ae>
 80086a0:	2340      	movs	r3, #64	; 0x40
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a6:	e176      	b.n	8008996 <UART_SetConfig+0x7ae>
 80086a8:	2380      	movs	r3, #128	; 0x80
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ae:	e172      	b.n	8008996 <UART_SetConfig+0x7ae>
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a5b      	ldr	r2, [pc, #364]	; (8008824 <UART_SetConfig+0x63c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d130      	bne.n	800871c <UART_SetConfig+0x534>
 80086ba:	4b58      	ldr	r3, [pc, #352]	; (800881c <UART_SetConfig+0x634>)
 80086bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086be:	f003 0307 	and.w	r3, r3, #7
 80086c2:	2b05      	cmp	r3, #5
 80086c4:	d826      	bhi.n	8008714 <UART_SetConfig+0x52c>
 80086c6:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <UART_SetConfig+0x4e4>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	080086e5 	.word	0x080086e5
 80086d0:	080086ed 	.word	0x080086ed
 80086d4:	080086f5 	.word	0x080086f5
 80086d8:	080086fd 	.word	0x080086fd
 80086dc:	08008705 	.word	0x08008705
 80086e0:	0800870d 	.word	0x0800870d
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e154      	b.n	8008996 <UART_SetConfig+0x7ae>
 80086ec:	2304      	movs	r3, #4
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e150      	b.n	8008996 <UART_SetConfig+0x7ae>
 80086f4:	2308      	movs	r3, #8
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e14c      	b.n	8008996 <UART_SetConfig+0x7ae>
 80086fc:	2310      	movs	r3, #16
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e148      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008704:	2320      	movs	r3, #32
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870a:	e144      	b.n	8008996 <UART_SetConfig+0x7ae>
 800870c:	2340      	movs	r3, #64	; 0x40
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e140      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008714:	2380      	movs	r3, #128	; 0x80
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871a:	e13c      	b.n	8008996 <UART_SetConfig+0x7ae>
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a41      	ldr	r2, [pc, #260]	; (8008828 <UART_SetConfig+0x640>)
 8008722:	4293      	cmp	r3, r2
 8008724:	f040 8082 	bne.w	800882c <UART_SetConfig+0x644>
 8008728:	4b3c      	ldr	r3, [pc, #240]	; (800881c <UART_SetConfig+0x634>)
 800872a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008730:	2b28      	cmp	r3, #40	; 0x28
 8008732:	d86d      	bhi.n	8008810 <UART_SetConfig+0x628>
 8008734:	a201      	add	r2, pc, #4	; (adr r2, 800873c <UART_SetConfig+0x554>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	080087e1 	.word	0x080087e1
 8008740:	08008811 	.word	0x08008811
 8008744:	08008811 	.word	0x08008811
 8008748:	08008811 	.word	0x08008811
 800874c:	08008811 	.word	0x08008811
 8008750:	08008811 	.word	0x08008811
 8008754:	08008811 	.word	0x08008811
 8008758:	08008811 	.word	0x08008811
 800875c:	080087e9 	.word	0x080087e9
 8008760:	08008811 	.word	0x08008811
 8008764:	08008811 	.word	0x08008811
 8008768:	08008811 	.word	0x08008811
 800876c:	08008811 	.word	0x08008811
 8008770:	08008811 	.word	0x08008811
 8008774:	08008811 	.word	0x08008811
 8008778:	08008811 	.word	0x08008811
 800877c:	080087f1 	.word	0x080087f1
 8008780:	08008811 	.word	0x08008811
 8008784:	08008811 	.word	0x08008811
 8008788:	08008811 	.word	0x08008811
 800878c:	08008811 	.word	0x08008811
 8008790:	08008811 	.word	0x08008811
 8008794:	08008811 	.word	0x08008811
 8008798:	08008811 	.word	0x08008811
 800879c:	080087f9 	.word	0x080087f9
 80087a0:	08008811 	.word	0x08008811
 80087a4:	08008811 	.word	0x08008811
 80087a8:	08008811 	.word	0x08008811
 80087ac:	08008811 	.word	0x08008811
 80087b0:	08008811 	.word	0x08008811
 80087b4:	08008811 	.word	0x08008811
 80087b8:	08008811 	.word	0x08008811
 80087bc:	08008801 	.word	0x08008801
 80087c0:	08008811 	.word	0x08008811
 80087c4:	08008811 	.word	0x08008811
 80087c8:	08008811 	.word	0x08008811
 80087cc:	08008811 	.word	0x08008811
 80087d0:	08008811 	.word	0x08008811
 80087d4:	08008811 	.word	0x08008811
 80087d8:	08008811 	.word	0x08008811
 80087dc:	08008809 	.word	0x08008809
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e0d6      	b.n	8008996 <UART_SetConfig+0x7ae>
 80087e8:	2304      	movs	r3, #4
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ee:	e0d2      	b.n	8008996 <UART_SetConfig+0x7ae>
 80087f0:	2308      	movs	r3, #8
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e0ce      	b.n	8008996 <UART_SetConfig+0x7ae>
 80087f8:	2310      	movs	r3, #16
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fe:	e0ca      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008800:	2320      	movs	r3, #32
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008806:	e0c6      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008808:	2340      	movs	r3, #64	; 0x40
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880e:	e0c2      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008810:	2380      	movs	r3, #128	; 0x80
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008816:	e0be      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008818:	40011400 	.word	0x40011400
 800881c:	58024400 	.word	0x58024400
 8008820:	40007800 	.word	0x40007800
 8008824:	40007c00 	.word	0x40007c00
 8008828:	40011800 	.word	0x40011800
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4aad      	ldr	r2, [pc, #692]	; (8008ae8 <UART_SetConfig+0x900>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d176      	bne.n	8008924 <UART_SetConfig+0x73c>
 8008836:	4bad      	ldr	r3, [pc, #692]	; (8008aec <UART_SetConfig+0x904>)
 8008838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800883e:	2b28      	cmp	r3, #40	; 0x28
 8008840:	d86c      	bhi.n	800891c <UART_SetConfig+0x734>
 8008842:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <UART_SetConfig+0x660>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	080088ed 	.word	0x080088ed
 800884c:	0800891d 	.word	0x0800891d
 8008850:	0800891d 	.word	0x0800891d
 8008854:	0800891d 	.word	0x0800891d
 8008858:	0800891d 	.word	0x0800891d
 800885c:	0800891d 	.word	0x0800891d
 8008860:	0800891d 	.word	0x0800891d
 8008864:	0800891d 	.word	0x0800891d
 8008868:	080088f5 	.word	0x080088f5
 800886c:	0800891d 	.word	0x0800891d
 8008870:	0800891d 	.word	0x0800891d
 8008874:	0800891d 	.word	0x0800891d
 8008878:	0800891d 	.word	0x0800891d
 800887c:	0800891d 	.word	0x0800891d
 8008880:	0800891d 	.word	0x0800891d
 8008884:	0800891d 	.word	0x0800891d
 8008888:	080088fd 	.word	0x080088fd
 800888c:	0800891d 	.word	0x0800891d
 8008890:	0800891d 	.word	0x0800891d
 8008894:	0800891d 	.word	0x0800891d
 8008898:	0800891d 	.word	0x0800891d
 800889c:	0800891d 	.word	0x0800891d
 80088a0:	0800891d 	.word	0x0800891d
 80088a4:	0800891d 	.word	0x0800891d
 80088a8:	08008905 	.word	0x08008905
 80088ac:	0800891d 	.word	0x0800891d
 80088b0:	0800891d 	.word	0x0800891d
 80088b4:	0800891d 	.word	0x0800891d
 80088b8:	0800891d 	.word	0x0800891d
 80088bc:	0800891d 	.word	0x0800891d
 80088c0:	0800891d 	.word	0x0800891d
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	0800890d 	.word	0x0800890d
 80088cc:	0800891d 	.word	0x0800891d
 80088d0:	0800891d 	.word	0x0800891d
 80088d4:	0800891d 	.word	0x0800891d
 80088d8:	0800891d 	.word	0x0800891d
 80088dc:	0800891d 	.word	0x0800891d
 80088e0:	0800891d 	.word	0x0800891d
 80088e4:	0800891d 	.word	0x0800891d
 80088e8:	08008915 	.word	0x08008915
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f2:	e050      	b.n	8008996 <UART_SetConfig+0x7ae>
 80088f4:	2304      	movs	r3, #4
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e04c      	b.n	8008996 <UART_SetConfig+0x7ae>
 80088fc:	2308      	movs	r3, #8
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008902:	e048      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008904:	2310      	movs	r3, #16
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e044      	b.n	8008996 <UART_SetConfig+0x7ae>
 800890c:	2320      	movs	r3, #32
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e040      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008914:	2340      	movs	r3, #64	; 0x40
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e03c      	b.n	8008996 <UART_SetConfig+0x7ae>
 800891c:	2380      	movs	r3, #128	; 0x80
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e038      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a71      	ldr	r2, [pc, #452]	; (8008af0 <UART_SetConfig+0x908>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d130      	bne.n	8008990 <UART_SetConfig+0x7a8>
 800892e:	4b6f      	ldr	r3, [pc, #444]	; (8008aec <UART_SetConfig+0x904>)
 8008930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	2b05      	cmp	r3, #5
 8008938:	d826      	bhi.n	8008988 <UART_SetConfig+0x7a0>
 800893a:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <UART_SetConfig+0x758>)
 800893c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008940:	08008959 	.word	0x08008959
 8008944:	08008961 	.word	0x08008961
 8008948:	08008969 	.word	0x08008969
 800894c:	08008971 	.word	0x08008971
 8008950:	08008979 	.word	0x08008979
 8008954:	08008981 	.word	0x08008981
 8008958:	2302      	movs	r3, #2
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895e:	e01a      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008960:	2304      	movs	r3, #4
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008966:	e016      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008968:	2308      	movs	r3, #8
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896e:	e012      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008970:	2310      	movs	r3, #16
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e00e      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008978:	2320      	movs	r3, #32
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e00a      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008980:	2340      	movs	r3, #64	; 0x40
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e006      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008988:	2380      	movs	r3, #128	; 0x80
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e002      	b.n	8008996 <UART_SetConfig+0x7ae>
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a55      	ldr	r2, [pc, #340]	; (8008af0 <UART_SetConfig+0x908>)
 800899c:	4293      	cmp	r3, r2
 800899e:	f040 80f8 	bne.w	8008b92 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	dc46      	bgt.n	8008a38 <UART_SetConfig+0x850>
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	db75      	blt.n	8008a9a <UART_SetConfig+0x8b2>
 80089ae:	3b02      	subs	r3, #2
 80089b0:	2b1e      	cmp	r3, #30
 80089b2:	d872      	bhi.n	8008a9a <UART_SetConfig+0x8b2>
 80089b4:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <UART_SetConfig+0x7d4>)
 80089b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ba:	bf00      	nop
 80089bc:	08008a3f 	.word	0x08008a3f
 80089c0:	08008a9b 	.word	0x08008a9b
 80089c4:	08008a47 	.word	0x08008a47
 80089c8:	08008a9b 	.word	0x08008a9b
 80089cc:	08008a9b 	.word	0x08008a9b
 80089d0:	08008a9b 	.word	0x08008a9b
 80089d4:	08008a57 	.word	0x08008a57
 80089d8:	08008a9b 	.word	0x08008a9b
 80089dc:	08008a9b 	.word	0x08008a9b
 80089e0:	08008a9b 	.word	0x08008a9b
 80089e4:	08008a9b 	.word	0x08008a9b
 80089e8:	08008a9b 	.word	0x08008a9b
 80089ec:	08008a9b 	.word	0x08008a9b
 80089f0:	08008a9b 	.word	0x08008a9b
 80089f4:	08008a67 	.word	0x08008a67
 80089f8:	08008a9b 	.word	0x08008a9b
 80089fc:	08008a9b 	.word	0x08008a9b
 8008a00:	08008a9b 	.word	0x08008a9b
 8008a04:	08008a9b 	.word	0x08008a9b
 8008a08:	08008a9b 	.word	0x08008a9b
 8008a0c:	08008a9b 	.word	0x08008a9b
 8008a10:	08008a9b 	.word	0x08008a9b
 8008a14:	08008a9b 	.word	0x08008a9b
 8008a18:	08008a9b 	.word	0x08008a9b
 8008a1c:	08008a9b 	.word	0x08008a9b
 8008a20:	08008a9b 	.word	0x08008a9b
 8008a24:	08008a9b 	.word	0x08008a9b
 8008a28:	08008a9b 	.word	0x08008a9b
 8008a2c:	08008a9b 	.word	0x08008a9b
 8008a30:	08008a9b 	.word	0x08008a9b
 8008a34:	08008a8d 	.word	0x08008a8d
 8008a38:	2b40      	cmp	r3, #64	; 0x40
 8008a3a:	d02a      	beq.n	8008a92 <UART_SetConfig+0x8aa>
 8008a3c:	e02d      	b.n	8008a9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a3e:	f7fe fba3 	bl	8007188 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a44:	e02f      	b.n	8008aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fbb2 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a54:	e027      	b.n	8008aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a56:	f107 0318 	add.w	r3, r7, #24
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fcfe 	bl	800745c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a64:	e01f      	b.n	8008aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a66:	4b21      	ldr	r3, [pc, #132]	; (8008aec <UART_SetConfig+0x904>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0320 	and.w	r3, r3, #32
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d009      	beq.n	8008a86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a72:	4b1e      	ldr	r3, [pc, #120]	; (8008aec <UART_SetConfig+0x904>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	08db      	lsrs	r3, r3, #3
 8008a78:	f003 0303 	and.w	r3, r3, #3
 8008a7c:	4a1d      	ldr	r2, [pc, #116]	; (8008af4 <UART_SetConfig+0x90c>)
 8008a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a84:	e00f      	b.n	8008aa6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a86:	4b1b      	ldr	r3, [pc, #108]	; (8008af4 <UART_SetConfig+0x90c>)
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a8a:	e00c      	b.n	8008aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <UART_SetConfig+0x910>)
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a90:	e009      	b.n	8008aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a98:	e005      	b.n	8008aa6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008aa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 81ee 	beq.w	8008e8a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	4a12      	ldr	r2, [pc, #72]	; (8008afc <UART_SetConfig+0x914>)
 8008ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ac0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4413      	add	r3, r2
 8008acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d305      	bcc.n	8008ade <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d910      	bls.n	8008b00 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ae4:	e1d1      	b.n	8008e8a <UART_SetConfig+0xca2>
 8008ae6:	bf00      	nop
 8008ae8:	40011c00 	.word	0x40011c00
 8008aec:	58024400 	.word	0x58024400
 8008af0:	58000c00 	.word	0x58000c00
 8008af4:	03d09000 	.word	0x03d09000
 8008af8:	003d0900 	.word	0x003d0900
 8008afc:	0800c024 	.word	0x0800c024
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	2200      	movs	r2, #0
 8008b04:	60bb      	str	r3, [r7, #8]
 8008b06:	60fa      	str	r2, [r7, #12]
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	4ac0      	ldr	r2, [pc, #768]	; (8008e10 <UART_SetConfig+0xc28>)
 8008b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	2200      	movs	r2, #0
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	607a      	str	r2, [r7, #4]
 8008b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b22:	f7f7 fc3d 	bl	80003a0 <__aeabi_uldivmod>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f04f 0200 	mov.w	r2, #0
 8008b32:	f04f 0300 	mov.w	r3, #0
 8008b36:	020b      	lsls	r3, r1, #8
 8008b38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b3c:	0202      	lsls	r2, r0, #8
 8008b3e:	6979      	ldr	r1, [r7, #20]
 8008b40:	6849      	ldr	r1, [r1, #4]
 8008b42:	0849      	lsrs	r1, r1, #1
 8008b44:	2000      	movs	r0, #0
 8008b46:	460c      	mov	r4, r1
 8008b48:	4605      	mov	r5, r0
 8008b4a:	eb12 0804 	adds.w	r8, r2, r4
 8008b4e:	eb43 0905 	adc.w	r9, r3, r5
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	469a      	mov	sl, r3
 8008b5a:	4693      	mov	fp, r2
 8008b5c:	4652      	mov	r2, sl
 8008b5e:	465b      	mov	r3, fp
 8008b60:	4640      	mov	r0, r8
 8008b62:	4649      	mov	r1, r9
 8008b64:	f7f7 fc1c 	bl	80003a0 <__aeabi_uldivmod>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b76:	d308      	bcc.n	8008b8a <UART_SetConfig+0x9a2>
 8008b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b7e:	d204      	bcs.n	8008b8a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b86:	60da      	str	r2, [r3, #12]
 8008b88:	e17f      	b.n	8008e8a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b90:	e17b      	b.n	8008e8a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b9a:	f040 80bd 	bne.w	8008d18 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008b9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	dc48      	bgt.n	8008c38 <UART_SetConfig+0xa50>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	db7b      	blt.n	8008ca2 <UART_SetConfig+0xaba>
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	d879      	bhi.n	8008ca2 <UART_SetConfig+0xaba>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <UART_SetConfig+0x9cc>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008c3f 	.word	0x08008c3f
 8008bb8:	08008c47 	.word	0x08008c47
 8008bbc:	08008ca3 	.word	0x08008ca3
 8008bc0:	08008ca3 	.word	0x08008ca3
 8008bc4:	08008c4f 	.word	0x08008c4f
 8008bc8:	08008ca3 	.word	0x08008ca3
 8008bcc:	08008ca3 	.word	0x08008ca3
 8008bd0:	08008ca3 	.word	0x08008ca3
 8008bd4:	08008c5f 	.word	0x08008c5f
 8008bd8:	08008ca3 	.word	0x08008ca3
 8008bdc:	08008ca3 	.word	0x08008ca3
 8008be0:	08008ca3 	.word	0x08008ca3
 8008be4:	08008ca3 	.word	0x08008ca3
 8008be8:	08008ca3 	.word	0x08008ca3
 8008bec:	08008ca3 	.word	0x08008ca3
 8008bf0:	08008ca3 	.word	0x08008ca3
 8008bf4:	08008c6f 	.word	0x08008c6f
 8008bf8:	08008ca3 	.word	0x08008ca3
 8008bfc:	08008ca3 	.word	0x08008ca3
 8008c00:	08008ca3 	.word	0x08008ca3
 8008c04:	08008ca3 	.word	0x08008ca3
 8008c08:	08008ca3 	.word	0x08008ca3
 8008c0c:	08008ca3 	.word	0x08008ca3
 8008c10:	08008ca3 	.word	0x08008ca3
 8008c14:	08008ca3 	.word	0x08008ca3
 8008c18:	08008ca3 	.word	0x08008ca3
 8008c1c:	08008ca3 	.word	0x08008ca3
 8008c20:	08008ca3 	.word	0x08008ca3
 8008c24:	08008ca3 	.word	0x08008ca3
 8008c28:	08008ca3 	.word	0x08008ca3
 8008c2c:	08008ca3 	.word	0x08008ca3
 8008c30:	08008ca3 	.word	0x08008ca3
 8008c34:	08008c95 	.word	0x08008c95
 8008c38:	2b40      	cmp	r3, #64	; 0x40
 8008c3a:	d02e      	beq.n	8008c9a <UART_SetConfig+0xab2>
 8008c3c:	e031      	b.n	8008ca2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c3e:	f7fd fb6b 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8008c42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c44:	e033      	b.n	8008cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c46:	f7fd fb7d 	bl	8006344 <HAL_RCC_GetPCLK2Freq>
 8008c4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c4c:	e02f      	b.n	8008cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fe faae 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c5c:	e027      	b.n	8008cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c5e:	f107 0318 	add.w	r3, r7, #24
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fbfa 	bl	800745c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c6c:	e01f      	b.n	8008cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c6e:	4b69      	ldr	r3, [pc, #420]	; (8008e14 <UART_SetConfig+0xc2c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c7a:	4b66      	ldr	r3, [pc, #408]	; (8008e14 <UART_SetConfig+0xc2c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	08db      	lsrs	r3, r3, #3
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	4a64      	ldr	r2, [pc, #400]	; (8008e18 <UART_SetConfig+0xc30>)
 8008c86:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c8c:	e00f      	b.n	8008cae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008c8e:	4b62      	ldr	r3, [pc, #392]	; (8008e18 <UART_SetConfig+0xc30>)
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c92:	e00c      	b.n	8008cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c94:	4b61      	ldr	r3, [pc, #388]	; (8008e1c <UART_SetConfig+0xc34>)
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c98:	e009      	b.n	8008cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca0:	e005      	b.n	8008cae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 80ea 	beq.w	8008e8a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	4a55      	ldr	r2, [pc, #340]	; (8008e10 <UART_SetConfig+0xc28>)
 8008cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cc8:	005a      	lsls	r2, r3, #1
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	441a      	add	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cda:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	2b0f      	cmp	r3, #15
 8008ce0:	d916      	bls.n	8008d10 <UART_SetConfig+0xb28>
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce8:	d212      	bcs.n	8008d10 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	f023 030f 	bic.w	r3, r3, #15
 8008cf2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf6:	085b      	lsrs	r3, r3, #1
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d02:	4313      	orrs	r3, r2
 8008d04:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008d0c:	60da      	str	r2, [r3, #12]
 8008d0e:	e0bc      	b.n	8008e8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d16:	e0b8      	b.n	8008e8a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	dc4b      	bgt.n	8008db8 <UART_SetConfig+0xbd0>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f2c0 8087 	blt.w	8008e34 <UART_SetConfig+0xc4c>
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	f200 8084 	bhi.w	8008e34 <UART_SetConfig+0xc4c>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <UART_SetConfig+0xb4c>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008dbf 	.word	0x08008dbf
 8008d38:	08008dc7 	.word	0x08008dc7
 8008d3c:	08008e35 	.word	0x08008e35
 8008d40:	08008e35 	.word	0x08008e35
 8008d44:	08008dcf 	.word	0x08008dcf
 8008d48:	08008e35 	.word	0x08008e35
 8008d4c:	08008e35 	.word	0x08008e35
 8008d50:	08008e35 	.word	0x08008e35
 8008d54:	08008ddf 	.word	0x08008ddf
 8008d58:	08008e35 	.word	0x08008e35
 8008d5c:	08008e35 	.word	0x08008e35
 8008d60:	08008e35 	.word	0x08008e35
 8008d64:	08008e35 	.word	0x08008e35
 8008d68:	08008e35 	.word	0x08008e35
 8008d6c:	08008e35 	.word	0x08008e35
 8008d70:	08008e35 	.word	0x08008e35
 8008d74:	08008def 	.word	0x08008def
 8008d78:	08008e35 	.word	0x08008e35
 8008d7c:	08008e35 	.word	0x08008e35
 8008d80:	08008e35 	.word	0x08008e35
 8008d84:	08008e35 	.word	0x08008e35
 8008d88:	08008e35 	.word	0x08008e35
 8008d8c:	08008e35 	.word	0x08008e35
 8008d90:	08008e35 	.word	0x08008e35
 8008d94:	08008e35 	.word	0x08008e35
 8008d98:	08008e35 	.word	0x08008e35
 8008d9c:	08008e35 	.word	0x08008e35
 8008da0:	08008e35 	.word	0x08008e35
 8008da4:	08008e35 	.word	0x08008e35
 8008da8:	08008e35 	.word	0x08008e35
 8008dac:	08008e35 	.word	0x08008e35
 8008db0:	08008e35 	.word	0x08008e35
 8008db4:	08008e27 	.word	0x08008e27
 8008db8:	2b40      	cmp	r3, #64	; 0x40
 8008dba:	d037      	beq.n	8008e2c <UART_SetConfig+0xc44>
 8008dbc:	e03a      	b.n	8008e34 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dbe:	f7fd faab 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8008dc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dc4:	e03c      	b.n	8008e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dc6:	f7fd fabd 	bl	8006344 <HAL_RCC_GetPCLK2Freq>
 8008dca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dcc:	e038      	b.n	8008e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe f9ee 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ddc:	e030      	b.n	8008e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dde:	f107 0318 	add.w	r3, r7, #24
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fb3a 	bl	800745c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dec:	e028      	b.n	8008e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <UART_SetConfig+0xc2c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d012      	beq.n	8008e20 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dfa:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <UART_SetConfig+0xc2c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	08db      	lsrs	r3, r3, #3
 8008e00:	f003 0303 	and.w	r3, r3, #3
 8008e04:	4a04      	ldr	r2, [pc, #16]	; (8008e18 <UART_SetConfig+0xc30>)
 8008e06:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e0c:	e018      	b.n	8008e40 <UART_SetConfig+0xc58>
 8008e0e:	bf00      	nop
 8008e10:	0800c024 	.word	0x0800c024
 8008e14:	58024400 	.word	0x58024400
 8008e18:	03d09000 	.word	0x03d09000
 8008e1c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008e20:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <UART_SetConfig+0xccc>)
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e24:	e00c      	b.n	8008e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e26:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <UART_SetConfig+0xcd0>)
 8008e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e2a:	e009      	b.n	8008e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e32:	e005      	b.n	8008e40 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e3e:	bf00      	nop
    }

    if (pclk != 0U)
 8008e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d021      	beq.n	8008e8a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	4a1c      	ldr	r2, [pc, #112]	; (8008ebc <UART_SetConfig+0xcd4>)
 8008e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e54:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	085b      	lsrs	r3, r3, #1
 8008e5e:	441a      	add	r2, r3
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e68:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	2b0f      	cmp	r3, #15
 8008e6e:	d909      	bls.n	8008e84 <UART_SetConfig+0xc9c>
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e76:	d205      	bcs.n	8008e84 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60da      	str	r2, [r3, #12]
 8008e82:	e002      	b.n	8008e8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ea6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3748      	adds	r7, #72	; 0x48
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eb4:	03d09000 	.word	0x03d09000
 8008eb8:	003d0900 	.word	0x003d0900
 8008ebc:	0800c024 	.word	0x0800c024

08008ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00a      	beq.n	8008f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f32:	f003 0308 	and.w	r3, r3, #8
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	f003 0310 	and.w	r3, r3, #16
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01a      	beq.n	8008fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fbe:	d10a      	bne.n	8008fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00a      	beq.n	8008ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	605a      	str	r2, [r3, #4]
  }
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af02      	add	r7, sp, #8
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009014:	f7f8 fe2a 	bl	8001c6c <HAL_GetTick>
 8009018:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0308 	and.w	r3, r3, #8
 8009024:	2b08      	cmp	r3, #8
 8009026:	d10e      	bne.n	8009046 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f82f 	bl	800909a <UART_WaitOnFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e025      	b.n	8009092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b04      	cmp	r3, #4
 8009052:	d10e      	bne.n	8009072 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f819 	bl	800909a <UART_WaitOnFlagUntilTimeout>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e00f      	b.n	8009092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2220      	movs	r2, #32
 8009076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2220      	movs	r2, #32
 800907e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b09c      	sub	sp, #112	; 0x70
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	603b      	str	r3, [r7, #0]
 80090a6:	4613      	mov	r3, r2
 80090a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090aa:	e0a9      	b.n	8009200 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b2:	f000 80a5 	beq.w	8009200 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b6:	f7f8 fdd9 	bl	8001c6c <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d302      	bcc.n	80090cc <UART_WaitOnFlagUntilTimeout+0x32>
 80090c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d140      	bne.n	800914e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090e0:	667b      	str	r3, [r7, #100]	; 0x64
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e6      	bne.n	80090cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800910e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009110:	f023 0301 	bic.w	r3, r3, #1
 8009114:	663b      	str	r3, [r7, #96]	; 0x60
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3308      	adds	r3, #8
 800911c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800911e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800912c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e5      	bne.n	80090fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2220      	movs	r2, #32
 8009136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2220      	movs	r2, #32
 800913e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	e069      	b.n	8009222 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	d051      	beq.n	8009200 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800916a:	d149      	bne.n	8009200 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800918a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009194:	637b      	str	r3, [r7, #52]	; 0x34
 8009196:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800919a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e6      	bne.n	8009176 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	613b      	str	r3, [r7, #16]
   return(result);
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f023 0301 	bic.w	r3, r3, #1
 80091be:	66bb      	str	r3, [r7, #104]	; 0x68
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091c8:	623a      	str	r2, [r7, #32]
 80091ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	69f9      	ldr	r1, [r7, #28]
 80091ce:	6a3a      	ldr	r2, [r7, #32]
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e5      	bne.n	80091a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2220      	movs	r2, #32
 80091e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2220      	movs	r2, #32
 80091e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e010      	b.n	8009222 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69da      	ldr	r2, [r3, #28]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	4013      	ands	r3, r2
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	429a      	cmp	r2, r3
 800920e:	bf0c      	ite	eq
 8009210:	2301      	moveq	r3, #1
 8009212:	2300      	movne	r3, #0
 8009214:	b2db      	uxtb	r3, r3
 8009216:	461a      	mov	r2, r3
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	429a      	cmp	r2, r3
 800921c:	f43f af46 	beq.w	80090ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3770      	adds	r7, #112	; 0x70
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b095      	sub	sp, #84	; 0x54
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009252:	643b      	str	r3, [r7, #64]	; 0x40
 8009254:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e6      	bne.n	8009234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3308      	adds	r3, #8
 800926c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	61fb      	str	r3, [r7, #28]
   return(result);
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	4b1e      	ldr	r3, [pc, #120]	; (80092f4 <UART_EndRxTransfer+0xc8>)
 800927a:	4013      	ands	r3, r2
 800927c:	64bb      	str	r3, [r7, #72]	; 0x48
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800928c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e5      	bne.n	8009266 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d118      	bne.n	80092d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f023 0310 	bic.w	r3, r3, #16
 80092b6:	647b      	str	r3, [r7, #68]	; 0x44
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092c0:	61bb      	str	r3, [r7, #24]
 80092c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6979      	ldr	r1, [r7, #20]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	613b      	str	r3, [r7, #16]
   return(result);
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e6      	bne.n	80092a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80092e8:	bf00      	nop
 80092ea:	3754      	adds	r7, #84	; 0x54
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	effffffe 	.word	0xeffffffe

080092f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7fe ff50 	bl	80081bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800931c:	bf00      	nop
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	60bb      	str	r3, [r7, #8]
   return(result);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009340:	61fb      	str	r3, [r7, #28]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	61bb      	str	r3, [r7, #24]
 800934c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6979      	ldr	r1, [r7, #20]
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	613b      	str	r3, [r7, #16]
   return(result);
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e6      	bne.n	800932c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7fe ff1b 	bl	80081a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009372:	bf00      	nop
 8009374:	3720      	adds	r7, #32
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009382:	bf00      	nop
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093aa:	bf00      	nop
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b085      	sub	sp, #20
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_UARTEx_DisableFifoMode+0x16>
 80093c8:	2302      	movs	r3, #2
 80093ca:	e027      	b.n	800941c <HAL_UARTEx_DisableFifoMode+0x66>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2224      	movs	r2, #36	; 0x24
 80093d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0201 	bic.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800943c:	2302      	movs	r3, #2
 800943e:	e02d      	b.n	800949c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2224      	movs	r2, #36	; 0x24
 800944c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0201 	bic.w	r2, r2, #1
 8009466:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f84f 	bl	8009520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e02d      	b.n	8009518 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	; 0x24
 80094c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0201 	bic.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f811 	bl	8009520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800952c:	2b00      	cmp	r3, #0
 800952e:	d108      	bne.n	8009542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009540:	e031      	b.n	80095a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009542:	2310      	movs	r3, #16
 8009544:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009546:	2310      	movs	r3, #16
 8009548:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	0e5b      	lsrs	r3, r3, #25
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f003 0307 	and.w	r3, r3, #7
 8009558:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	0f5b      	lsrs	r3, r3, #29
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	7b3a      	ldrb	r2, [r7, #12]
 800956e:	4911      	ldr	r1, [pc, #68]	; (80095b4 <UARTEx_SetNbDataToProcess+0x94>)
 8009570:	5c8a      	ldrb	r2, [r1, r2]
 8009572:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009576:	7b3a      	ldrb	r2, [r7, #12]
 8009578:	490f      	ldr	r1, [pc, #60]	; (80095b8 <UARTEx_SetNbDataToProcess+0x98>)
 800957a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800957c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009580:	b29a      	uxth	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	7b7a      	ldrb	r2, [r7, #13]
 800958c:	4909      	ldr	r1, [pc, #36]	; (80095b4 <UARTEx_SetNbDataToProcess+0x94>)
 800958e:	5c8a      	ldrb	r2, [r1, r2]
 8009590:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009594:	7b7a      	ldrb	r2, [r7, #13]
 8009596:	4908      	ldr	r1, [pc, #32]	; (80095b8 <UARTEx_SetNbDataToProcess+0x98>)
 8009598:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800959a:	fb93 f3f2 	sdiv	r3, r3, r2
 800959e:	b29a      	uxth	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	0800c03c 	.word	0x0800c03c
 80095b8:	0800c044 	.word	0x0800c044

080095bc <__assert_func>:
 80095bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095be:	4614      	mov	r4, r2
 80095c0:	461a      	mov	r2, r3
 80095c2:	4b09      	ldr	r3, [pc, #36]	; (80095e8 <__assert_func+0x2c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4605      	mov	r5, r0
 80095c8:	68d8      	ldr	r0, [r3, #12]
 80095ca:	b14c      	cbz	r4, 80095e0 <__assert_func+0x24>
 80095cc:	4b07      	ldr	r3, [pc, #28]	; (80095ec <__assert_func+0x30>)
 80095ce:	9100      	str	r1, [sp, #0]
 80095d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095d4:	4906      	ldr	r1, [pc, #24]	; (80095f0 <__assert_func+0x34>)
 80095d6:	462b      	mov	r3, r5
 80095d8:	f000 f814 	bl	8009604 <fiprintf>
 80095dc:	f000 feae 	bl	800a33c <abort>
 80095e0:	4b04      	ldr	r3, [pc, #16]	; (80095f4 <__assert_func+0x38>)
 80095e2:	461c      	mov	r4, r3
 80095e4:	e7f3      	b.n	80095ce <__assert_func+0x12>
 80095e6:	bf00      	nop
 80095e8:	24000010 	.word	0x24000010
 80095ec:	0800c04c 	.word	0x0800c04c
 80095f0:	0800c059 	.word	0x0800c059
 80095f4:	0800c087 	.word	0x0800c087

080095f8 <__errno>:
 80095f8:	4b01      	ldr	r3, [pc, #4]	; (8009600 <__errno+0x8>)
 80095fa:	6818      	ldr	r0, [r3, #0]
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	24000010 	.word	0x24000010

08009604 <fiprintf>:
 8009604:	b40e      	push	{r1, r2, r3}
 8009606:	b503      	push	{r0, r1, lr}
 8009608:	4601      	mov	r1, r0
 800960a:	ab03      	add	r3, sp, #12
 800960c:	4805      	ldr	r0, [pc, #20]	; (8009624 <fiprintf+0x20>)
 800960e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009612:	6800      	ldr	r0, [r0, #0]
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	f000 f85d 	bl	80096d4 <_vfiprintf_r>
 800961a:	b002      	add	sp, #8
 800961c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009620:	b003      	add	sp, #12
 8009622:	4770      	bx	lr
 8009624:	24000010 	.word	0x24000010

08009628 <__libc_init_array>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	4d0d      	ldr	r5, [pc, #52]	; (8009660 <__libc_init_array+0x38>)
 800962c:	4c0d      	ldr	r4, [pc, #52]	; (8009664 <__libc_init_array+0x3c>)
 800962e:	1b64      	subs	r4, r4, r5
 8009630:	10a4      	asrs	r4, r4, #2
 8009632:	2600      	movs	r6, #0
 8009634:	42a6      	cmp	r6, r4
 8009636:	d109      	bne.n	800964c <__libc_init_array+0x24>
 8009638:	4d0b      	ldr	r5, [pc, #44]	; (8009668 <__libc_init_array+0x40>)
 800963a:	4c0c      	ldr	r4, [pc, #48]	; (800966c <__libc_init_array+0x44>)
 800963c:	f002 fc5e 	bl	800befc <_init>
 8009640:	1b64      	subs	r4, r4, r5
 8009642:	10a4      	asrs	r4, r4, #2
 8009644:	2600      	movs	r6, #0
 8009646:	42a6      	cmp	r6, r4
 8009648:	d105      	bne.n	8009656 <__libc_init_array+0x2e>
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009650:	4798      	blx	r3
 8009652:	3601      	adds	r6, #1
 8009654:	e7ee      	b.n	8009634 <__libc_init_array+0xc>
 8009656:	f855 3b04 	ldr.w	r3, [r5], #4
 800965a:	4798      	blx	r3
 800965c:	3601      	adds	r6, #1
 800965e:	e7f2      	b.n	8009646 <__libc_init_array+0x1e>
 8009660:	0800c430 	.word	0x0800c430
 8009664:	0800c430 	.word	0x0800c430
 8009668:	0800c430 	.word	0x0800c430
 800966c:	0800c434 	.word	0x0800c434

08009670 <memset>:
 8009670:	4402      	add	r2, r0
 8009672:	4603      	mov	r3, r0
 8009674:	4293      	cmp	r3, r2
 8009676:	d100      	bne.n	800967a <memset+0xa>
 8009678:	4770      	bx	lr
 800967a:	f803 1b01 	strb.w	r1, [r3], #1
 800967e:	e7f9      	b.n	8009674 <memset+0x4>

08009680 <__sfputc_r>:
 8009680:	6893      	ldr	r3, [r2, #8]
 8009682:	3b01      	subs	r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	b410      	push	{r4}
 8009688:	6093      	str	r3, [r2, #8]
 800968a:	da08      	bge.n	800969e <__sfputc_r+0x1e>
 800968c:	6994      	ldr	r4, [r2, #24]
 800968e:	42a3      	cmp	r3, r4
 8009690:	db01      	blt.n	8009696 <__sfputc_r+0x16>
 8009692:	290a      	cmp	r1, #10
 8009694:	d103      	bne.n	800969e <__sfputc_r+0x1e>
 8009696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800969a:	f000 bd8f 	b.w	800a1bc <__swbuf_r>
 800969e:	6813      	ldr	r3, [r2, #0]
 80096a0:	1c58      	adds	r0, r3, #1
 80096a2:	6010      	str	r0, [r2, #0]
 80096a4:	7019      	strb	r1, [r3, #0]
 80096a6:	4608      	mov	r0, r1
 80096a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <__sfputs_r>:
 80096ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b0:	4606      	mov	r6, r0
 80096b2:	460f      	mov	r7, r1
 80096b4:	4614      	mov	r4, r2
 80096b6:	18d5      	adds	r5, r2, r3
 80096b8:	42ac      	cmp	r4, r5
 80096ba:	d101      	bne.n	80096c0 <__sfputs_r+0x12>
 80096bc:	2000      	movs	r0, #0
 80096be:	e007      	b.n	80096d0 <__sfputs_r+0x22>
 80096c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c4:	463a      	mov	r2, r7
 80096c6:	4630      	mov	r0, r6
 80096c8:	f7ff ffda 	bl	8009680 <__sfputc_r>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d1f3      	bne.n	80096b8 <__sfputs_r+0xa>
 80096d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096d4 <_vfiprintf_r>:
 80096d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	460d      	mov	r5, r1
 80096da:	b09d      	sub	sp, #116	; 0x74
 80096dc:	4614      	mov	r4, r2
 80096de:	4698      	mov	r8, r3
 80096e0:	4606      	mov	r6, r0
 80096e2:	b118      	cbz	r0, 80096ec <_vfiprintf_r+0x18>
 80096e4:	6983      	ldr	r3, [r0, #24]
 80096e6:	b90b      	cbnz	r3, 80096ec <_vfiprintf_r+0x18>
 80096e8:	f001 fd42 	bl	800b170 <__sinit>
 80096ec:	4b89      	ldr	r3, [pc, #548]	; (8009914 <_vfiprintf_r+0x240>)
 80096ee:	429d      	cmp	r5, r3
 80096f0:	d11b      	bne.n	800972a <_vfiprintf_r+0x56>
 80096f2:	6875      	ldr	r5, [r6, #4]
 80096f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f6:	07d9      	lsls	r1, r3, #31
 80096f8:	d405      	bmi.n	8009706 <_vfiprintf_r+0x32>
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	059a      	lsls	r2, r3, #22
 80096fe:	d402      	bmi.n	8009706 <_vfiprintf_r+0x32>
 8009700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009702:	f001 fdd8 	bl	800b2b6 <__retarget_lock_acquire_recursive>
 8009706:	89ab      	ldrh	r3, [r5, #12]
 8009708:	071b      	lsls	r3, r3, #28
 800970a:	d501      	bpl.n	8009710 <_vfiprintf_r+0x3c>
 800970c:	692b      	ldr	r3, [r5, #16]
 800970e:	b9eb      	cbnz	r3, 800974c <_vfiprintf_r+0x78>
 8009710:	4629      	mov	r1, r5
 8009712:	4630      	mov	r0, r6
 8009714:	f000 fda4 	bl	800a260 <__swsetup_r>
 8009718:	b1c0      	cbz	r0, 800974c <_vfiprintf_r+0x78>
 800971a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800971c:	07dc      	lsls	r4, r3, #31
 800971e:	d50e      	bpl.n	800973e <_vfiprintf_r+0x6a>
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	b01d      	add	sp, #116	; 0x74
 8009726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972a:	4b7b      	ldr	r3, [pc, #492]	; (8009918 <_vfiprintf_r+0x244>)
 800972c:	429d      	cmp	r5, r3
 800972e:	d101      	bne.n	8009734 <_vfiprintf_r+0x60>
 8009730:	68b5      	ldr	r5, [r6, #8]
 8009732:	e7df      	b.n	80096f4 <_vfiprintf_r+0x20>
 8009734:	4b79      	ldr	r3, [pc, #484]	; (800991c <_vfiprintf_r+0x248>)
 8009736:	429d      	cmp	r5, r3
 8009738:	bf08      	it	eq
 800973a:	68f5      	ldreq	r5, [r6, #12]
 800973c:	e7da      	b.n	80096f4 <_vfiprintf_r+0x20>
 800973e:	89ab      	ldrh	r3, [r5, #12]
 8009740:	0598      	lsls	r0, r3, #22
 8009742:	d4ed      	bmi.n	8009720 <_vfiprintf_r+0x4c>
 8009744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009746:	f001 fdb7 	bl	800b2b8 <__retarget_lock_release_recursive>
 800974a:	e7e9      	b.n	8009720 <_vfiprintf_r+0x4c>
 800974c:	2300      	movs	r3, #0
 800974e:	9309      	str	r3, [sp, #36]	; 0x24
 8009750:	2320      	movs	r3, #32
 8009752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009756:	f8cd 800c 	str.w	r8, [sp, #12]
 800975a:	2330      	movs	r3, #48	; 0x30
 800975c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009920 <_vfiprintf_r+0x24c>
 8009760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009764:	f04f 0901 	mov.w	r9, #1
 8009768:	4623      	mov	r3, r4
 800976a:	469a      	mov	sl, r3
 800976c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009770:	b10a      	cbz	r2, 8009776 <_vfiprintf_r+0xa2>
 8009772:	2a25      	cmp	r2, #37	; 0x25
 8009774:	d1f9      	bne.n	800976a <_vfiprintf_r+0x96>
 8009776:	ebba 0b04 	subs.w	fp, sl, r4
 800977a:	d00b      	beq.n	8009794 <_vfiprintf_r+0xc0>
 800977c:	465b      	mov	r3, fp
 800977e:	4622      	mov	r2, r4
 8009780:	4629      	mov	r1, r5
 8009782:	4630      	mov	r0, r6
 8009784:	f7ff ff93 	bl	80096ae <__sfputs_r>
 8009788:	3001      	adds	r0, #1
 800978a:	f000 80aa 	beq.w	80098e2 <_vfiprintf_r+0x20e>
 800978e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009790:	445a      	add	r2, fp
 8009792:	9209      	str	r2, [sp, #36]	; 0x24
 8009794:	f89a 3000 	ldrb.w	r3, [sl]
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80a2 	beq.w	80098e2 <_vfiprintf_r+0x20e>
 800979e:	2300      	movs	r3, #0
 80097a0:	f04f 32ff 	mov.w	r2, #4294967295
 80097a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097a8:	f10a 0a01 	add.w	sl, sl, #1
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	9307      	str	r3, [sp, #28]
 80097b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097b4:	931a      	str	r3, [sp, #104]	; 0x68
 80097b6:	4654      	mov	r4, sl
 80097b8:	2205      	movs	r2, #5
 80097ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097be:	4858      	ldr	r0, [pc, #352]	; (8009920 <_vfiprintf_r+0x24c>)
 80097c0:	f7f6 fd9e 	bl	8000300 <memchr>
 80097c4:	9a04      	ldr	r2, [sp, #16]
 80097c6:	b9d8      	cbnz	r0, 8009800 <_vfiprintf_r+0x12c>
 80097c8:	06d1      	lsls	r1, r2, #27
 80097ca:	bf44      	itt	mi
 80097cc:	2320      	movmi	r3, #32
 80097ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d2:	0713      	lsls	r3, r2, #28
 80097d4:	bf44      	itt	mi
 80097d6:	232b      	movmi	r3, #43	; 0x2b
 80097d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097dc:	f89a 3000 	ldrb.w	r3, [sl]
 80097e0:	2b2a      	cmp	r3, #42	; 0x2a
 80097e2:	d015      	beq.n	8009810 <_vfiprintf_r+0x13c>
 80097e4:	9a07      	ldr	r2, [sp, #28]
 80097e6:	4654      	mov	r4, sl
 80097e8:	2000      	movs	r0, #0
 80097ea:	f04f 0c0a 	mov.w	ip, #10
 80097ee:	4621      	mov	r1, r4
 80097f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097f4:	3b30      	subs	r3, #48	; 0x30
 80097f6:	2b09      	cmp	r3, #9
 80097f8:	d94e      	bls.n	8009898 <_vfiprintf_r+0x1c4>
 80097fa:	b1b0      	cbz	r0, 800982a <_vfiprintf_r+0x156>
 80097fc:	9207      	str	r2, [sp, #28]
 80097fe:	e014      	b.n	800982a <_vfiprintf_r+0x156>
 8009800:	eba0 0308 	sub.w	r3, r0, r8
 8009804:	fa09 f303 	lsl.w	r3, r9, r3
 8009808:	4313      	orrs	r3, r2
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	46a2      	mov	sl, r4
 800980e:	e7d2      	b.n	80097b6 <_vfiprintf_r+0xe2>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	1d19      	adds	r1, r3, #4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	9103      	str	r1, [sp, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	bfbb      	ittet	lt
 800981c:	425b      	neglt	r3, r3
 800981e:	f042 0202 	orrlt.w	r2, r2, #2
 8009822:	9307      	strge	r3, [sp, #28]
 8009824:	9307      	strlt	r3, [sp, #28]
 8009826:	bfb8      	it	lt
 8009828:	9204      	strlt	r2, [sp, #16]
 800982a:	7823      	ldrb	r3, [r4, #0]
 800982c:	2b2e      	cmp	r3, #46	; 0x2e
 800982e:	d10c      	bne.n	800984a <_vfiprintf_r+0x176>
 8009830:	7863      	ldrb	r3, [r4, #1]
 8009832:	2b2a      	cmp	r3, #42	; 0x2a
 8009834:	d135      	bne.n	80098a2 <_vfiprintf_r+0x1ce>
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	1d1a      	adds	r2, r3, #4
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	9203      	str	r2, [sp, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	bfb8      	it	lt
 8009842:	f04f 33ff 	movlt.w	r3, #4294967295
 8009846:	3402      	adds	r4, #2
 8009848:	9305      	str	r3, [sp, #20]
 800984a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009930 <_vfiprintf_r+0x25c>
 800984e:	7821      	ldrb	r1, [r4, #0]
 8009850:	2203      	movs	r2, #3
 8009852:	4650      	mov	r0, sl
 8009854:	f7f6 fd54 	bl	8000300 <memchr>
 8009858:	b140      	cbz	r0, 800986c <_vfiprintf_r+0x198>
 800985a:	2340      	movs	r3, #64	; 0x40
 800985c:	eba0 000a 	sub.w	r0, r0, sl
 8009860:	fa03 f000 	lsl.w	r0, r3, r0
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	4303      	orrs	r3, r0
 8009868:	3401      	adds	r4, #1
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009870:	482c      	ldr	r0, [pc, #176]	; (8009924 <_vfiprintf_r+0x250>)
 8009872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009876:	2206      	movs	r2, #6
 8009878:	f7f6 fd42 	bl	8000300 <memchr>
 800987c:	2800      	cmp	r0, #0
 800987e:	d03f      	beq.n	8009900 <_vfiprintf_r+0x22c>
 8009880:	4b29      	ldr	r3, [pc, #164]	; (8009928 <_vfiprintf_r+0x254>)
 8009882:	bb1b      	cbnz	r3, 80098cc <_vfiprintf_r+0x1f8>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	3307      	adds	r3, #7
 8009888:	f023 0307 	bic.w	r3, r3, #7
 800988c:	3308      	adds	r3, #8
 800988e:	9303      	str	r3, [sp, #12]
 8009890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009892:	443b      	add	r3, r7
 8009894:	9309      	str	r3, [sp, #36]	; 0x24
 8009896:	e767      	b.n	8009768 <_vfiprintf_r+0x94>
 8009898:	fb0c 3202 	mla	r2, ip, r2, r3
 800989c:	460c      	mov	r4, r1
 800989e:	2001      	movs	r0, #1
 80098a0:	e7a5      	b.n	80097ee <_vfiprintf_r+0x11a>
 80098a2:	2300      	movs	r3, #0
 80098a4:	3401      	adds	r4, #1
 80098a6:	9305      	str	r3, [sp, #20]
 80098a8:	4619      	mov	r1, r3
 80098aa:	f04f 0c0a 	mov.w	ip, #10
 80098ae:	4620      	mov	r0, r4
 80098b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098b4:	3a30      	subs	r2, #48	; 0x30
 80098b6:	2a09      	cmp	r2, #9
 80098b8:	d903      	bls.n	80098c2 <_vfiprintf_r+0x1ee>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0c5      	beq.n	800984a <_vfiprintf_r+0x176>
 80098be:	9105      	str	r1, [sp, #20]
 80098c0:	e7c3      	b.n	800984a <_vfiprintf_r+0x176>
 80098c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098c6:	4604      	mov	r4, r0
 80098c8:	2301      	movs	r3, #1
 80098ca:	e7f0      	b.n	80098ae <_vfiprintf_r+0x1da>
 80098cc:	ab03      	add	r3, sp, #12
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	462a      	mov	r2, r5
 80098d2:	4b16      	ldr	r3, [pc, #88]	; (800992c <_vfiprintf_r+0x258>)
 80098d4:	a904      	add	r1, sp, #16
 80098d6:	4630      	mov	r0, r6
 80098d8:	f000 f8be 	bl	8009a58 <_printf_float>
 80098dc:	4607      	mov	r7, r0
 80098de:	1c78      	adds	r0, r7, #1
 80098e0:	d1d6      	bne.n	8009890 <_vfiprintf_r+0x1bc>
 80098e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098e4:	07d9      	lsls	r1, r3, #31
 80098e6:	d405      	bmi.n	80098f4 <_vfiprintf_r+0x220>
 80098e8:	89ab      	ldrh	r3, [r5, #12]
 80098ea:	059a      	lsls	r2, r3, #22
 80098ec:	d402      	bmi.n	80098f4 <_vfiprintf_r+0x220>
 80098ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098f0:	f001 fce2 	bl	800b2b8 <__retarget_lock_release_recursive>
 80098f4:	89ab      	ldrh	r3, [r5, #12]
 80098f6:	065b      	lsls	r3, r3, #25
 80098f8:	f53f af12 	bmi.w	8009720 <_vfiprintf_r+0x4c>
 80098fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098fe:	e711      	b.n	8009724 <_vfiprintf_r+0x50>
 8009900:	ab03      	add	r3, sp, #12
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	462a      	mov	r2, r5
 8009906:	4b09      	ldr	r3, [pc, #36]	; (800992c <_vfiprintf_r+0x258>)
 8009908:	a904      	add	r1, sp, #16
 800990a:	4630      	mov	r0, r6
 800990c:	f000 fb30 	bl	8009f70 <_printf_i>
 8009910:	e7e4      	b.n	80098dc <_vfiprintf_r+0x208>
 8009912:	bf00      	nop
 8009914:	0800c184 	.word	0x0800c184
 8009918:	0800c1a4 	.word	0x0800c1a4
 800991c:	0800c164 	.word	0x0800c164
 8009920:	0800c08c 	.word	0x0800c08c
 8009924:	0800c096 	.word	0x0800c096
 8009928:	08009a59 	.word	0x08009a59
 800992c:	080096af 	.word	0x080096af
 8009930:	0800c092 	.word	0x0800c092

08009934 <__cvt>:
 8009934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009936:	ed2d 8b02 	vpush	{d8}
 800993a:	eeb0 8b40 	vmov.f64	d8, d0
 800993e:	b085      	sub	sp, #20
 8009940:	4617      	mov	r7, r2
 8009942:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009944:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009946:	ee18 2a90 	vmov	r2, s17
 800994a:	f025 0520 	bic.w	r5, r5, #32
 800994e:	2a00      	cmp	r2, #0
 8009950:	bfb6      	itet	lt
 8009952:	222d      	movlt	r2, #45	; 0x2d
 8009954:	2200      	movge	r2, #0
 8009956:	eeb1 8b40 	vneglt.f64	d8, d0
 800995a:	2d46      	cmp	r5, #70	; 0x46
 800995c:	460c      	mov	r4, r1
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	d004      	beq.n	800996c <__cvt+0x38>
 8009962:	2d45      	cmp	r5, #69	; 0x45
 8009964:	d100      	bne.n	8009968 <__cvt+0x34>
 8009966:	3401      	adds	r4, #1
 8009968:	2102      	movs	r1, #2
 800996a:	e000      	b.n	800996e <__cvt+0x3a>
 800996c:	2103      	movs	r1, #3
 800996e:	ab03      	add	r3, sp, #12
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	ab02      	add	r3, sp, #8
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	4622      	mov	r2, r4
 8009978:	4633      	mov	r3, r6
 800997a:	eeb0 0b48 	vmov.f64	d0, d8
 800997e:	f000 fd6f 	bl	800a460 <_dtoa_r>
 8009982:	2d47      	cmp	r5, #71	; 0x47
 8009984:	d101      	bne.n	800998a <__cvt+0x56>
 8009986:	07fb      	lsls	r3, r7, #31
 8009988:	d51a      	bpl.n	80099c0 <__cvt+0x8c>
 800998a:	2d46      	cmp	r5, #70	; 0x46
 800998c:	eb00 0204 	add.w	r2, r0, r4
 8009990:	d10c      	bne.n	80099ac <__cvt+0x78>
 8009992:	7803      	ldrb	r3, [r0, #0]
 8009994:	2b30      	cmp	r3, #48	; 0x30
 8009996:	d107      	bne.n	80099a8 <__cvt+0x74>
 8009998:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800999c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a0:	bf1c      	itt	ne
 80099a2:	f1c4 0401 	rsbne	r4, r4, #1
 80099a6:	6034      	strne	r4, [r6, #0]
 80099a8:	6833      	ldr	r3, [r6, #0]
 80099aa:	441a      	add	r2, r3
 80099ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b4:	bf08      	it	eq
 80099b6:	9203      	streq	r2, [sp, #12]
 80099b8:	2130      	movs	r1, #48	; 0x30
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	4293      	cmp	r3, r2
 80099be:	d307      	bcc.n	80099d0 <__cvt+0x9c>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099c4:	1a1b      	subs	r3, r3, r0
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	b005      	add	sp, #20
 80099ca:	ecbd 8b02 	vpop	{d8}
 80099ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d0:	1c5c      	adds	r4, r3, #1
 80099d2:	9403      	str	r4, [sp, #12]
 80099d4:	7019      	strb	r1, [r3, #0]
 80099d6:	e7f0      	b.n	80099ba <__cvt+0x86>

080099d8 <__exponent>:
 80099d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099da:	4603      	mov	r3, r0
 80099dc:	2900      	cmp	r1, #0
 80099de:	bfb8      	it	lt
 80099e0:	4249      	neglt	r1, r1
 80099e2:	f803 2b02 	strb.w	r2, [r3], #2
 80099e6:	bfb4      	ite	lt
 80099e8:	222d      	movlt	r2, #45	; 0x2d
 80099ea:	222b      	movge	r2, #43	; 0x2b
 80099ec:	2909      	cmp	r1, #9
 80099ee:	7042      	strb	r2, [r0, #1]
 80099f0:	dd2a      	ble.n	8009a48 <__exponent+0x70>
 80099f2:	f10d 0407 	add.w	r4, sp, #7
 80099f6:	46a4      	mov	ip, r4
 80099f8:	270a      	movs	r7, #10
 80099fa:	46a6      	mov	lr, r4
 80099fc:	460a      	mov	r2, r1
 80099fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a02:	fb07 1516 	mls	r5, r7, r6, r1
 8009a06:	3530      	adds	r5, #48	; 0x30
 8009a08:	2a63      	cmp	r2, #99	; 0x63
 8009a0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a12:	4631      	mov	r1, r6
 8009a14:	dcf1      	bgt.n	80099fa <__exponent+0x22>
 8009a16:	3130      	adds	r1, #48	; 0x30
 8009a18:	f1ae 0502 	sub.w	r5, lr, #2
 8009a1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a20:	1c44      	adds	r4, r0, #1
 8009a22:	4629      	mov	r1, r5
 8009a24:	4561      	cmp	r1, ip
 8009a26:	d30a      	bcc.n	8009a3e <__exponent+0x66>
 8009a28:	f10d 0209 	add.w	r2, sp, #9
 8009a2c:	eba2 020e 	sub.w	r2, r2, lr
 8009a30:	4565      	cmp	r5, ip
 8009a32:	bf88      	it	hi
 8009a34:	2200      	movhi	r2, #0
 8009a36:	4413      	add	r3, r2
 8009a38:	1a18      	subs	r0, r3, r0
 8009a3a:	b003      	add	sp, #12
 8009a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a46:	e7ed      	b.n	8009a24 <__exponent+0x4c>
 8009a48:	2330      	movs	r3, #48	; 0x30
 8009a4a:	3130      	adds	r1, #48	; 0x30
 8009a4c:	7083      	strb	r3, [r0, #2]
 8009a4e:	70c1      	strb	r1, [r0, #3]
 8009a50:	1d03      	adds	r3, r0, #4
 8009a52:	e7f1      	b.n	8009a38 <__exponent+0x60>
 8009a54:	0000      	movs	r0, r0
	...

08009a58 <_printf_float>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	b08b      	sub	sp, #44	; 0x2c
 8009a5e:	460c      	mov	r4, r1
 8009a60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009a64:	4616      	mov	r6, r2
 8009a66:	461f      	mov	r7, r3
 8009a68:	4605      	mov	r5, r0
 8009a6a:	f001 fc1f 	bl	800b2ac <_localeconv_r>
 8009a6e:	f8d0 b000 	ldr.w	fp, [r0]
 8009a72:	4658      	mov	r0, fp
 8009a74:	f7f6 fc3c 	bl	80002f0 <strlen>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	9308      	str	r3, [sp, #32]
 8009a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009a84:	6822      	ldr	r2, [r4, #0]
 8009a86:	3307      	adds	r3, #7
 8009a88:	f023 0307 	bic.w	r3, r3, #7
 8009a8c:	f103 0108 	add.w	r1, r3, #8
 8009a90:	f8c8 1000 	str.w	r1, [r8]
 8009a94:	4682      	mov	sl, r0
 8009a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009a9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009d00 <_printf_float+0x2a8>
 8009aa2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009aa6:	eeb0 6bc0 	vabs.f64	d6, d0
 8009aaa:	eeb4 6b47 	vcmp.f64	d6, d7
 8009aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab2:	dd24      	ble.n	8009afe <_printf_float+0xa6>
 8009ab4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abc:	d502      	bpl.n	8009ac4 <_printf_float+0x6c>
 8009abe:	232d      	movs	r3, #45	; 0x2d
 8009ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ac4:	4b90      	ldr	r3, [pc, #576]	; (8009d08 <_printf_float+0x2b0>)
 8009ac6:	4891      	ldr	r0, [pc, #580]	; (8009d0c <_printf_float+0x2b4>)
 8009ac8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009acc:	bf94      	ite	ls
 8009ace:	4698      	movls	r8, r3
 8009ad0:	4680      	movhi	r8, r0
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	6123      	str	r3, [r4, #16]
 8009ad6:	f022 0204 	bic.w	r2, r2, #4
 8009ada:	2300      	movs	r3, #0
 8009adc:	6022      	str	r2, [r4, #0]
 8009ade:	9304      	str	r3, [sp, #16]
 8009ae0:	9700      	str	r7, [sp, #0]
 8009ae2:	4633      	mov	r3, r6
 8009ae4:	aa09      	add	r2, sp, #36	; 0x24
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f000 f9d3 	bl	8009e94 <_printf_common>
 8009aee:	3001      	adds	r0, #1
 8009af0:	f040 808a 	bne.w	8009c08 <_printf_float+0x1b0>
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	b00b      	add	sp, #44	; 0x2c
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	eeb4 0b40 	vcmp.f64	d0, d0
 8009b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b06:	d709      	bvc.n	8009b1c <_printf_float+0xc4>
 8009b08:	ee10 3a90 	vmov	r3, s1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	bfbc      	itt	lt
 8009b10:	232d      	movlt	r3, #45	; 0x2d
 8009b12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b16:	487e      	ldr	r0, [pc, #504]	; (8009d10 <_printf_float+0x2b8>)
 8009b18:	4b7e      	ldr	r3, [pc, #504]	; (8009d14 <_printf_float+0x2bc>)
 8009b1a:	e7d5      	b.n	8009ac8 <_printf_float+0x70>
 8009b1c:	6863      	ldr	r3, [r4, #4]
 8009b1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009b22:	9104      	str	r1, [sp, #16]
 8009b24:	1c59      	adds	r1, r3, #1
 8009b26:	d13c      	bne.n	8009ba2 <_printf_float+0x14a>
 8009b28:	2306      	movs	r3, #6
 8009b2a:	6063      	str	r3, [r4, #4]
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	9303      	str	r3, [sp, #12]
 8009b30:	ab08      	add	r3, sp, #32
 8009b32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009b36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b3a:	ab07      	add	r3, sp, #28
 8009b3c:	6861      	ldr	r1, [r4, #4]
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	6022      	str	r2, [r4, #0]
 8009b42:	f10d 031b 	add.w	r3, sp, #27
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7ff fef4 	bl	8009934 <__cvt>
 8009b4c:	9b04      	ldr	r3, [sp, #16]
 8009b4e:	9907      	ldr	r1, [sp, #28]
 8009b50:	2b47      	cmp	r3, #71	; 0x47
 8009b52:	4680      	mov	r8, r0
 8009b54:	d108      	bne.n	8009b68 <_printf_float+0x110>
 8009b56:	1cc8      	adds	r0, r1, #3
 8009b58:	db02      	blt.n	8009b60 <_printf_float+0x108>
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	4299      	cmp	r1, r3
 8009b5e:	dd41      	ble.n	8009be4 <_printf_float+0x18c>
 8009b60:	f1a9 0902 	sub.w	r9, r9, #2
 8009b64:	fa5f f989 	uxtb.w	r9, r9
 8009b68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009b6c:	d820      	bhi.n	8009bb0 <_printf_float+0x158>
 8009b6e:	3901      	subs	r1, #1
 8009b70:	464a      	mov	r2, r9
 8009b72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b76:	9107      	str	r1, [sp, #28]
 8009b78:	f7ff ff2e 	bl	80099d8 <__exponent>
 8009b7c:	9a08      	ldr	r2, [sp, #32]
 8009b7e:	9004      	str	r0, [sp, #16]
 8009b80:	1813      	adds	r3, r2, r0
 8009b82:	2a01      	cmp	r2, #1
 8009b84:	6123      	str	r3, [r4, #16]
 8009b86:	dc02      	bgt.n	8009b8e <_printf_float+0x136>
 8009b88:	6822      	ldr	r2, [r4, #0]
 8009b8a:	07d2      	lsls	r2, r2, #31
 8009b8c:	d501      	bpl.n	8009b92 <_printf_float+0x13a>
 8009b8e:	3301      	adds	r3, #1
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0a2      	beq.n	8009ae0 <_printf_float+0x88>
 8009b9a:	232d      	movs	r3, #45	; 0x2d
 8009b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ba0:	e79e      	b.n	8009ae0 <_printf_float+0x88>
 8009ba2:	9904      	ldr	r1, [sp, #16]
 8009ba4:	2947      	cmp	r1, #71	; 0x47
 8009ba6:	d1c1      	bne.n	8009b2c <_printf_float+0xd4>
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1bf      	bne.n	8009b2c <_printf_float+0xd4>
 8009bac:	2301      	movs	r3, #1
 8009bae:	e7bc      	b.n	8009b2a <_printf_float+0xd2>
 8009bb0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009bb4:	d118      	bne.n	8009be8 <_printf_float+0x190>
 8009bb6:	2900      	cmp	r1, #0
 8009bb8:	6863      	ldr	r3, [r4, #4]
 8009bba:	dd0b      	ble.n	8009bd4 <_printf_float+0x17c>
 8009bbc:	6121      	str	r1, [r4, #16]
 8009bbe:	b913      	cbnz	r3, 8009bc6 <_printf_float+0x16e>
 8009bc0:	6822      	ldr	r2, [r4, #0]
 8009bc2:	07d0      	lsls	r0, r2, #31
 8009bc4:	d502      	bpl.n	8009bcc <_printf_float+0x174>
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	440b      	add	r3, r1
 8009bca:	6123      	str	r3, [r4, #16]
 8009bcc:	2300      	movs	r3, #0
 8009bce:	65a1      	str	r1, [r4, #88]	; 0x58
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	e7de      	b.n	8009b92 <_printf_float+0x13a>
 8009bd4:	b913      	cbnz	r3, 8009bdc <_printf_float+0x184>
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	07d2      	lsls	r2, r2, #31
 8009bda:	d501      	bpl.n	8009be0 <_printf_float+0x188>
 8009bdc:	3302      	adds	r3, #2
 8009bde:	e7f4      	b.n	8009bca <_printf_float+0x172>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e7f2      	b.n	8009bca <_printf_float+0x172>
 8009be4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009be8:	9b08      	ldr	r3, [sp, #32]
 8009bea:	4299      	cmp	r1, r3
 8009bec:	db05      	blt.n	8009bfa <_printf_float+0x1a2>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	6121      	str	r1, [r4, #16]
 8009bf2:	07d8      	lsls	r0, r3, #31
 8009bf4:	d5ea      	bpl.n	8009bcc <_printf_float+0x174>
 8009bf6:	1c4b      	adds	r3, r1, #1
 8009bf8:	e7e7      	b.n	8009bca <_printf_float+0x172>
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	bfd4      	ite	le
 8009bfe:	f1c1 0202 	rsble	r2, r1, #2
 8009c02:	2201      	movgt	r2, #1
 8009c04:	4413      	add	r3, r2
 8009c06:	e7e0      	b.n	8009bca <_printf_float+0x172>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	055a      	lsls	r2, r3, #21
 8009c0c:	d407      	bmi.n	8009c1e <_printf_float+0x1c6>
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	4642      	mov	r2, r8
 8009c12:	4631      	mov	r1, r6
 8009c14:	4628      	mov	r0, r5
 8009c16:	47b8      	blx	r7
 8009c18:	3001      	adds	r0, #1
 8009c1a:	d12a      	bne.n	8009c72 <_printf_float+0x21a>
 8009c1c:	e76a      	b.n	8009af4 <_printf_float+0x9c>
 8009c1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c22:	f240 80e2 	bls.w	8009dea <_printf_float+0x392>
 8009c26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009c2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c32:	d133      	bne.n	8009c9c <_printf_float+0x244>
 8009c34:	4a38      	ldr	r2, [pc, #224]	; (8009d18 <_printf_float+0x2c0>)
 8009c36:	2301      	movs	r3, #1
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	47b8      	blx	r7
 8009c3e:	3001      	adds	r0, #1
 8009c40:	f43f af58 	beq.w	8009af4 <_printf_float+0x9c>
 8009c44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	db02      	blt.n	8009c52 <_printf_float+0x1fa>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	07d8      	lsls	r0, r3, #31
 8009c50:	d50f      	bpl.n	8009c72 <_printf_float+0x21a>
 8009c52:	4653      	mov	r3, sl
 8009c54:	465a      	mov	r2, fp
 8009c56:	4631      	mov	r1, r6
 8009c58:	4628      	mov	r0, r5
 8009c5a:	47b8      	blx	r7
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	f43f af49 	beq.w	8009af4 <_printf_float+0x9c>
 8009c62:	f04f 0800 	mov.w	r8, #0
 8009c66:	f104 091a 	add.w	r9, r4, #26
 8009c6a:	9b08      	ldr	r3, [sp, #32]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	4543      	cmp	r3, r8
 8009c70:	dc09      	bgt.n	8009c86 <_printf_float+0x22e>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	079b      	lsls	r3, r3, #30
 8009c76:	f100 8108 	bmi.w	8009e8a <_printf_float+0x432>
 8009c7a:	68e0      	ldr	r0, [r4, #12]
 8009c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7e:	4298      	cmp	r0, r3
 8009c80:	bfb8      	it	lt
 8009c82:	4618      	movlt	r0, r3
 8009c84:	e738      	b.n	8009af8 <_printf_float+0xa0>
 8009c86:	2301      	movs	r3, #1
 8009c88:	464a      	mov	r2, r9
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b8      	blx	r7
 8009c90:	3001      	adds	r0, #1
 8009c92:	f43f af2f 	beq.w	8009af4 <_printf_float+0x9c>
 8009c96:	f108 0801 	add.w	r8, r8, #1
 8009c9a:	e7e6      	b.n	8009c6a <_printf_float+0x212>
 8009c9c:	9b07      	ldr	r3, [sp, #28]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	dc3c      	bgt.n	8009d1c <_printf_float+0x2c4>
 8009ca2:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <_printf_float+0x2c0>)
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	f43f af21 	beq.w	8009af4 <_printf_float+0x9c>
 8009cb2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	d102      	bne.n	8009cc0 <_printf_float+0x268>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	07d9      	lsls	r1, r3, #31
 8009cbe:	d5d8      	bpl.n	8009c72 <_printf_float+0x21a>
 8009cc0:	4653      	mov	r3, sl
 8009cc2:	465a      	mov	r2, fp
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f43f af12 	beq.w	8009af4 <_printf_float+0x9c>
 8009cd0:	f04f 0900 	mov.w	r9, #0
 8009cd4:	f104 0a1a 	add.w	sl, r4, #26
 8009cd8:	9b07      	ldr	r3, [sp, #28]
 8009cda:	425b      	negs	r3, r3
 8009cdc:	454b      	cmp	r3, r9
 8009cde:	dc01      	bgt.n	8009ce4 <_printf_float+0x28c>
 8009ce0:	9b08      	ldr	r3, [sp, #32]
 8009ce2:	e795      	b.n	8009c10 <_printf_float+0x1b8>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4652      	mov	r2, sl
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4628      	mov	r0, r5
 8009cec:	47b8      	blx	r7
 8009cee:	3001      	adds	r0, #1
 8009cf0:	f43f af00 	beq.w	8009af4 <_printf_float+0x9c>
 8009cf4:	f109 0901 	add.w	r9, r9, #1
 8009cf8:	e7ee      	b.n	8009cd8 <_printf_float+0x280>
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w
 8009d00:	ffffffff 	.word	0xffffffff
 8009d04:	7fefffff 	.word	0x7fefffff
 8009d08:	0800c09d 	.word	0x0800c09d
 8009d0c:	0800c0a1 	.word	0x0800c0a1
 8009d10:	0800c0a9 	.word	0x0800c0a9
 8009d14:	0800c0a5 	.word	0x0800c0a5
 8009d18:	0800c0ad 	.word	0x0800c0ad
 8009d1c:	9a08      	ldr	r2, [sp, #32]
 8009d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d20:	429a      	cmp	r2, r3
 8009d22:	bfa8      	it	ge
 8009d24:	461a      	movge	r2, r3
 8009d26:	2a00      	cmp	r2, #0
 8009d28:	4691      	mov	r9, r2
 8009d2a:	dc38      	bgt.n	8009d9e <_printf_float+0x346>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9305      	str	r3, [sp, #20]
 8009d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d34:	f104 021a 	add.w	r2, r4, #26
 8009d38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d3a:	9905      	ldr	r1, [sp, #20]
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	eba3 0309 	sub.w	r3, r3, r9
 8009d42:	428b      	cmp	r3, r1
 8009d44:	dc33      	bgt.n	8009dae <_printf_float+0x356>
 8009d46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	db3c      	blt.n	8009dc8 <_printf_float+0x370>
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	07da      	lsls	r2, r3, #31
 8009d52:	d439      	bmi.n	8009dc8 <_printf_float+0x370>
 8009d54:	9b08      	ldr	r3, [sp, #32]
 8009d56:	9a04      	ldr	r2, [sp, #16]
 8009d58:	9907      	ldr	r1, [sp, #28]
 8009d5a:	1a9a      	subs	r2, r3, r2
 8009d5c:	eba3 0901 	sub.w	r9, r3, r1
 8009d60:	4591      	cmp	r9, r2
 8009d62:	bfa8      	it	ge
 8009d64:	4691      	movge	r9, r2
 8009d66:	f1b9 0f00 	cmp.w	r9, #0
 8009d6a:	dc35      	bgt.n	8009dd8 <_printf_float+0x380>
 8009d6c:	f04f 0800 	mov.w	r8, #0
 8009d70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d74:	f104 0a1a 	add.w	sl, r4, #26
 8009d78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d7c:	1a9b      	subs	r3, r3, r2
 8009d7e:	eba3 0309 	sub.w	r3, r3, r9
 8009d82:	4543      	cmp	r3, r8
 8009d84:	f77f af75 	ble.w	8009c72 <_printf_float+0x21a>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	4652      	mov	r2, sl
 8009d8c:	4631      	mov	r1, r6
 8009d8e:	4628      	mov	r0, r5
 8009d90:	47b8      	blx	r7
 8009d92:	3001      	adds	r0, #1
 8009d94:	f43f aeae 	beq.w	8009af4 <_printf_float+0x9c>
 8009d98:	f108 0801 	add.w	r8, r8, #1
 8009d9c:	e7ec      	b.n	8009d78 <_printf_float+0x320>
 8009d9e:	4613      	mov	r3, r2
 8009da0:	4631      	mov	r1, r6
 8009da2:	4642      	mov	r2, r8
 8009da4:	4628      	mov	r0, r5
 8009da6:	47b8      	blx	r7
 8009da8:	3001      	adds	r0, #1
 8009daa:	d1bf      	bne.n	8009d2c <_printf_float+0x2d4>
 8009dac:	e6a2      	b.n	8009af4 <_printf_float+0x9c>
 8009dae:	2301      	movs	r3, #1
 8009db0:	4631      	mov	r1, r6
 8009db2:	4628      	mov	r0, r5
 8009db4:	9204      	str	r2, [sp, #16]
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	f43f ae9b 	beq.w	8009af4 <_printf_float+0x9c>
 8009dbe:	9b05      	ldr	r3, [sp, #20]
 8009dc0:	9a04      	ldr	r2, [sp, #16]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	e7b7      	b.n	8009d38 <_printf_float+0x2e0>
 8009dc8:	4653      	mov	r3, sl
 8009dca:	465a      	mov	r2, fp
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b8      	blx	r7
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d1be      	bne.n	8009d54 <_printf_float+0x2fc>
 8009dd6:	e68d      	b.n	8009af4 <_printf_float+0x9c>
 8009dd8:	9a04      	ldr	r2, [sp, #16]
 8009dda:	464b      	mov	r3, r9
 8009ddc:	4442      	add	r2, r8
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b8      	blx	r7
 8009de4:	3001      	adds	r0, #1
 8009de6:	d1c1      	bne.n	8009d6c <_printf_float+0x314>
 8009de8:	e684      	b.n	8009af4 <_printf_float+0x9c>
 8009dea:	9a08      	ldr	r2, [sp, #32]
 8009dec:	2a01      	cmp	r2, #1
 8009dee:	dc01      	bgt.n	8009df4 <_printf_float+0x39c>
 8009df0:	07db      	lsls	r3, r3, #31
 8009df2:	d537      	bpl.n	8009e64 <_printf_float+0x40c>
 8009df4:	2301      	movs	r3, #1
 8009df6:	4642      	mov	r2, r8
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	f43f ae78 	beq.w	8009af4 <_printf_float+0x9c>
 8009e04:	4653      	mov	r3, sl
 8009e06:	465a      	mov	r2, fp
 8009e08:	4631      	mov	r1, r6
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	47b8      	blx	r7
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f43f ae70 	beq.w	8009af4 <_printf_float+0x9c>
 8009e14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009e18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e20:	d01b      	beq.n	8009e5a <_printf_float+0x402>
 8009e22:	9b08      	ldr	r3, [sp, #32]
 8009e24:	f108 0201 	add.w	r2, r8, #1
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	d10e      	bne.n	8009e52 <_printf_float+0x3fa>
 8009e34:	e65e      	b.n	8009af4 <_printf_float+0x9c>
 8009e36:	2301      	movs	r3, #1
 8009e38:	464a      	mov	r2, r9
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f ae57 	beq.w	8009af4 <_printf_float+0x9c>
 8009e46:	f108 0801 	add.w	r8, r8, #1
 8009e4a:	9b08      	ldr	r3, [sp, #32]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	4543      	cmp	r3, r8
 8009e50:	dcf1      	bgt.n	8009e36 <_printf_float+0x3de>
 8009e52:	9b04      	ldr	r3, [sp, #16]
 8009e54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e58:	e6db      	b.n	8009c12 <_printf_float+0x1ba>
 8009e5a:	f04f 0800 	mov.w	r8, #0
 8009e5e:	f104 091a 	add.w	r9, r4, #26
 8009e62:	e7f2      	b.n	8009e4a <_printf_float+0x3f2>
 8009e64:	2301      	movs	r3, #1
 8009e66:	4642      	mov	r2, r8
 8009e68:	e7df      	b.n	8009e2a <_printf_float+0x3d2>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	464a      	mov	r2, r9
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b8      	blx	r7
 8009e74:	3001      	adds	r0, #1
 8009e76:	f43f ae3d 	beq.w	8009af4 <_printf_float+0x9c>
 8009e7a:	f108 0801 	add.w	r8, r8, #1
 8009e7e:	68e3      	ldr	r3, [r4, #12]
 8009e80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e82:	1a5b      	subs	r3, r3, r1
 8009e84:	4543      	cmp	r3, r8
 8009e86:	dcf0      	bgt.n	8009e6a <_printf_float+0x412>
 8009e88:	e6f7      	b.n	8009c7a <_printf_float+0x222>
 8009e8a:	f04f 0800 	mov.w	r8, #0
 8009e8e:	f104 0919 	add.w	r9, r4, #25
 8009e92:	e7f4      	b.n	8009e7e <_printf_float+0x426>

08009e94 <_printf_common>:
 8009e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e98:	4616      	mov	r6, r2
 8009e9a:	4699      	mov	r9, r3
 8009e9c:	688a      	ldr	r2, [r1, #8]
 8009e9e:	690b      	ldr	r3, [r1, #16]
 8009ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	bfb8      	it	lt
 8009ea8:	4613      	movlt	r3, r2
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	b10a      	cbz	r2, 8009eba <_printf_common+0x26>
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	6033      	str	r3, [r6, #0]
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	0699      	lsls	r1, r3, #26
 8009ebe:	bf42      	ittt	mi
 8009ec0:	6833      	ldrmi	r3, [r6, #0]
 8009ec2:	3302      	addmi	r3, #2
 8009ec4:	6033      	strmi	r3, [r6, #0]
 8009ec6:	6825      	ldr	r5, [r4, #0]
 8009ec8:	f015 0506 	ands.w	r5, r5, #6
 8009ecc:	d106      	bne.n	8009edc <_printf_common+0x48>
 8009ece:	f104 0a19 	add.w	sl, r4, #25
 8009ed2:	68e3      	ldr	r3, [r4, #12]
 8009ed4:	6832      	ldr	r2, [r6, #0]
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	42ab      	cmp	r3, r5
 8009eda:	dc26      	bgt.n	8009f2a <_printf_common+0x96>
 8009edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ee0:	1e13      	subs	r3, r2, #0
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	bf18      	it	ne
 8009ee6:	2301      	movne	r3, #1
 8009ee8:	0692      	lsls	r2, r2, #26
 8009eea:	d42b      	bmi.n	8009f44 <_printf_common+0xb0>
 8009eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	47c0      	blx	r8
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d01e      	beq.n	8009f38 <_printf_common+0xa4>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	68e5      	ldr	r5, [r4, #12]
 8009efe:	6832      	ldr	r2, [r6, #0]
 8009f00:	f003 0306 	and.w	r3, r3, #6
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	bf08      	it	eq
 8009f08:	1aad      	subeq	r5, r5, r2
 8009f0a:	68a3      	ldr	r3, [r4, #8]
 8009f0c:	6922      	ldr	r2, [r4, #16]
 8009f0e:	bf0c      	ite	eq
 8009f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f14:	2500      	movne	r5, #0
 8009f16:	4293      	cmp	r3, r2
 8009f18:	bfc4      	itt	gt
 8009f1a:	1a9b      	subgt	r3, r3, r2
 8009f1c:	18ed      	addgt	r5, r5, r3
 8009f1e:	2600      	movs	r6, #0
 8009f20:	341a      	adds	r4, #26
 8009f22:	42b5      	cmp	r5, r6
 8009f24:	d11a      	bne.n	8009f5c <_printf_common+0xc8>
 8009f26:	2000      	movs	r0, #0
 8009f28:	e008      	b.n	8009f3c <_printf_common+0xa8>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4652      	mov	r2, sl
 8009f2e:	4649      	mov	r1, r9
 8009f30:	4638      	mov	r0, r7
 8009f32:	47c0      	blx	r8
 8009f34:	3001      	adds	r0, #1
 8009f36:	d103      	bne.n	8009f40 <_printf_common+0xac>
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f40:	3501      	adds	r5, #1
 8009f42:	e7c6      	b.n	8009ed2 <_printf_common+0x3e>
 8009f44:	18e1      	adds	r1, r4, r3
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	2030      	movs	r0, #48	; 0x30
 8009f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f4e:	4422      	add	r2, r4
 8009f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f58:	3302      	adds	r3, #2
 8009f5a:	e7c7      	b.n	8009eec <_printf_common+0x58>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4649      	mov	r1, r9
 8009f62:	4638      	mov	r0, r7
 8009f64:	47c0      	blx	r8
 8009f66:	3001      	adds	r0, #1
 8009f68:	d0e6      	beq.n	8009f38 <_printf_common+0xa4>
 8009f6a:	3601      	adds	r6, #1
 8009f6c:	e7d9      	b.n	8009f22 <_printf_common+0x8e>
	...

08009f70 <_printf_i>:
 8009f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	7e0f      	ldrb	r7, [r1, #24]
 8009f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f78:	2f78      	cmp	r7, #120	; 0x78
 8009f7a:	4691      	mov	r9, r2
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	469a      	mov	sl, r3
 8009f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f86:	d807      	bhi.n	8009f98 <_printf_i+0x28>
 8009f88:	2f62      	cmp	r7, #98	; 0x62
 8009f8a:	d80a      	bhi.n	8009fa2 <_printf_i+0x32>
 8009f8c:	2f00      	cmp	r7, #0
 8009f8e:	f000 80d8 	beq.w	800a142 <_printf_i+0x1d2>
 8009f92:	2f58      	cmp	r7, #88	; 0x58
 8009f94:	f000 80a3 	beq.w	800a0de <_printf_i+0x16e>
 8009f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fa0:	e03a      	b.n	800a018 <_printf_i+0xa8>
 8009fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fa6:	2b15      	cmp	r3, #21
 8009fa8:	d8f6      	bhi.n	8009f98 <_printf_i+0x28>
 8009faa:	a101      	add	r1, pc, #4	; (adr r1, 8009fb0 <_printf_i+0x40>)
 8009fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fb0:	0800a009 	.word	0x0800a009
 8009fb4:	0800a01d 	.word	0x0800a01d
 8009fb8:	08009f99 	.word	0x08009f99
 8009fbc:	08009f99 	.word	0x08009f99
 8009fc0:	08009f99 	.word	0x08009f99
 8009fc4:	08009f99 	.word	0x08009f99
 8009fc8:	0800a01d 	.word	0x0800a01d
 8009fcc:	08009f99 	.word	0x08009f99
 8009fd0:	08009f99 	.word	0x08009f99
 8009fd4:	08009f99 	.word	0x08009f99
 8009fd8:	08009f99 	.word	0x08009f99
 8009fdc:	0800a129 	.word	0x0800a129
 8009fe0:	0800a04d 	.word	0x0800a04d
 8009fe4:	0800a10b 	.word	0x0800a10b
 8009fe8:	08009f99 	.word	0x08009f99
 8009fec:	08009f99 	.word	0x08009f99
 8009ff0:	0800a14b 	.word	0x0800a14b
 8009ff4:	08009f99 	.word	0x08009f99
 8009ff8:	0800a04d 	.word	0x0800a04d
 8009ffc:	08009f99 	.word	0x08009f99
 800a000:	08009f99 	.word	0x08009f99
 800a004:	0800a113 	.word	0x0800a113
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	1d1a      	adds	r2, r3, #4
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	602a      	str	r2, [r5, #0]
 800a010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a018:	2301      	movs	r3, #1
 800a01a:	e0a3      	b.n	800a164 <_printf_i+0x1f4>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	6829      	ldr	r1, [r5, #0]
 800a020:	0606      	lsls	r6, r0, #24
 800a022:	f101 0304 	add.w	r3, r1, #4
 800a026:	d50a      	bpl.n	800a03e <_printf_i+0xce>
 800a028:	680e      	ldr	r6, [r1, #0]
 800a02a:	602b      	str	r3, [r5, #0]
 800a02c:	2e00      	cmp	r6, #0
 800a02e:	da03      	bge.n	800a038 <_printf_i+0xc8>
 800a030:	232d      	movs	r3, #45	; 0x2d
 800a032:	4276      	negs	r6, r6
 800a034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a038:	485e      	ldr	r0, [pc, #376]	; (800a1b4 <_printf_i+0x244>)
 800a03a:	230a      	movs	r3, #10
 800a03c:	e019      	b.n	800a072 <_printf_i+0x102>
 800a03e:	680e      	ldr	r6, [r1, #0]
 800a040:	602b      	str	r3, [r5, #0]
 800a042:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a046:	bf18      	it	ne
 800a048:	b236      	sxthne	r6, r6
 800a04a:	e7ef      	b.n	800a02c <_printf_i+0xbc>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	6820      	ldr	r0, [r4, #0]
 800a050:	1d19      	adds	r1, r3, #4
 800a052:	6029      	str	r1, [r5, #0]
 800a054:	0601      	lsls	r1, r0, #24
 800a056:	d501      	bpl.n	800a05c <_printf_i+0xec>
 800a058:	681e      	ldr	r6, [r3, #0]
 800a05a:	e002      	b.n	800a062 <_printf_i+0xf2>
 800a05c:	0646      	lsls	r6, r0, #25
 800a05e:	d5fb      	bpl.n	800a058 <_printf_i+0xe8>
 800a060:	881e      	ldrh	r6, [r3, #0]
 800a062:	4854      	ldr	r0, [pc, #336]	; (800a1b4 <_printf_i+0x244>)
 800a064:	2f6f      	cmp	r7, #111	; 0x6f
 800a066:	bf0c      	ite	eq
 800a068:	2308      	moveq	r3, #8
 800a06a:	230a      	movne	r3, #10
 800a06c:	2100      	movs	r1, #0
 800a06e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a072:	6865      	ldr	r5, [r4, #4]
 800a074:	60a5      	str	r5, [r4, #8]
 800a076:	2d00      	cmp	r5, #0
 800a078:	bfa2      	ittt	ge
 800a07a:	6821      	ldrge	r1, [r4, #0]
 800a07c:	f021 0104 	bicge.w	r1, r1, #4
 800a080:	6021      	strge	r1, [r4, #0]
 800a082:	b90e      	cbnz	r6, 800a088 <_printf_i+0x118>
 800a084:	2d00      	cmp	r5, #0
 800a086:	d04d      	beq.n	800a124 <_printf_i+0x1b4>
 800a088:	4615      	mov	r5, r2
 800a08a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a08e:	fb03 6711 	mls	r7, r3, r1, r6
 800a092:	5dc7      	ldrb	r7, [r0, r7]
 800a094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a098:	4637      	mov	r7, r6
 800a09a:	42bb      	cmp	r3, r7
 800a09c:	460e      	mov	r6, r1
 800a09e:	d9f4      	bls.n	800a08a <_printf_i+0x11a>
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d10b      	bne.n	800a0bc <_printf_i+0x14c>
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	07de      	lsls	r6, r3, #31
 800a0a8:	d508      	bpl.n	800a0bc <_printf_i+0x14c>
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	6861      	ldr	r1, [r4, #4]
 800a0ae:	4299      	cmp	r1, r3
 800a0b0:	bfde      	ittt	le
 800a0b2:	2330      	movle	r3, #48	; 0x30
 800a0b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0bc:	1b52      	subs	r2, r2, r5
 800a0be:	6122      	str	r2, [r4, #16]
 800a0c0:	f8cd a000 	str.w	sl, [sp]
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	aa03      	add	r2, sp, #12
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	f7ff fee2 	bl	8009e94 <_printf_common>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d14c      	bne.n	800a16e <_printf_i+0x1fe>
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	b004      	add	sp, #16
 800a0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0de:	4835      	ldr	r0, [pc, #212]	; (800a1b4 <_printf_i+0x244>)
 800a0e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0e4:	6829      	ldr	r1, [r5, #0]
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0ec:	6029      	str	r1, [r5, #0]
 800a0ee:	061d      	lsls	r5, r3, #24
 800a0f0:	d514      	bpl.n	800a11c <_printf_i+0x1ac>
 800a0f2:	07df      	lsls	r7, r3, #31
 800a0f4:	bf44      	itt	mi
 800a0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0fa:	6023      	strmi	r3, [r4, #0]
 800a0fc:	b91e      	cbnz	r6, 800a106 <_printf_i+0x196>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	f023 0320 	bic.w	r3, r3, #32
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	2310      	movs	r3, #16
 800a108:	e7b0      	b.n	800a06c <_printf_i+0xfc>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	f043 0320 	orr.w	r3, r3, #32
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	2378      	movs	r3, #120	; 0x78
 800a114:	4828      	ldr	r0, [pc, #160]	; (800a1b8 <_printf_i+0x248>)
 800a116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a11a:	e7e3      	b.n	800a0e4 <_printf_i+0x174>
 800a11c:	0659      	lsls	r1, r3, #25
 800a11e:	bf48      	it	mi
 800a120:	b2b6      	uxthmi	r6, r6
 800a122:	e7e6      	b.n	800a0f2 <_printf_i+0x182>
 800a124:	4615      	mov	r5, r2
 800a126:	e7bb      	b.n	800a0a0 <_printf_i+0x130>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	6826      	ldr	r6, [r4, #0]
 800a12c:	6961      	ldr	r1, [r4, #20]
 800a12e:	1d18      	adds	r0, r3, #4
 800a130:	6028      	str	r0, [r5, #0]
 800a132:	0635      	lsls	r5, r6, #24
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	d501      	bpl.n	800a13c <_printf_i+0x1cc>
 800a138:	6019      	str	r1, [r3, #0]
 800a13a:	e002      	b.n	800a142 <_printf_i+0x1d2>
 800a13c:	0670      	lsls	r0, r6, #25
 800a13e:	d5fb      	bpl.n	800a138 <_printf_i+0x1c8>
 800a140:	8019      	strh	r1, [r3, #0]
 800a142:	2300      	movs	r3, #0
 800a144:	6123      	str	r3, [r4, #16]
 800a146:	4615      	mov	r5, r2
 800a148:	e7ba      	b.n	800a0c0 <_printf_i+0x150>
 800a14a:	682b      	ldr	r3, [r5, #0]
 800a14c:	1d1a      	adds	r2, r3, #4
 800a14e:	602a      	str	r2, [r5, #0]
 800a150:	681d      	ldr	r5, [r3, #0]
 800a152:	6862      	ldr	r2, [r4, #4]
 800a154:	2100      	movs	r1, #0
 800a156:	4628      	mov	r0, r5
 800a158:	f7f6 f8d2 	bl	8000300 <memchr>
 800a15c:	b108      	cbz	r0, 800a162 <_printf_i+0x1f2>
 800a15e:	1b40      	subs	r0, r0, r5
 800a160:	6060      	str	r0, [r4, #4]
 800a162:	6863      	ldr	r3, [r4, #4]
 800a164:	6123      	str	r3, [r4, #16]
 800a166:	2300      	movs	r3, #0
 800a168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a16c:	e7a8      	b.n	800a0c0 <_printf_i+0x150>
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	462a      	mov	r2, r5
 800a172:	4649      	mov	r1, r9
 800a174:	4640      	mov	r0, r8
 800a176:	47d0      	blx	sl
 800a178:	3001      	adds	r0, #1
 800a17a:	d0ab      	beq.n	800a0d4 <_printf_i+0x164>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	079b      	lsls	r3, r3, #30
 800a180:	d413      	bmi.n	800a1aa <_printf_i+0x23a>
 800a182:	68e0      	ldr	r0, [r4, #12]
 800a184:	9b03      	ldr	r3, [sp, #12]
 800a186:	4298      	cmp	r0, r3
 800a188:	bfb8      	it	lt
 800a18a:	4618      	movlt	r0, r3
 800a18c:	e7a4      	b.n	800a0d8 <_printf_i+0x168>
 800a18e:	2301      	movs	r3, #1
 800a190:	4632      	mov	r2, r6
 800a192:	4649      	mov	r1, r9
 800a194:	4640      	mov	r0, r8
 800a196:	47d0      	blx	sl
 800a198:	3001      	adds	r0, #1
 800a19a:	d09b      	beq.n	800a0d4 <_printf_i+0x164>
 800a19c:	3501      	adds	r5, #1
 800a19e:	68e3      	ldr	r3, [r4, #12]
 800a1a0:	9903      	ldr	r1, [sp, #12]
 800a1a2:	1a5b      	subs	r3, r3, r1
 800a1a4:	42ab      	cmp	r3, r5
 800a1a6:	dcf2      	bgt.n	800a18e <_printf_i+0x21e>
 800a1a8:	e7eb      	b.n	800a182 <_printf_i+0x212>
 800a1aa:	2500      	movs	r5, #0
 800a1ac:	f104 0619 	add.w	r6, r4, #25
 800a1b0:	e7f5      	b.n	800a19e <_printf_i+0x22e>
 800a1b2:	bf00      	nop
 800a1b4:	0800c0af 	.word	0x0800c0af
 800a1b8:	0800c0c0 	.word	0x0800c0c0

0800a1bc <__swbuf_r>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	b118      	cbz	r0, 800a1ce <__swbuf_r+0x12>
 800a1c6:	6983      	ldr	r3, [r0, #24]
 800a1c8:	b90b      	cbnz	r3, 800a1ce <__swbuf_r+0x12>
 800a1ca:	f000 ffd1 	bl	800b170 <__sinit>
 800a1ce:	4b21      	ldr	r3, [pc, #132]	; (800a254 <__swbuf_r+0x98>)
 800a1d0:	429c      	cmp	r4, r3
 800a1d2:	d12b      	bne.n	800a22c <__swbuf_r+0x70>
 800a1d4:	686c      	ldr	r4, [r5, #4]
 800a1d6:	69a3      	ldr	r3, [r4, #24]
 800a1d8:	60a3      	str	r3, [r4, #8]
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	071a      	lsls	r2, r3, #28
 800a1de:	d52f      	bpl.n	800a240 <__swbuf_r+0x84>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	b36b      	cbz	r3, 800a240 <__swbuf_r+0x84>
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	6820      	ldr	r0, [r4, #0]
 800a1e8:	1ac0      	subs	r0, r0, r3
 800a1ea:	6963      	ldr	r3, [r4, #20]
 800a1ec:	b2f6      	uxtb	r6, r6
 800a1ee:	4283      	cmp	r3, r0
 800a1f0:	4637      	mov	r7, r6
 800a1f2:	dc04      	bgt.n	800a1fe <__swbuf_r+0x42>
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 ff26 	bl	800b048 <_fflush_r>
 800a1fc:	bb30      	cbnz	r0, 800a24c <__swbuf_r+0x90>
 800a1fe:	68a3      	ldr	r3, [r4, #8]
 800a200:	3b01      	subs	r3, #1
 800a202:	60a3      	str	r3, [r4, #8]
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	6022      	str	r2, [r4, #0]
 800a20a:	701e      	strb	r6, [r3, #0]
 800a20c:	6963      	ldr	r3, [r4, #20]
 800a20e:	3001      	adds	r0, #1
 800a210:	4283      	cmp	r3, r0
 800a212:	d004      	beq.n	800a21e <__swbuf_r+0x62>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	07db      	lsls	r3, r3, #31
 800a218:	d506      	bpl.n	800a228 <__swbuf_r+0x6c>
 800a21a:	2e0a      	cmp	r6, #10
 800a21c:	d104      	bne.n	800a228 <__swbuf_r+0x6c>
 800a21e:	4621      	mov	r1, r4
 800a220:	4628      	mov	r0, r5
 800a222:	f000 ff11 	bl	800b048 <_fflush_r>
 800a226:	b988      	cbnz	r0, 800a24c <__swbuf_r+0x90>
 800a228:	4638      	mov	r0, r7
 800a22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <__swbuf_r+0x9c>)
 800a22e:	429c      	cmp	r4, r3
 800a230:	d101      	bne.n	800a236 <__swbuf_r+0x7a>
 800a232:	68ac      	ldr	r4, [r5, #8]
 800a234:	e7cf      	b.n	800a1d6 <__swbuf_r+0x1a>
 800a236:	4b09      	ldr	r3, [pc, #36]	; (800a25c <__swbuf_r+0xa0>)
 800a238:	429c      	cmp	r4, r3
 800a23a:	bf08      	it	eq
 800a23c:	68ec      	ldreq	r4, [r5, #12]
 800a23e:	e7ca      	b.n	800a1d6 <__swbuf_r+0x1a>
 800a240:	4621      	mov	r1, r4
 800a242:	4628      	mov	r0, r5
 800a244:	f000 f80c 	bl	800a260 <__swsetup_r>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d0cb      	beq.n	800a1e4 <__swbuf_r+0x28>
 800a24c:	f04f 37ff 	mov.w	r7, #4294967295
 800a250:	e7ea      	b.n	800a228 <__swbuf_r+0x6c>
 800a252:	bf00      	nop
 800a254:	0800c184 	.word	0x0800c184
 800a258:	0800c1a4 	.word	0x0800c1a4
 800a25c:	0800c164 	.word	0x0800c164

0800a260 <__swsetup_r>:
 800a260:	4b32      	ldr	r3, [pc, #200]	; (800a32c <__swsetup_r+0xcc>)
 800a262:	b570      	push	{r4, r5, r6, lr}
 800a264:	681d      	ldr	r5, [r3, #0]
 800a266:	4606      	mov	r6, r0
 800a268:	460c      	mov	r4, r1
 800a26a:	b125      	cbz	r5, 800a276 <__swsetup_r+0x16>
 800a26c:	69ab      	ldr	r3, [r5, #24]
 800a26e:	b913      	cbnz	r3, 800a276 <__swsetup_r+0x16>
 800a270:	4628      	mov	r0, r5
 800a272:	f000 ff7d 	bl	800b170 <__sinit>
 800a276:	4b2e      	ldr	r3, [pc, #184]	; (800a330 <__swsetup_r+0xd0>)
 800a278:	429c      	cmp	r4, r3
 800a27a:	d10f      	bne.n	800a29c <__swsetup_r+0x3c>
 800a27c:	686c      	ldr	r4, [r5, #4]
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a284:	0719      	lsls	r1, r3, #28
 800a286:	d42c      	bmi.n	800a2e2 <__swsetup_r+0x82>
 800a288:	06dd      	lsls	r5, r3, #27
 800a28a:	d411      	bmi.n	800a2b0 <__swsetup_r+0x50>
 800a28c:	2309      	movs	r3, #9
 800a28e:	6033      	str	r3, [r6, #0]
 800a290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	f04f 30ff 	mov.w	r0, #4294967295
 800a29a:	e03e      	b.n	800a31a <__swsetup_r+0xba>
 800a29c:	4b25      	ldr	r3, [pc, #148]	; (800a334 <__swsetup_r+0xd4>)
 800a29e:	429c      	cmp	r4, r3
 800a2a0:	d101      	bne.n	800a2a6 <__swsetup_r+0x46>
 800a2a2:	68ac      	ldr	r4, [r5, #8]
 800a2a4:	e7eb      	b.n	800a27e <__swsetup_r+0x1e>
 800a2a6:	4b24      	ldr	r3, [pc, #144]	; (800a338 <__swsetup_r+0xd8>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	bf08      	it	eq
 800a2ac:	68ec      	ldreq	r4, [r5, #12]
 800a2ae:	e7e6      	b.n	800a27e <__swsetup_r+0x1e>
 800a2b0:	0758      	lsls	r0, r3, #29
 800a2b2:	d512      	bpl.n	800a2da <__swsetup_r+0x7a>
 800a2b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b6:	b141      	cbz	r1, 800a2ca <__swsetup_r+0x6a>
 800a2b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	d002      	beq.n	800a2c6 <__swsetup_r+0x66>
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f001 fc0f 	bl	800bae4 <_free_r>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	6063      	str	r3, [r4, #4]
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	f043 0308 	orr.w	r3, r3, #8
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	b94b      	cbnz	r3, 800a2fa <__swsetup_r+0x9a>
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f0:	d003      	beq.n	800a2fa <__swsetup_r+0x9a>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f001 f805 	bl	800b304 <__smakebuf_r>
 800a2fa:	89a0      	ldrh	r0, [r4, #12]
 800a2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a300:	f010 0301 	ands.w	r3, r0, #1
 800a304:	d00a      	beq.n	800a31c <__swsetup_r+0xbc>
 800a306:	2300      	movs	r3, #0
 800a308:	60a3      	str	r3, [r4, #8]
 800a30a:	6963      	ldr	r3, [r4, #20]
 800a30c:	425b      	negs	r3, r3
 800a30e:	61a3      	str	r3, [r4, #24]
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	b943      	cbnz	r3, 800a326 <__swsetup_r+0xc6>
 800a314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a318:	d1ba      	bne.n	800a290 <__swsetup_r+0x30>
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
 800a31c:	0781      	lsls	r1, r0, #30
 800a31e:	bf58      	it	pl
 800a320:	6963      	ldrpl	r3, [r4, #20]
 800a322:	60a3      	str	r3, [r4, #8]
 800a324:	e7f4      	b.n	800a310 <__swsetup_r+0xb0>
 800a326:	2000      	movs	r0, #0
 800a328:	e7f7      	b.n	800a31a <__swsetup_r+0xba>
 800a32a:	bf00      	nop
 800a32c:	24000010 	.word	0x24000010
 800a330:	0800c184 	.word	0x0800c184
 800a334:	0800c1a4 	.word	0x0800c1a4
 800a338:	0800c164 	.word	0x0800c164

0800a33c <abort>:
 800a33c:	b508      	push	{r3, lr}
 800a33e:	2006      	movs	r0, #6
 800a340:	f001 fce8 	bl	800bd14 <raise>
 800a344:	2001      	movs	r0, #1
 800a346:	f7f7 fabb 	bl	80018c0 <_exit>

0800a34a <quorem>:
 800a34a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34e:	6903      	ldr	r3, [r0, #16]
 800a350:	690c      	ldr	r4, [r1, #16]
 800a352:	42a3      	cmp	r3, r4
 800a354:	4607      	mov	r7, r0
 800a356:	f2c0 8081 	blt.w	800a45c <quorem+0x112>
 800a35a:	3c01      	subs	r4, #1
 800a35c:	f101 0814 	add.w	r8, r1, #20
 800a360:	f100 0514 	add.w	r5, r0, #20
 800a364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a36e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a372:	3301      	adds	r3, #1
 800a374:	429a      	cmp	r2, r3
 800a376:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a37a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a37e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a382:	d331      	bcc.n	800a3e8 <quorem+0x9e>
 800a384:	f04f 0e00 	mov.w	lr, #0
 800a388:	4640      	mov	r0, r8
 800a38a:	46ac      	mov	ip, r5
 800a38c:	46f2      	mov	sl, lr
 800a38e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a392:	b293      	uxth	r3, r2
 800a394:	fb06 e303 	mla	r3, r6, r3, lr
 800a398:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	ebaa 0303 	sub.w	r3, sl, r3
 800a3a2:	f8dc a000 	ldr.w	sl, [ip]
 800a3a6:	0c12      	lsrs	r2, r2, #16
 800a3a8:	fa13 f38a 	uxtah	r3, r3, sl
 800a3ac:	fb06 e202 	mla	r2, r6, r2, lr
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	9b00      	ldr	r3, [sp, #0]
 800a3b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a3b8:	b292      	uxth	r2, r2
 800a3ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a3be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3c2:	f8bd 3000 	ldrh.w	r3, [sp]
 800a3c6:	4581      	cmp	r9, r0
 800a3c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3cc:	f84c 3b04 	str.w	r3, [ip], #4
 800a3d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3d4:	d2db      	bcs.n	800a38e <quorem+0x44>
 800a3d6:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3da:	b92b      	cbnz	r3, 800a3e8 <quorem+0x9e>
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	3b04      	subs	r3, #4
 800a3e0:	429d      	cmp	r5, r3
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	d32e      	bcc.n	800a444 <quorem+0xfa>
 800a3e6:	613c      	str	r4, [r7, #16]
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f001 fa63 	bl	800b8b4 <__mcmp>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	db24      	blt.n	800a43c <quorem+0xf2>
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	f04f 0c00 	mov.w	ip, #0
 800a3fa:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3fe:	f8d0 e000 	ldr.w	lr, [r0]
 800a402:	b293      	uxth	r3, r2
 800a404:	ebac 0303 	sub.w	r3, ip, r3
 800a408:	0c12      	lsrs	r2, r2, #16
 800a40a:	fa13 f38e 	uxtah	r3, r3, lr
 800a40e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a412:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a416:	b29b      	uxth	r3, r3
 800a418:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a41c:	45c1      	cmp	r9, r8
 800a41e:	f840 3b04 	str.w	r3, [r0], #4
 800a422:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a426:	d2e8      	bcs.n	800a3fa <quorem+0xb0>
 800a428:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a42c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a430:	b922      	cbnz	r2, 800a43c <quorem+0xf2>
 800a432:	3b04      	subs	r3, #4
 800a434:	429d      	cmp	r5, r3
 800a436:	461a      	mov	r2, r3
 800a438:	d30a      	bcc.n	800a450 <quorem+0x106>
 800a43a:	613c      	str	r4, [r7, #16]
 800a43c:	4630      	mov	r0, r6
 800a43e:	b003      	add	sp, #12
 800a440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a444:	6812      	ldr	r2, [r2, #0]
 800a446:	3b04      	subs	r3, #4
 800a448:	2a00      	cmp	r2, #0
 800a44a:	d1cc      	bne.n	800a3e6 <quorem+0x9c>
 800a44c:	3c01      	subs	r4, #1
 800a44e:	e7c7      	b.n	800a3e0 <quorem+0x96>
 800a450:	6812      	ldr	r2, [r2, #0]
 800a452:	3b04      	subs	r3, #4
 800a454:	2a00      	cmp	r2, #0
 800a456:	d1f0      	bne.n	800a43a <quorem+0xf0>
 800a458:	3c01      	subs	r4, #1
 800a45a:	e7eb      	b.n	800a434 <quorem+0xea>
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7ee      	b.n	800a43e <quorem+0xf4>

0800a460 <_dtoa_r>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	ed2d 8b02 	vpush	{d8}
 800a468:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a46a:	b091      	sub	sp, #68	; 0x44
 800a46c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a470:	ec59 8b10 	vmov	r8, r9, d0
 800a474:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a476:	9106      	str	r1, [sp, #24]
 800a478:	4606      	mov	r6, r0
 800a47a:	9208      	str	r2, [sp, #32]
 800a47c:	930c      	str	r3, [sp, #48]	; 0x30
 800a47e:	b975      	cbnz	r5, 800a49e <_dtoa_r+0x3e>
 800a480:	2010      	movs	r0, #16
 800a482:	f000 ff7f 	bl	800b384 <malloc>
 800a486:	4602      	mov	r2, r0
 800a488:	6270      	str	r0, [r6, #36]	; 0x24
 800a48a:	b920      	cbnz	r0, 800a496 <_dtoa_r+0x36>
 800a48c:	4baa      	ldr	r3, [pc, #680]	; (800a738 <_dtoa_r+0x2d8>)
 800a48e:	21ea      	movs	r1, #234	; 0xea
 800a490:	48aa      	ldr	r0, [pc, #680]	; (800a73c <_dtoa_r+0x2dc>)
 800a492:	f7ff f893 	bl	80095bc <__assert_func>
 800a496:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a49a:	6005      	str	r5, [r0, #0]
 800a49c:	60c5      	str	r5, [r0, #12]
 800a49e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4a0:	6819      	ldr	r1, [r3, #0]
 800a4a2:	b151      	cbz	r1, 800a4ba <_dtoa_r+0x5a>
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	604a      	str	r2, [r1, #4]
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	4093      	lsls	r3, r2
 800a4ac:	608b      	str	r3, [r1, #8]
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f000 ffbe 	bl	800b430 <_Bfree>
 800a4b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	f1b9 0300 	subs.w	r3, r9, #0
 800a4be:	bfbb      	ittet	lt
 800a4c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4c4:	9303      	strlt	r3, [sp, #12]
 800a4c6:	2300      	movge	r3, #0
 800a4c8:	2201      	movlt	r2, #1
 800a4ca:	bfac      	ite	ge
 800a4cc:	6023      	strge	r3, [r4, #0]
 800a4ce:	6022      	strlt	r2, [r4, #0]
 800a4d0:	4b9b      	ldr	r3, [pc, #620]	; (800a740 <_dtoa_r+0x2e0>)
 800a4d2:	9c03      	ldr	r4, [sp, #12]
 800a4d4:	43a3      	bics	r3, r4
 800a4d6:	d11c      	bne.n	800a512 <_dtoa_r+0xb2>
 800a4d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4da:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a4e4:	ea53 0308 	orrs.w	r3, r3, r8
 800a4e8:	f000 84fd 	beq.w	800aee6 <_dtoa_r+0xa86>
 800a4ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4ee:	b963      	cbnz	r3, 800a50a <_dtoa_r+0xaa>
 800a4f0:	4b94      	ldr	r3, [pc, #592]	; (800a744 <_dtoa_r+0x2e4>)
 800a4f2:	e01f      	b.n	800a534 <_dtoa_r+0xd4>
 800a4f4:	4b94      	ldr	r3, [pc, #592]	; (800a748 <_dtoa_r+0x2e8>)
 800a4f6:	9301      	str	r3, [sp, #4]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	9801      	ldr	r0, [sp, #4]
 800a500:	b011      	add	sp, #68	; 0x44
 800a502:	ecbd 8b02 	vpop	{d8}
 800a506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50a:	4b8e      	ldr	r3, [pc, #568]	; (800a744 <_dtoa_r+0x2e4>)
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	3303      	adds	r3, #3
 800a510:	e7f3      	b.n	800a4fa <_dtoa_r+0x9a>
 800a512:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a516:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a51e:	d10b      	bne.n	800a538 <_dtoa_r+0xd8>
 800a520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a522:	2301      	movs	r3, #1
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 84d9 	beq.w	800aee0 <_dtoa_r+0xa80>
 800a52e:	4887      	ldr	r0, [pc, #540]	; (800a74c <_dtoa_r+0x2ec>)
 800a530:	6018      	str	r0, [r3, #0]
 800a532:	1e43      	subs	r3, r0, #1
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	e7e2      	b.n	800a4fe <_dtoa_r+0x9e>
 800a538:	a90f      	add	r1, sp, #60	; 0x3c
 800a53a:	aa0e      	add	r2, sp, #56	; 0x38
 800a53c:	4630      	mov	r0, r6
 800a53e:	eeb0 0b48 	vmov.f64	d0, d8
 800a542:	f001 fa5d 	bl	800ba00 <__d2b>
 800a546:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a54a:	4605      	mov	r5, r0
 800a54c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a54e:	2900      	cmp	r1, #0
 800a550:	d046      	beq.n	800a5e0 <_dtoa_r+0x180>
 800a552:	ee18 4a90 	vmov	r4, s17
 800a556:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a55a:	ec53 2b18 	vmov	r2, r3, d8
 800a55e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a562:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a566:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a56a:	2400      	movs	r4, #0
 800a56c:	ec43 2b16 	vmov	d6, r2, r3
 800a570:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a574:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a720 <_dtoa_r+0x2c0>
 800a578:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a57c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a728 <_dtoa_r+0x2c8>
 800a580:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a584:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a730 <_dtoa_r+0x2d0>
 800a588:	ee07 1a90 	vmov	s15, r1
 800a58c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a590:	eeb0 7b46 	vmov.f64	d7, d6
 800a594:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a598:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a59c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a4:	ee16 ba90 	vmov	fp, s13
 800a5a8:	940a      	str	r4, [sp, #40]	; 0x28
 800a5aa:	d508      	bpl.n	800a5be <_dtoa_r+0x15e>
 800a5ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a5b0:	eeb4 6b47 	vcmp.f64	d6, d7
 800a5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b8:	bf18      	it	ne
 800a5ba:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a5be:	f1bb 0f16 	cmp.w	fp, #22
 800a5c2:	d82f      	bhi.n	800a624 <_dtoa_r+0x1c4>
 800a5c4:	4b62      	ldr	r3, [pc, #392]	; (800a750 <_dtoa_r+0x2f0>)
 800a5c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5ca:	ed93 7b00 	vldr	d7, [r3]
 800a5ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d6:	d501      	bpl.n	800a5dc <_dtoa_r+0x17c>
 800a5d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e022      	b.n	800a626 <_dtoa_r+0x1c6>
 800a5e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a5e2:	4401      	add	r1, r0
 800a5e4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a5e8:	2b20      	cmp	r3, #32
 800a5ea:	bfc1      	itttt	gt
 800a5ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5f0:	fa04 f303 	lslgt.w	r3, r4, r3
 800a5f4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a5f8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a5fc:	bfd6      	itet	le
 800a5fe:	f1c3 0320 	rsble	r3, r3, #32
 800a602:	ea43 0808 	orrgt.w	r8, r3, r8
 800a606:	fa08 f803 	lslle.w	r8, r8, r3
 800a60a:	ee07 8a90 	vmov	s15, r8
 800a60e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a612:	3901      	subs	r1, #1
 800a614:	ee17 4a90 	vmov	r4, s15
 800a618:	ec53 2b17 	vmov	r2, r3, d7
 800a61c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a620:	2401      	movs	r4, #1
 800a622:	e7a3      	b.n	800a56c <_dtoa_r+0x10c>
 800a624:	2301      	movs	r3, #1
 800a626:	930b      	str	r3, [sp, #44]	; 0x2c
 800a628:	1a43      	subs	r3, r0, r1
 800a62a:	1e5a      	subs	r2, r3, #1
 800a62c:	bf45      	ittet	mi
 800a62e:	f1c3 0301 	rsbmi	r3, r3, #1
 800a632:	9304      	strmi	r3, [sp, #16]
 800a634:	2300      	movpl	r3, #0
 800a636:	2300      	movmi	r3, #0
 800a638:	9205      	str	r2, [sp, #20]
 800a63a:	bf54      	ite	pl
 800a63c:	9304      	strpl	r3, [sp, #16]
 800a63e:	9305      	strmi	r3, [sp, #20]
 800a640:	f1bb 0f00 	cmp.w	fp, #0
 800a644:	db18      	blt.n	800a678 <_dtoa_r+0x218>
 800a646:	9b05      	ldr	r3, [sp, #20]
 800a648:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a64c:	445b      	add	r3, fp
 800a64e:	9305      	str	r3, [sp, #20]
 800a650:	2300      	movs	r3, #0
 800a652:	9a06      	ldr	r2, [sp, #24]
 800a654:	2a09      	cmp	r2, #9
 800a656:	d849      	bhi.n	800a6ec <_dtoa_r+0x28c>
 800a658:	2a05      	cmp	r2, #5
 800a65a:	bfc4      	itt	gt
 800a65c:	3a04      	subgt	r2, #4
 800a65e:	9206      	strgt	r2, [sp, #24]
 800a660:	9a06      	ldr	r2, [sp, #24]
 800a662:	f1a2 0202 	sub.w	r2, r2, #2
 800a666:	bfcc      	ite	gt
 800a668:	2400      	movgt	r4, #0
 800a66a:	2401      	movle	r4, #1
 800a66c:	2a03      	cmp	r2, #3
 800a66e:	d848      	bhi.n	800a702 <_dtoa_r+0x2a2>
 800a670:	e8df f002 	tbb	[pc, r2]
 800a674:	3a2c2e0b 	.word	0x3a2c2e0b
 800a678:	9b04      	ldr	r3, [sp, #16]
 800a67a:	2200      	movs	r2, #0
 800a67c:	eba3 030b 	sub.w	r3, r3, fp
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	9209      	str	r2, [sp, #36]	; 0x24
 800a684:	f1cb 0300 	rsb	r3, fp, #0
 800a688:	e7e3      	b.n	800a652 <_dtoa_r+0x1f2>
 800a68a:	2200      	movs	r2, #0
 800a68c:	9207      	str	r2, [sp, #28]
 800a68e:	9a08      	ldr	r2, [sp, #32]
 800a690:	2a00      	cmp	r2, #0
 800a692:	dc39      	bgt.n	800a708 <_dtoa_r+0x2a8>
 800a694:	f04f 0a01 	mov.w	sl, #1
 800a698:	46d1      	mov	r9, sl
 800a69a:	4652      	mov	r2, sl
 800a69c:	f8cd a020 	str.w	sl, [sp, #32]
 800a6a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	6079      	str	r1, [r7, #4]
 800a6a6:	2004      	movs	r0, #4
 800a6a8:	f100 0c14 	add.w	ip, r0, #20
 800a6ac:	4594      	cmp	ip, r2
 800a6ae:	6879      	ldr	r1, [r7, #4]
 800a6b0:	d92f      	bls.n	800a712 <_dtoa_r+0x2b2>
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	930d      	str	r3, [sp, #52]	; 0x34
 800a6b6:	f000 fe7b 	bl	800b3b0 <_Balloc>
 800a6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6bc:	9001      	str	r0, [sp, #4]
 800a6be:	4602      	mov	r2, r0
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d149      	bne.n	800a758 <_dtoa_r+0x2f8>
 800a6c4:	4b23      	ldr	r3, [pc, #140]	; (800a754 <_dtoa_r+0x2f4>)
 800a6c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6ca:	e6e1      	b.n	800a490 <_dtoa_r+0x30>
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	e7dd      	b.n	800a68c <_dtoa_r+0x22c>
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	9207      	str	r2, [sp, #28]
 800a6d4:	9a08      	ldr	r2, [sp, #32]
 800a6d6:	eb0b 0a02 	add.w	sl, fp, r2
 800a6da:	f10a 0901 	add.w	r9, sl, #1
 800a6de:	464a      	mov	r2, r9
 800a6e0:	2a01      	cmp	r2, #1
 800a6e2:	bfb8      	it	lt
 800a6e4:	2201      	movlt	r2, #1
 800a6e6:	e7db      	b.n	800a6a0 <_dtoa_r+0x240>
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	e7f2      	b.n	800a6d2 <_dtoa_r+0x272>
 800a6ec:	2401      	movs	r4, #1
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a6f4:	f04f 3aff 	mov.w	sl, #4294967295
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	46d1      	mov	r9, sl
 800a6fc:	2212      	movs	r2, #18
 800a6fe:	9108      	str	r1, [sp, #32]
 800a700:	e7ce      	b.n	800a6a0 <_dtoa_r+0x240>
 800a702:	2201      	movs	r2, #1
 800a704:	9207      	str	r2, [sp, #28]
 800a706:	e7f5      	b.n	800a6f4 <_dtoa_r+0x294>
 800a708:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a70c:	46d1      	mov	r9, sl
 800a70e:	4652      	mov	r2, sl
 800a710:	e7c6      	b.n	800a6a0 <_dtoa_r+0x240>
 800a712:	3101      	adds	r1, #1
 800a714:	6079      	str	r1, [r7, #4]
 800a716:	0040      	lsls	r0, r0, #1
 800a718:	e7c6      	b.n	800a6a8 <_dtoa_r+0x248>
 800a71a:	bf00      	nop
 800a71c:	f3af 8000 	nop.w
 800a720:	636f4361 	.word	0x636f4361
 800a724:	3fd287a7 	.word	0x3fd287a7
 800a728:	8b60c8b3 	.word	0x8b60c8b3
 800a72c:	3fc68a28 	.word	0x3fc68a28
 800a730:	509f79fb 	.word	0x509f79fb
 800a734:	3fd34413 	.word	0x3fd34413
 800a738:	0800c0de 	.word	0x0800c0de
 800a73c:	0800c0f5 	.word	0x0800c0f5
 800a740:	7ff00000 	.word	0x7ff00000
 800a744:	0800c0da 	.word	0x0800c0da
 800a748:	0800c0d1 	.word	0x0800c0d1
 800a74c:	0800c0ae 	.word	0x0800c0ae
 800a750:	0800c248 	.word	0x0800c248
 800a754:	0800c150 	.word	0x0800c150
 800a758:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a75a:	9901      	ldr	r1, [sp, #4]
 800a75c:	6011      	str	r1, [r2, #0]
 800a75e:	f1b9 0f0e 	cmp.w	r9, #14
 800a762:	d86c      	bhi.n	800a83e <_dtoa_r+0x3de>
 800a764:	2c00      	cmp	r4, #0
 800a766:	d06a      	beq.n	800a83e <_dtoa_r+0x3de>
 800a768:	f1bb 0f00 	cmp.w	fp, #0
 800a76c:	f340 80a0 	ble.w	800a8b0 <_dtoa_r+0x450>
 800a770:	49c1      	ldr	r1, [pc, #772]	; (800aa78 <_dtoa_r+0x618>)
 800a772:	f00b 020f 	and.w	r2, fp, #15
 800a776:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a77a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a77e:	ed92 7b00 	vldr	d7, [r2]
 800a782:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a786:	f000 8087 	beq.w	800a898 <_dtoa_r+0x438>
 800a78a:	4abc      	ldr	r2, [pc, #752]	; (800aa7c <_dtoa_r+0x61c>)
 800a78c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a790:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a794:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a798:	f001 010f 	and.w	r1, r1, #15
 800a79c:	2203      	movs	r2, #3
 800a79e:	48b7      	ldr	r0, [pc, #732]	; (800aa7c <_dtoa_r+0x61c>)
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	d17b      	bne.n	800a89c <_dtoa_r+0x43c>
 800a7a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a7a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a7ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a7b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7b2:	2900      	cmp	r1, #0
 800a7b4:	f000 80a2 	beq.w	800a8fc <_dtoa_r+0x49c>
 800a7b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a7bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c8:	f140 8098 	bpl.w	800a8fc <_dtoa_r+0x49c>
 800a7cc:	f1b9 0f00 	cmp.w	r9, #0
 800a7d0:	f000 8094 	beq.w	800a8fc <_dtoa_r+0x49c>
 800a7d4:	f1ba 0f00 	cmp.w	sl, #0
 800a7d8:	dd2f      	ble.n	800a83a <_dtoa_r+0x3da>
 800a7da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a7de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a7e6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a7ea:	3201      	adds	r2, #1
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a7f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a7f6:	ee07 2a90 	vmov	s15, r2
 800a7fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a7fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a802:	ee15 4a90 	vmov	r4, s11
 800a806:	ec52 1b15 	vmov	r1, r2, d5
 800a80a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a80e:	2800      	cmp	r0, #0
 800a810:	d177      	bne.n	800a902 <_dtoa_r+0x4a2>
 800a812:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a816:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a81a:	ec42 1b17 	vmov	d7, r1, r2
 800a81e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a826:	f300 8263 	bgt.w	800acf0 <_dtoa_r+0x890>
 800a82a:	eeb1 7b47 	vneg.f64	d7, d7
 800a82e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a836:	f100 8258 	bmi.w	800acea <_dtoa_r+0x88a>
 800a83a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a83e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a840:	2a00      	cmp	r2, #0
 800a842:	f2c0 811d 	blt.w	800aa80 <_dtoa_r+0x620>
 800a846:	f1bb 0f0e 	cmp.w	fp, #14
 800a84a:	f300 8119 	bgt.w	800aa80 <_dtoa_r+0x620>
 800a84e:	4b8a      	ldr	r3, [pc, #552]	; (800aa78 <_dtoa_r+0x618>)
 800a850:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a854:	ed93 6b00 	vldr	d6, [r3]
 800a858:	9b08      	ldr	r3, [sp, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f280 80b7 	bge.w	800a9ce <_dtoa_r+0x56e>
 800a860:	f1b9 0f00 	cmp.w	r9, #0
 800a864:	f300 80b3 	bgt.w	800a9ce <_dtoa_r+0x56e>
 800a868:	f040 823f 	bne.w	800acea <_dtoa_r+0x88a>
 800a86c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a870:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a874:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a878:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a880:	464c      	mov	r4, r9
 800a882:	464f      	mov	r7, r9
 800a884:	f280 8215 	bge.w	800acb2 <_dtoa_r+0x852>
 800a888:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a88c:	2331      	movs	r3, #49	; 0x31
 800a88e:	f808 3b01 	strb.w	r3, [r8], #1
 800a892:	f10b 0b01 	add.w	fp, fp, #1
 800a896:	e211      	b.n	800acbc <_dtoa_r+0x85c>
 800a898:	2202      	movs	r2, #2
 800a89a:	e780      	b.n	800a79e <_dtoa_r+0x33e>
 800a89c:	07cc      	lsls	r4, r1, #31
 800a89e:	d504      	bpl.n	800a8aa <_dtoa_r+0x44a>
 800a8a0:	ed90 6b00 	vldr	d6, [r0]
 800a8a4:	3201      	adds	r2, #1
 800a8a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8aa:	1049      	asrs	r1, r1, #1
 800a8ac:	3008      	adds	r0, #8
 800a8ae:	e777      	b.n	800a7a0 <_dtoa_r+0x340>
 800a8b0:	d022      	beq.n	800a8f8 <_dtoa_r+0x498>
 800a8b2:	f1cb 0100 	rsb	r1, fp, #0
 800a8b6:	4a70      	ldr	r2, [pc, #448]	; (800aa78 <_dtoa_r+0x618>)
 800a8b8:	f001 000f 	and.w	r0, r1, #15
 800a8bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a8c0:	ed92 7b00 	vldr	d7, [r2]
 800a8c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a8c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8cc:	486b      	ldr	r0, [pc, #428]	; (800aa7c <_dtoa_r+0x61c>)
 800a8ce:	1109      	asrs	r1, r1, #4
 800a8d0:	2400      	movs	r4, #0
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	b929      	cbnz	r1, 800a8e2 <_dtoa_r+0x482>
 800a8d6:	2c00      	cmp	r4, #0
 800a8d8:	f43f af6a 	beq.w	800a7b0 <_dtoa_r+0x350>
 800a8dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8e0:	e766      	b.n	800a7b0 <_dtoa_r+0x350>
 800a8e2:	07cf      	lsls	r7, r1, #31
 800a8e4:	d505      	bpl.n	800a8f2 <_dtoa_r+0x492>
 800a8e6:	ed90 6b00 	vldr	d6, [r0]
 800a8ea:	3201      	adds	r2, #1
 800a8ec:	2401      	movs	r4, #1
 800a8ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8f2:	1049      	asrs	r1, r1, #1
 800a8f4:	3008      	adds	r0, #8
 800a8f6:	e7ed      	b.n	800a8d4 <_dtoa_r+0x474>
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	e759      	b.n	800a7b0 <_dtoa_r+0x350>
 800a8fc:	465f      	mov	r7, fp
 800a8fe:	4648      	mov	r0, r9
 800a900:	e775      	b.n	800a7ee <_dtoa_r+0x38e>
 800a902:	ec42 1b17 	vmov	d7, r1, r2
 800a906:	4a5c      	ldr	r2, [pc, #368]	; (800aa78 <_dtoa_r+0x618>)
 800a908:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a90c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a910:	9a01      	ldr	r2, [sp, #4]
 800a912:	1814      	adds	r4, r2, r0
 800a914:	9a07      	ldr	r2, [sp, #28]
 800a916:	b352      	cbz	r2, 800a96e <_dtoa_r+0x50e>
 800a918:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a91c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a920:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a924:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a928:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a92c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a930:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a934:	ee14 2a90 	vmov	r2, s9
 800a938:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a93c:	3230      	adds	r2, #48	; 0x30
 800a93e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a942:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94a:	f808 2b01 	strb.w	r2, [r8], #1
 800a94e:	d439      	bmi.n	800a9c4 <_dtoa_r+0x564>
 800a950:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a954:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a95c:	d472      	bmi.n	800aa44 <_dtoa_r+0x5e4>
 800a95e:	45a0      	cmp	r8, r4
 800a960:	f43f af6b 	beq.w	800a83a <_dtoa_r+0x3da>
 800a964:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a968:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a96c:	e7e0      	b.n	800a930 <_dtoa_r+0x4d0>
 800a96e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a972:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a976:	4621      	mov	r1, r4
 800a978:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a97c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a980:	ee14 2a90 	vmov	r2, s9
 800a984:	3230      	adds	r2, #48	; 0x30
 800a986:	f808 2b01 	strb.w	r2, [r8], #1
 800a98a:	45a0      	cmp	r8, r4
 800a98c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a990:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a994:	d118      	bne.n	800a9c8 <_dtoa_r+0x568>
 800a996:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a99a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a99e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a6:	dc4d      	bgt.n	800aa44 <_dtoa_r+0x5e4>
 800a9a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a9ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b4:	f57f af41 	bpl.w	800a83a <_dtoa_r+0x3da>
 800a9b8:	4688      	mov	r8, r1
 800a9ba:	3901      	subs	r1, #1
 800a9bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a9c0:	2b30      	cmp	r3, #48	; 0x30
 800a9c2:	d0f9      	beq.n	800a9b8 <_dtoa_r+0x558>
 800a9c4:	46bb      	mov	fp, r7
 800a9c6:	e02a      	b.n	800aa1e <_dtoa_r+0x5be>
 800a9c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a9cc:	e7d6      	b.n	800a97c <_dtoa_r+0x51c>
 800a9ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a9d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a9da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a9de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a9e2:	ee15 3a10 	vmov	r3, s10
 800a9e6:	3330      	adds	r3, #48	; 0x30
 800a9e8:	f808 3b01 	strb.w	r3, [r8], #1
 800a9ec:	9b01      	ldr	r3, [sp, #4]
 800a9ee:	eba8 0303 	sub.w	r3, r8, r3
 800a9f2:	4599      	cmp	r9, r3
 800a9f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a9f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a9fc:	d133      	bne.n	800aa66 <_dtoa_r+0x606>
 800a9fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aa02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa0a:	dc1a      	bgt.n	800aa42 <_dtoa_r+0x5e2>
 800aa0c:	eeb4 7b46 	vcmp.f64	d7, d6
 800aa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa14:	d103      	bne.n	800aa1e <_dtoa_r+0x5be>
 800aa16:	ee15 3a10 	vmov	r3, s10
 800aa1a:	07d9      	lsls	r1, r3, #31
 800aa1c:	d411      	bmi.n	800aa42 <_dtoa_r+0x5e2>
 800aa1e:	4629      	mov	r1, r5
 800aa20:	4630      	mov	r0, r6
 800aa22:	f000 fd05 	bl	800b430 <_Bfree>
 800aa26:	2300      	movs	r3, #0
 800aa28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa2a:	f888 3000 	strb.w	r3, [r8]
 800aa2e:	f10b 0301 	add.w	r3, fp, #1
 800aa32:	6013      	str	r3, [r2, #0]
 800aa34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f43f ad61 	beq.w	800a4fe <_dtoa_r+0x9e>
 800aa3c:	f8c3 8000 	str.w	r8, [r3]
 800aa40:	e55d      	b.n	800a4fe <_dtoa_r+0x9e>
 800aa42:	465f      	mov	r7, fp
 800aa44:	4643      	mov	r3, r8
 800aa46:	4698      	mov	r8, r3
 800aa48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa4c:	2a39      	cmp	r2, #57	; 0x39
 800aa4e:	d106      	bne.n	800aa5e <_dtoa_r+0x5fe>
 800aa50:	9a01      	ldr	r2, [sp, #4]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d1f7      	bne.n	800aa46 <_dtoa_r+0x5e6>
 800aa56:	9901      	ldr	r1, [sp, #4]
 800aa58:	2230      	movs	r2, #48	; 0x30
 800aa5a:	3701      	adds	r7, #1
 800aa5c:	700a      	strb	r2, [r1, #0]
 800aa5e:	781a      	ldrb	r2, [r3, #0]
 800aa60:	3201      	adds	r2, #1
 800aa62:	701a      	strb	r2, [r3, #0]
 800aa64:	e7ae      	b.n	800a9c4 <_dtoa_r+0x564>
 800aa66:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aa6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa72:	d1b2      	bne.n	800a9da <_dtoa_r+0x57a>
 800aa74:	e7d3      	b.n	800aa1e <_dtoa_r+0x5be>
 800aa76:	bf00      	nop
 800aa78:	0800c248 	.word	0x0800c248
 800aa7c:	0800c220 	.word	0x0800c220
 800aa80:	9907      	ldr	r1, [sp, #28]
 800aa82:	2900      	cmp	r1, #0
 800aa84:	f000 80d0 	beq.w	800ac28 <_dtoa_r+0x7c8>
 800aa88:	9906      	ldr	r1, [sp, #24]
 800aa8a:	2901      	cmp	r1, #1
 800aa8c:	f300 80b4 	bgt.w	800abf8 <_dtoa_r+0x798>
 800aa90:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa92:	2900      	cmp	r1, #0
 800aa94:	f000 80ac 	beq.w	800abf0 <_dtoa_r+0x790>
 800aa98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa9c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aaa0:	461c      	mov	r4, r3
 800aaa2:	930a      	str	r3, [sp, #40]	; 0x28
 800aaa4:	9b04      	ldr	r3, [sp, #16]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	9b05      	ldr	r3, [sp, #20]
 800aaac:	2101      	movs	r1, #1
 800aaae:	4413      	add	r3, r2
 800aab0:	4630      	mov	r0, r6
 800aab2:	9305      	str	r3, [sp, #20]
 800aab4:	f000 fd74 	bl	800b5a0 <__i2b>
 800aab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaba:	4607      	mov	r7, r0
 800aabc:	f1b8 0f00 	cmp.w	r8, #0
 800aac0:	dd0d      	ble.n	800aade <_dtoa_r+0x67e>
 800aac2:	9a05      	ldr	r2, [sp, #20]
 800aac4:	2a00      	cmp	r2, #0
 800aac6:	dd0a      	ble.n	800aade <_dtoa_r+0x67e>
 800aac8:	4542      	cmp	r2, r8
 800aaca:	9904      	ldr	r1, [sp, #16]
 800aacc:	bfa8      	it	ge
 800aace:	4642      	movge	r2, r8
 800aad0:	1a89      	subs	r1, r1, r2
 800aad2:	9104      	str	r1, [sp, #16]
 800aad4:	9905      	ldr	r1, [sp, #20]
 800aad6:	eba8 0802 	sub.w	r8, r8, r2
 800aada:	1a8a      	subs	r2, r1, r2
 800aadc:	9205      	str	r2, [sp, #20]
 800aade:	b303      	cbz	r3, 800ab22 <_dtoa_r+0x6c2>
 800aae0:	9a07      	ldr	r2, [sp, #28]
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	f000 80a5 	beq.w	800ac32 <_dtoa_r+0x7d2>
 800aae8:	2c00      	cmp	r4, #0
 800aaea:	dd13      	ble.n	800ab14 <_dtoa_r+0x6b4>
 800aaec:	4639      	mov	r1, r7
 800aaee:	4622      	mov	r2, r4
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	930d      	str	r3, [sp, #52]	; 0x34
 800aaf4:	f000 fe14 	bl	800b720 <__pow5mult>
 800aaf8:	462a      	mov	r2, r5
 800aafa:	4601      	mov	r1, r0
 800aafc:	4607      	mov	r7, r0
 800aafe:	4630      	mov	r0, r6
 800ab00:	f000 fd64 	bl	800b5cc <__multiply>
 800ab04:	4629      	mov	r1, r5
 800ab06:	900a      	str	r0, [sp, #40]	; 0x28
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f000 fc91 	bl	800b430 <_Bfree>
 800ab0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab12:	4615      	mov	r5, r2
 800ab14:	1b1a      	subs	r2, r3, r4
 800ab16:	d004      	beq.n	800ab22 <_dtoa_r+0x6c2>
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f000 fe00 	bl	800b720 <__pow5mult>
 800ab20:	4605      	mov	r5, r0
 800ab22:	2101      	movs	r1, #1
 800ab24:	4630      	mov	r0, r6
 800ab26:	f000 fd3b 	bl	800b5a0 <__i2b>
 800ab2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	4604      	mov	r4, r0
 800ab30:	f340 8081 	ble.w	800ac36 <_dtoa_r+0x7d6>
 800ab34:	461a      	mov	r2, r3
 800ab36:	4601      	mov	r1, r0
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f000 fdf1 	bl	800b720 <__pow5mult>
 800ab3e:	9b06      	ldr	r3, [sp, #24]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	4604      	mov	r4, r0
 800ab44:	dd7a      	ble.n	800ac3c <_dtoa_r+0x7dc>
 800ab46:	2300      	movs	r3, #0
 800ab48:	930a      	str	r3, [sp, #40]	; 0x28
 800ab4a:	6922      	ldr	r2, [r4, #16]
 800ab4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ab50:	6910      	ldr	r0, [r2, #16]
 800ab52:	f000 fcd5 	bl	800b500 <__hi0bits>
 800ab56:	f1c0 0020 	rsb	r0, r0, #32
 800ab5a:	9b05      	ldr	r3, [sp, #20]
 800ab5c:	4418      	add	r0, r3
 800ab5e:	f010 001f 	ands.w	r0, r0, #31
 800ab62:	f000 808c 	beq.w	800ac7e <_dtoa_r+0x81e>
 800ab66:	f1c0 0220 	rsb	r2, r0, #32
 800ab6a:	2a04      	cmp	r2, #4
 800ab6c:	f340 8085 	ble.w	800ac7a <_dtoa_r+0x81a>
 800ab70:	f1c0 001c 	rsb	r0, r0, #28
 800ab74:	9b04      	ldr	r3, [sp, #16]
 800ab76:	4403      	add	r3, r0
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	9b05      	ldr	r3, [sp, #20]
 800ab7c:	4403      	add	r3, r0
 800ab7e:	4480      	add	r8, r0
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	9b04      	ldr	r3, [sp, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dd05      	ble.n	800ab94 <_dtoa_r+0x734>
 800ab88:	4629      	mov	r1, r5
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f000 fe21 	bl	800b7d4 <__lshift>
 800ab92:	4605      	mov	r5, r0
 800ab94:	9b05      	ldr	r3, [sp, #20]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	dd05      	ble.n	800aba6 <_dtoa_r+0x746>
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f000 fe18 	bl	800b7d4 <__lshift>
 800aba4:	4604      	mov	r4, r0
 800aba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d06a      	beq.n	800ac82 <_dtoa_r+0x822>
 800abac:	4621      	mov	r1, r4
 800abae:	4628      	mov	r0, r5
 800abb0:	f000 fe80 	bl	800b8b4 <__mcmp>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	da64      	bge.n	800ac82 <_dtoa_r+0x822>
 800abb8:	2300      	movs	r3, #0
 800abba:	4629      	mov	r1, r5
 800abbc:	220a      	movs	r2, #10
 800abbe:	4630      	mov	r0, r6
 800abc0:	f000 fc58 	bl	800b474 <__multadd>
 800abc4:	9b07      	ldr	r3, [sp, #28]
 800abc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abca:	4605      	mov	r5, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 8191 	beq.w	800aef4 <_dtoa_r+0xa94>
 800abd2:	4639      	mov	r1, r7
 800abd4:	2300      	movs	r3, #0
 800abd6:	220a      	movs	r2, #10
 800abd8:	4630      	mov	r0, r6
 800abda:	f000 fc4b 	bl	800b474 <__multadd>
 800abde:	f1ba 0f00 	cmp.w	sl, #0
 800abe2:	4607      	mov	r7, r0
 800abe4:	f300 808d 	bgt.w	800ad02 <_dtoa_r+0x8a2>
 800abe8:	9b06      	ldr	r3, [sp, #24]
 800abea:	2b02      	cmp	r3, #2
 800abec:	dc50      	bgt.n	800ac90 <_dtoa_r+0x830>
 800abee:	e088      	b.n	800ad02 <_dtoa_r+0x8a2>
 800abf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abf6:	e751      	b.n	800aa9c <_dtoa_r+0x63c>
 800abf8:	f109 34ff 	add.w	r4, r9, #4294967295
 800abfc:	42a3      	cmp	r3, r4
 800abfe:	bfbf      	itttt	lt
 800ac00:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800ac02:	1ae3      	sublt	r3, r4, r3
 800ac04:	18d2      	addlt	r2, r2, r3
 800ac06:	9209      	strlt	r2, [sp, #36]	; 0x24
 800ac08:	bfb6      	itet	lt
 800ac0a:	4623      	movlt	r3, r4
 800ac0c:	1b1c      	subge	r4, r3, r4
 800ac0e:	2400      	movlt	r4, #0
 800ac10:	f1b9 0f00 	cmp.w	r9, #0
 800ac14:	bfb5      	itete	lt
 800ac16:	9a04      	ldrlt	r2, [sp, #16]
 800ac18:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800ac1c:	eba2 0809 	sublt.w	r8, r2, r9
 800ac20:	464a      	movge	r2, r9
 800ac22:	bfb8      	it	lt
 800ac24:	2200      	movlt	r2, #0
 800ac26:	e73c      	b.n	800aaa2 <_dtoa_r+0x642>
 800ac28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ac2c:	9f07      	ldr	r7, [sp, #28]
 800ac2e:	461c      	mov	r4, r3
 800ac30:	e744      	b.n	800aabc <_dtoa_r+0x65c>
 800ac32:	461a      	mov	r2, r3
 800ac34:	e770      	b.n	800ab18 <_dtoa_r+0x6b8>
 800ac36:	9b06      	ldr	r3, [sp, #24]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	dc18      	bgt.n	800ac6e <_dtoa_r+0x80e>
 800ac3c:	9b02      	ldr	r3, [sp, #8]
 800ac3e:	b9b3      	cbnz	r3, 800ac6e <_dtoa_r+0x80e>
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ac46:	b9a2      	cbnz	r2, 800ac72 <_dtoa_r+0x812>
 800ac48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac4c:	0d12      	lsrs	r2, r2, #20
 800ac4e:	0512      	lsls	r2, r2, #20
 800ac50:	b18a      	cbz	r2, 800ac76 <_dtoa_r+0x816>
 800ac52:	9b04      	ldr	r3, [sp, #16]
 800ac54:	3301      	adds	r3, #1
 800ac56:	9304      	str	r3, [sp, #16]
 800ac58:	9b05      	ldr	r3, [sp, #20]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	9305      	str	r3, [sp, #20]
 800ac5e:	2301      	movs	r3, #1
 800ac60:	930a      	str	r3, [sp, #40]	; 0x28
 800ac62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f47f af70 	bne.w	800ab4a <_dtoa_r+0x6ea>
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	e775      	b.n	800ab5a <_dtoa_r+0x6fa>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e7f6      	b.n	800ac60 <_dtoa_r+0x800>
 800ac72:	9b02      	ldr	r3, [sp, #8]
 800ac74:	e7f4      	b.n	800ac60 <_dtoa_r+0x800>
 800ac76:	920a      	str	r2, [sp, #40]	; 0x28
 800ac78:	e7f3      	b.n	800ac62 <_dtoa_r+0x802>
 800ac7a:	d082      	beq.n	800ab82 <_dtoa_r+0x722>
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	301c      	adds	r0, #28
 800ac80:	e778      	b.n	800ab74 <_dtoa_r+0x714>
 800ac82:	f1b9 0f00 	cmp.w	r9, #0
 800ac86:	dc37      	bgt.n	800acf8 <_dtoa_r+0x898>
 800ac88:	9b06      	ldr	r3, [sp, #24]
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	dd34      	ble.n	800acf8 <_dtoa_r+0x898>
 800ac8e:	46ca      	mov	sl, r9
 800ac90:	f1ba 0f00 	cmp.w	sl, #0
 800ac94:	d10d      	bne.n	800acb2 <_dtoa_r+0x852>
 800ac96:	4621      	mov	r1, r4
 800ac98:	4653      	mov	r3, sl
 800ac9a:	2205      	movs	r2, #5
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f000 fbe9 	bl	800b474 <__multadd>
 800aca2:	4601      	mov	r1, r0
 800aca4:	4604      	mov	r4, r0
 800aca6:	4628      	mov	r0, r5
 800aca8:	f000 fe04 	bl	800b8b4 <__mcmp>
 800acac:	2800      	cmp	r0, #0
 800acae:	f73f adeb 	bgt.w	800a888 <_dtoa_r+0x428>
 800acb2:	9b08      	ldr	r3, [sp, #32]
 800acb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800acb8:	ea6f 0b03 	mvn.w	fp, r3
 800acbc:	f04f 0900 	mov.w	r9, #0
 800acc0:	4621      	mov	r1, r4
 800acc2:	4630      	mov	r0, r6
 800acc4:	f000 fbb4 	bl	800b430 <_Bfree>
 800acc8:	2f00      	cmp	r7, #0
 800acca:	f43f aea8 	beq.w	800aa1e <_dtoa_r+0x5be>
 800acce:	f1b9 0f00 	cmp.w	r9, #0
 800acd2:	d005      	beq.n	800ace0 <_dtoa_r+0x880>
 800acd4:	45b9      	cmp	r9, r7
 800acd6:	d003      	beq.n	800ace0 <_dtoa_r+0x880>
 800acd8:	4649      	mov	r1, r9
 800acda:	4630      	mov	r0, r6
 800acdc:	f000 fba8 	bl	800b430 <_Bfree>
 800ace0:	4639      	mov	r1, r7
 800ace2:	4630      	mov	r0, r6
 800ace4:	f000 fba4 	bl	800b430 <_Bfree>
 800ace8:	e699      	b.n	800aa1e <_dtoa_r+0x5be>
 800acea:	2400      	movs	r4, #0
 800acec:	4627      	mov	r7, r4
 800acee:	e7e0      	b.n	800acb2 <_dtoa_r+0x852>
 800acf0:	46bb      	mov	fp, r7
 800acf2:	4604      	mov	r4, r0
 800acf4:	4607      	mov	r7, r0
 800acf6:	e5c7      	b.n	800a888 <_dtoa_r+0x428>
 800acf8:	9b07      	ldr	r3, [sp, #28]
 800acfa:	46ca      	mov	sl, r9
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 8100 	beq.w	800af02 <_dtoa_r+0xaa2>
 800ad02:	f1b8 0f00 	cmp.w	r8, #0
 800ad06:	dd05      	ble.n	800ad14 <_dtoa_r+0x8b4>
 800ad08:	4639      	mov	r1, r7
 800ad0a:	4642      	mov	r2, r8
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f000 fd61 	bl	800b7d4 <__lshift>
 800ad12:	4607      	mov	r7, r0
 800ad14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d05d      	beq.n	800add6 <_dtoa_r+0x976>
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f000 fb47 	bl	800b3b0 <_Balloc>
 800ad22:	4680      	mov	r8, r0
 800ad24:	b928      	cbnz	r0, 800ad32 <_dtoa_r+0x8d2>
 800ad26:	4b82      	ldr	r3, [pc, #520]	; (800af30 <_dtoa_r+0xad0>)
 800ad28:	4602      	mov	r2, r0
 800ad2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad2e:	f7ff bbaf 	b.w	800a490 <_dtoa_r+0x30>
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	3202      	adds	r2, #2
 800ad36:	0092      	lsls	r2, r2, #2
 800ad38:	f107 010c 	add.w	r1, r7, #12
 800ad3c:	300c      	adds	r0, #12
 800ad3e:	f000 fb29 	bl	800b394 <memcpy>
 800ad42:	2201      	movs	r2, #1
 800ad44:	4641      	mov	r1, r8
 800ad46:	4630      	mov	r0, r6
 800ad48:	f000 fd44 	bl	800b7d4 <__lshift>
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	9304      	str	r3, [sp, #16]
 800ad52:	9b01      	ldr	r3, [sp, #4]
 800ad54:	4453      	add	r3, sl
 800ad56:	9308      	str	r3, [sp, #32]
 800ad58:	9b02      	ldr	r3, [sp, #8]
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	46b9      	mov	r9, r7
 800ad60:	9307      	str	r3, [sp, #28]
 800ad62:	4607      	mov	r7, r0
 800ad64:	9b04      	ldr	r3, [sp, #16]
 800ad66:	4621      	mov	r1, r4
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	9302      	str	r3, [sp, #8]
 800ad6e:	f7ff faec 	bl	800a34a <quorem>
 800ad72:	4603      	mov	r3, r0
 800ad74:	3330      	adds	r3, #48	; 0x30
 800ad76:	9005      	str	r0, [sp, #20]
 800ad78:	4649      	mov	r1, r9
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7e:	f000 fd99 	bl	800b8b4 <__mcmp>
 800ad82:	463a      	mov	r2, r7
 800ad84:	4682      	mov	sl, r0
 800ad86:	4621      	mov	r1, r4
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f000 fdaf 	bl	800b8ec <__mdiff>
 800ad8e:	68c2      	ldr	r2, [r0, #12]
 800ad90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad92:	4680      	mov	r8, r0
 800ad94:	bb0a      	cbnz	r2, 800adda <_dtoa_r+0x97a>
 800ad96:	4601      	mov	r1, r0
 800ad98:	4628      	mov	r0, r5
 800ad9a:	f000 fd8b 	bl	800b8b4 <__mcmp>
 800ad9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada0:	4602      	mov	r2, r0
 800ada2:	4641      	mov	r1, r8
 800ada4:	4630      	mov	r0, r6
 800ada6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800adaa:	f000 fb41 	bl	800b430 <_Bfree>
 800adae:	9b06      	ldr	r3, [sp, #24]
 800adb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adb2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800adb6:	ea43 0102 	orr.w	r1, r3, r2
 800adba:	9b07      	ldr	r3, [sp, #28]
 800adbc:	430b      	orrs	r3, r1
 800adbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc0:	d10d      	bne.n	800adde <_dtoa_r+0x97e>
 800adc2:	2b39      	cmp	r3, #57	; 0x39
 800adc4:	d029      	beq.n	800ae1a <_dtoa_r+0x9ba>
 800adc6:	f1ba 0f00 	cmp.w	sl, #0
 800adca:	dd01      	ble.n	800add0 <_dtoa_r+0x970>
 800adcc:	9b05      	ldr	r3, [sp, #20]
 800adce:	3331      	adds	r3, #49	; 0x31
 800add0:	9a02      	ldr	r2, [sp, #8]
 800add2:	7013      	strb	r3, [r2, #0]
 800add4:	e774      	b.n	800acc0 <_dtoa_r+0x860>
 800add6:	4638      	mov	r0, r7
 800add8:	e7b8      	b.n	800ad4c <_dtoa_r+0x8ec>
 800adda:	2201      	movs	r2, #1
 800addc:	e7e1      	b.n	800ada2 <_dtoa_r+0x942>
 800adde:	f1ba 0f00 	cmp.w	sl, #0
 800ade2:	db06      	blt.n	800adf2 <_dtoa_r+0x992>
 800ade4:	9906      	ldr	r1, [sp, #24]
 800ade6:	ea41 0a0a 	orr.w	sl, r1, sl
 800adea:	9907      	ldr	r1, [sp, #28]
 800adec:	ea5a 0101 	orrs.w	r1, sl, r1
 800adf0:	d120      	bne.n	800ae34 <_dtoa_r+0x9d4>
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	ddec      	ble.n	800add0 <_dtoa_r+0x970>
 800adf6:	4629      	mov	r1, r5
 800adf8:	2201      	movs	r2, #1
 800adfa:	4630      	mov	r0, r6
 800adfc:	9304      	str	r3, [sp, #16]
 800adfe:	f000 fce9 	bl	800b7d4 <__lshift>
 800ae02:	4621      	mov	r1, r4
 800ae04:	4605      	mov	r5, r0
 800ae06:	f000 fd55 	bl	800b8b4 <__mcmp>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	9b04      	ldr	r3, [sp, #16]
 800ae0e:	dc02      	bgt.n	800ae16 <_dtoa_r+0x9b6>
 800ae10:	d1de      	bne.n	800add0 <_dtoa_r+0x970>
 800ae12:	07da      	lsls	r2, r3, #31
 800ae14:	d5dc      	bpl.n	800add0 <_dtoa_r+0x970>
 800ae16:	2b39      	cmp	r3, #57	; 0x39
 800ae18:	d1d8      	bne.n	800adcc <_dtoa_r+0x96c>
 800ae1a:	9a02      	ldr	r2, [sp, #8]
 800ae1c:	2339      	movs	r3, #57	; 0x39
 800ae1e:	7013      	strb	r3, [r2, #0]
 800ae20:	4643      	mov	r3, r8
 800ae22:	4698      	mov	r8, r3
 800ae24:	3b01      	subs	r3, #1
 800ae26:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ae2a:	2a39      	cmp	r2, #57	; 0x39
 800ae2c:	d051      	beq.n	800aed2 <_dtoa_r+0xa72>
 800ae2e:	3201      	adds	r2, #1
 800ae30:	701a      	strb	r2, [r3, #0]
 800ae32:	e745      	b.n	800acc0 <_dtoa_r+0x860>
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	dd03      	ble.n	800ae40 <_dtoa_r+0x9e0>
 800ae38:	2b39      	cmp	r3, #57	; 0x39
 800ae3a:	d0ee      	beq.n	800ae1a <_dtoa_r+0x9ba>
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	e7c7      	b.n	800add0 <_dtoa_r+0x970>
 800ae40:	9a04      	ldr	r2, [sp, #16]
 800ae42:	9908      	ldr	r1, [sp, #32]
 800ae44:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ae48:	428a      	cmp	r2, r1
 800ae4a:	d02b      	beq.n	800aea4 <_dtoa_r+0xa44>
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	2300      	movs	r3, #0
 800ae50:	220a      	movs	r2, #10
 800ae52:	4630      	mov	r0, r6
 800ae54:	f000 fb0e 	bl	800b474 <__multadd>
 800ae58:	45b9      	cmp	r9, r7
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	f04f 0300 	mov.w	r3, #0
 800ae60:	f04f 020a 	mov.w	r2, #10
 800ae64:	4649      	mov	r1, r9
 800ae66:	4630      	mov	r0, r6
 800ae68:	d107      	bne.n	800ae7a <_dtoa_r+0xa1a>
 800ae6a:	f000 fb03 	bl	800b474 <__multadd>
 800ae6e:	4681      	mov	r9, r0
 800ae70:	4607      	mov	r7, r0
 800ae72:	9b04      	ldr	r3, [sp, #16]
 800ae74:	3301      	adds	r3, #1
 800ae76:	9304      	str	r3, [sp, #16]
 800ae78:	e774      	b.n	800ad64 <_dtoa_r+0x904>
 800ae7a:	f000 fafb 	bl	800b474 <__multadd>
 800ae7e:	4639      	mov	r1, r7
 800ae80:	4681      	mov	r9, r0
 800ae82:	2300      	movs	r3, #0
 800ae84:	220a      	movs	r2, #10
 800ae86:	4630      	mov	r0, r6
 800ae88:	f000 faf4 	bl	800b474 <__multadd>
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	e7f0      	b.n	800ae72 <_dtoa_r+0xa12>
 800ae90:	f1ba 0f00 	cmp.w	sl, #0
 800ae94:	9a01      	ldr	r2, [sp, #4]
 800ae96:	bfcc      	ite	gt
 800ae98:	46d0      	movgt	r8, sl
 800ae9a:	f04f 0801 	movle.w	r8, #1
 800ae9e:	4490      	add	r8, r2
 800aea0:	f04f 0900 	mov.w	r9, #0
 800aea4:	4629      	mov	r1, r5
 800aea6:	2201      	movs	r2, #1
 800aea8:	4630      	mov	r0, r6
 800aeaa:	9302      	str	r3, [sp, #8]
 800aeac:	f000 fc92 	bl	800b7d4 <__lshift>
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	f000 fcfe 	bl	800b8b4 <__mcmp>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	dcb1      	bgt.n	800ae20 <_dtoa_r+0x9c0>
 800aebc:	d102      	bne.n	800aec4 <_dtoa_r+0xa64>
 800aebe:	9b02      	ldr	r3, [sp, #8]
 800aec0:	07db      	lsls	r3, r3, #31
 800aec2:	d4ad      	bmi.n	800ae20 <_dtoa_r+0x9c0>
 800aec4:	4643      	mov	r3, r8
 800aec6:	4698      	mov	r8, r3
 800aec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aecc:	2a30      	cmp	r2, #48	; 0x30
 800aece:	d0fa      	beq.n	800aec6 <_dtoa_r+0xa66>
 800aed0:	e6f6      	b.n	800acc0 <_dtoa_r+0x860>
 800aed2:	9a01      	ldr	r2, [sp, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d1a4      	bne.n	800ae22 <_dtoa_r+0x9c2>
 800aed8:	f10b 0b01 	add.w	fp, fp, #1
 800aedc:	2331      	movs	r3, #49	; 0x31
 800aede:	e778      	b.n	800add2 <_dtoa_r+0x972>
 800aee0:	4b14      	ldr	r3, [pc, #80]	; (800af34 <_dtoa_r+0xad4>)
 800aee2:	f7ff bb27 	b.w	800a534 <_dtoa_r+0xd4>
 800aee6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f47f ab03 	bne.w	800a4f4 <_dtoa_r+0x94>
 800aeee:	4b12      	ldr	r3, [pc, #72]	; (800af38 <_dtoa_r+0xad8>)
 800aef0:	f7ff bb20 	b.w	800a534 <_dtoa_r+0xd4>
 800aef4:	f1ba 0f00 	cmp.w	sl, #0
 800aef8:	dc03      	bgt.n	800af02 <_dtoa_r+0xaa2>
 800aefa:	9b06      	ldr	r3, [sp, #24]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	f73f aec7 	bgt.w	800ac90 <_dtoa_r+0x830>
 800af02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800af06:	4621      	mov	r1, r4
 800af08:	4628      	mov	r0, r5
 800af0a:	f7ff fa1e 	bl	800a34a <quorem>
 800af0e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800af12:	f808 3b01 	strb.w	r3, [r8], #1
 800af16:	9a01      	ldr	r2, [sp, #4]
 800af18:	eba8 0202 	sub.w	r2, r8, r2
 800af1c:	4592      	cmp	sl, r2
 800af1e:	ddb7      	ble.n	800ae90 <_dtoa_r+0xa30>
 800af20:	4629      	mov	r1, r5
 800af22:	2300      	movs	r3, #0
 800af24:	220a      	movs	r2, #10
 800af26:	4630      	mov	r0, r6
 800af28:	f000 faa4 	bl	800b474 <__multadd>
 800af2c:	4605      	mov	r5, r0
 800af2e:	e7ea      	b.n	800af06 <_dtoa_r+0xaa6>
 800af30:	0800c150 	.word	0x0800c150
 800af34:	0800c0ad 	.word	0x0800c0ad
 800af38:	0800c0d1 	.word	0x0800c0d1

0800af3c <__sflush_r>:
 800af3c:	898a      	ldrh	r2, [r1, #12]
 800af3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af42:	4605      	mov	r5, r0
 800af44:	0710      	lsls	r0, r2, #28
 800af46:	460c      	mov	r4, r1
 800af48:	d458      	bmi.n	800affc <__sflush_r+0xc0>
 800af4a:	684b      	ldr	r3, [r1, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	dc05      	bgt.n	800af5c <__sflush_r+0x20>
 800af50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af52:	2b00      	cmp	r3, #0
 800af54:	dc02      	bgt.n	800af5c <__sflush_r+0x20>
 800af56:	2000      	movs	r0, #0
 800af58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af5e:	2e00      	cmp	r6, #0
 800af60:	d0f9      	beq.n	800af56 <__sflush_r+0x1a>
 800af62:	2300      	movs	r3, #0
 800af64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af68:	682f      	ldr	r7, [r5, #0]
 800af6a:	602b      	str	r3, [r5, #0]
 800af6c:	d032      	beq.n	800afd4 <__sflush_r+0x98>
 800af6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	075a      	lsls	r2, r3, #29
 800af74:	d505      	bpl.n	800af82 <__sflush_r+0x46>
 800af76:	6863      	ldr	r3, [r4, #4]
 800af78:	1ac0      	subs	r0, r0, r3
 800af7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af7c:	b10b      	cbz	r3, 800af82 <__sflush_r+0x46>
 800af7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af80:	1ac0      	subs	r0, r0, r3
 800af82:	2300      	movs	r3, #0
 800af84:	4602      	mov	r2, r0
 800af86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af88:	6a21      	ldr	r1, [r4, #32]
 800af8a:	4628      	mov	r0, r5
 800af8c:	47b0      	blx	r6
 800af8e:	1c43      	adds	r3, r0, #1
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	d106      	bne.n	800afa2 <__sflush_r+0x66>
 800af94:	6829      	ldr	r1, [r5, #0]
 800af96:	291d      	cmp	r1, #29
 800af98:	d82c      	bhi.n	800aff4 <__sflush_r+0xb8>
 800af9a:	4a2a      	ldr	r2, [pc, #168]	; (800b044 <__sflush_r+0x108>)
 800af9c:	40ca      	lsrs	r2, r1
 800af9e:	07d6      	lsls	r6, r2, #31
 800afa0:	d528      	bpl.n	800aff4 <__sflush_r+0xb8>
 800afa2:	2200      	movs	r2, #0
 800afa4:	6062      	str	r2, [r4, #4]
 800afa6:	04d9      	lsls	r1, r3, #19
 800afa8:	6922      	ldr	r2, [r4, #16]
 800afaa:	6022      	str	r2, [r4, #0]
 800afac:	d504      	bpl.n	800afb8 <__sflush_r+0x7c>
 800afae:	1c42      	adds	r2, r0, #1
 800afb0:	d101      	bne.n	800afb6 <__sflush_r+0x7a>
 800afb2:	682b      	ldr	r3, [r5, #0]
 800afb4:	b903      	cbnz	r3, 800afb8 <__sflush_r+0x7c>
 800afb6:	6560      	str	r0, [r4, #84]	; 0x54
 800afb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afba:	602f      	str	r7, [r5, #0]
 800afbc:	2900      	cmp	r1, #0
 800afbe:	d0ca      	beq.n	800af56 <__sflush_r+0x1a>
 800afc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afc4:	4299      	cmp	r1, r3
 800afc6:	d002      	beq.n	800afce <__sflush_r+0x92>
 800afc8:	4628      	mov	r0, r5
 800afca:	f000 fd8b 	bl	800bae4 <_free_r>
 800afce:	2000      	movs	r0, #0
 800afd0:	6360      	str	r0, [r4, #52]	; 0x34
 800afd2:	e7c1      	b.n	800af58 <__sflush_r+0x1c>
 800afd4:	6a21      	ldr	r1, [r4, #32]
 800afd6:	2301      	movs	r3, #1
 800afd8:	4628      	mov	r0, r5
 800afda:	47b0      	blx	r6
 800afdc:	1c41      	adds	r1, r0, #1
 800afde:	d1c7      	bne.n	800af70 <__sflush_r+0x34>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0c4      	beq.n	800af70 <__sflush_r+0x34>
 800afe6:	2b1d      	cmp	r3, #29
 800afe8:	d001      	beq.n	800afee <__sflush_r+0xb2>
 800afea:	2b16      	cmp	r3, #22
 800afec:	d101      	bne.n	800aff2 <__sflush_r+0xb6>
 800afee:	602f      	str	r7, [r5, #0]
 800aff0:	e7b1      	b.n	800af56 <__sflush_r+0x1a>
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff8:	81a3      	strh	r3, [r4, #12]
 800affa:	e7ad      	b.n	800af58 <__sflush_r+0x1c>
 800affc:	690f      	ldr	r7, [r1, #16]
 800affe:	2f00      	cmp	r7, #0
 800b000:	d0a9      	beq.n	800af56 <__sflush_r+0x1a>
 800b002:	0793      	lsls	r3, r2, #30
 800b004:	680e      	ldr	r6, [r1, #0]
 800b006:	bf08      	it	eq
 800b008:	694b      	ldreq	r3, [r1, #20]
 800b00a:	600f      	str	r7, [r1, #0]
 800b00c:	bf18      	it	ne
 800b00e:	2300      	movne	r3, #0
 800b010:	eba6 0807 	sub.w	r8, r6, r7
 800b014:	608b      	str	r3, [r1, #8]
 800b016:	f1b8 0f00 	cmp.w	r8, #0
 800b01a:	dd9c      	ble.n	800af56 <__sflush_r+0x1a>
 800b01c:	6a21      	ldr	r1, [r4, #32]
 800b01e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b020:	4643      	mov	r3, r8
 800b022:	463a      	mov	r2, r7
 800b024:	4628      	mov	r0, r5
 800b026:	47b0      	blx	r6
 800b028:	2800      	cmp	r0, #0
 800b02a:	dc06      	bgt.n	800b03a <__sflush_r+0xfe>
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b032:	81a3      	strh	r3, [r4, #12]
 800b034:	f04f 30ff 	mov.w	r0, #4294967295
 800b038:	e78e      	b.n	800af58 <__sflush_r+0x1c>
 800b03a:	4407      	add	r7, r0
 800b03c:	eba8 0800 	sub.w	r8, r8, r0
 800b040:	e7e9      	b.n	800b016 <__sflush_r+0xda>
 800b042:	bf00      	nop
 800b044:	20400001 	.word	0x20400001

0800b048 <_fflush_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	690b      	ldr	r3, [r1, #16]
 800b04c:	4605      	mov	r5, r0
 800b04e:	460c      	mov	r4, r1
 800b050:	b913      	cbnz	r3, 800b058 <_fflush_r+0x10>
 800b052:	2500      	movs	r5, #0
 800b054:	4628      	mov	r0, r5
 800b056:	bd38      	pop	{r3, r4, r5, pc}
 800b058:	b118      	cbz	r0, 800b062 <_fflush_r+0x1a>
 800b05a:	6983      	ldr	r3, [r0, #24]
 800b05c:	b90b      	cbnz	r3, 800b062 <_fflush_r+0x1a>
 800b05e:	f000 f887 	bl	800b170 <__sinit>
 800b062:	4b14      	ldr	r3, [pc, #80]	; (800b0b4 <_fflush_r+0x6c>)
 800b064:	429c      	cmp	r4, r3
 800b066:	d11b      	bne.n	800b0a0 <_fflush_r+0x58>
 800b068:	686c      	ldr	r4, [r5, #4]
 800b06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0ef      	beq.n	800b052 <_fflush_r+0xa>
 800b072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b074:	07d0      	lsls	r0, r2, #31
 800b076:	d404      	bmi.n	800b082 <_fflush_r+0x3a>
 800b078:	0599      	lsls	r1, r3, #22
 800b07a:	d402      	bmi.n	800b082 <_fflush_r+0x3a>
 800b07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b07e:	f000 f91a 	bl	800b2b6 <__retarget_lock_acquire_recursive>
 800b082:	4628      	mov	r0, r5
 800b084:	4621      	mov	r1, r4
 800b086:	f7ff ff59 	bl	800af3c <__sflush_r>
 800b08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b08c:	07da      	lsls	r2, r3, #31
 800b08e:	4605      	mov	r5, r0
 800b090:	d4e0      	bmi.n	800b054 <_fflush_r+0xc>
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	059b      	lsls	r3, r3, #22
 800b096:	d4dd      	bmi.n	800b054 <_fflush_r+0xc>
 800b098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b09a:	f000 f90d 	bl	800b2b8 <__retarget_lock_release_recursive>
 800b09e:	e7d9      	b.n	800b054 <_fflush_r+0xc>
 800b0a0:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <_fflush_r+0x70>)
 800b0a2:	429c      	cmp	r4, r3
 800b0a4:	d101      	bne.n	800b0aa <_fflush_r+0x62>
 800b0a6:	68ac      	ldr	r4, [r5, #8]
 800b0a8:	e7df      	b.n	800b06a <_fflush_r+0x22>
 800b0aa:	4b04      	ldr	r3, [pc, #16]	; (800b0bc <_fflush_r+0x74>)
 800b0ac:	429c      	cmp	r4, r3
 800b0ae:	bf08      	it	eq
 800b0b0:	68ec      	ldreq	r4, [r5, #12]
 800b0b2:	e7da      	b.n	800b06a <_fflush_r+0x22>
 800b0b4:	0800c184 	.word	0x0800c184
 800b0b8:	0800c1a4 	.word	0x0800c1a4
 800b0bc:	0800c164 	.word	0x0800c164

0800b0c0 <std>:
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	b510      	push	{r4, lr}
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0ce:	6083      	str	r3, [r0, #8]
 800b0d0:	8181      	strh	r1, [r0, #12]
 800b0d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b0d4:	81c2      	strh	r2, [r0, #14]
 800b0d6:	6183      	str	r3, [r0, #24]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	2208      	movs	r2, #8
 800b0dc:	305c      	adds	r0, #92	; 0x5c
 800b0de:	f7fe fac7 	bl	8009670 <memset>
 800b0e2:	4b05      	ldr	r3, [pc, #20]	; (800b0f8 <std+0x38>)
 800b0e4:	6263      	str	r3, [r4, #36]	; 0x24
 800b0e6:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <std+0x3c>)
 800b0e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0ea:	4b05      	ldr	r3, [pc, #20]	; (800b100 <std+0x40>)
 800b0ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0ee:	4b05      	ldr	r3, [pc, #20]	; (800b104 <std+0x44>)
 800b0f0:	6224      	str	r4, [r4, #32]
 800b0f2:	6323      	str	r3, [r4, #48]	; 0x30
 800b0f4:	bd10      	pop	{r4, pc}
 800b0f6:	bf00      	nop
 800b0f8:	0800bd4d 	.word	0x0800bd4d
 800b0fc:	0800bd6f 	.word	0x0800bd6f
 800b100:	0800bda7 	.word	0x0800bda7
 800b104:	0800bdcb 	.word	0x0800bdcb

0800b108 <_cleanup_r>:
 800b108:	4901      	ldr	r1, [pc, #4]	; (800b110 <_cleanup_r+0x8>)
 800b10a:	f000 b8af 	b.w	800b26c <_fwalk_reent>
 800b10e:	bf00      	nop
 800b110:	0800b049 	.word	0x0800b049

0800b114 <__sfmoreglue>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	2268      	movs	r2, #104	; 0x68
 800b118:	1e4d      	subs	r5, r1, #1
 800b11a:	4355      	muls	r5, r2
 800b11c:	460e      	mov	r6, r1
 800b11e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b122:	f000 fd4b 	bl	800bbbc <_malloc_r>
 800b126:	4604      	mov	r4, r0
 800b128:	b140      	cbz	r0, 800b13c <__sfmoreglue+0x28>
 800b12a:	2100      	movs	r1, #0
 800b12c:	e9c0 1600 	strd	r1, r6, [r0]
 800b130:	300c      	adds	r0, #12
 800b132:	60a0      	str	r0, [r4, #8]
 800b134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b138:	f7fe fa9a 	bl	8009670 <memset>
 800b13c:	4620      	mov	r0, r4
 800b13e:	bd70      	pop	{r4, r5, r6, pc}

0800b140 <__sfp_lock_acquire>:
 800b140:	4801      	ldr	r0, [pc, #4]	; (800b148 <__sfp_lock_acquire+0x8>)
 800b142:	f000 b8b8 	b.w	800b2b6 <__retarget_lock_acquire_recursive>
 800b146:	bf00      	nop
 800b148:	240003d1 	.word	0x240003d1

0800b14c <__sfp_lock_release>:
 800b14c:	4801      	ldr	r0, [pc, #4]	; (800b154 <__sfp_lock_release+0x8>)
 800b14e:	f000 b8b3 	b.w	800b2b8 <__retarget_lock_release_recursive>
 800b152:	bf00      	nop
 800b154:	240003d1 	.word	0x240003d1

0800b158 <__sinit_lock_acquire>:
 800b158:	4801      	ldr	r0, [pc, #4]	; (800b160 <__sinit_lock_acquire+0x8>)
 800b15a:	f000 b8ac 	b.w	800b2b6 <__retarget_lock_acquire_recursive>
 800b15e:	bf00      	nop
 800b160:	240003d2 	.word	0x240003d2

0800b164 <__sinit_lock_release>:
 800b164:	4801      	ldr	r0, [pc, #4]	; (800b16c <__sinit_lock_release+0x8>)
 800b166:	f000 b8a7 	b.w	800b2b8 <__retarget_lock_release_recursive>
 800b16a:	bf00      	nop
 800b16c:	240003d2 	.word	0x240003d2

0800b170 <__sinit>:
 800b170:	b510      	push	{r4, lr}
 800b172:	4604      	mov	r4, r0
 800b174:	f7ff fff0 	bl	800b158 <__sinit_lock_acquire>
 800b178:	69a3      	ldr	r3, [r4, #24]
 800b17a:	b11b      	cbz	r3, 800b184 <__sinit+0x14>
 800b17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b180:	f7ff bff0 	b.w	800b164 <__sinit_lock_release>
 800b184:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b188:	6523      	str	r3, [r4, #80]	; 0x50
 800b18a:	4b13      	ldr	r3, [pc, #76]	; (800b1d8 <__sinit+0x68>)
 800b18c:	4a13      	ldr	r2, [pc, #76]	; (800b1dc <__sinit+0x6c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	62a2      	str	r2, [r4, #40]	; 0x28
 800b192:	42a3      	cmp	r3, r4
 800b194:	bf04      	itt	eq
 800b196:	2301      	moveq	r3, #1
 800b198:	61a3      	streq	r3, [r4, #24]
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 f820 	bl	800b1e0 <__sfp>
 800b1a0:	6060      	str	r0, [r4, #4]
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 f81c 	bl	800b1e0 <__sfp>
 800b1a8:	60a0      	str	r0, [r4, #8]
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 f818 	bl	800b1e0 <__sfp>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	60e0      	str	r0, [r4, #12]
 800b1b4:	2104      	movs	r1, #4
 800b1b6:	6860      	ldr	r0, [r4, #4]
 800b1b8:	f7ff ff82 	bl	800b0c0 <std>
 800b1bc:	68a0      	ldr	r0, [r4, #8]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	2109      	movs	r1, #9
 800b1c2:	f7ff ff7d 	bl	800b0c0 <std>
 800b1c6:	68e0      	ldr	r0, [r4, #12]
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	2112      	movs	r1, #18
 800b1cc:	f7ff ff78 	bl	800b0c0 <std>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	61a3      	str	r3, [r4, #24]
 800b1d4:	e7d2      	b.n	800b17c <__sinit+0xc>
 800b1d6:	bf00      	nop
 800b1d8:	0800c088 	.word	0x0800c088
 800b1dc:	0800b109 	.word	0x0800b109

0800b1e0 <__sfp>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	f7ff ffac 	bl	800b140 <__sfp_lock_acquire>
 800b1e8:	4b1e      	ldr	r3, [pc, #120]	; (800b264 <__sfp+0x84>)
 800b1ea:	681e      	ldr	r6, [r3, #0]
 800b1ec:	69b3      	ldr	r3, [r6, #24]
 800b1ee:	b913      	cbnz	r3, 800b1f6 <__sfp+0x16>
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f7ff ffbd 	bl	800b170 <__sinit>
 800b1f6:	3648      	adds	r6, #72	; 0x48
 800b1f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	d503      	bpl.n	800b208 <__sfp+0x28>
 800b200:	6833      	ldr	r3, [r6, #0]
 800b202:	b30b      	cbz	r3, 800b248 <__sfp+0x68>
 800b204:	6836      	ldr	r6, [r6, #0]
 800b206:	e7f7      	b.n	800b1f8 <__sfp+0x18>
 800b208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b20c:	b9d5      	cbnz	r5, 800b244 <__sfp+0x64>
 800b20e:	4b16      	ldr	r3, [pc, #88]	; (800b268 <__sfp+0x88>)
 800b210:	60e3      	str	r3, [r4, #12]
 800b212:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b216:	6665      	str	r5, [r4, #100]	; 0x64
 800b218:	f000 f84c 	bl	800b2b4 <__retarget_lock_init_recursive>
 800b21c:	f7ff ff96 	bl	800b14c <__sfp_lock_release>
 800b220:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b224:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b228:	6025      	str	r5, [r4, #0]
 800b22a:	61a5      	str	r5, [r4, #24]
 800b22c:	2208      	movs	r2, #8
 800b22e:	4629      	mov	r1, r5
 800b230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b234:	f7fe fa1c 	bl	8009670 <memset>
 800b238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b23c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b240:	4620      	mov	r0, r4
 800b242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b244:	3468      	adds	r4, #104	; 0x68
 800b246:	e7d9      	b.n	800b1fc <__sfp+0x1c>
 800b248:	2104      	movs	r1, #4
 800b24a:	4638      	mov	r0, r7
 800b24c:	f7ff ff62 	bl	800b114 <__sfmoreglue>
 800b250:	4604      	mov	r4, r0
 800b252:	6030      	str	r0, [r6, #0]
 800b254:	2800      	cmp	r0, #0
 800b256:	d1d5      	bne.n	800b204 <__sfp+0x24>
 800b258:	f7ff ff78 	bl	800b14c <__sfp_lock_release>
 800b25c:	230c      	movs	r3, #12
 800b25e:	603b      	str	r3, [r7, #0]
 800b260:	e7ee      	b.n	800b240 <__sfp+0x60>
 800b262:	bf00      	nop
 800b264:	0800c088 	.word	0x0800c088
 800b268:	ffff0001 	.word	0xffff0001

0800b26c <_fwalk_reent>:
 800b26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b270:	4606      	mov	r6, r0
 800b272:	4688      	mov	r8, r1
 800b274:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b278:	2700      	movs	r7, #0
 800b27a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b27e:	f1b9 0901 	subs.w	r9, r9, #1
 800b282:	d505      	bpl.n	800b290 <_fwalk_reent+0x24>
 800b284:	6824      	ldr	r4, [r4, #0]
 800b286:	2c00      	cmp	r4, #0
 800b288:	d1f7      	bne.n	800b27a <_fwalk_reent+0xe>
 800b28a:	4638      	mov	r0, r7
 800b28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b290:	89ab      	ldrh	r3, [r5, #12]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d907      	bls.n	800b2a6 <_fwalk_reent+0x3a>
 800b296:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b29a:	3301      	adds	r3, #1
 800b29c:	d003      	beq.n	800b2a6 <_fwalk_reent+0x3a>
 800b29e:	4629      	mov	r1, r5
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	47c0      	blx	r8
 800b2a4:	4307      	orrs	r7, r0
 800b2a6:	3568      	adds	r5, #104	; 0x68
 800b2a8:	e7e9      	b.n	800b27e <_fwalk_reent+0x12>
	...

0800b2ac <_localeconv_r>:
 800b2ac:	4800      	ldr	r0, [pc, #0]	; (800b2b0 <_localeconv_r+0x4>)
 800b2ae:	4770      	bx	lr
 800b2b0:	24000164 	.word	0x24000164

0800b2b4 <__retarget_lock_init_recursive>:
 800b2b4:	4770      	bx	lr

0800b2b6 <__retarget_lock_acquire_recursive>:
 800b2b6:	4770      	bx	lr

0800b2b8 <__retarget_lock_release_recursive>:
 800b2b8:	4770      	bx	lr

0800b2ba <__swhatbuf_r>:
 800b2ba:	b570      	push	{r4, r5, r6, lr}
 800b2bc:	460e      	mov	r6, r1
 800b2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c2:	2900      	cmp	r1, #0
 800b2c4:	b096      	sub	sp, #88	; 0x58
 800b2c6:	4614      	mov	r4, r2
 800b2c8:	461d      	mov	r5, r3
 800b2ca:	da08      	bge.n	800b2de <__swhatbuf_r+0x24>
 800b2cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	602a      	str	r2, [r5, #0]
 800b2d4:	061a      	lsls	r2, r3, #24
 800b2d6:	d410      	bmi.n	800b2fa <__swhatbuf_r+0x40>
 800b2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2dc:	e00e      	b.n	800b2fc <__swhatbuf_r+0x42>
 800b2de:	466a      	mov	r2, sp
 800b2e0:	f000 fd9a 	bl	800be18 <_fstat_r>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	dbf1      	blt.n	800b2cc <__swhatbuf_r+0x12>
 800b2e8:	9a01      	ldr	r2, [sp, #4]
 800b2ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2f2:	425a      	negs	r2, r3
 800b2f4:	415a      	adcs	r2, r3
 800b2f6:	602a      	str	r2, [r5, #0]
 800b2f8:	e7ee      	b.n	800b2d8 <__swhatbuf_r+0x1e>
 800b2fa:	2340      	movs	r3, #64	; 0x40
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	b016      	add	sp, #88	; 0x58
 800b302:	bd70      	pop	{r4, r5, r6, pc}

0800b304 <__smakebuf_r>:
 800b304:	898b      	ldrh	r3, [r1, #12]
 800b306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b308:	079d      	lsls	r5, r3, #30
 800b30a:	4606      	mov	r6, r0
 800b30c:	460c      	mov	r4, r1
 800b30e:	d507      	bpl.n	800b320 <__smakebuf_r+0x1c>
 800b310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	6123      	str	r3, [r4, #16]
 800b318:	2301      	movs	r3, #1
 800b31a:	6163      	str	r3, [r4, #20]
 800b31c:	b002      	add	sp, #8
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	ab01      	add	r3, sp, #4
 800b322:	466a      	mov	r2, sp
 800b324:	f7ff ffc9 	bl	800b2ba <__swhatbuf_r>
 800b328:	9900      	ldr	r1, [sp, #0]
 800b32a:	4605      	mov	r5, r0
 800b32c:	4630      	mov	r0, r6
 800b32e:	f000 fc45 	bl	800bbbc <_malloc_r>
 800b332:	b948      	cbnz	r0, 800b348 <__smakebuf_r+0x44>
 800b334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b338:	059a      	lsls	r2, r3, #22
 800b33a:	d4ef      	bmi.n	800b31c <__smakebuf_r+0x18>
 800b33c:	f023 0303 	bic.w	r3, r3, #3
 800b340:	f043 0302 	orr.w	r3, r3, #2
 800b344:	81a3      	strh	r3, [r4, #12]
 800b346:	e7e3      	b.n	800b310 <__smakebuf_r+0xc>
 800b348:	4b0d      	ldr	r3, [pc, #52]	; (800b380 <__smakebuf_r+0x7c>)
 800b34a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	6020      	str	r0, [r4, #0]
 800b350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b354:	81a3      	strh	r3, [r4, #12]
 800b356:	9b00      	ldr	r3, [sp, #0]
 800b358:	6163      	str	r3, [r4, #20]
 800b35a:	9b01      	ldr	r3, [sp, #4]
 800b35c:	6120      	str	r0, [r4, #16]
 800b35e:	b15b      	cbz	r3, 800b378 <__smakebuf_r+0x74>
 800b360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b364:	4630      	mov	r0, r6
 800b366:	f000 fd69 	bl	800be3c <_isatty_r>
 800b36a:	b128      	cbz	r0, 800b378 <__smakebuf_r+0x74>
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	f023 0303 	bic.w	r3, r3, #3
 800b372:	f043 0301 	orr.w	r3, r3, #1
 800b376:	81a3      	strh	r3, [r4, #12]
 800b378:	89a0      	ldrh	r0, [r4, #12]
 800b37a:	4305      	orrs	r5, r0
 800b37c:	81a5      	strh	r5, [r4, #12]
 800b37e:	e7cd      	b.n	800b31c <__smakebuf_r+0x18>
 800b380:	0800b109 	.word	0x0800b109

0800b384 <malloc>:
 800b384:	4b02      	ldr	r3, [pc, #8]	; (800b390 <malloc+0xc>)
 800b386:	4601      	mov	r1, r0
 800b388:	6818      	ldr	r0, [r3, #0]
 800b38a:	f000 bc17 	b.w	800bbbc <_malloc_r>
 800b38e:	bf00      	nop
 800b390:	24000010 	.word	0x24000010

0800b394 <memcpy>:
 800b394:	440a      	add	r2, r1
 800b396:	4291      	cmp	r1, r2
 800b398:	f100 33ff 	add.w	r3, r0, #4294967295
 800b39c:	d100      	bne.n	800b3a0 <memcpy+0xc>
 800b39e:	4770      	bx	lr
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3aa:	4291      	cmp	r1, r2
 800b3ac:	d1f9      	bne.n	800b3a2 <memcpy+0xe>
 800b3ae:	bd10      	pop	{r4, pc}

0800b3b0 <_Balloc>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	b976      	cbnz	r6, 800b3d8 <_Balloc+0x28>
 800b3ba:	2010      	movs	r0, #16
 800b3bc:	f7ff ffe2 	bl	800b384 <malloc>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	6260      	str	r0, [r4, #36]	; 0x24
 800b3c4:	b920      	cbnz	r0, 800b3d0 <_Balloc+0x20>
 800b3c6:	4b18      	ldr	r3, [pc, #96]	; (800b428 <_Balloc+0x78>)
 800b3c8:	4818      	ldr	r0, [pc, #96]	; (800b42c <_Balloc+0x7c>)
 800b3ca:	2166      	movs	r1, #102	; 0x66
 800b3cc:	f7fe f8f6 	bl	80095bc <__assert_func>
 800b3d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3d4:	6006      	str	r6, [r0, #0]
 800b3d6:	60c6      	str	r6, [r0, #12]
 800b3d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b3da:	68f3      	ldr	r3, [r6, #12]
 800b3dc:	b183      	cbz	r3, 800b400 <_Balloc+0x50>
 800b3de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3e6:	b9b8      	cbnz	r0, 800b418 <_Balloc+0x68>
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b3ee:	1d72      	adds	r2, r6, #5
 800b3f0:	0092      	lsls	r2, r2, #2
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 fb60 	bl	800bab8 <_calloc_r>
 800b3f8:	b160      	cbz	r0, 800b414 <_Balloc+0x64>
 800b3fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3fe:	e00e      	b.n	800b41e <_Balloc+0x6e>
 800b400:	2221      	movs	r2, #33	; 0x21
 800b402:	2104      	movs	r1, #4
 800b404:	4620      	mov	r0, r4
 800b406:	f000 fb57 	bl	800bab8 <_calloc_r>
 800b40a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b40c:	60f0      	str	r0, [r6, #12]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e4      	bne.n	800b3de <_Balloc+0x2e>
 800b414:	2000      	movs	r0, #0
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	6802      	ldr	r2, [r0, #0]
 800b41a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b41e:	2300      	movs	r3, #0
 800b420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b424:	e7f7      	b.n	800b416 <_Balloc+0x66>
 800b426:	bf00      	nop
 800b428:	0800c0de 	.word	0x0800c0de
 800b42c:	0800c1c4 	.word	0x0800c1c4

0800b430 <_Bfree>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b434:	4605      	mov	r5, r0
 800b436:	460c      	mov	r4, r1
 800b438:	b976      	cbnz	r6, 800b458 <_Bfree+0x28>
 800b43a:	2010      	movs	r0, #16
 800b43c:	f7ff ffa2 	bl	800b384 <malloc>
 800b440:	4602      	mov	r2, r0
 800b442:	6268      	str	r0, [r5, #36]	; 0x24
 800b444:	b920      	cbnz	r0, 800b450 <_Bfree+0x20>
 800b446:	4b09      	ldr	r3, [pc, #36]	; (800b46c <_Bfree+0x3c>)
 800b448:	4809      	ldr	r0, [pc, #36]	; (800b470 <_Bfree+0x40>)
 800b44a:	218a      	movs	r1, #138	; 0x8a
 800b44c:	f7fe f8b6 	bl	80095bc <__assert_func>
 800b450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b454:	6006      	str	r6, [r0, #0]
 800b456:	60c6      	str	r6, [r0, #12]
 800b458:	b13c      	cbz	r4, 800b46a <_Bfree+0x3a>
 800b45a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b45c:	6862      	ldr	r2, [r4, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b464:	6021      	str	r1, [r4, #0]
 800b466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b46a:	bd70      	pop	{r4, r5, r6, pc}
 800b46c:	0800c0de 	.word	0x0800c0de
 800b470:	0800c1c4 	.word	0x0800c1c4

0800b474 <__multadd>:
 800b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b478:	690d      	ldr	r5, [r1, #16]
 800b47a:	4607      	mov	r7, r0
 800b47c:	460c      	mov	r4, r1
 800b47e:	461e      	mov	r6, r3
 800b480:	f101 0c14 	add.w	ip, r1, #20
 800b484:	2000      	movs	r0, #0
 800b486:	f8dc 3000 	ldr.w	r3, [ip]
 800b48a:	b299      	uxth	r1, r3
 800b48c:	fb02 6101 	mla	r1, r2, r1, r6
 800b490:	0c1e      	lsrs	r6, r3, #16
 800b492:	0c0b      	lsrs	r3, r1, #16
 800b494:	fb02 3306 	mla	r3, r2, r6, r3
 800b498:	b289      	uxth	r1, r1
 800b49a:	3001      	adds	r0, #1
 800b49c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4a0:	4285      	cmp	r5, r0
 800b4a2:	f84c 1b04 	str.w	r1, [ip], #4
 800b4a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4aa:	dcec      	bgt.n	800b486 <__multadd+0x12>
 800b4ac:	b30e      	cbz	r6, 800b4f2 <__multadd+0x7e>
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	42ab      	cmp	r3, r5
 800b4b2:	dc19      	bgt.n	800b4e8 <__multadd+0x74>
 800b4b4:	6861      	ldr	r1, [r4, #4]
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	3101      	adds	r1, #1
 800b4ba:	f7ff ff79 	bl	800b3b0 <_Balloc>
 800b4be:	4680      	mov	r8, r0
 800b4c0:	b928      	cbnz	r0, 800b4ce <__multadd+0x5a>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <__multadd+0x84>)
 800b4c6:	480d      	ldr	r0, [pc, #52]	; (800b4fc <__multadd+0x88>)
 800b4c8:	21b5      	movs	r1, #181	; 0xb5
 800b4ca:	f7fe f877 	bl	80095bc <__assert_func>
 800b4ce:	6922      	ldr	r2, [r4, #16]
 800b4d0:	3202      	adds	r2, #2
 800b4d2:	f104 010c 	add.w	r1, r4, #12
 800b4d6:	0092      	lsls	r2, r2, #2
 800b4d8:	300c      	adds	r0, #12
 800b4da:	f7ff ff5b 	bl	800b394 <memcpy>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	f7ff ffa5 	bl	800b430 <_Bfree>
 800b4e6:	4644      	mov	r4, r8
 800b4e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4ec:	3501      	adds	r5, #1
 800b4ee:	615e      	str	r6, [r3, #20]
 800b4f0:	6125      	str	r5, [r4, #16]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f8:	0800c150 	.word	0x0800c150
 800b4fc:	0800c1c4 	.word	0x0800c1c4

0800b500 <__hi0bits>:
 800b500:	0c03      	lsrs	r3, r0, #16
 800b502:	041b      	lsls	r3, r3, #16
 800b504:	b9d3      	cbnz	r3, 800b53c <__hi0bits+0x3c>
 800b506:	0400      	lsls	r0, r0, #16
 800b508:	2310      	movs	r3, #16
 800b50a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b50e:	bf04      	itt	eq
 800b510:	0200      	lsleq	r0, r0, #8
 800b512:	3308      	addeq	r3, #8
 800b514:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b518:	bf04      	itt	eq
 800b51a:	0100      	lsleq	r0, r0, #4
 800b51c:	3304      	addeq	r3, #4
 800b51e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b522:	bf04      	itt	eq
 800b524:	0080      	lsleq	r0, r0, #2
 800b526:	3302      	addeq	r3, #2
 800b528:	2800      	cmp	r0, #0
 800b52a:	db05      	blt.n	800b538 <__hi0bits+0x38>
 800b52c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b530:	f103 0301 	add.w	r3, r3, #1
 800b534:	bf08      	it	eq
 800b536:	2320      	moveq	r3, #32
 800b538:	4618      	mov	r0, r3
 800b53a:	4770      	bx	lr
 800b53c:	2300      	movs	r3, #0
 800b53e:	e7e4      	b.n	800b50a <__hi0bits+0xa>

0800b540 <__lo0bits>:
 800b540:	6803      	ldr	r3, [r0, #0]
 800b542:	f013 0207 	ands.w	r2, r3, #7
 800b546:	4601      	mov	r1, r0
 800b548:	d00b      	beq.n	800b562 <__lo0bits+0x22>
 800b54a:	07da      	lsls	r2, r3, #31
 800b54c:	d423      	bmi.n	800b596 <__lo0bits+0x56>
 800b54e:	0798      	lsls	r0, r3, #30
 800b550:	bf49      	itett	mi
 800b552:	085b      	lsrmi	r3, r3, #1
 800b554:	089b      	lsrpl	r3, r3, #2
 800b556:	2001      	movmi	r0, #1
 800b558:	600b      	strmi	r3, [r1, #0]
 800b55a:	bf5c      	itt	pl
 800b55c:	600b      	strpl	r3, [r1, #0]
 800b55e:	2002      	movpl	r0, #2
 800b560:	4770      	bx	lr
 800b562:	b298      	uxth	r0, r3
 800b564:	b9a8      	cbnz	r0, 800b592 <__lo0bits+0x52>
 800b566:	0c1b      	lsrs	r3, r3, #16
 800b568:	2010      	movs	r0, #16
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	b90a      	cbnz	r2, 800b572 <__lo0bits+0x32>
 800b56e:	3008      	adds	r0, #8
 800b570:	0a1b      	lsrs	r3, r3, #8
 800b572:	071a      	lsls	r2, r3, #28
 800b574:	bf04      	itt	eq
 800b576:	091b      	lsreq	r3, r3, #4
 800b578:	3004      	addeq	r0, #4
 800b57a:	079a      	lsls	r2, r3, #30
 800b57c:	bf04      	itt	eq
 800b57e:	089b      	lsreq	r3, r3, #2
 800b580:	3002      	addeq	r0, #2
 800b582:	07da      	lsls	r2, r3, #31
 800b584:	d403      	bmi.n	800b58e <__lo0bits+0x4e>
 800b586:	085b      	lsrs	r3, r3, #1
 800b588:	f100 0001 	add.w	r0, r0, #1
 800b58c:	d005      	beq.n	800b59a <__lo0bits+0x5a>
 800b58e:	600b      	str	r3, [r1, #0]
 800b590:	4770      	bx	lr
 800b592:	4610      	mov	r0, r2
 800b594:	e7e9      	b.n	800b56a <__lo0bits+0x2a>
 800b596:	2000      	movs	r0, #0
 800b598:	4770      	bx	lr
 800b59a:	2020      	movs	r0, #32
 800b59c:	4770      	bx	lr
	...

0800b5a0 <__i2b>:
 800b5a0:	b510      	push	{r4, lr}
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	f7ff ff03 	bl	800b3b0 <_Balloc>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	b928      	cbnz	r0, 800b5ba <__i2b+0x1a>
 800b5ae:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <__i2b+0x24>)
 800b5b0:	4805      	ldr	r0, [pc, #20]	; (800b5c8 <__i2b+0x28>)
 800b5b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b5b6:	f7fe f801 	bl	80095bc <__assert_func>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	6144      	str	r4, [r0, #20]
 800b5be:	6103      	str	r3, [r0, #16]
 800b5c0:	bd10      	pop	{r4, pc}
 800b5c2:	bf00      	nop
 800b5c4:	0800c150 	.word	0x0800c150
 800b5c8:	0800c1c4 	.word	0x0800c1c4

0800b5cc <__multiply>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	4691      	mov	r9, r2
 800b5d2:	690a      	ldr	r2, [r1, #16]
 800b5d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	bfb8      	it	lt
 800b5dc:	460b      	movlt	r3, r1
 800b5de:	460c      	mov	r4, r1
 800b5e0:	bfbc      	itt	lt
 800b5e2:	464c      	movlt	r4, r9
 800b5e4:	4699      	movlt	r9, r3
 800b5e6:	6927      	ldr	r7, [r4, #16]
 800b5e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5ec:	68a3      	ldr	r3, [r4, #8]
 800b5ee:	6861      	ldr	r1, [r4, #4]
 800b5f0:	eb07 060a 	add.w	r6, r7, sl
 800b5f4:	42b3      	cmp	r3, r6
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	bfb8      	it	lt
 800b5fa:	3101      	addlt	r1, #1
 800b5fc:	f7ff fed8 	bl	800b3b0 <_Balloc>
 800b600:	b930      	cbnz	r0, 800b610 <__multiply+0x44>
 800b602:	4602      	mov	r2, r0
 800b604:	4b44      	ldr	r3, [pc, #272]	; (800b718 <__multiply+0x14c>)
 800b606:	4845      	ldr	r0, [pc, #276]	; (800b71c <__multiply+0x150>)
 800b608:	f240 115d 	movw	r1, #349	; 0x15d
 800b60c:	f7fd ffd6 	bl	80095bc <__assert_func>
 800b610:	f100 0514 	add.w	r5, r0, #20
 800b614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b618:	462b      	mov	r3, r5
 800b61a:	2200      	movs	r2, #0
 800b61c:	4543      	cmp	r3, r8
 800b61e:	d321      	bcc.n	800b664 <__multiply+0x98>
 800b620:	f104 0314 	add.w	r3, r4, #20
 800b624:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b628:	f109 0314 	add.w	r3, r9, #20
 800b62c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b630:	9202      	str	r2, [sp, #8]
 800b632:	1b3a      	subs	r2, r7, r4
 800b634:	3a15      	subs	r2, #21
 800b636:	f022 0203 	bic.w	r2, r2, #3
 800b63a:	3204      	adds	r2, #4
 800b63c:	f104 0115 	add.w	r1, r4, #21
 800b640:	428f      	cmp	r7, r1
 800b642:	bf38      	it	cc
 800b644:	2204      	movcc	r2, #4
 800b646:	9201      	str	r2, [sp, #4]
 800b648:	9a02      	ldr	r2, [sp, #8]
 800b64a:	9303      	str	r3, [sp, #12]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d80c      	bhi.n	800b66a <__multiply+0x9e>
 800b650:	2e00      	cmp	r6, #0
 800b652:	dd03      	ble.n	800b65c <__multiply+0x90>
 800b654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d05a      	beq.n	800b712 <__multiply+0x146>
 800b65c:	6106      	str	r6, [r0, #16]
 800b65e:	b005      	add	sp, #20
 800b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b664:	f843 2b04 	str.w	r2, [r3], #4
 800b668:	e7d8      	b.n	800b61c <__multiply+0x50>
 800b66a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b66e:	f1ba 0f00 	cmp.w	sl, #0
 800b672:	d024      	beq.n	800b6be <__multiply+0xf2>
 800b674:	f104 0e14 	add.w	lr, r4, #20
 800b678:	46a9      	mov	r9, r5
 800b67a:	f04f 0c00 	mov.w	ip, #0
 800b67e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b682:	f8d9 1000 	ldr.w	r1, [r9]
 800b686:	fa1f fb82 	uxth.w	fp, r2
 800b68a:	b289      	uxth	r1, r1
 800b68c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b690:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b694:	f8d9 2000 	ldr.w	r2, [r9]
 800b698:	4461      	add	r1, ip
 800b69a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b69e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b6a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b6a6:	b289      	uxth	r1, r1
 800b6a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6ac:	4577      	cmp	r7, lr
 800b6ae:	f849 1b04 	str.w	r1, [r9], #4
 800b6b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6b6:	d8e2      	bhi.n	800b67e <__multiply+0xb2>
 800b6b8:	9a01      	ldr	r2, [sp, #4]
 800b6ba:	f845 c002 	str.w	ip, [r5, r2]
 800b6be:	9a03      	ldr	r2, [sp, #12]
 800b6c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ca:	d020      	beq.n	800b70e <__multiply+0x142>
 800b6cc:	6829      	ldr	r1, [r5, #0]
 800b6ce:	f104 0c14 	add.w	ip, r4, #20
 800b6d2:	46ae      	mov	lr, r5
 800b6d4:	f04f 0a00 	mov.w	sl, #0
 800b6d8:	f8bc b000 	ldrh.w	fp, [ip]
 800b6dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b6e0:	fb09 220b 	mla	r2, r9, fp, r2
 800b6e4:	4492      	add	sl, r2
 800b6e6:	b289      	uxth	r1, r1
 800b6e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b6ec:	f84e 1b04 	str.w	r1, [lr], #4
 800b6f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6f4:	f8be 1000 	ldrh.w	r1, [lr]
 800b6f8:	0c12      	lsrs	r2, r2, #16
 800b6fa:	fb09 1102 	mla	r1, r9, r2, r1
 800b6fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b702:	4567      	cmp	r7, ip
 800b704:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b708:	d8e6      	bhi.n	800b6d8 <__multiply+0x10c>
 800b70a:	9a01      	ldr	r2, [sp, #4]
 800b70c:	50a9      	str	r1, [r5, r2]
 800b70e:	3504      	adds	r5, #4
 800b710:	e79a      	b.n	800b648 <__multiply+0x7c>
 800b712:	3e01      	subs	r6, #1
 800b714:	e79c      	b.n	800b650 <__multiply+0x84>
 800b716:	bf00      	nop
 800b718:	0800c150 	.word	0x0800c150
 800b71c:	0800c1c4 	.word	0x0800c1c4

0800b720 <__pow5mult>:
 800b720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b724:	4615      	mov	r5, r2
 800b726:	f012 0203 	ands.w	r2, r2, #3
 800b72a:	4606      	mov	r6, r0
 800b72c:	460f      	mov	r7, r1
 800b72e:	d007      	beq.n	800b740 <__pow5mult+0x20>
 800b730:	4c25      	ldr	r4, [pc, #148]	; (800b7c8 <__pow5mult+0xa8>)
 800b732:	3a01      	subs	r2, #1
 800b734:	2300      	movs	r3, #0
 800b736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b73a:	f7ff fe9b 	bl	800b474 <__multadd>
 800b73e:	4607      	mov	r7, r0
 800b740:	10ad      	asrs	r5, r5, #2
 800b742:	d03d      	beq.n	800b7c0 <__pow5mult+0xa0>
 800b744:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b746:	b97c      	cbnz	r4, 800b768 <__pow5mult+0x48>
 800b748:	2010      	movs	r0, #16
 800b74a:	f7ff fe1b 	bl	800b384 <malloc>
 800b74e:	4602      	mov	r2, r0
 800b750:	6270      	str	r0, [r6, #36]	; 0x24
 800b752:	b928      	cbnz	r0, 800b760 <__pow5mult+0x40>
 800b754:	4b1d      	ldr	r3, [pc, #116]	; (800b7cc <__pow5mult+0xac>)
 800b756:	481e      	ldr	r0, [pc, #120]	; (800b7d0 <__pow5mult+0xb0>)
 800b758:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b75c:	f7fd ff2e 	bl	80095bc <__assert_func>
 800b760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b764:	6004      	str	r4, [r0, #0]
 800b766:	60c4      	str	r4, [r0, #12]
 800b768:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b76c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b770:	b94c      	cbnz	r4, 800b786 <__pow5mult+0x66>
 800b772:	f240 2171 	movw	r1, #625	; 0x271
 800b776:	4630      	mov	r0, r6
 800b778:	f7ff ff12 	bl	800b5a0 <__i2b>
 800b77c:	2300      	movs	r3, #0
 800b77e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b782:	4604      	mov	r4, r0
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	f04f 0900 	mov.w	r9, #0
 800b78a:	07eb      	lsls	r3, r5, #31
 800b78c:	d50a      	bpl.n	800b7a4 <__pow5mult+0x84>
 800b78e:	4639      	mov	r1, r7
 800b790:	4622      	mov	r2, r4
 800b792:	4630      	mov	r0, r6
 800b794:	f7ff ff1a 	bl	800b5cc <__multiply>
 800b798:	4639      	mov	r1, r7
 800b79a:	4680      	mov	r8, r0
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7ff fe47 	bl	800b430 <_Bfree>
 800b7a2:	4647      	mov	r7, r8
 800b7a4:	106d      	asrs	r5, r5, #1
 800b7a6:	d00b      	beq.n	800b7c0 <__pow5mult+0xa0>
 800b7a8:	6820      	ldr	r0, [r4, #0]
 800b7aa:	b938      	cbnz	r0, 800b7bc <__pow5mult+0x9c>
 800b7ac:	4622      	mov	r2, r4
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f7ff ff0b 	bl	800b5cc <__multiply>
 800b7b6:	6020      	str	r0, [r4, #0]
 800b7b8:	f8c0 9000 	str.w	r9, [r0]
 800b7bc:	4604      	mov	r4, r0
 800b7be:	e7e4      	b.n	800b78a <__pow5mult+0x6a>
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c6:	bf00      	nop
 800b7c8:	0800c310 	.word	0x0800c310
 800b7cc:	0800c0de 	.word	0x0800c0de
 800b7d0:	0800c1c4 	.word	0x0800c1c4

0800b7d4 <__lshift>:
 800b7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d8:	460c      	mov	r4, r1
 800b7da:	6849      	ldr	r1, [r1, #4]
 800b7dc:	6923      	ldr	r3, [r4, #16]
 800b7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7e2:	68a3      	ldr	r3, [r4, #8]
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	4691      	mov	r9, r2
 800b7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7ec:	f108 0601 	add.w	r6, r8, #1
 800b7f0:	42b3      	cmp	r3, r6
 800b7f2:	db0b      	blt.n	800b80c <__lshift+0x38>
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	f7ff fddb 	bl	800b3b0 <_Balloc>
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	b948      	cbnz	r0, 800b812 <__lshift+0x3e>
 800b7fe:	4602      	mov	r2, r0
 800b800:	4b2a      	ldr	r3, [pc, #168]	; (800b8ac <__lshift+0xd8>)
 800b802:	482b      	ldr	r0, [pc, #172]	; (800b8b0 <__lshift+0xdc>)
 800b804:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b808:	f7fd fed8 	bl	80095bc <__assert_func>
 800b80c:	3101      	adds	r1, #1
 800b80e:	005b      	lsls	r3, r3, #1
 800b810:	e7ee      	b.n	800b7f0 <__lshift+0x1c>
 800b812:	2300      	movs	r3, #0
 800b814:	f100 0114 	add.w	r1, r0, #20
 800b818:	f100 0210 	add.w	r2, r0, #16
 800b81c:	4618      	mov	r0, r3
 800b81e:	4553      	cmp	r3, sl
 800b820:	db37      	blt.n	800b892 <__lshift+0xbe>
 800b822:	6920      	ldr	r0, [r4, #16]
 800b824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b828:	f104 0314 	add.w	r3, r4, #20
 800b82c:	f019 091f 	ands.w	r9, r9, #31
 800b830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b834:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b838:	d02f      	beq.n	800b89a <__lshift+0xc6>
 800b83a:	f1c9 0e20 	rsb	lr, r9, #32
 800b83e:	468a      	mov	sl, r1
 800b840:	f04f 0c00 	mov.w	ip, #0
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	fa02 f209 	lsl.w	r2, r2, r9
 800b84a:	ea42 020c 	orr.w	r2, r2, ip
 800b84e:	f84a 2b04 	str.w	r2, [sl], #4
 800b852:	f853 2b04 	ldr.w	r2, [r3], #4
 800b856:	4298      	cmp	r0, r3
 800b858:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b85c:	d8f2      	bhi.n	800b844 <__lshift+0x70>
 800b85e:	1b03      	subs	r3, r0, r4
 800b860:	3b15      	subs	r3, #21
 800b862:	f023 0303 	bic.w	r3, r3, #3
 800b866:	3304      	adds	r3, #4
 800b868:	f104 0215 	add.w	r2, r4, #21
 800b86c:	4290      	cmp	r0, r2
 800b86e:	bf38      	it	cc
 800b870:	2304      	movcc	r3, #4
 800b872:	f841 c003 	str.w	ip, [r1, r3]
 800b876:	f1bc 0f00 	cmp.w	ip, #0
 800b87a:	d001      	beq.n	800b880 <__lshift+0xac>
 800b87c:	f108 0602 	add.w	r6, r8, #2
 800b880:	3e01      	subs	r6, #1
 800b882:	4638      	mov	r0, r7
 800b884:	612e      	str	r6, [r5, #16]
 800b886:	4621      	mov	r1, r4
 800b888:	f7ff fdd2 	bl	800b430 <_Bfree>
 800b88c:	4628      	mov	r0, r5
 800b88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b892:	f842 0f04 	str.w	r0, [r2, #4]!
 800b896:	3301      	adds	r3, #1
 800b898:	e7c1      	b.n	800b81e <__lshift+0x4a>
 800b89a:	3904      	subs	r1, #4
 800b89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8a4:	4298      	cmp	r0, r3
 800b8a6:	d8f9      	bhi.n	800b89c <__lshift+0xc8>
 800b8a8:	e7ea      	b.n	800b880 <__lshift+0xac>
 800b8aa:	bf00      	nop
 800b8ac:	0800c150 	.word	0x0800c150
 800b8b0:	0800c1c4 	.word	0x0800c1c4

0800b8b4 <__mcmp>:
 800b8b4:	b530      	push	{r4, r5, lr}
 800b8b6:	6902      	ldr	r2, [r0, #16]
 800b8b8:	690c      	ldr	r4, [r1, #16]
 800b8ba:	1b12      	subs	r2, r2, r4
 800b8bc:	d10e      	bne.n	800b8dc <__mcmp+0x28>
 800b8be:	f100 0314 	add.w	r3, r0, #20
 800b8c2:	3114      	adds	r1, #20
 800b8c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b8cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b8d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b8d4:	42a5      	cmp	r5, r4
 800b8d6:	d003      	beq.n	800b8e0 <__mcmp+0x2c>
 800b8d8:	d305      	bcc.n	800b8e6 <__mcmp+0x32>
 800b8da:	2201      	movs	r2, #1
 800b8dc:	4610      	mov	r0, r2
 800b8de:	bd30      	pop	{r4, r5, pc}
 800b8e0:	4283      	cmp	r3, r0
 800b8e2:	d3f3      	bcc.n	800b8cc <__mcmp+0x18>
 800b8e4:	e7fa      	b.n	800b8dc <__mcmp+0x28>
 800b8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ea:	e7f7      	b.n	800b8dc <__mcmp+0x28>

0800b8ec <__mdiff>:
 800b8ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	4690      	mov	r8, r2
 800b8fa:	f7ff ffdb 	bl	800b8b4 <__mcmp>
 800b8fe:	1e05      	subs	r5, r0, #0
 800b900:	d110      	bne.n	800b924 <__mdiff+0x38>
 800b902:	4629      	mov	r1, r5
 800b904:	4630      	mov	r0, r6
 800b906:	f7ff fd53 	bl	800b3b0 <_Balloc>
 800b90a:	b930      	cbnz	r0, 800b91a <__mdiff+0x2e>
 800b90c:	4b3a      	ldr	r3, [pc, #232]	; (800b9f8 <__mdiff+0x10c>)
 800b90e:	4602      	mov	r2, r0
 800b910:	f240 2132 	movw	r1, #562	; 0x232
 800b914:	4839      	ldr	r0, [pc, #228]	; (800b9fc <__mdiff+0x110>)
 800b916:	f7fd fe51 	bl	80095bc <__assert_func>
 800b91a:	2301      	movs	r3, #1
 800b91c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b924:	bfa4      	itt	ge
 800b926:	4643      	movge	r3, r8
 800b928:	46a0      	movge	r8, r4
 800b92a:	4630      	mov	r0, r6
 800b92c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b930:	bfa6      	itte	ge
 800b932:	461c      	movge	r4, r3
 800b934:	2500      	movge	r5, #0
 800b936:	2501      	movlt	r5, #1
 800b938:	f7ff fd3a 	bl	800b3b0 <_Balloc>
 800b93c:	b920      	cbnz	r0, 800b948 <__mdiff+0x5c>
 800b93e:	4b2e      	ldr	r3, [pc, #184]	; (800b9f8 <__mdiff+0x10c>)
 800b940:	4602      	mov	r2, r0
 800b942:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b946:	e7e5      	b.n	800b914 <__mdiff+0x28>
 800b948:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b94c:	6926      	ldr	r6, [r4, #16]
 800b94e:	60c5      	str	r5, [r0, #12]
 800b950:	f104 0914 	add.w	r9, r4, #20
 800b954:	f108 0514 	add.w	r5, r8, #20
 800b958:	f100 0e14 	add.w	lr, r0, #20
 800b95c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b960:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b964:	f108 0210 	add.w	r2, r8, #16
 800b968:	46f2      	mov	sl, lr
 800b96a:	2100      	movs	r1, #0
 800b96c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b970:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b974:	fa1f f883 	uxth.w	r8, r3
 800b978:	fa11 f18b 	uxtah	r1, r1, fp
 800b97c:	0c1b      	lsrs	r3, r3, #16
 800b97e:	eba1 0808 	sub.w	r8, r1, r8
 800b982:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b986:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b98a:	fa1f f888 	uxth.w	r8, r8
 800b98e:	1419      	asrs	r1, r3, #16
 800b990:	454e      	cmp	r6, r9
 800b992:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b996:	f84a 3b04 	str.w	r3, [sl], #4
 800b99a:	d8e7      	bhi.n	800b96c <__mdiff+0x80>
 800b99c:	1b33      	subs	r3, r6, r4
 800b99e:	3b15      	subs	r3, #21
 800b9a0:	f023 0303 	bic.w	r3, r3, #3
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	3415      	adds	r4, #21
 800b9a8:	42a6      	cmp	r6, r4
 800b9aa:	bf38      	it	cc
 800b9ac:	2304      	movcc	r3, #4
 800b9ae:	441d      	add	r5, r3
 800b9b0:	4473      	add	r3, lr
 800b9b2:	469e      	mov	lr, r3
 800b9b4:	462e      	mov	r6, r5
 800b9b6:	4566      	cmp	r6, ip
 800b9b8:	d30e      	bcc.n	800b9d8 <__mdiff+0xec>
 800b9ba:	f10c 0203 	add.w	r2, ip, #3
 800b9be:	1b52      	subs	r2, r2, r5
 800b9c0:	f022 0203 	bic.w	r2, r2, #3
 800b9c4:	3d03      	subs	r5, #3
 800b9c6:	45ac      	cmp	ip, r5
 800b9c8:	bf38      	it	cc
 800b9ca:	2200      	movcc	r2, #0
 800b9cc:	441a      	add	r2, r3
 800b9ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b9d2:	b17b      	cbz	r3, 800b9f4 <__mdiff+0x108>
 800b9d4:	6107      	str	r7, [r0, #16]
 800b9d6:	e7a3      	b.n	800b920 <__mdiff+0x34>
 800b9d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b9dc:	fa11 f288 	uxtah	r2, r1, r8
 800b9e0:	1414      	asrs	r4, r2, #16
 800b9e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b9e6:	b292      	uxth	r2, r2
 800b9e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9ec:	f84e 2b04 	str.w	r2, [lr], #4
 800b9f0:	1421      	asrs	r1, r4, #16
 800b9f2:	e7e0      	b.n	800b9b6 <__mdiff+0xca>
 800b9f4:	3f01      	subs	r7, #1
 800b9f6:	e7ea      	b.n	800b9ce <__mdiff+0xe2>
 800b9f8:	0800c150 	.word	0x0800c150
 800b9fc:	0800c1c4 	.word	0x0800c1c4

0800ba00 <__d2b>:
 800ba00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba04:	4689      	mov	r9, r1
 800ba06:	2101      	movs	r1, #1
 800ba08:	ec57 6b10 	vmov	r6, r7, d0
 800ba0c:	4690      	mov	r8, r2
 800ba0e:	f7ff fccf 	bl	800b3b0 <_Balloc>
 800ba12:	4604      	mov	r4, r0
 800ba14:	b930      	cbnz	r0, 800ba24 <__d2b+0x24>
 800ba16:	4602      	mov	r2, r0
 800ba18:	4b25      	ldr	r3, [pc, #148]	; (800bab0 <__d2b+0xb0>)
 800ba1a:	4826      	ldr	r0, [pc, #152]	; (800bab4 <__d2b+0xb4>)
 800ba1c:	f240 310a 	movw	r1, #778	; 0x30a
 800ba20:	f7fd fdcc 	bl	80095bc <__assert_func>
 800ba24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba2c:	bb35      	cbnz	r5, 800ba7c <__d2b+0x7c>
 800ba2e:	2e00      	cmp	r6, #0
 800ba30:	9301      	str	r3, [sp, #4]
 800ba32:	d028      	beq.n	800ba86 <__d2b+0x86>
 800ba34:	4668      	mov	r0, sp
 800ba36:	9600      	str	r6, [sp, #0]
 800ba38:	f7ff fd82 	bl	800b540 <__lo0bits>
 800ba3c:	9900      	ldr	r1, [sp, #0]
 800ba3e:	b300      	cbz	r0, 800ba82 <__d2b+0x82>
 800ba40:	9a01      	ldr	r2, [sp, #4]
 800ba42:	f1c0 0320 	rsb	r3, r0, #32
 800ba46:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4a:	430b      	orrs	r3, r1
 800ba4c:	40c2      	lsrs	r2, r0
 800ba4e:	6163      	str	r3, [r4, #20]
 800ba50:	9201      	str	r2, [sp, #4]
 800ba52:	9b01      	ldr	r3, [sp, #4]
 800ba54:	61a3      	str	r3, [r4, #24]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bf14      	ite	ne
 800ba5a:	2202      	movne	r2, #2
 800ba5c:	2201      	moveq	r2, #1
 800ba5e:	6122      	str	r2, [r4, #16]
 800ba60:	b1d5      	cbz	r5, 800ba98 <__d2b+0x98>
 800ba62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba66:	4405      	add	r5, r0
 800ba68:	f8c9 5000 	str.w	r5, [r9]
 800ba6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba70:	f8c8 0000 	str.w	r0, [r8]
 800ba74:	4620      	mov	r0, r4
 800ba76:	b003      	add	sp, #12
 800ba78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba80:	e7d5      	b.n	800ba2e <__d2b+0x2e>
 800ba82:	6161      	str	r1, [r4, #20]
 800ba84:	e7e5      	b.n	800ba52 <__d2b+0x52>
 800ba86:	a801      	add	r0, sp, #4
 800ba88:	f7ff fd5a 	bl	800b540 <__lo0bits>
 800ba8c:	9b01      	ldr	r3, [sp, #4]
 800ba8e:	6163      	str	r3, [r4, #20]
 800ba90:	2201      	movs	r2, #1
 800ba92:	6122      	str	r2, [r4, #16]
 800ba94:	3020      	adds	r0, #32
 800ba96:	e7e3      	b.n	800ba60 <__d2b+0x60>
 800ba98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800baa0:	f8c9 0000 	str.w	r0, [r9]
 800baa4:	6918      	ldr	r0, [r3, #16]
 800baa6:	f7ff fd2b 	bl	800b500 <__hi0bits>
 800baaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800baae:	e7df      	b.n	800ba70 <__d2b+0x70>
 800bab0:	0800c150 	.word	0x0800c150
 800bab4:	0800c1c4 	.word	0x0800c1c4

0800bab8 <_calloc_r>:
 800bab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baba:	fba1 2402 	umull	r2, r4, r1, r2
 800babe:	b94c      	cbnz	r4, 800bad4 <_calloc_r+0x1c>
 800bac0:	4611      	mov	r1, r2
 800bac2:	9201      	str	r2, [sp, #4]
 800bac4:	f000 f87a 	bl	800bbbc <_malloc_r>
 800bac8:	9a01      	ldr	r2, [sp, #4]
 800baca:	4605      	mov	r5, r0
 800bacc:	b930      	cbnz	r0, 800badc <_calloc_r+0x24>
 800bace:	4628      	mov	r0, r5
 800bad0:	b003      	add	sp, #12
 800bad2:	bd30      	pop	{r4, r5, pc}
 800bad4:	220c      	movs	r2, #12
 800bad6:	6002      	str	r2, [r0, #0]
 800bad8:	2500      	movs	r5, #0
 800bada:	e7f8      	b.n	800bace <_calloc_r+0x16>
 800badc:	4621      	mov	r1, r4
 800bade:	f7fd fdc7 	bl	8009670 <memset>
 800bae2:	e7f4      	b.n	800bace <_calloc_r+0x16>

0800bae4 <_free_r>:
 800bae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bae6:	2900      	cmp	r1, #0
 800bae8:	d044      	beq.n	800bb74 <_free_r+0x90>
 800baea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baee:	9001      	str	r0, [sp, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f1a1 0404 	sub.w	r4, r1, #4
 800baf6:	bfb8      	it	lt
 800baf8:	18e4      	addlt	r4, r4, r3
 800bafa:	f000 f9d3 	bl	800bea4 <__malloc_lock>
 800bafe:	4a1e      	ldr	r2, [pc, #120]	; (800bb78 <_free_r+0x94>)
 800bb00:	9801      	ldr	r0, [sp, #4]
 800bb02:	6813      	ldr	r3, [r2, #0]
 800bb04:	b933      	cbnz	r3, 800bb14 <_free_r+0x30>
 800bb06:	6063      	str	r3, [r4, #4]
 800bb08:	6014      	str	r4, [r2, #0]
 800bb0a:	b003      	add	sp, #12
 800bb0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb10:	f000 b9ce 	b.w	800beb0 <__malloc_unlock>
 800bb14:	42a3      	cmp	r3, r4
 800bb16:	d908      	bls.n	800bb2a <_free_r+0x46>
 800bb18:	6825      	ldr	r5, [r4, #0]
 800bb1a:	1961      	adds	r1, r4, r5
 800bb1c:	428b      	cmp	r3, r1
 800bb1e:	bf01      	itttt	eq
 800bb20:	6819      	ldreq	r1, [r3, #0]
 800bb22:	685b      	ldreq	r3, [r3, #4]
 800bb24:	1949      	addeq	r1, r1, r5
 800bb26:	6021      	streq	r1, [r4, #0]
 800bb28:	e7ed      	b.n	800bb06 <_free_r+0x22>
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	b10b      	cbz	r3, 800bb34 <_free_r+0x50>
 800bb30:	42a3      	cmp	r3, r4
 800bb32:	d9fa      	bls.n	800bb2a <_free_r+0x46>
 800bb34:	6811      	ldr	r1, [r2, #0]
 800bb36:	1855      	adds	r5, r2, r1
 800bb38:	42a5      	cmp	r5, r4
 800bb3a:	d10b      	bne.n	800bb54 <_free_r+0x70>
 800bb3c:	6824      	ldr	r4, [r4, #0]
 800bb3e:	4421      	add	r1, r4
 800bb40:	1854      	adds	r4, r2, r1
 800bb42:	42a3      	cmp	r3, r4
 800bb44:	6011      	str	r1, [r2, #0]
 800bb46:	d1e0      	bne.n	800bb0a <_free_r+0x26>
 800bb48:	681c      	ldr	r4, [r3, #0]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	6053      	str	r3, [r2, #4]
 800bb4e:	4421      	add	r1, r4
 800bb50:	6011      	str	r1, [r2, #0]
 800bb52:	e7da      	b.n	800bb0a <_free_r+0x26>
 800bb54:	d902      	bls.n	800bb5c <_free_r+0x78>
 800bb56:	230c      	movs	r3, #12
 800bb58:	6003      	str	r3, [r0, #0]
 800bb5a:	e7d6      	b.n	800bb0a <_free_r+0x26>
 800bb5c:	6825      	ldr	r5, [r4, #0]
 800bb5e:	1961      	adds	r1, r4, r5
 800bb60:	428b      	cmp	r3, r1
 800bb62:	bf04      	itt	eq
 800bb64:	6819      	ldreq	r1, [r3, #0]
 800bb66:	685b      	ldreq	r3, [r3, #4]
 800bb68:	6063      	str	r3, [r4, #4]
 800bb6a:	bf04      	itt	eq
 800bb6c:	1949      	addeq	r1, r1, r5
 800bb6e:	6021      	streq	r1, [r4, #0]
 800bb70:	6054      	str	r4, [r2, #4]
 800bb72:	e7ca      	b.n	800bb0a <_free_r+0x26>
 800bb74:	b003      	add	sp, #12
 800bb76:	bd30      	pop	{r4, r5, pc}
 800bb78:	240003d4 	.word	0x240003d4

0800bb7c <sbrk_aligned>:
 800bb7c:	b570      	push	{r4, r5, r6, lr}
 800bb7e:	4e0e      	ldr	r6, [pc, #56]	; (800bbb8 <sbrk_aligned+0x3c>)
 800bb80:	460c      	mov	r4, r1
 800bb82:	6831      	ldr	r1, [r6, #0]
 800bb84:	4605      	mov	r5, r0
 800bb86:	b911      	cbnz	r1, 800bb8e <sbrk_aligned+0x12>
 800bb88:	f000 f88c 	bl	800bca4 <_sbrk_r>
 800bb8c:	6030      	str	r0, [r6, #0]
 800bb8e:	4621      	mov	r1, r4
 800bb90:	4628      	mov	r0, r5
 800bb92:	f000 f887 	bl	800bca4 <_sbrk_r>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	d00a      	beq.n	800bbb0 <sbrk_aligned+0x34>
 800bb9a:	1cc4      	adds	r4, r0, #3
 800bb9c:	f024 0403 	bic.w	r4, r4, #3
 800bba0:	42a0      	cmp	r0, r4
 800bba2:	d007      	beq.n	800bbb4 <sbrk_aligned+0x38>
 800bba4:	1a21      	subs	r1, r4, r0
 800bba6:	4628      	mov	r0, r5
 800bba8:	f000 f87c 	bl	800bca4 <_sbrk_r>
 800bbac:	3001      	adds	r0, #1
 800bbae:	d101      	bne.n	800bbb4 <sbrk_aligned+0x38>
 800bbb0:	f04f 34ff 	mov.w	r4, #4294967295
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}
 800bbb8:	240003d8 	.word	0x240003d8

0800bbbc <_malloc_r>:
 800bbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc0:	1ccd      	adds	r5, r1, #3
 800bbc2:	f025 0503 	bic.w	r5, r5, #3
 800bbc6:	3508      	adds	r5, #8
 800bbc8:	2d0c      	cmp	r5, #12
 800bbca:	bf38      	it	cc
 800bbcc:	250c      	movcc	r5, #12
 800bbce:	2d00      	cmp	r5, #0
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	db01      	blt.n	800bbd8 <_malloc_r+0x1c>
 800bbd4:	42a9      	cmp	r1, r5
 800bbd6:	d905      	bls.n	800bbe4 <_malloc_r+0x28>
 800bbd8:	230c      	movs	r3, #12
 800bbda:	603b      	str	r3, [r7, #0]
 800bbdc:	2600      	movs	r6, #0
 800bbde:	4630      	mov	r0, r6
 800bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe4:	4e2e      	ldr	r6, [pc, #184]	; (800bca0 <_malloc_r+0xe4>)
 800bbe6:	f000 f95d 	bl	800bea4 <__malloc_lock>
 800bbea:	6833      	ldr	r3, [r6, #0]
 800bbec:	461c      	mov	r4, r3
 800bbee:	bb34      	cbnz	r4, 800bc3e <_malloc_r+0x82>
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4638      	mov	r0, r7
 800bbf4:	f7ff ffc2 	bl	800bb7c <sbrk_aligned>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	d14d      	bne.n	800bc9a <_malloc_r+0xde>
 800bbfe:	6834      	ldr	r4, [r6, #0]
 800bc00:	4626      	mov	r6, r4
 800bc02:	2e00      	cmp	r6, #0
 800bc04:	d140      	bne.n	800bc88 <_malloc_r+0xcc>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	4631      	mov	r1, r6
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	eb04 0803 	add.w	r8, r4, r3
 800bc10:	f000 f848 	bl	800bca4 <_sbrk_r>
 800bc14:	4580      	cmp	r8, r0
 800bc16:	d13a      	bne.n	800bc8e <_malloc_r+0xd2>
 800bc18:	6821      	ldr	r1, [r4, #0]
 800bc1a:	3503      	adds	r5, #3
 800bc1c:	1a6d      	subs	r5, r5, r1
 800bc1e:	f025 0503 	bic.w	r5, r5, #3
 800bc22:	3508      	adds	r5, #8
 800bc24:	2d0c      	cmp	r5, #12
 800bc26:	bf38      	it	cc
 800bc28:	250c      	movcc	r5, #12
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	f7ff ffa5 	bl	800bb7c <sbrk_aligned>
 800bc32:	3001      	adds	r0, #1
 800bc34:	d02b      	beq.n	800bc8e <_malloc_r+0xd2>
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	442b      	add	r3, r5
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	e00e      	b.n	800bc5c <_malloc_r+0xa0>
 800bc3e:	6822      	ldr	r2, [r4, #0]
 800bc40:	1b52      	subs	r2, r2, r5
 800bc42:	d41e      	bmi.n	800bc82 <_malloc_r+0xc6>
 800bc44:	2a0b      	cmp	r2, #11
 800bc46:	d916      	bls.n	800bc76 <_malloc_r+0xba>
 800bc48:	1961      	adds	r1, r4, r5
 800bc4a:	42a3      	cmp	r3, r4
 800bc4c:	6025      	str	r5, [r4, #0]
 800bc4e:	bf18      	it	ne
 800bc50:	6059      	strne	r1, [r3, #4]
 800bc52:	6863      	ldr	r3, [r4, #4]
 800bc54:	bf08      	it	eq
 800bc56:	6031      	streq	r1, [r6, #0]
 800bc58:	5162      	str	r2, [r4, r5]
 800bc5a:	604b      	str	r3, [r1, #4]
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f104 060b 	add.w	r6, r4, #11
 800bc62:	f000 f925 	bl	800beb0 <__malloc_unlock>
 800bc66:	f026 0607 	bic.w	r6, r6, #7
 800bc6a:	1d23      	adds	r3, r4, #4
 800bc6c:	1af2      	subs	r2, r6, r3
 800bc6e:	d0b6      	beq.n	800bbde <_malloc_r+0x22>
 800bc70:	1b9b      	subs	r3, r3, r6
 800bc72:	50a3      	str	r3, [r4, r2]
 800bc74:	e7b3      	b.n	800bbde <_malloc_r+0x22>
 800bc76:	6862      	ldr	r2, [r4, #4]
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	bf0c      	ite	eq
 800bc7c:	6032      	streq	r2, [r6, #0]
 800bc7e:	605a      	strne	r2, [r3, #4]
 800bc80:	e7ec      	b.n	800bc5c <_malloc_r+0xa0>
 800bc82:	4623      	mov	r3, r4
 800bc84:	6864      	ldr	r4, [r4, #4]
 800bc86:	e7b2      	b.n	800bbee <_malloc_r+0x32>
 800bc88:	4634      	mov	r4, r6
 800bc8a:	6876      	ldr	r6, [r6, #4]
 800bc8c:	e7b9      	b.n	800bc02 <_malloc_r+0x46>
 800bc8e:	230c      	movs	r3, #12
 800bc90:	603b      	str	r3, [r7, #0]
 800bc92:	4638      	mov	r0, r7
 800bc94:	f000 f90c 	bl	800beb0 <__malloc_unlock>
 800bc98:	e7a1      	b.n	800bbde <_malloc_r+0x22>
 800bc9a:	6025      	str	r5, [r4, #0]
 800bc9c:	e7de      	b.n	800bc5c <_malloc_r+0xa0>
 800bc9e:	bf00      	nop
 800bca0:	240003d4 	.word	0x240003d4

0800bca4 <_sbrk_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d06      	ldr	r5, [pc, #24]	; (800bcc0 <_sbrk_r+0x1c>)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4604      	mov	r4, r0
 800bcac:	4608      	mov	r0, r1
 800bcae:	602b      	str	r3, [r5, #0]
 800bcb0:	f7f5 fe7e 	bl	80019b0 <_sbrk>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_sbrk_r+0x1a>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_sbrk_r+0x1a>
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	240003dc 	.word	0x240003dc

0800bcc4 <_raise_r>:
 800bcc4:	291f      	cmp	r1, #31
 800bcc6:	b538      	push	{r3, r4, r5, lr}
 800bcc8:	4604      	mov	r4, r0
 800bcca:	460d      	mov	r5, r1
 800bccc:	d904      	bls.n	800bcd8 <_raise_r+0x14>
 800bcce:	2316      	movs	r3, #22
 800bcd0:	6003      	str	r3, [r0, #0]
 800bcd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd6:	bd38      	pop	{r3, r4, r5, pc}
 800bcd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcda:	b112      	cbz	r2, 800bce2 <_raise_r+0x1e>
 800bcdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bce0:	b94b      	cbnz	r3, 800bcf6 <_raise_r+0x32>
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 f830 	bl	800bd48 <_getpid_r>
 800bce8:	462a      	mov	r2, r5
 800bcea:	4601      	mov	r1, r0
 800bcec:	4620      	mov	r0, r4
 800bcee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcf2:	f000 b817 	b.w	800bd24 <_kill_r>
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d00a      	beq.n	800bd10 <_raise_r+0x4c>
 800bcfa:	1c59      	adds	r1, r3, #1
 800bcfc:	d103      	bne.n	800bd06 <_raise_r+0x42>
 800bcfe:	2316      	movs	r3, #22
 800bd00:	6003      	str	r3, [r0, #0]
 800bd02:	2001      	movs	r0, #1
 800bd04:	e7e7      	b.n	800bcd6 <_raise_r+0x12>
 800bd06:	2400      	movs	r4, #0
 800bd08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	4798      	blx	r3
 800bd10:	2000      	movs	r0, #0
 800bd12:	e7e0      	b.n	800bcd6 <_raise_r+0x12>

0800bd14 <raise>:
 800bd14:	4b02      	ldr	r3, [pc, #8]	; (800bd20 <raise+0xc>)
 800bd16:	4601      	mov	r1, r0
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	f7ff bfd3 	b.w	800bcc4 <_raise_r>
 800bd1e:	bf00      	nop
 800bd20:	24000010 	.word	0x24000010

0800bd24 <_kill_r>:
 800bd24:	b538      	push	{r3, r4, r5, lr}
 800bd26:	4d07      	ldr	r5, [pc, #28]	; (800bd44 <_kill_r+0x20>)
 800bd28:	2300      	movs	r3, #0
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	4611      	mov	r1, r2
 800bd30:	602b      	str	r3, [r5, #0]
 800bd32:	f7f5 fdb5 	bl	80018a0 <_kill>
 800bd36:	1c43      	adds	r3, r0, #1
 800bd38:	d102      	bne.n	800bd40 <_kill_r+0x1c>
 800bd3a:	682b      	ldr	r3, [r5, #0]
 800bd3c:	b103      	cbz	r3, 800bd40 <_kill_r+0x1c>
 800bd3e:	6023      	str	r3, [r4, #0]
 800bd40:	bd38      	pop	{r3, r4, r5, pc}
 800bd42:	bf00      	nop
 800bd44:	240003dc 	.word	0x240003dc

0800bd48 <_getpid_r>:
 800bd48:	f7f5 bda2 	b.w	8001890 <_getpid>

0800bd4c <__sread>:
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	460c      	mov	r4, r1
 800bd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd54:	f000 f8b2 	bl	800bebc <_read_r>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	bfab      	itete	ge
 800bd5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd5e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd60:	181b      	addge	r3, r3, r0
 800bd62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd66:	bfac      	ite	ge
 800bd68:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd6a:	81a3      	strhlt	r3, [r4, #12]
 800bd6c:	bd10      	pop	{r4, pc}

0800bd6e <__swrite>:
 800bd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd72:	461f      	mov	r7, r3
 800bd74:	898b      	ldrh	r3, [r1, #12]
 800bd76:	05db      	lsls	r3, r3, #23
 800bd78:	4605      	mov	r5, r0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	4616      	mov	r6, r2
 800bd7e:	d505      	bpl.n	800bd8c <__swrite+0x1e>
 800bd80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd84:	2302      	movs	r3, #2
 800bd86:	2200      	movs	r2, #0
 800bd88:	f000 f868 	bl	800be5c <_lseek_r>
 800bd8c:	89a3      	ldrh	r3, [r4, #12]
 800bd8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	4632      	mov	r2, r6
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bda2:	f000 b817 	b.w	800bdd4 <_write_r>

0800bda6 <__sseek>:
 800bda6:	b510      	push	{r4, lr}
 800bda8:	460c      	mov	r4, r1
 800bdaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdae:	f000 f855 	bl	800be5c <_lseek_r>
 800bdb2:	1c43      	adds	r3, r0, #1
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	bf15      	itete	ne
 800bdb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdc2:	81a3      	strheq	r3, [r4, #12]
 800bdc4:	bf18      	it	ne
 800bdc6:	81a3      	strhne	r3, [r4, #12]
 800bdc8:	bd10      	pop	{r4, pc}

0800bdca <__sclose>:
 800bdca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdce:	f000 b813 	b.w	800bdf8 <_close_r>
	...

0800bdd4 <_write_r>:
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	4d07      	ldr	r5, [pc, #28]	; (800bdf4 <_write_r+0x20>)
 800bdd8:	4604      	mov	r4, r0
 800bdda:	4608      	mov	r0, r1
 800bddc:	4611      	mov	r1, r2
 800bdde:	2200      	movs	r2, #0
 800bde0:	602a      	str	r2, [r5, #0]
 800bde2:	461a      	mov	r2, r3
 800bde4:	f7f5 fd93 	bl	800190e <_write>
 800bde8:	1c43      	adds	r3, r0, #1
 800bdea:	d102      	bne.n	800bdf2 <_write_r+0x1e>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	b103      	cbz	r3, 800bdf2 <_write_r+0x1e>
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	bd38      	pop	{r3, r4, r5, pc}
 800bdf4:	240003dc 	.word	0x240003dc

0800bdf8 <_close_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	4d06      	ldr	r5, [pc, #24]	; (800be14 <_close_r+0x1c>)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4604      	mov	r4, r0
 800be00:	4608      	mov	r0, r1
 800be02:	602b      	str	r3, [r5, #0]
 800be04:	f7f5 fd9f 	bl	8001946 <_close>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	d102      	bne.n	800be12 <_close_r+0x1a>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	b103      	cbz	r3, 800be12 <_close_r+0x1a>
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	240003dc 	.word	0x240003dc

0800be18 <_fstat_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4d07      	ldr	r5, [pc, #28]	; (800be38 <_fstat_r+0x20>)
 800be1c:	2300      	movs	r3, #0
 800be1e:	4604      	mov	r4, r0
 800be20:	4608      	mov	r0, r1
 800be22:	4611      	mov	r1, r2
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	f7f5 fd9a 	bl	800195e <_fstat>
 800be2a:	1c43      	adds	r3, r0, #1
 800be2c:	d102      	bne.n	800be34 <_fstat_r+0x1c>
 800be2e:	682b      	ldr	r3, [r5, #0]
 800be30:	b103      	cbz	r3, 800be34 <_fstat_r+0x1c>
 800be32:	6023      	str	r3, [r4, #0]
 800be34:	bd38      	pop	{r3, r4, r5, pc}
 800be36:	bf00      	nop
 800be38:	240003dc 	.word	0x240003dc

0800be3c <_isatty_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4d06      	ldr	r5, [pc, #24]	; (800be58 <_isatty_r+0x1c>)
 800be40:	2300      	movs	r3, #0
 800be42:	4604      	mov	r4, r0
 800be44:	4608      	mov	r0, r1
 800be46:	602b      	str	r3, [r5, #0]
 800be48:	f7f5 fd99 	bl	800197e <_isatty>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d102      	bne.n	800be56 <_isatty_r+0x1a>
 800be50:	682b      	ldr	r3, [r5, #0]
 800be52:	b103      	cbz	r3, 800be56 <_isatty_r+0x1a>
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	240003dc 	.word	0x240003dc

0800be5c <_lseek_r>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	4d07      	ldr	r5, [pc, #28]	; (800be7c <_lseek_r+0x20>)
 800be60:	4604      	mov	r4, r0
 800be62:	4608      	mov	r0, r1
 800be64:	4611      	mov	r1, r2
 800be66:	2200      	movs	r2, #0
 800be68:	602a      	str	r2, [r5, #0]
 800be6a:	461a      	mov	r2, r3
 800be6c:	f7f5 fd92 	bl	8001994 <_lseek>
 800be70:	1c43      	adds	r3, r0, #1
 800be72:	d102      	bne.n	800be7a <_lseek_r+0x1e>
 800be74:	682b      	ldr	r3, [r5, #0]
 800be76:	b103      	cbz	r3, 800be7a <_lseek_r+0x1e>
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	bd38      	pop	{r3, r4, r5, pc}
 800be7c:	240003dc 	.word	0x240003dc

0800be80 <__ascii_mbtowc>:
 800be80:	b082      	sub	sp, #8
 800be82:	b901      	cbnz	r1, 800be86 <__ascii_mbtowc+0x6>
 800be84:	a901      	add	r1, sp, #4
 800be86:	b142      	cbz	r2, 800be9a <__ascii_mbtowc+0x1a>
 800be88:	b14b      	cbz	r3, 800be9e <__ascii_mbtowc+0x1e>
 800be8a:	7813      	ldrb	r3, [r2, #0]
 800be8c:	600b      	str	r3, [r1, #0]
 800be8e:	7812      	ldrb	r2, [r2, #0]
 800be90:	1e10      	subs	r0, r2, #0
 800be92:	bf18      	it	ne
 800be94:	2001      	movne	r0, #1
 800be96:	b002      	add	sp, #8
 800be98:	4770      	bx	lr
 800be9a:	4610      	mov	r0, r2
 800be9c:	e7fb      	b.n	800be96 <__ascii_mbtowc+0x16>
 800be9e:	f06f 0001 	mvn.w	r0, #1
 800bea2:	e7f8      	b.n	800be96 <__ascii_mbtowc+0x16>

0800bea4 <__malloc_lock>:
 800bea4:	4801      	ldr	r0, [pc, #4]	; (800beac <__malloc_lock+0x8>)
 800bea6:	f7ff ba06 	b.w	800b2b6 <__retarget_lock_acquire_recursive>
 800beaa:	bf00      	nop
 800beac:	240003d0 	.word	0x240003d0

0800beb0 <__malloc_unlock>:
 800beb0:	4801      	ldr	r0, [pc, #4]	; (800beb8 <__malloc_unlock+0x8>)
 800beb2:	f7ff ba01 	b.w	800b2b8 <__retarget_lock_release_recursive>
 800beb6:	bf00      	nop
 800beb8:	240003d0 	.word	0x240003d0

0800bebc <_read_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4d07      	ldr	r5, [pc, #28]	; (800bedc <_read_r+0x20>)
 800bec0:	4604      	mov	r4, r0
 800bec2:	4608      	mov	r0, r1
 800bec4:	4611      	mov	r1, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	602a      	str	r2, [r5, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	f7f5 fd02 	bl	80018d4 <_read>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_read_r+0x1e>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b103      	cbz	r3, 800beda <_read_r+0x1e>
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	240003dc 	.word	0x240003dc

0800bee0 <__ascii_wctomb>:
 800bee0:	b149      	cbz	r1, 800bef6 <__ascii_wctomb+0x16>
 800bee2:	2aff      	cmp	r2, #255	; 0xff
 800bee4:	bf85      	ittet	hi
 800bee6:	238a      	movhi	r3, #138	; 0x8a
 800bee8:	6003      	strhi	r3, [r0, #0]
 800beea:	700a      	strbls	r2, [r1, #0]
 800beec:	f04f 30ff 	movhi.w	r0, #4294967295
 800bef0:	bf98      	it	ls
 800bef2:	2001      	movls	r0, #1
 800bef4:	4770      	bx	lr
 800bef6:	4608      	mov	r0, r1
 800bef8:	4770      	bx	lr
	...

0800befc <_init>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	bf00      	nop
 800bf00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf02:	bc08      	pop	{r3}
 800bf04:	469e      	mov	lr, r3
 800bf06:	4770      	bx	lr

0800bf08 <_fini>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	bf00      	nop
 800bf0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0e:	bc08      	pop	{r3}
 800bf10:	469e      	mov	lr, r3
 800bf12:	4770      	bx	lr

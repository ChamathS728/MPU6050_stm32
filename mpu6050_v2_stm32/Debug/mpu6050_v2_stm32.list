
mpu6050_v2_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007414  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080076c4  080076c4  000176c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  080078d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000150  24000074  0800794c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001c4  0800794c  000201c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001425f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000249f  00000000  00000000  00034301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e70  00000000  00000000  000367a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d88  00000000  00000000  00037610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030764  00000000  00000000  00038398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013336  00000000  00000000  00068afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136274  00000000  00000000  0007be32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b20a6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000451c  00000000  00000000  001b20f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080076ac 	.word	0x080076ac

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	080076ac 	.word	0x080076ac

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f001 f9f7 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f83b 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 f943 	bl	800092c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006a6:	f000 f8ed 	bl	8000884 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006aa:	f000 f937 	bl	800091c <MX_USB_OTG_HS_USB_Init>
  MX_I2C4_Init();
 80006ae:	f000 f8a9 	bl	8000804 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_wakeup(&mpu6050);
 80006b2:	4817      	ldr	r0, [pc, #92]	; (8000710 <main+0x7c>)
 80006b4:	f000 fa59 	bl	8000b6a <MPU6050_wakeup>
  uint8_t dlpf = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	71fb      	strb	r3, [r7, #7]
  uint8_t smplfrq = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	71bb      	strb	r3, [r7, #6]
  MPU6050_init(&mpu6050, &hi2c4,&dlpf, &smplfrq, GYRO_FSR_250, ACCEL_FSR_2g);
 80006c0:	1dbb      	adds	r3, r7, #6
 80006c2:	1dfa      	adds	r2, r7, #7
 80006c4:	2100      	movs	r1, #0
 80006c6:	9101      	str	r1, [sp, #4]
 80006c8:	2100      	movs	r1, #0
 80006ca:	9100      	str	r1, [sp, #0]
 80006cc:	4911      	ldr	r1, [pc, #68]	; (8000714 <main+0x80>)
 80006ce:	4810      	ldr	r0, [pc, #64]	; (8000710 <main+0x7c>)
 80006d0:	f000 fb90 	bl	8000df4 <MPU6050_init>
  MPU6050_set_pwr_mgmt(&mpu6050, 0, 0, 0, 0, 1);
 80006d4:	2301      	movs	r3, #1
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	2300      	movs	r3, #0
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2300      	movs	r3, #0
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	480b      	ldr	r0, [pc, #44]	; (8000710 <main+0x7c>)
 80006e4:	f000 fa52 	bl	8000b8c <MPU6050_set_pwr_mgmt>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_read_gyro_reg(&mpu6050);
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <main+0x7c>)
 80006ea:	f000 fbf1 	bl	8000ed0 <MPU6050_read_gyro_reg>
	HAL_Delay(100); // Delays in between just for timing??
 80006ee:	2064      	movs	r0, #100	; 0x64
 80006f0:	f001 fa5e 	bl	8001bb0 <HAL_Delay>
	MPU6050_read_accel_reg(&mpu6050);
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <main+0x7c>)
 80006f6:	f000 fd27 	bl	8001148 <MPU6050_read_accel_reg>
	HAL_Delay(100); // Delays in between just for timing??
 80006fa:	2064      	movs	r0, #100	; 0x64
 80006fc:	f001 fa58 	bl	8001bb0 <HAL_Delay>
	MPU6050_read_temp_reg(&mpu6050);
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <main+0x7c>)
 8000702:	f000 fead 	bl	8001460 <MPU6050_read_temp_reg>
	HAL_Delay(100); // Delays in between just for timing??
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	f001 fa52 	bl	8001bb0 <HAL_Delay>
	MPU6050_read_gyro_reg(&mpu6050);
 800070c:	e7ec      	b.n	80006e8 <main+0x54>
 800070e:	bf00      	nop
 8000710:	2400016c 	.word	0x2400016c
 8000714:	24000090 	.word	0x24000090

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	; 0x70
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	224c      	movs	r2, #76	; 0x4c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 fff6 	bl	8006718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 fff0 	bl	8006718 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <SystemClock_Config+0xe4>)
 800073a:	f04f 32ff 	mov.w	r2, #4294967295
 800073e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000742:	2004      	movs	r0, #4
 8000744:	f002 fb02 	bl	8002d4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <SystemClock_Config+0xe8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a2b      	ldr	r2, [pc, #172]	; (8000800 <SystemClock_Config+0xe8>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemClock_Config+0xe8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000764:	bf00      	nop
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <SystemClock_Config+0xe8>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000772:	d1f8      	bne.n	8000766 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000774:	2321      	movs	r3, #33	; 0x21
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000778:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800077e:	2301      	movs	r3, #1
 8000780:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800078e:	2318      	movs	r3, #24
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800079e:	230c      	movs	r3, #12
 80007a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fb26 	bl	8002e00 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ba:	f000 f9d1 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	233f      	movs	r3, #63	; 0x3f
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 ff10 	bl	8003608 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007ee:	f000 f9b7 	bl	8000b60 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3770      	adds	r7, #112	; 0x70
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58024400 	.word	0x58024400
 8000800:	58024800 	.word	0x58024800

08000804 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C4_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C4_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10B0DCFB;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C4_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_I2C4_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C4_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_I2C4_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C4_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_I2C4_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C4_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C4_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C4_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800083e:	480e      	ldr	r0, [pc, #56]	; (8000878 <MX_I2C4_Init+0x74>)
 8000840:	f001 fc88 	bl	8002154 <HAL_I2C_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800084a:	f000 f989 	bl	8000b60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <MX_I2C4_Init+0x74>)
 8000852:	f002 f9e3 	bl	8002c1c <HAL_I2CEx_ConfigAnalogFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 f980 	bl	8000b60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_I2C4_Init+0x74>)
 8000864:	f002 fa25 	bl	8002cb2 <HAL_I2CEx_ConfigDigitalFilter>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 f977 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	24000090 	.word	0x24000090
 800087c:	58001c00 	.word	0x58001c00
 8000880:	10b0dcfb 	.word	0x10b0dcfb

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_USART3_UART_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <MX_USART3_UART_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_USART3_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008ce:	f004 fd55 	bl	800537c <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 f942 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008e0:	f005 fdf6 	bl	80064d0 <HAL_UARTEx_SetTxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f000 f939 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008f2:	f005 fe2b 	bl	800654c <HAL_UARTEx_SetRxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008fc:	f000 f930 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000902:	f005 fdac 	bl	800645e <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800090c:	f000 f928 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	240000dc 	.word	0x240000dc
 8000918:	40004800 	.word	0x40004800

0800091c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b80      	ldr	r3, [pc, #512]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000944:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000948:	4a7e      	ldr	r2, [pc, #504]	; (8000b44 <MX_GPIO_Init+0x218>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000952:	4b7c      	ldr	r3, [pc, #496]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000954:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	623b      	str	r3, [r7, #32]
 800095e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000960:	4b78      	ldr	r3, [pc, #480]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000962:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000966:	4a77      	ldr	r2, [pc, #476]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000968:	f043 0320 	orr.w	r3, r3, #32
 800096c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000970:	4b74      	ldr	r3, [pc, #464]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000972:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000976:	f003 0320 	and.w	r3, r3, #32
 800097a:	61fb      	str	r3, [r7, #28]
 800097c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	4b71      	ldr	r3, [pc, #452]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000980:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000984:	4a6f      	ldr	r2, [pc, #444]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800098e:	4b6d      	ldr	r3, [pc, #436]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000990:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b69      	ldr	r3, [pc, #420]	; (8000b44 <MX_GPIO_Init+0x218>)
 800099e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a2:	4a68      	ldr	r2, [pc, #416]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ac:	4b65      	ldr	r3, [pc, #404]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c0:	4a60      	ldr	r2, [pc, #384]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ca:	4b5e      	ldr	r3, [pc, #376]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d0:	f003 0308 	and.w	r3, r3, #8
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d8:	4b5a      	ldr	r3, [pc, #360]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009de:	4a59      	ldr	r2, [pc, #356]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009e8:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009fc:	4a51      	ldr	r2, [pc, #324]	; (8000b44 <MX_GPIO_Init+0x218>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a06:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000a08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a14:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000a16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a1a:	4a4a      	ldr	r2, [pc, #296]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000a1c:	f043 0310 	orr.w	r3, r3, #16
 8000a20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a24:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <MX_GPIO_Init+0x218>)
 8000a26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a38:	4843      	ldr	r0, [pc, #268]	; (8000b48 <MX_GPIO_Init+0x21c>)
 8000a3a:	f001 fb71 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a44:	4841      	ldr	r0, [pc, #260]	; (8000b4c <MX_GPIO_Init+0x220>)
 8000a46:	f001 fb6b 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4840      	ldr	r0, [pc, #256]	; (8000b50 <MX_GPIO_Init+0x224>)
 8000a50:	f001 fb66 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	483a      	ldr	r0, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x228>)
 8000a6a:	f001 f9a9 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4830      	ldr	r0, [pc, #192]	; (8000b48 <MX_GPIO_Init+0x21c>)
 8000a88:	f001 f99a 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a8c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4829      	ldr	r0, [pc, #164]	; (8000b4c <MX_GPIO_Init+0x220>)
 8000aa6:	f001 f98b 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4826      	ldr	r0, [pc, #152]	; (8000b58 <MX_GPIO_Init+0x22c>)
 8000ac0:	f001 f97e 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4820      	ldr	r0, [pc, #128]	; (8000b5c <MX_GPIO_Init+0x230>)
 8000ada:	f001 f971 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000af0:	230a      	movs	r3, #10
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_GPIO_Init+0x230>)
 8000afc:	f001 f960 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000b00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4810      	ldr	r0, [pc, #64]	; (8000b5c <MX_GPIO_Init+0x230>)
 8000b1a:	f001 f951 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <MX_GPIO_Init+0x224>)
 8000b36:	f001 f943 	bl	8001dc0 <HAL_GPIO_Init>

}
 8000b3a:	bf00      	nop
 8000b3c:	3738      	adds	r7, #56	; 0x38
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	58024400 	.word	0x58024400
 8000b48:	58021400 	.word	0x58021400
 8000b4c:	58020400 	.word	0x58020400
 8000b50:	58021000 	.word	0x58021000
 8000b54:	58020800 	.word	0x58020800
 8000b58:	58021800 	.word	0x58021800
 8000b5c:	58020000 	.word	0x58020000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>

08000b6a <MPU6050_wakeup>:

#include "mpu6050.h"


/* Initialisation Functions */
HAL_StatusTypeDef MPU6050_wakeup(MPU6050* mpu6050) {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  // Write 0's to the PWR_MGMT_1 register to wake it up
  // It sets clock source as internal 8MHz clock, and it is woken up
  // uint8_t zero = 0;
  // HAL_StatusTypeDef res = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &zero, sizeof(zero), TIMEOUT_DEFAULT);

  HAL_StatusTypeDef res = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	216b      	movs	r1, #107	; 0x6b
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fccd 	bl	8001516 <MPU6050_writeRegister>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	73fb      	strb	r3, [r7, #15]
  return res;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <MPU6050_set_pwr_mgmt>:

HAL_StatusTypeDef MPU6050_set_pwr_mgmt(MPU6050* mpu6050, int dev_rst, int sleep, int cycle, int temp_dis, int clksel) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	603b      	str	r3, [r7, #0]
  // Assumption is that the first 4 inputs are 1 bit (0 or 1), and clksel is 3 bit (0 to 7)
  assert(dev_rst >= 0 && dev_rst <= 1);
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db02      	blt.n	8000ba6 <MPU6050_set_pwr_mgmt+0x1a>
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	dd05      	ble.n	8000bb2 <MPU6050_set_pwr_mgmt+0x26>
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <MPU6050_set_pwr_mgmt+0xd4>)
 8000ba8:	4a2e      	ldr	r2, [pc, #184]	; (8000c64 <MPU6050_set_pwr_mgmt+0xd8>)
 8000baa:	211b      	movs	r1, #27
 8000bac:	482e      	ldr	r0, [pc, #184]	; (8000c68 <MPU6050_set_pwr_mgmt+0xdc>)
 8000bae:	f005 fd59 	bl	8006664 <__assert_func>
  assert(sleep >= 0 && sleep <= 1);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db02      	blt.n	8000bbe <MPU6050_set_pwr_mgmt+0x32>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	dd05      	ble.n	8000bca <MPU6050_set_pwr_mgmt+0x3e>
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <MPU6050_set_pwr_mgmt+0xe0>)
 8000bc0:	4a28      	ldr	r2, [pc, #160]	; (8000c64 <MPU6050_set_pwr_mgmt+0xd8>)
 8000bc2:	211c      	movs	r1, #28
 8000bc4:	4828      	ldr	r0, [pc, #160]	; (8000c68 <MPU6050_set_pwr_mgmt+0xdc>)
 8000bc6:	f005 fd4d 	bl	8006664 <__assert_func>
  assert(cycle >= 0 && cycle <= 1);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db02      	blt.n	8000bd6 <MPU6050_set_pwr_mgmt+0x4a>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	dd05      	ble.n	8000be2 <MPU6050_set_pwr_mgmt+0x56>
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MPU6050_set_pwr_mgmt+0xe4>)
 8000bd8:	4a22      	ldr	r2, [pc, #136]	; (8000c64 <MPU6050_set_pwr_mgmt+0xd8>)
 8000bda:	211d      	movs	r1, #29
 8000bdc:	4822      	ldr	r0, [pc, #136]	; (8000c68 <MPU6050_set_pwr_mgmt+0xdc>)
 8000bde:	f005 fd41 	bl	8006664 <__assert_func>
  assert(temp_dis >= 0 && temp_dis <= 1);
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db02      	blt.n	8000bee <MPU6050_set_pwr_mgmt+0x62>
 8000be8:	6a3b      	ldr	r3, [r7, #32]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	dd05      	ble.n	8000bfa <MPU6050_set_pwr_mgmt+0x6e>
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MPU6050_set_pwr_mgmt+0xe8>)
 8000bf0:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <MPU6050_set_pwr_mgmt+0xd8>)
 8000bf2:	211e      	movs	r1, #30
 8000bf4:	481c      	ldr	r0, [pc, #112]	; (8000c68 <MPU6050_set_pwr_mgmt+0xdc>)
 8000bf6:	f005 fd35 	bl	8006664 <__assert_func>
  assert(clksel >= 0 && clksel <= 7);
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db02      	blt.n	8000c06 <MPU6050_set_pwr_mgmt+0x7a>
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	2b07      	cmp	r3, #7
 8000c04:	dd05      	ble.n	8000c12 <MPU6050_set_pwr_mgmt+0x86>
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MPU6050_set_pwr_mgmt+0xec>)
 8000c08:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <MPU6050_set_pwr_mgmt+0xd8>)
 8000c0a:	211f      	movs	r1, #31
 8000c0c:	4816      	ldr	r0, [pc, #88]	; (8000c68 <MPU6050_set_pwr_mgmt+0xdc>)
 8000c0e:	f005 fd29 	bl	8006664 <__assert_func>

  // Create bit string to put into the register
  uint8_t res =  0 | (dev_rst << 7) | (sleep << 6) | (cycle << 5) | (temp_dis << 3) | clksel;
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	01db      	lsls	r3, r3, #7
 8000c16:	b25a      	sxtb	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	019b      	lsls	r3, r3, #6
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b25a      	sxtb	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	015b      	lsls	r3, r3, #5
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	75bb      	strb	r3, [r7, #22]
  
  // Write to the register over I2C
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &res, sizeof(res), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, &res);
 8000c42:	f107 0316 	add.w	r3, r7, #22
 8000c46:	461a      	mov	r2, r3
 8000c48:	216b      	movs	r1, #107	; 0x6b
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f000 fc63 	bl	8001516 <MPU6050_writeRegister>
 8000c50:	4603      	mov	r3, r0
 8000c52:	75fb      	strb	r3, [r7, #23]

  return result;
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	080076c4 	.word	0x080076c4
 8000c64:	08007790 	.word	0x08007790
 8000c68:	080076e4 	.word	0x080076e4
 8000c6c:	080076fc 	.word	0x080076fc
 8000c70:	08007718 	.word	0x08007718
 8000c74:	08007734 	.word	0x08007734
 8000c78:	08007754 	.word	0x08007754

08000c7c <MPU6050_set_dlpf>:

HAL_StatusTypeDef MPU6050_set_dlpf(uint8_t* dlpf, MPU6050* mpu6050) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  /*
  Just set DLPF_CFG = 001 (so register )
  */

  // Ensure that dlpf is a number between 0 and 7
  assert((*dlpf >= 0) && (*dlpf <= 7));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	d905      	bls.n	8000c9a <MPU6050_set_dlpf+0x1e>
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MPU6050_set_dlpf+0x40>)
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <MPU6050_set_dlpf+0x44>)
 8000c92:	2131      	movs	r1, #49	; 0x31
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <MPU6050_set_dlpf+0x48>)
 8000c96:	f005 fce5 	bl	8006664 <__assert_func>
  // assert(*dlpf >= 0);
  // assert(*dlpf <= 7);

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, DLPF, I2C_MEMADD_SIZE_8BIT, dlpf, sizeof(*dlpf), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, PWR_MGMT_1, dlpf);
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	216b      	movs	r1, #107	; 0x6b
 8000c9e:	6838      	ldr	r0, [r7, #0]
 8000ca0:	f000 fc39 	bl	8001516 <MPU6050_writeRegister>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	73fb      	strb	r3, [r7, #15]
  

  // Store the dlpf number in the struct
  mpu6050->dlpf = *dlpf;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	719a      	strb	r2, [r3, #6]
  return result;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	08007770 	.word	0x08007770
 8000cc0:	080077a8 	.word	0x080077a8
 8000cc4:	080076e4 	.word	0x080076e4

08000cc8 <MPU6050_set_sample_rate>:

// REVIEW - Maths behind the smplrt_div_input may not be good due to division.
HAL_StatusTypeDef MPU6050_set_sample_rate(uint8_t* freq_ptr, MPU6050* mpu6050) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]

  We need to calculate what needs to go into the SMPLRT_DIV register to get the desired frequency
  This also assumes that the gyro output rate is at 1kHz
  */
  
  uint8_t smplrt_div_input = (mpu6050->gyro_smplrt)/(*freq_ptr) - 1;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	795a      	ldrb	r2, [r3, #5]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	73bb      	strb	r3, [r7, #14]

  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &smplrt_div_input, sizeof(smplrt_div_input), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, SMPLRT_DIV, &smplrt_div_input);
 8000ce6:	f107 030e 	add.w	r3, r7, #14
 8000cea:	461a      	mov	r2, r3
 8000cec:	2119      	movs	r1, #25
 8000cee:	6838      	ldr	r0, [r7, #0]
 8000cf0:	f000 fc11 	bl	8001516 <MPU6050_writeRegister>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  // Store the new sample rate divider in the struct
  mpu6050->gyro_smplrt = *freq_ptr;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	715a      	strb	r2, [r3, #5]
  return result;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <MPU6050_set_gyro_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_gyro_FSR(Gyro_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d822      	bhi.n	8000d64 <MPU6050_set_gyro_FSR+0x58>
 8000d1e:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <MPU6050_set_gyro_FSR+0x18>)
 8000d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d24:	08000d35 	.word	0x08000d35
 8000d28:	08000d41 	.word	0x08000d41
 8000d2c:	08000d4d 	.word	0x08000d4d
 8000d30:	08000d59 	.word	0x08000d59
    // For each possibility, set the correct data to be written and store the setting away
    // Left shift data bits by 3 so that we only overwrite bits 4 and 3
    case GYRO_FSR_250:
      pData = (0 << 3);
 8000d34:	2300      	movs	r3, #0
 8000d36:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_250;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	71da      	strb	r2, [r3, #7]
      break;
 8000d3e:	e011      	b.n	8000d64 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_500:
      pData = (1 << 3);
 8000d40:	2308      	movs	r3, #8
 8000d42:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_500;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2201      	movs	r2, #1
 8000d48:	71da      	strb	r2, [r3, #7]
      break;
 8000d4a:	e00b      	b.n	8000d64 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_1000:
      pData = (2 << 3);
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_1000;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2202      	movs	r2, #2
 8000d54:	71da      	strb	r2, [r3, #7]
      break;
 8000d56:	e005      	b.n	8000d64 <MPU6050_set_gyro_FSR+0x58>
    case GYRO_FSR_2000:
      pData = (3 << 3);
 8000d58:	2318      	movs	r3, #24
 8000d5a:	73bb      	strb	r3, [r7, #14]
      mpu6050->gyro_FSR = GYRO_FSR_2000;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	2203      	movs	r2, #3
 8000d60:	71da      	strb	r2, [r3, #7]
      break;
 8000d62:	bf00      	nop
  }
  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, GYRO_CONFIG, &pData);  
 8000d64:	f107 030e 	add.w	r3, r7, #14
 8000d68:	461a      	mov	r2, r3
 8000d6a:	211b      	movs	r1, #27
 8000d6c:	6838      	ldr	r0, [r7, #0]
 8000d6e:	f000 fbd2 	bl	8001516 <MPU6050_writeRegister>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
  
  return result;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MPU6050_set_accel_FSR>:

// REVIEW - Consider writing it so that we pull the current data in the register, AND it with 1110 0111, then OR it with (number << 3) so that we keep self-test
HAL_StatusTypeDef MPU6050_set_accel_FSR(Accel_FSR_SEL_TypeDef setting, MPU6050* mpu6050) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  uint8_t pData;

  switch (setting) {
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d822      	bhi.n	8000dd8 <MPU6050_set_accel_FSR+0x58>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <MPU6050_set_accel_FSR+0x18>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000db5 	.word	0x08000db5
 8000da0:	08000dc1 	.word	0x08000dc1
 8000da4:	08000dcd 	.word	0x08000dcd
    case ACCEL_FSR_2g:
      pData = (0 << 3);
 8000da8:	2300      	movs	r3, #0
 8000daa:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_2g;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2200      	movs	r2, #0
 8000db0:	721a      	strb	r2, [r3, #8]
      break;
 8000db2:	e011      	b.n	8000dd8 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_4g:
      pData = (1 << 3);
 8000db4:	2308      	movs	r3, #8
 8000db6:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_4g;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	721a      	strb	r2, [r3, #8]
      break;
 8000dbe:	e00b      	b.n	8000dd8 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_8g:
      pData = (2 << 3);
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_8g;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	721a      	strb	r2, [r3, #8]
      break;
 8000dca:	e005      	b.n	8000dd8 <MPU6050_set_accel_FSR+0x58>
    case ACCEL_FSR_16g:
      pData = (3 << 3);
 8000dcc:	2318      	movs	r3, #24
 8000dce:	73bb      	strb	r3, [r7, #14]
      mpu6050->accel_FSR = ACCEL_FSR_16g;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	721a      	strb	r2, [r3, #8]
      break;
 8000dd6:	bf00      	nop
  }
  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, MPU_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &pData, sizeof(pData), TIMEOUT_DEFAULT);
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, ACCEL_CONFIG, &pData);    
 8000dd8:	f107 030e 	add.w	r3, r7, #14
 8000ddc:	461a      	mov	r2, r3
 8000dde:	211c      	movs	r1, #28
 8000de0:	6838      	ldr	r0, [r7, #0]
 8000de2:	f000 fb98 	bl	8001516 <MPU6050_writeRegister>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]
  
  return result;  
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <MPU6050_init>:
  HAL_StatusTypeDef result = MPU6050_writeRegister(mpu6050, USER_CTRL, &res);  

  return result;  
}

HAL_StatusTypeDef MPU6050_init(MPU6050* mpu6050_ptr,I2C_HandleTypeDef* hi2c, uint8_t* dlpf, uint8_t* smpl_frq, Gyro_FSR_SEL_TypeDef gyro_setting, Accel_FSR_SEL_TypeDef accel_setting) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	603b      	str	r3, [r7, #0]
  /*
  Pass in a pointer to an MPU6050 instance; it will initialise it for us
 
  */
    // Initialise what we can
    mpu6050_ptr->i2c_handle = hi2c;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	601a      	str	r2, [r3, #0]
    mpu6050_ptr->MPU6050_addr = MPU_ADDR;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	22d0      	movs	r2, #208	; 0xd0
 8000e0c:	711a      	strb	r2, [r3, #4]

    mpu6050_ptr->ax = 0.0;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
    mpu6050_ptr->ay = 0.0;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
    mpu6050_ptr->az = 0.0;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]

    mpu6050_ptr->gx = 0.0;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
    mpu6050_ptr->gy = 0.0;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
    mpu6050_ptr->gz = 0.0;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]

    mpu6050_ptr->temp_C = 0.0;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f04f 0200 	mov.w	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24

    mpu6050_ptr->ax_bias = 0.0;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
    mpu6050_ptr->ay_bias = 0.0;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
    mpu6050_ptr->az_bias = 0.0;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30

    mpu6050_ptr->gx_bias = 0.0;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
    mpu6050_ptr->gy_bias = 0.0;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38
    mpu6050_ptr->gz_bias = 0.0;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c




    // Check that we have the correct device by checking its address
    uint8_t check = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	75bb      	strb	r3, [r7, #22]
    HAL_StatusTypeDef result = MPU6050_readRegister(mpu6050_ptr, WHO_AM_I, &check);
 8000e7a:	f107 0316 	add.w	r3, r7, #22
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2175      	movs	r1, #117	; 0x75
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 fb28 	bl	80014d8 <MPU6050_readRegister>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	75fb      	strb	r3, [r7, #23]

    if (result == HAL_OK && check == 0x68) { //check == 0x68
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d119      	bne.n	8000ec6 <MPU6050_init+0xd2>
 8000e92:	7dbb      	ldrb	r3, [r7, #22]
 8000e94:	2b68      	cmp	r3, #104	; 0x68
 8000e96:	d116      	bne.n	8000ec6 <MPU6050_init+0xd2>
        // Device is identified as the MPU6050 yay -> Wake it up
        MPU6050_wakeup(mpu6050_ptr);
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff fe66 	bl	8000b6a <MPU6050_wakeup>

        // Configure DLPF_CFG and store away settings
        MPU6050_set_dlpf(dlpf, mpu6050_ptr);
 8000e9e:	68f9      	ldr	r1, [r7, #12]
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff feeb 	bl	8000c7c <MPU6050_set_dlpf>

        // Configure the gyro sample rate and store away settings
        MPU6050_set_sample_rate(smpl_frq, mpu6050_ptr);
 8000ea6:	68f9      	ldr	r1, [r7, #12]
 8000ea8:	6838      	ldr	r0, [r7, #0]
 8000eaa:	f7ff ff0d 	bl	8000cc8 <MPU6050_set_sample_rate>

        // Set the full scale range for the gyroscope and accelerometer
        MPU6050_set_gyro_FSR(gyro_setting, mpu6050_ptr);
 8000eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eb2:	68f9      	ldr	r1, [r7, #12]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff29 	bl	8000d0c <MPU6050_set_gyro_FSR>
        MPU6050_set_accel_FSR(accel_setting, mpu6050_ptr);
 8000eba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ebe:	68f9      	ldr	r1, [r7, #12]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff5d 	bl	8000d80 <MPU6050_set_accel_FSR>
    }

  return result;
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <MPU6050_read_gyro_reg>:

/* Data Acquisition Functions */

HAL_StatusTypeDef MPU6050_read_gyro_reg(MPU6050* mpu6050) {
 8000ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ed4:	b089      	sub	sp, #36	; 0x24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	466b      	mov	r3, sp
 8000edc:	461e      	mov	r6, r3
  // Initialise temporary variables
  int16_t gx_raw = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	83fb      	strh	r3, [r7, #30]
  int16_t gy_raw = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	83bb      	strh	r3, [r7, #28]
  int16_t gz_raw = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	837b      	strh	r3, [r7, #26]

  uint8_t num_of_bytes = 6;
 8000eea:	2306      	movs	r3, #6
 8000eec:	767b      	strb	r3, [r7, #25]
  int8_t g_raw[num_of_bytes];
 8000eee:	7e79      	ldrb	r1, [r7, #25]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	b2cb      	uxtb	r3, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4698      	mov	r8, r3
 8000efc:	4691      	mov	r9, r2
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f12:	b2cb      	uxtb	r3, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	461c      	mov	r4, r3
 8000f18:	4615      	mov	r5, r2
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	00eb      	lsls	r3, r5, #3
 8000f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f28:	00e2      	lsls	r2, r4, #3
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	3307      	adds	r3, #7
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	ebad 0d03 	sub.w	sp, sp, r3
 8000f36:	466b      	mov	r3, sp
 8000f38:	3300      	adds	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]

  // Read X gyro registers and store the raw gyroscope value away
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, MPU_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &g_raw_H, sizeof(g_raw_H), TIMEOUT_DEFAULT);
  
  // Read all gyroscope registers starting from GYRO_XOUT_H and ending at GYRO_ZOUT_L
  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, GYRO_XOUT_H, g_raw, num_of_bytes);
 8000f3c:	7e7b      	ldrb	r3, [r7, #25]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	2143      	movs	r1, #67	; 0x43
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fb06 	bl	8001554 <MPU6050_readRegisters>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  // Get the raw x, y and z values
  gx_raw = (g_raw[0] << 8) | (g_raw[1]);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	83fb      	strh	r3, [r7, #30]
  gy_raw = (g_raw[2] << 8) | (g_raw[3]);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	83bb      	strh	r3, [r7, #28]
  gz_raw = (g_raw[4] << 8) | (g_raw[5]);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	837b      	strh	r3, [r7, #26]

  // Rescale raw readings according to gyro FSR
  switch(mpu6050->gyro_FSR) {
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	79db      	ldrb	r3, [r3, #7]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	f200 80c4 	bhi.w	8001120 <MPU6050_read_gyro_reg+0x250>
 8000f98:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <MPU6050_read_gyro_reg+0xd0>)
 8000f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9e:	bf00      	nop
 8000fa0:	08000fb1 	.word	0x08000fb1
 8000fa4:	08001001 	.word	0x08001001
 8000fa8:	08001051 	.word	0x08001051
 8000fac:	080010b9 	.word	0x080010b9
    case GYRO_FSR_250:
      mpu6050->gx = ((float) gx_raw) / 131.0;
 8000fb0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fbc:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001140 <MPU6050_read_gyro_reg+0x270>
 8000fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 131.0;
 8000fca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd6:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001140 <MPU6050_read_gyro_reg+0x270>
 8000fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 131.0;
 8000fe4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff0:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001140 <MPU6050_read_gyro_reg+0x270>
 8000ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000ffe:	e08f      	b.n	8001120 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_500:
      mpu6050->gx = ((float) gx_raw) / 65.5;
 8001000:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001144 <MPU6050_read_gyro_reg+0x274>
 8001010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 65.5;
 800101a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001026:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001144 <MPU6050_read_gyro_reg+0x274>
 800102a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 65.5;
 8001034:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001040:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001144 <MPU6050_read_gyro_reg+0x274>
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 800104e:	e067      	b.n	8001120 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_1000:
      mpu6050->gx = ((float) gx_raw) / 32.8;
 8001050:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001060:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8001130 <MPU6050_read_gyro_reg+0x260>
 8001064:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001068:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 32.8;
 8001072:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001082:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8001130 <MPU6050_read_gyro_reg+0x260>
 8001086:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800108a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 32.8;
 8001094:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010a4:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001130 <MPU6050_read_gyro_reg+0x260>
 80010a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 80010b6:	e033      	b.n	8001120 <MPU6050_read_gyro_reg+0x250>
    case GYRO_FSR_2000:
      mpu6050->gx = ((float) gx_raw) / 16.4;
 80010b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010c8:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8001138 <MPU6050_read_gyro_reg+0x268>
 80010cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edc3 7a06 	vstr	s15, [r3, #24]
      mpu6050->gy = ((float) gy_raw) / 16.4;
 80010da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010ea:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8001138 <MPU6050_read_gyro_reg+0x268>
 80010ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	edc3 7a07 	vstr	s15, [r3, #28]
      mpu6050->gz = ((float) gz_raw) / 16.4;
 80010fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001108:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800110c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001138 <MPU6050_read_gyro_reg+0x268>
 8001110:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001114:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 800111e:	bf00      	nop
  }

  return result;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	46b5      	mov	sp, r6
}
 8001124:	4618      	mov	r0, r3
 8001126:	3724      	adds	r7, #36	; 0x24
 8001128:	46bd      	mov	sp, r7
 800112a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800112e:	bf00      	nop
 8001130:	66666666 	.word	0x66666666
 8001134:	40406666 	.word	0x40406666
 8001138:	66666666 	.word	0x66666666
 800113c:	40306666 	.word	0x40306666
 8001140:	43030000 	.word	0x43030000
 8001144:	42830000 	.word	0x42830000

08001148 <MPU6050_read_accel_reg>:

HAL_StatusTypeDef MPU6050_read_accel_reg(MPU6050* mpu6050) {
 8001148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800114c:	b089      	sub	sp, #36	; 0x24
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	466b      	mov	r3, sp
 8001154:	461e      	mov	r6, r3
  // Initialise temporary variables
  int16_t ax_raw = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	83fb      	strh	r3, [r7, #30]
  int16_t ay_raw = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	83bb      	strh	r3, [r7, #28]
  int16_t az_raw = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	837b      	strh	r3, [r7, #26]

  uint8_t num_of_bytes = 6;
 8001162:	2306      	movs	r3, #6
 8001164:	767b      	strb	r3, [r7, #25]
  int8_t a_raw[num_of_bytes];
 8001166:	7e79      	ldrb	r1, [r7, #25]
 8001168:	460b      	mov	r3, r1
 800116a:	3b01      	subs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	b2cb      	uxtb	r3, r1
 8001170:	2200      	movs	r2, #0
 8001172:	4698      	mov	r8, r3
 8001174:	4691      	mov	r9, r2
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800118a:	b2cb      	uxtb	r3, r1
 800118c:	2200      	movs	r2, #0
 800118e:	461c      	mov	r4, r3
 8001190:	4615      	mov	r5, r2
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	00eb      	lsls	r3, r5, #3
 800119c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011a0:	00e2      	lsls	r2, r4, #3
 80011a2:	460b      	mov	r3, r1
 80011a4:	3307      	adds	r3, #7
 80011a6:	08db      	lsrs	r3, r3, #3
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	ebad 0d03 	sub.w	sp, sp, r3
 80011ae:	466b      	mov	r3, sp
 80011b0:	3300      	adds	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]

  // Read all gyroscope registers starting from GYRO_XOUT_H and ending at GYRO_ZOUT_L
  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, ACCEL_XOUT_H, a_raw, num_of_bytes);
 80011b4:	7e7b      	ldrb	r3, [r7, #25]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	213b      	movs	r1, #59	; 0x3b
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f9ca 	bl	8001554 <MPU6050_readRegisters>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]

  // Get the raw x, y and z values
  ax_raw = (a_raw[0] << 8) | (a_raw[1]);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	f993 3000 	ldrsb.w	r3, [r3]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	83fb      	strh	r3, [r7, #30]
  ay_raw = (a_raw[2] << 8) | (a_raw[3]);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	83bb      	strh	r3, [r7, #28]
  az_raw = (a_raw[4] << 8) | (a_raw[5]);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	837b      	strh	r3, [r7, #26]

  // Rescale them according to accel FSR
  switch(mpu6050->accel_FSR) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7a1b      	ldrb	r3, [r3, #8]
 800120a:	2b03      	cmp	r3, #3
 800120c:	f200 810c 	bhi.w	8001428 <MPU6050_read_accel_reg+0x2e0>
 8001210:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <MPU6050_read_accel_reg+0xd0>)
 8001212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001216:	bf00      	nop
 8001218:	08001229 	.word	0x08001229
 800121c:	080012a9 	.word	0x080012a9
 8001220:	08001329 	.word	0x08001329
 8001224:	080013a9 	.word	0x080013a9
    case ACCEL_FSR_2g:
      mpu6050->ax = ((float) ax_raw) / 16384.0 * 9.8;
 8001228:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001234:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001238:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8001438 <MPU6050_read_accel_reg+0x2f0>
 800123c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001240:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 8001244:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001248:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 16384.0 * 9.8;
 8001252:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001262:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8001438 <MPU6050_read_accel_reg+0x2f0>
 8001266:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800126a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 800126e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001272:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 16384.0 * 9.8;
 800127c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001288:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800128c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8001438 <MPU6050_read_accel_reg+0x2f0>
 8001290:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001294:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 8001298:	ee27 7b06 	vmul.f64	d7, d7, d6
 800129c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 80012a6:	e0bf      	b.n	8001428 <MPU6050_read_accel_reg+0x2e0>
    case ACCEL_FSR_4g:
      mpu6050->ax = ((float) ax_raw) / 8192.0 * 9.8;
 80012a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012b8:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8001448 <MPU6050_read_accel_reg+0x300>
 80012bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012c0:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 80012c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 8192.0 * 9.8;
 80012d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012e2:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8001448 <MPU6050_read_accel_reg+0x300>
 80012e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012ea:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 80012ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 8192.0 * 9.8;
 80012fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800130c:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8001448 <MPU6050_read_accel_reg+0x300>
 8001310:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001314:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 8001318:	ee27 7b06 	vmul.f64	d7, d7, d6
 800131c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8001326:	e07f      	b.n	8001428 <MPU6050_read_accel_reg+0x2e0>
    case ACCEL_FSR_8g:
      mpu6050->ax = ((float) ax_raw) / 4096.0 * 9.8;
 8001328:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001338:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001450 <MPU6050_read_accel_reg+0x308>
 800133c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001340:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 8001344:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001348:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 4096.0 * 9.8;
 8001352:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001362:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001450 <MPU6050_read_accel_reg+0x308>
 8001366:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800136a:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 800136e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001372:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 4096.0 * 9.8;
 800137c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001388:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800138c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8001450 <MPU6050_read_accel_reg+0x308>
 8001390:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001394:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 8001398:	ee27 7b06 	vmul.f64	d7, d7, d6
 800139c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 80013a6:	e03f      	b.n	8001428 <MPU6050_read_accel_reg+0x2e0>
    case ACCEL_FSR_16g:
      mpu6050->ax = ((float) ax_raw) / 2048.0 * 9.8;
 80013a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80013b8:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8001458 <MPU6050_read_accel_reg+0x310>
 80013bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013c0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 80013c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edc3 7a03 	vstr	s15, [r3, #12]
      mpu6050->ay = ((float) ay_raw) / 2048.0 * 9.8;
 80013d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80013e2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001458 <MPU6050_read_accel_reg+0x310>
 80013e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013ea:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 80013ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	edc3 7a04 	vstr	s15, [r3, #16]
      mpu6050->az = ((float) az_raw) / 2048.0 * 9.8;
 80013fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001408:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800140c:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001458 <MPU6050_read_accel_reg+0x310>
 8001410:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001414:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001440 <MPU6050_read_accel_reg+0x2f8>
 8001418:	ee27 7b06 	vmul.f64	d7, d7, d6
 800141c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edc3 7a05 	vstr	s15, [r3, #20]
      break;
 8001426:	bf00      	nop
  }

  return result;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	46b5      	mov	sp, r6
}
 800142c:	4618      	mov	r0, r3
 800142e:	3724      	adds	r7, #36	; 0x24
 8001430:	46bd      	mov	sp, r7
 8001432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001436:	bf00      	nop
 8001438:	00000000 	.word	0x00000000
 800143c:	40d00000 	.word	0x40d00000
 8001440:	9999999a 	.word	0x9999999a
 8001444:	40239999 	.word	0x40239999
 8001448:	00000000 	.word	0x00000000
 800144c:	40c00000 	.word	0x40c00000
 8001450:	00000000 	.word	0x00000000
 8001454:	40b00000 	.word	0x40b00000
 8001458:	00000000 	.word	0x00000000
 800145c:	40a00000 	.word	0x40a00000

08001460 <MPU6050_read_temp_reg>:

HAL_StatusTypeDef MPU6050_read_temp_reg(MPU6050* mpu6050) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  int16_t raw_temp = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	81fb      	strh	r3, [r7, #14]

  uint8_t num_of_bytes = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	737b      	strb	r3, [r7, #13]
  int8_t temp[2];

  HAL_StatusTypeDef result = MPU6050_readRegisters(mpu6050, TEMP_OUT_H, temp, num_of_bytes);
 8001470:	7b7b      	ldrb	r3, [r7, #13]
 8001472:	f107 0208 	add.w	r2, r7, #8
 8001476:	2141      	movs	r1, #65	; 0x41
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f86b 	bl	8001554 <MPU6050_readRegisters>
 800147e:	4603      	mov	r3, r0
 8001480:	733b      	strb	r3, [r7, #12]
  raw_temp = (temp[0] << 8) | (temp[1]);
 8001482:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	81fb      	strh	r3, [r7, #14]

  // Fix the readings to be in celsius
  mpu6050->temp_C = ((float) raw_temp)/340.0 + 36.53;
 8001494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014a4:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80014c8 <MPU6050_read_temp_reg+0x68>
 80014a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80014d0 <MPU6050_read_temp_reg+0x70>
 80014b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	00000000 	.word	0x00000000
 80014cc:	40754000 	.word	0x40754000
 80014d0:	0a3d70a4 	.word	0x0a3d70a4
 80014d4:	404243d7 	.word	0x404243d7

080014d8 <MPU6050_readRegister>:


/* Low Level Functions */
HAL_StatusTypeDef MPU6050_readRegister(MPU6050* mpu6050, uint8_t reg, uint8_t* data) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af04      	add	r7, sp, #16
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	460b      	mov	r3, r1
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	72fb      	strb	r3, [r7, #11]
  Info is stored away into the data array
  NOTE - Pick the function 
  */
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_IT(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1, HAL_MAX_DELAY);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	791b      	ldrb	r3, [r3, #4]
 80014ee:	b299      	uxth	r1, r3
 80014f0:	7afb      	ldrb	r3, [r7, #11]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2301      	movs	r3, #1
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	f000 ffca 	bl	800249c <HAL_I2C_Mem_Read>
 8001508:	4603      	mov	r3, r0
 800150a:	75fb      	strb	r3, [r7, #23]
  return result;
 800150c:	7dfb      	ldrb	r3, [r7, #23]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <MPU6050_writeRegister>:

HAL_StatusTypeDef MPU6050_writeRegister(MPU6050* mpu6050, uint8_t reg, uint8_t* data) {
 8001516:	b580      	push	{r7, lr}
 8001518:	b08a      	sub	sp, #40	; 0x28
 800151a:	af04      	add	r7, sp, #16
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	460b      	mov	r3, r1
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	72fb      	strb	r3, [r7, #11]
  /*
  Writes 1 byte from the data array into the specified register reg using I2C configuration from the MPU6050 instance
  */  
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Write_IT(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) 1, HAL_MAX_DELAY);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	791b      	ldrb	r3, [r3, #4]
 800152c:	b299      	uxth	r1, r3
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	b29a      	uxth	r2, r3
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	2301      	movs	r3, #1
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2301      	movs	r3, #1
 8001542:	f000 fe97 	bl	8002274 <HAL_I2C_Mem_Write>
 8001546:	4603      	mov	r3, r0
 8001548:	75fb      	strb	r3, [r7, #23]
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <MPU6050_readRegisters>:

HAL_StatusTypeDef MPU6050_readRegisters(MPU6050* mpu6050, uint8_t reg, uint8_t* data, uint8_t length) {
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b08b      	sub	sp, #44	; 0x2c
 8001558:	af04      	add	r7, sp, #16
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	461a      	mov	r2, r3
 8001560:	460b      	mov	r3, r1
 8001562:	72fb      	strb	r3, [r7, #11]
 8001564:	4613      	mov	r3, r2
 8001566:	72bb      	strb	r3, [r7, #10]
  Info is stored away into the data array
  */  
  // NOTE: Length is the number of bytes we wanna read from the register -> 1 means read that register. 2 would mean reading this register then the next one
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_DMA(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length);
  // HAL_StatusTypeDef result = HAL_I2C_Mem_Read_IT(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length);
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(mpu6050->i2c_handle, mpu6050->MPU6050_addr, reg, I2C_MEMADD_SIZE_8BIT, data, (uint16_t) length, HAL_MAX_DELAY);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	791b      	ldrb	r3, [r3, #4]
 8001570:	b299      	uxth	r1, r3
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	b29a      	uxth	r2, r3
 8001576:	7abb      	ldrb	r3, [r7, #10]
 8001578:	b29b      	uxth	r3, r3
 800157a:	f04f 34ff 	mov.w	r4, #4294967295
 800157e:	9402      	str	r4, [sp, #8]
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	f000 ff88 	bl	800249c <HAL_I2C_Mem_Read>
 800158c:	4603      	mov	r3, r0
 800158e:	75fb      	strb	r3, [r7, #23]
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	371c      	adds	r7, #28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}
	...

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_MspInit+0x30>)
 80015a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x30>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x30>)
 80015b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	58024400 	.word	0x58024400

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0b8      	sub	sp, #224	; 0xe0
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	22b8      	movs	r2, #184	; 0xb8
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 f891 	bl	8006718 <memset>
  if(hi2c->Instance==I2C4)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a25      	ldr	r2, [pc, #148]	; (8001690 <HAL_I2C_MspInit+0xc0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d142      	bne.n	8001686 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001600:	2310      	movs	r3, #16
 8001602:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4618      	mov	r0, r3
 8001610:	f002 fb86 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800161a:	f7ff faa1 	bl	8000b60 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_I2C_MspInit+0xc4>)
 8001620:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_I2C_MspInit+0xc4>)
 8001626:	f043 0320 	orr.w	r3, r3, #32
 800162a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_I2C_MspInit+0xc4>)
 8001630:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001634:	f003 0320 	and.w	r3, r3, #32
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800163c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001656:	2304      	movs	r3, #4
 8001658:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800165c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001660:	4619      	mov	r1, r3
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <HAL_I2C_MspInit+0xc8>)
 8001664:	f000 fbac 	bl	8001dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_I2C_MspInit+0xc4>)
 800166a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_I2C_MspInit+0xc4>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_I2C_MspInit+0xc4>)
 800167a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	37e0      	adds	r7, #224	; 0xe0
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	58001c00 	.word	0x58001c00
 8001694:	58024400 	.word	0x58024400
 8001698:	58021400 	.word	0x58021400

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b0b8      	sub	sp, #224	; 0xe0
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	22b8      	movs	r2, #184	; 0xb8
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f005 f82b 	bl	8006718 <memset>
  if(huart->Instance==USART3)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a25      	ldr	r2, [pc, #148]	; (800175c <HAL_UART_MspInit+0xc0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d142      	bne.n	8001752 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016cc:	2302      	movs	r3, #2
 80016ce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fb20 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016e6:	f7ff fa3b 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_UART_MspInit+0xc4>)
 80016ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <HAL_UART_MspInit+0xc4>)
 80016f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_UART_MspInit+0xc4>)
 80016fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_UART_MspInit+0xc4>)
 800170a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <HAL_UART_MspInit+0xc4>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_UART_MspInit+0xc4>)
 800171a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001726:	f44f 7340 	mov.w	r3, #768	; 0x300
 800172a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001740:	2307      	movs	r3, #7
 8001742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001746:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_UART_MspInit+0xc8>)
 800174e:	f000 fb37 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	37e0      	adds	r7, #224	; 0xe0
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40004800 	.word	0x40004800
 8001760:	58024400 	.word	0x58024400
 8001764:	58020c00 	.word	0x58020c00

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b4:	f000 f9dc 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	return 1;
 80017c0:	2301      	movs	r3, #1
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_kill>:

int _kill(int pid, int sig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017d6:	f004 ff63 	bl	80066a0 <__errno>
 80017da:	4603      	mov	r3, r0
 80017dc:	2216      	movs	r2, #22
 80017de:	601a      	str	r2, [r3, #0]
	return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_exit>:

void _exit (int status)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffe7 	bl	80017cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80017fe:	e7fe      	b.n	80017fe <_exit+0x12>

08001800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e00a      	b.n	8001828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001812:	f3af 8000 	nop.w
 8001816:	4601      	mov	r1, r0
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	60ba      	str	r2, [r7, #8]
 800181e:	b2ca      	uxtb	r2, r1
 8001820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	dbf0      	blt.n	8001812 <_read+0x12>
	}

return len;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e009      	b.n	8001860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbf1      	blt.n	800184c <_write+0x12>
	}
	return len;
 8001868:	687b      	ldr	r3, [r7, #4]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_close>:

int _close(int file)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
	return -1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189a:	605a      	str	r2, [r3, #4]
	return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <_isatty>:

int _isatty(int file)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <_sbrk+0x5c>)
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <_sbrk+0x60>)
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <_sbrk+0x64>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <_sbrk+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	429a      	cmp	r2, r3
 800190a:	d207      	bcs.n	800191c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800190c:	f004 fec8 	bl	80066a0 <__errno>
 8001910:	4603      	mov	r3, r0
 8001912:	220c      	movs	r2, #12
 8001914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	e009      	b.n	8001930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <_sbrk+0x64>)
 800192c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	24100000 	.word	0x24100000
 800193c:	00000400 	.word	0x00000400
 8001940:	240001ac 	.word	0x240001ac
 8001944:	240001c8 	.word	0x240001c8

08001948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800194c:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <SystemInit+0xd0>)
 800194e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001952:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <SystemInit+0xd0>)
 8001954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <SystemInit+0xd4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	2b02      	cmp	r3, #2
 8001966:	d807      	bhi.n	8001978 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <SystemInit+0xd4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 030f 	bic.w	r3, r3, #15
 8001970:	4a2a      	ldr	r2, [pc, #168]	; (8001a1c <SystemInit+0xd4>)
 8001972:	f043 0303 	orr.w	r3, r3, #3
 8001976:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <SystemInit+0xd8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <SystemInit+0xd8>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <SystemInit+0xd8>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800198a:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <SystemInit+0xd8>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4924      	ldr	r1, [pc, #144]	; (8001a20 <SystemInit+0xd8>)
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <SystemInit+0xdc>)
 8001992:	4013      	ands	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <SystemInit+0xd4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <SystemInit+0xd4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 030f 	bic.w	r3, r3, #15
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <SystemInit+0xd4>)
 80019ac:	f043 0303 	orr.w	r3, r3, #3
 80019b0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <SystemInit+0xd8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <SystemInit+0xd8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <SystemInit+0xd8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <SystemInit+0xd8>)
 80019c6:	4a18      	ldr	r2, [pc, #96]	; (8001a28 <SystemInit+0xe0>)
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <SystemInit+0xd8>)
 80019cc:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <SystemInit+0xe4>)
 80019ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <SystemInit+0xd8>)
 80019d2:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <SystemInit+0xe8>)
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <SystemInit+0xd8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <SystemInit+0xd8>)
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <SystemInit+0xe8>)
 80019e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <SystemInit+0xd8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <SystemInit+0xd8>)
 80019ea:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <SystemInit+0xe8>)
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <SystemInit+0xd8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <SystemInit+0xd8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <SystemInit+0xd8>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <SystemInit+0xd8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <SystemInit+0xec>)
 8001a08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00
 8001a1c:	52002000 	.word	0x52002000
 8001a20:	58024400 	.word	0x58024400
 8001a24:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a28:	02020200 	.word	0x02020200
 8001a2c:	01ff0000 	.word	0x01ff0000
 8001a30:	01010280 	.word	0x01010280
 8001a34:	52004000 	.word	0x52004000

08001a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a3c:	f7ff ff84 	bl	8001948 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a42:	490d      	ldr	r1, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a58:	4c0a      	ldr	r4, [pc, #40]	; (8001a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f004 fe33 	bl	80066d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6a:	f7fe fe13 	bl	8000694 <main>
  bx  lr
 8001a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a70:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001a74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a78:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001a7c:	080078d8 	.word	0x080078d8
  ldr r2, =_sbss
 8001a80:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001a84:	240001c4 	.word	0x240001c4

08001a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a92:	2003      	movs	r0, #3
 8001a94:	f000 f962 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a98:	f001 ff6c 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_Init+0x68>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	4913      	ldr	r1, [pc, #76]	; (8001af8 <HAL_Init+0x6c>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_Init+0x68>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_Init+0x6c>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_Init+0x70>)
 8001ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_Init+0x74>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f814 	bl	8001b04 <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e002      	b.n	8001aec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae6:	f7ff fd59 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	58024400 	.word	0x58024400
 8001af8:	080077bc 	.word	0x080077bc
 8001afc:	24000004 	.word	0x24000004
 8001b00:	24000000 	.word	0x24000000

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_InitTick+0x60>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e021      	b.n	8001b5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_InitTick+0x64>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_InitTick+0x60>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f939 	bl	8001da6 <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f000 f911 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_InitTick+0x68>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2400000c 	.word	0x2400000c
 8001b68:	24000000 	.word	0x24000000
 8001b6c:	24000008 	.word	0x24000008

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	2400000c 	.word	0x2400000c
 8001b94:	240001b0 	.word	0x240001b0

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	240001b0 	.word	0x240001b0

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2400000c 	.word	0x2400000c

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <__NVIC_SetPriorityGrouping+0x40>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x40>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00
 8001c3c:	05fa0000 	.word	0x05fa0000

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff47 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d80:	f7ff ff5e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7ff ff90 	bl	8001cb0 <NVIC_EncodePriority>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff5f 	bl	8001c5c <__NVIC_SetPriority>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffb2 	bl	8001d18 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dce:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <HAL_GPIO_Init+0x234>)
 8001dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dd2:	e194      	b.n	80020fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8186 	beq.w	80020f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d005      	beq.n	8001e04 <HAL_GPIO_Init+0x44>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d130      	bne.n	8001e66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 0201 	and.w	r2, r3, #1
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d017      	beq.n	8001ea2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d123      	bne.n	8001ef6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	69b9      	ldr	r1, [r7, #24]
 8001ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0203 	and.w	r2, r3, #3
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80e0 	beq.w	80020f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f38:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_GPIO_Init+0x238>)
 8001f3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001f3e:	4a2e      	ldr	r2, [pc, #184]	; (8001ff8 <HAL_GPIO_Init+0x238>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_GPIO_Init+0x238>)
 8001f4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f56:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <HAL_GPIO_Init+0x23c>)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a20      	ldr	r2, [pc, #128]	; (8002000 <HAL_GPIO_Init+0x240>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d052      	beq.n	8002028 <HAL_GPIO_Init+0x268>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_GPIO_Init+0x244>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_GPIO_Init+0x22e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_GPIO_Init+0x248>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02b      	beq.n	8001fea <HAL_GPIO_Init+0x22a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_GPIO_Init+0x24c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d025      	beq.n	8001fe6 <HAL_GPIO_Init+0x226>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_GPIO_Init+0x250>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_GPIO_Init+0x222>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_GPIO_Init+0x254>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d019      	beq.n	8001fde <HAL_GPIO_Init+0x21e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_GPIO_Init+0x258>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0x21a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_GPIO_Init+0x25c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_GPIO_Init+0x216>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_GPIO_Init+0x260>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <HAL_GPIO_Init+0x212>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_GPIO_Init+0x264>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_GPIO_Init+0x20e>
 8001fca:	2309      	movs	r3, #9
 8001fcc:	e02d      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001fce:	230a      	movs	r3, #10
 8001fd0:	e02b      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	e029      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	e027      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e025      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001fde:	2305      	movs	r3, #5
 8001fe0:	e023      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	e021      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e01f      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e01d      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e01b      	b.n	800202a <HAL_GPIO_Init+0x26a>
 8001ff2:	bf00      	nop
 8001ff4:	58000080 	.word	0x58000080
 8001ff8:	58024400 	.word	0x58024400
 8001ffc:	58000400 	.word	0x58000400
 8002000:	58020000 	.word	0x58020000
 8002004:	58020400 	.word	0x58020400
 8002008:	58020800 	.word	0x58020800
 800200c:	58020c00 	.word	0x58020c00
 8002010:	58021000 	.word	0x58021000
 8002014:	58021400 	.word	0x58021400
 8002018:	58021800 	.word	0x58021800
 800201c:	58021c00 	.word	0x58021c00
 8002020:	58022000 	.word	0x58022000
 8002024:	58022400 	.word	0x58022400
 8002028:	2300      	movs	r3, #0
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800203a:	4938      	ldr	r1, [pc, #224]	; (800211c <HAL_GPIO_Init+0x35c>)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800206e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800209c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3301      	adds	r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	f47f ae63 	bne.w	8001dd4 <HAL_GPIO_Init+0x14>
  }
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	3724      	adds	r7, #36	; 0x24
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	58000400 	.word	0x58000400

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800213c:	e003      	b.n	8002146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e07f      	b.n	8002266 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fa28 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e006      	b.n	80021dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d104      	bne.n	80021ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_I2C_Init+0x11c>)
 80021fa:	430b      	orrs	r3, r1
 80021fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69d9      	ldr	r1, [r3, #28]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	02008000 	.word	0x02008000

08002274 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	817b      	strh	r3, [r7, #10]
 8002286:	460b      	mov	r3, r1
 8002288:	813b      	strh	r3, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b20      	cmp	r3, #32
 8002298:	f040 80f9 	bne.w	800248e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x34>
 80022a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0ed      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Mem_Write+0x4e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e0e6      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ca:	f7ff fc65 	bl	8001b98 <HAL_GetTick>
 80022ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2319      	movs	r3, #25
 80022d6:	2201      	movs	r2, #1
 80022d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fac3 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0d1      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2221      	movs	r2, #33	; 0x21
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	; 0x40
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002314:	88f8      	ldrh	r0, [r7, #6]
 8002316:	893a      	ldrh	r2, [r7, #8]
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	4603      	mov	r3, r0
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f9d3 	bl	80026d0 <I2C_RequestMemoryWrite>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0a9      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d90e      	bls.n	8002364 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	22ff      	movs	r2, #255	; 0xff
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	b2da      	uxtb	r2, r3
 8002352:	8979      	ldrh	r1, [r7, #10]
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fc2b 	bl	8002bb8 <I2C_TransferConfig>
 8002362:	e00f      	b.n	8002384 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	b2da      	uxtb	r2, r3
 8002374:	8979      	ldrh	r1, [r7, #10]
 8002376:	2300      	movs	r3, #0
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 fc1a 	bl	8002bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 faad 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e07b      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d034      	beq.n	800243c <HAL_I2C_Mem_Write+0x1c8>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d130      	bne.n	800243c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fa3f 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e04d      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2bff      	cmp	r3, #255	; 0xff
 80023fc:	d90e      	bls.n	800241c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	22ff      	movs	r2, #255	; 0xff
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	b2da      	uxtb	r2, r3
 800240a:	8979      	ldrh	r1, [r7, #10]
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fbcf 	bl	8002bb8 <I2C_TransferConfig>
 800241a:	e00f      	b.n	800243c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	b2da      	uxtb	r2, r3
 800242c:	8979      	ldrh	r1, [r7, #10]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fbbe 	bl	8002bb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d19e      	bne.n	8002384 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa8c 	bl	8002968 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e01a      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2220      	movs	r2, #32
 8002460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_I2C_Mem_Write+0x224>)
 800246e:	400b      	ands	r3, r1
 8002470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	fe00e800 	.word	0xfe00e800

0800249c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	460b      	mov	r3, r1
 80024b0:	813b      	strh	r3, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b20      	cmp	r3, #32
 80024c0:	f040 80fd 	bne.w	80026be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_I2C_Mem_Read+0x34>
 80024ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0f1      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Mem_Read+0x4e>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0ea      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024f2:	f7ff fb51 	bl	8001b98 <HAL_GetTick>
 80024f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2319      	movs	r3, #25
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f9af 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0d5      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2222      	movs	r2, #34	; 0x22
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2240      	movs	r2, #64	; 0x40
 8002520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800253c:	88f8      	ldrh	r0, [r7, #6]
 800253e:	893a      	ldrh	r2, [r7, #8]
 8002540:	8979      	ldrh	r1, [r7, #10]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	4603      	mov	r3, r0
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f913 	bl	8002778 <I2C_RequestMemoryRead>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0ad      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2bff      	cmp	r3, #255	; 0xff
 800256c:	d90e      	bls.n	800258c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	b2da      	uxtb	r2, r3
 800257a:	8979      	ldrh	r1, [r7, #10]
 800257c:	4b52      	ldr	r3, [pc, #328]	; (80026c8 <HAL_I2C_Mem_Read+0x22c>)
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fb17 	bl	8002bb8 <I2C_TransferConfig>
 800258a:	e00f      	b.n	80025ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	b2da      	uxtb	r2, r3
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_I2C_Mem_Read+0x22c>)
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fb06 	bl	8002bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	2200      	movs	r2, #0
 80025b4:	2104      	movs	r1, #4
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f956 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07c      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d034      	beq.n	800266c <HAL_I2C_Mem_Read+0x1d0>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d130      	bne.n	800266c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	2200      	movs	r2, #0
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f927 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04d      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d90e      	bls.n	800264c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fab7 	bl	8002bb8 <I2C_TransferConfig>
 800264a:	e00f      	b.n	800266c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	b2da      	uxtb	r2, r3
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	2300      	movs	r3, #0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 faa6 	bl	8002bb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d19a      	bne.n	80025ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f974 	bl	8002968 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e01a      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_I2C_Mem_Read+0x230>)
 800269e:	400b      	ands	r3, r1
 80026a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	80002400 	.word	0x80002400
 80026cc:	fe00e800 	.word	0xfe00e800

080026d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	817b      	strh	r3, [r7, #10]
 80026e2:	460b      	mov	r3, r1
 80026e4:	813b      	strh	r3, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	4b20      	ldr	r3, [pc, #128]	; (8002774 <I2C_RequestMemoryWrite+0xa4>)
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fa5d 	bl	8002bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	69b9      	ldr	r1, [r7, #24]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f8f0 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e02c      	b.n	800276c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002718:	893b      	ldrh	r3, [r7, #8]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
 8002722:	e015      	b.n	8002750 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002724:	893b      	ldrh	r3, [r7, #8]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	69b9      	ldr	r1, [r7, #24]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f8d6 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e012      	b.n	800276c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002746:	893b      	ldrh	r3, [r7, #8]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2200      	movs	r2, #0
 8002758:	2180      	movs	r1, #128	; 0x80
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f884 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	80002000 	.word	0x80002000

08002778 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4603      	mov	r3, r0
 8002788:	817b      	strh	r3, [r7, #10]
 800278a:	460b      	mov	r3, r1
 800278c:	813b      	strh	r3, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	8979      	ldrh	r1, [r7, #10]
 8002798:	4b20      	ldr	r3, [pc, #128]	; (800281c <I2C_RequestMemoryRead+0xa4>)
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fa0a 	bl	8002bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f89d 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e02c      	b.n	8002812 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027be:	893b      	ldrh	r3, [r7, #8]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
 80027c8:	e015      	b.n	80027f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027ca:	893b      	ldrh	r3, [r7, #8]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f883 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e012      	b.n	8002812 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2140      	movs	r1, #64	; 0x40
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f831 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	80002000 	.word	0x80002000

08002820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b02      	cmp	r3, #2
 8002834:	d103      	bne.n	800283e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d007      	beq.n	800285c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	619a      	str	r2, [r3, #24]
  }
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002878:	e022      	b.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d01e      	beq.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	f7ff f989 	bl	8001b98 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d113      	bne.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e00f      	b.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4013      	ands	r3, r2
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d0cd      	beq.n	800287a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028f4:	e02c      	b.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f870 	bl	80029e0 <I2C_IsErrorOccurred>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e02a      	b.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d01e      	beq.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002912:	f7ff f941 	bl	8001b98 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d113      	bne.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e007      	b.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d1cb      	bne.n	80028f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002974:	e028      	b.n	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f830 	bl	80029e0 <I2C_IsErrorOccurred>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e026      	b.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7ff f905 	bl	8001b98 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d113      	bne.n	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e007      	b.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d1cf      	bne.n	8002976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d075      	beq.n	8002af8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2210      	movs	r2, #16
 8002a12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a14:	e056      	b.n	8002ac4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d052      	beq.n	8002ac4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7ff f8bb 	bl	8001b98 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_IsErrorOccurred+0x54>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d147      	bne.n	8002ac4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a56:	d12e      	bne.n	8002ab6 <I2C_IsErrorOccurred+0xd6>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a5e:	d02a      	beq.n	8002ab6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d027      	beq.n	8002ab6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a74:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a76:	f7ff f88f 	bl	8001b98 <HAL_GetTick>
 8002a7a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7c:	e01b      	b.n	8002ab6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a7e:	f7ff f88b 	bl	8001b98 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b19      	cmp	r3, #25
 8002a8a:	d914      	bls.n	8002ab6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d1dc      	bne.n	8002a7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d003      	beq.n	8002ada <I2C_IsErrorOccurred+0xfa>
 8002ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d09d      	beq.n	8002a16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00b      	beq.n	8002b44 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f043 0308 	orr.w	r3, r3, #8
 8002b32:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01c      	beq.n	8002ba8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff fe56 	bl	8002820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <I2C_IsErrorOccurred+0x1d4>)
 8002b80:	400b      	ands	r3, r1
 8002b82:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3728      	adds	r7, #40	; 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	fe00e800 	.word	0xfe00e800

08002bb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bca:	897b      	ldrh	r3, [r7, #10]
 8002bcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bd0:	7a7b      	ldrb	r3, [r7, #9]
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bd8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002be6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	0d5b      	lsrs	r3, r3, #21
 8002bf2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <I2C_TransferConfig+0x60>)
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	ea02 0103 	and.w	r1, r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	03ff63ff 	.word	0x03ff63ff

08002c1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d138      	bne.n	8002ca4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e032      	b.n	8002ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d139      	bne.n	8002d3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e033      	b.n	8002d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2224      	movs	r2, #36	; 0x24
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d54:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d00a      	beq.n	8002d76 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d60:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d001      	beq.n	8002d72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e040      	b.n	8002df4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e03e      	b.n	8002df4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d7e:	491f      	ldr	r1, [pc, #124]	; (8002dfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d86:	f7fe ff07 	bl	8001b98 <HAL_GetTick>
 8002d8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d8c:	e009      	b.n	8002da2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d8e:	f7fe ff03 	bl	8001b98 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9c:	d901      	bls.n	8002da2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e028      	b.n	8002df4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dae:	d1ee      	bne.n	8002d8e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b1e      	cmp	r3, #30
 8002db4:	d008      	beq.n	8002dc8 <HAL_PWREx_ConfigSupply+0x7c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b2e      	cmp	r3, #46	; 0x2e
 8002dba:	d005      	beq.n	8002dc8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b1d      	cmp	r3, #29
 8002dc0:	d002      	beq.n	8002dc8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b2d      	cmp	r3, #45	; 0x2d
 8002dc6:	d114      	bne.n	8002df2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002dc8:	f7fe fee6 	bl	8001b98 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002dce:	e009      	b.n	8002de4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dd0:	f7fe fee2 	bl	8001b98 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dde:	d901      	bls.n	8002de4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e007      	b.n	8002df4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d1ee      	bne.n	8002dd0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	58024800 	.word	0x58024800

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	; 0x30
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e3f4      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80b3 	beq.w	8002f86 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e20:	4b95      	ldr	r3, [pc, #596]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e2a:	4b93      	ldr	r3, [pc, #588]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d007      	beq.n	8002e46 <HAL_RCC_OscConfig+0x46>
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	2b18      	cmp	r3, #24
 8002e3a:	d112      	bne.n	8002e62 <HAL_RCC_OscConfig+0x62>
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d10d      	bne.n	8002e62 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e46:	4b8c      	ldr	r3, [pc, #560]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8098 	beq.w	8002f84 <HAL_RCC_OscConfig+0x184>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 8093 	bne.w	8002f84 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e3cc      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x7a>
 8002e6c:	4b82      	ldr	r3, [pc, #520]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a81      	ldr	r2, [pc, #516]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e058      	b.n	8002f2c <HAL_RCC_OscConfig+0x12c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d112      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xa8>
 8002e82:	4b7d      	ldr	r3, [pc, #500]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7c      	ldr	r2, [pc, #496]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b7a      	ldr	r3, [pc, #488]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a79      	ldr	r2, [pc, #484]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b77      	ldr	r3, [pc, #476]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a76      	ldr	r2, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e041      	b.n	8002f2c <HAL_RCC_OscConfig+0x12c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb0:	d112      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xd8>
 8002eb2:	4b71      	ldr	r3, [pc, #452]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a70      	ldr	r2, [pc, #448]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6e      	ldr	r3, [pc, #440]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6d      	ldr	r2, [pc, #436]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002ec4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b6b      	ldr	r3, [pc, #428]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6a      	ldr	r2, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e029      	b.n	8002f2c <HAL_RCC_OscConfig+0x12c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002ee0:	d112      	bne.n	8002f08 <HAL_RCC_OscConfig+0x108>
 8002ee2:	4b65      	ldr	r3, [pc, #404]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a64      	ldr	r2, [pc, #400]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b62      	ldr	r3, [pc, #392]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a61      	ldr	r2, [pc, #388]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a5e      	ldr	r2, [pc, #376]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e011      	b.n	8002f2c <HAL_RCC_OscConfig+0x12c>
 8002f08:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5a      	ldr	r2, [pc, #360]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b58      	ldr	r3, [pc, #352]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a57      	ldr	r2, [pc, #348]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b55      	ldr	r3, [pc, #340]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a54      	ldr	r2, [pc, #336]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fe30 	bl	8001b98 <HAL_GetTick>
 8002f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fe2c 	bl	8001b98 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e356      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x13c>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fe1c 	bl	8001b98 <HAL_GetTick>
 8002f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fe18 	bl	8001b98 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e342      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f76:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x164>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 808d 	beq.w	80030ae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f94:	4b38      	ldr	r3, [pc, #224]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f9e:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <HAL_RCC_OscConfig+0x1ba>
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	2b18      	cmp	r3, #24
 8002fae:	d137      	bne.n	8003020 <HAL_RCC_OscConfig+0x220>
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d132      	bne.n	8003020 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1d2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e314      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fd2:	4b29      	ldr	r3, [pc, #164]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 0219 	bic.w	r2, r3, #25
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	4926      	ldr	r1, [pc, #152]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fe4:	f7fe fdd8 	bl	8001b98 <HAL_GetTick>
 8002fe8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fec:	f7fe fdd4 	bl	8001b98 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e2fe      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	061b      	lsls	r3, r3, #24
 8003018:	4917      	ldr	r1, [pc, #92]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800301e:	e046      	b.n	80030ae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d029      	beq.n	800307c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 0219 	bic.w	r2, r3, #25
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4910      	ldr	r1, [pc, #64]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe fdad 	bl	8001b98 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003042:	f7fe fda9 	bl	8001b98 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e2d3      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	4902      	ldr	r1, [pc, #8]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
 8003074:	e01b      	b.n	80030ae <HAL_RCC_OscConfig+0x2ae>
 8003076:	bf00      	nop
 8003078:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307c:	4b97      	ldr	r3, [pc, #604]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a96      	ldr	r2, [pc, #600]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fd86 	bl	8001b98 <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7fe fd82 	bl	8001b98 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e2ac      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030a2:	4b8e      	ldr	r3, [pc, #568]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d06a      	beq.n	8003190 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ba:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030c4:	4b85      	ldr	r3, [pc, #532]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d007      	beq.n	80030e0 <HAL_RCC_OscConfig+0x2e0>
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b18      	cmp	r3, #24
 80030d4:	d11b      	bne.n	800310e <HAL_RCC_OscConfig+0x30e>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d116      	bne.n	800310e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2f8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b80      	cmp	r3, #128	; 0x80
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e281      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030f8:	4b78      	ldr	r3, [pc, #480]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	4975      	ldr	r1, [pc, #468]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800310c:	e040      	b.n	8003190 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d023      	beq.n	800315e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003116:	4b71      	ldr	r3, [pc, #452]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a70      	ldr	r2, [pc, #448]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 800311c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fe fd39 	bl	8001b98 <HAL_GetTick>
 8003126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800312a:	f7fe fd35 	bl	8001b98 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e25f      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800313c:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003148:	4b64      	ldr	r3, [pc, #400]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	4961      	ldr	r1, [pc, #388]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	60cb      	str	r3, [r1, #12]
 800315c:	e018      	b.n	8003190 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800315e:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5e      	ldr	r2, [pc, #376]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fd15 	bl	8001b98 <HAL_GetTick>
 800316e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003172:	f7fe fd11 	bl	8001b98 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e23b      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003184:	4b55      	ldr	r3, [pc, #340]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d036      	beq.n	800320a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d019      	beq.n	80031d8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a4:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	4a4c      	ldr	r2, [pc, #304]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe fcf2 	bl	8001b98 <HAL_GetTick>
 80031b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b8:	f7fe fcee 	bl	8001b98 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e218      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ca:	4b44      	ldr	r3, [pc, #272]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80031cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x3b8>
 80031d6:	e018      	b.n	800320a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d8:	4b40      	ldr	r3, [pc, #256]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	4a3f      	ldr	r2, [pc, #252]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe fcd8 	bl	8001b98 <HAL_GetTick>
 80031e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ec:	f7fe fcd4 	bl	8001b98 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1fe      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031fe:	4b37      	ldr	r3, [pc, #220]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d036      	beq.n	8003284 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d019      	beq.n	8003252 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800321e:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2e      	ldr	r2, [pc, #184]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003224:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003228:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800322a:	f7fe fcb5 	bl	8001b98 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003232:	f7fe fcb1 	bl	8001b98 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1db      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x432>
 8003250:	e018      	b.n	8003284 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a21      	ldr	r2, [pc, #132]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 8003258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800325c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800325e:	f7fe fc9b 	bl	8001b98 <HAL_GetTick>
 8003262:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003266:	f7fe fc97 	bl	8001b98 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1c1      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003278:	4b18      	ldr	r3, [pc, #96]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80af 	beq.w	80033f0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003292:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <HAL_RCC_OscConfig+0x4e0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <HAL_RCC_OscConfig+0x4e0>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800329e:	f7fe fc7b 	bl	8001b98 <HAL_GetTick>
 80032a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032a6:	f7fe fc77 	bl	8001b98 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b64      	cmp	r3, #100	; 0x64
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e1a1      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_OscConfig+0x4e0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10b      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4e4>
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a02      	ldr	r2, [pc, #8]	; (80032dc <HAL_RCC_OscConfig+0x4dc>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
 80032d8:	e05b      	b.n	8003392 <HAL_RCC_OscConfig+0x592>
 80032da:	bf00      	nop
 80032dc:	58024400 	.word	0x58024400
 80032e0:	58024800 	.word	0x58024800
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d112      	bne.n	8003312 <HAL_RCC_OscConfig+0x512>
 80032ec:	4b9d      	ldr	r3, [pc, #628]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a9c      	ldr	r2, [pc, #624]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
 80032f8:	4b9a      	ldr	r3, [pc, #616]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a99      	ldr	r2, [pc, #612]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80032fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	4b97      	ldr	r3, [pc, #604]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a96      	ldr	r2, [pc, #600]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800330a:	f023 0304 	bic.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	e03f      	b.n	8003392 <HAL_RCC_OscConfig+0x592>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x540>
 800331a:	4b92      	ldr	r3, [pc, #584]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a91      	ldr	r2, [pc, #580]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	4b8f      	ldr	r3, [pc, #572]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4a8e      	ldr	r2, [pc, #568]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800332c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003330:	6713      	str	r3, [r2, #112]	; 0x70
 8003332:	4b8c      	ldr	r3, [pc, #560]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a8b      	ldr	r2, [pc, #556]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
 800333e:	e028      	b.n	8003392 <HAL_RCC_OscConfig+0x592>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b85      	cmp	r3, #133	; 0x85
 8003346:	d112      	bne.n	800336e <HAL_RCC_OscConfig+0x56e>
 8003348:	4b86      	ldr	r3, [pc, #536]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a85      	ldr	r2, [pc, #532]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
 8003354:	4b83      	ldr	r3, [pc, #524]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	4a82      	ldr	r2, [pc, #520]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	6713      	str	r3, [r2, #112]	; 0x70
 8003360:	4b80      	ldr	r3, [pc, #512]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a7f      	ldr	r2, [pc, #508]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	e011      	b.n	8003392 <HAL_RCC_OscConfig+0x592>
 800336e:	4b7d      	ldr	r3, [pc, #500]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a7c      	ldr	r2, [pc, #496]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
 800337a:	4b7a      	ldr	r3, [pc, #488]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a79      	ldr	r2, [pc, #484]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b77      	ldr	r3, [pc, #476]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a76      	ldr	r2, [pc, #472]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800338c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d015      	beq.n	80033c6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe fbfd 	bl	8001b98 <HAL_GetTick>
 800339e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe fbf9 	bl	8001b98 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e121      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033b8:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ee      	beq.n	80033a2 <HAL_RCC_OscConfig+0x5a2>
 80033c4:	e014      	b.n	80033f0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fe fbe7 	bl	8001b98 <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe fbe3 	bl	8001b98 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e10b      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033e4:	4b5f      	ldr	r3, [pc, #380]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ee      	bne.n	80033ce <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8100 	beq.w	80035fa <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033fa:	4b5a      	ldr	r3, [pc, #360]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003402:	2b18      	cmp	r3, #24
 8003404:	f000 80bb 	beq.w	800357e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	2b02      	cmp	r3, #2
 800340e:	f040 8095 	bne.w	800353c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003412:	4b54      	ldr	r3, [pc, #336]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a53      	ldr	r2, [pc, #332]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fe fbbb 	bl	8001b98 <HAL_GetTick>
 8003422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fe fbb7 	bl	8001b98 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e0e1      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003438:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003444:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003448:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_OscConfig+0x768>)
 800344a:	4013      	ands	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	430a      	orrs	r2, r1
 8003458:	4942      	ldr	r1, [pc, #264]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800345a:	4313      	orrs	r3, r2
 800345c:	628b      	str	r3, [r1, #40]	; 0x28
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	3b01      	subs	r3, #1
 8003464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	3b01      	subs	r3, #1
 800346e:	025b      	lsls	r3, r3, #9
 8003470:	b29b      	uxth	r3, r3
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	3b01      	subs	r3, #1
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	3b01      	subs	r3, #1
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800348e:	4935      	ldr	r1, [pc, #212]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003490:	4313      	orrs	r3, r2
 8003492:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003494:	4b33      	ldr	r3, [pc, #204]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	4a32      	ldr	r2, [pc, #200]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034a0:	4b30      	ldr	r3, [pc, #192]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a4:	4b31      	ldr	r3, [pc, #196]	; (800356c <HAL_RCC_OscConfig+0x76c>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ac:	00d2      	lsls	r2, r2, #3
 80034ae:	492d      	ldr	r1, [pc, #180]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	f023 020c 	bic.w	r2, r3, #12
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	4928      	ldr	r1, [pc, #160]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034c6:	4b27      	ldr	r3, [pc, #156]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	f023 0202 	bic.w	r2, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	4924      	ldr	r1, [pc, #144]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034d8:	4b22      	ldr	r3, [pc, #136]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	4a21      	ldr	r2, [pc, #132]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e4:	4b1f      	ldr	r3, [pc, #124]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034f0:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4a18      	ldr	r2, [pc, #96]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003508:	4b16      	ldr	r3, [pc, #88]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800350e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe fb40 	bl	8001b98 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe fb3c 	bl	8001b98 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e066      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x71c>
 800353a:	e05e      	b.n	80035fa <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a08      	ldr	r2, [pc, #32]	; (8003564 <HAL_RCC_OscConfig+0x764>)
 8003542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe fb26 	bl	8001b98 <HAL_GetTick>
 800354c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800354e:	e00f      	b.n	8003570 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003550:	f7fe fb22 	bl	8001b98 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d908      	bls.n	8003570 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e04c      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
 8003562:	bf00      	nop
 8003564:	58024400 	.word	0x58024400
 8003568:	fffffc0c 	.word	0xfffffc0c
 800356c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_OscConfig+0x804>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e9      	bne.n	8003550 <HAL_RCC_OscConfig+0x750>
 800357c:	e03d      	b.n	80035fa <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800357e:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_RCC_OscConfig+0x804>)
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003584:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <HAL_RCC_OscConfig+0x804>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b01      	cmp	r3, #1
 8003590:	d031      	beq.n	80035f6 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0203 	and.w	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d12a      	bne.n	80035f6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d122      	bne.n	80035f6 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d11a      	bne.n	80035f6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d111      	bne.n	80035f6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d108      	bne.n	80035f6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0e1b      	lsrs	r3, r3, #24
 80035e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3730      	adds	r7, #48	; 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	58024400 	.word	0x58024400

08003608 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e19c      	b.n	8003956 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b8a      	ldr	r3, [pc, #552]	; (8003848 <HAL_RCC_ClockConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d910      	bls.n	800364c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b87      	ldr	r3, [pc, #540]	; (8003848 <HAL_RCC_ClockConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 020f 	bic.w	r2, r3, #15
 8003632:	4985      	ldr	r1, [pc, #532]	; (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b83      	ldr	r3, [pc, #524]	; (8003848 <HAL_RCC_ClockConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e184      	b.n	8003956 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d010      	beq.n	800367a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003664:	429a      	cmp	r2, r3
 8003666:	d908      	bls.n	800367a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003668:	4b78      	ldr	r3, [pc, #480]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	4975      	ldr	r1, [pc, #468]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 8003676:	4313      	orrs	r3, r2
 8003678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d010      	beq.n	80036a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	4b70      	ldr	r3, [pc, #448]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003692:	429a      	cmp	r2, r3
 8003694:	d908      	bls.n	80036a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003696:	4b6d      	ldr	r3, [pc, #436]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	496a      	ldr	r1, [pc, #424]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d010      	beq.n	80036d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	4b64      	ldr	r3, [pc, #400]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d908      	bls.n	80036d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036c4:	4b61      	ldr	r3, [pc, #388]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	495e      	ldr	r1, [pc, #376]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d010      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	4b59      	ldr	r3, [pc, #356]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d908      	bls.n	8003704 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036f2:	4b56      	ldr	r3, [pc, #344]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4953      	ldr	r1, [pc, #332]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 8003700:	4313      	orrs	r3, r2
 8003702:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	4b4d      	ldr	r3, [pc, #308]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	429a      	cmp	r2, r3
 800371e:	d908      	bls.n	8003732 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f023 020f 	bic.w	r2, r3, #15
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4947      	ldr	r1, [pc, #284]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 800372e:	4313      	orrs	r3, r2
 8003730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d055      	beq.n	80037ea <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800373e:	4b43      	ldr	r3, [pc, #268]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	4940      	ldr	r1, [pc, #256]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 800374c:	4313      	orrs	r3, r2
 800374e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d107      	bne.n	8003768 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003758:	4b3c      	ldr	r3, [pc, #240]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d121      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0f6      	b.n	8003956 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d107      	bne.n	8003780 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d115      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0ea      	b.n	8003956 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003788:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0de      	b.n	8003956 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0d6      	b.n	8003956 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a8:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f023 0207 	bic.w	r2, r3, #7
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4925      	ldr	r1, [pc, #148]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7fe f9ed 	bl	8001b98 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c2:	f7fe f9e9 	bl	8001b98 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0be      	b.n	8003956 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d8:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d1eb      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	429a      	cmp	r2, r3
 8003804:	d208      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f023 020f 	bic.w	r2, r3, #15
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	490e      	ldr	r1, [pc, #56]	; (800384c <HAL_RCC_ClockConfig+0x244>)
 8003814:	4313      	orrs	r3, r2
 8003816:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_ClockConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d214      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 020f 	bic.w	r2, r3, #15
 800382e:	4906      	ldr	r1, [pc, #24]	; (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e086      	b.n	8003956 <HAL_RCC_ClockConfig+0x34e>
 8003848:	52002000 	.word	0x52002000
 800384c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003868:	429a      	cmp	r2, r3
 800386a:	d208      	bcs.n	800387e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800386c:	4b3c      	ldr	r3, [pc, #240]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	4939      	ldr	r1, [pc, #228]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 800387a:	4313      	orrs	r3, r2
 800387c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d010      	beq.n	80038ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	4b34      	ldr	r3, [pc, #208]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003896:	429a      	cmp	r2, r3
 8003898:	d208      	bcs.n	80038ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800389a:	4b31      	ldr	r3, [pc, #196]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	492e      	ldr	r1, [pc, #184]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d010      	beq.n	80038da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d208      	bcs.n	80038da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	4922      	ldr	r1, [pc, #136]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d010      	beq.n	8003908 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d208      	bcs.n	8003908 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038f6:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	4917      	ldr	r1, [pc, #92]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 8003904:	4313      	orrs	r3, r2
 8003906:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003908:	f000 f834 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	4912      	ldr	r1, [pc, #72]	; (8003964 <HAL_RCC_ClockConfig+0x35c>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003926:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <HAL_RCC_ClockConfig+0x358>)
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <HAL_RCC_ClockConfig+0x35c>)
 8003930:	5cd3      	ldrb	r3, [r2, r3]
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
 800393c:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_RCC_ClockConfig+0x360>)
 800393e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <HAL_RCC_ClockConfig+0x364>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003946:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_RCC_ClockConfig+0x368>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe f8da 	bl	8001b04 <HAL_InitTick>
 8003950:	4603      	mov	r3, r0
 8003952:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	58024400 	.word	0x58024400
 8003964:	080077bc 	.word	0x080077bc
 8003968:	24000004 	.word	0x24000004
 800396c:	24000000 	.word	0x24000000
 8003970:	24000008 	.word	0x24000008

08003974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	; 0x24
 8003978:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800397a:	4bb3      	ldr	r3, [pc, #716]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003982:	2b18      	cmp	r3, #24
 8003984:	f200 8155 	bhi.w	8003c32 <HAL_RCC_GetSysClockFreq+0x2be>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_RCC_GetSysClockFreq+0x1c>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039f5 	.word	0x080039f5
 8003994:	08003c33 	.word	0x08003c33
 8003998:	08003c33 	.word	0x08003c33
 800399c:	08003c33 	.word	0x08003c33
 80039a0:	08003c33 	.word	0x08003c33
 80039a4:	08003c33 	.word	0x08003c33
 80039a8:	08003c33 	.word	0x08003c33
 80039ac:	08003c33 	.word	0x08003c33
 80039b0:	08003a1b 	.word	0x08003a1b
 80039b4:	08003c33 	.word	0x08003c33
 80039b8:	08003c33 	.word	0x08003c33
 80039bc:	08003c33 	.word	0x08003c33
 80039c0:	08003c33 	.word	0x08003c33
 80039c4:	08003c33 	.word	0x08003c33
 80039c8:	08003c33 	.word	0x08003c33
 80039cc:	08003c33 	.word	0x08003c33
 80039d0:	08003a21 	.word	0x08003a21
 80039d4:	08003c33 	.word	0x08003c33
 80039d8:	08003c33 	.word	0x08003c33
 80039dc:	08003c33 	.word	0x08003c33
 80039e0:	08003c33 	.word	0x08003c33
 80039e4:	08003c33 	.word	0x08003c33
 80039e8:	08003c33 	.word	0x08003c33
 80039ec:	08003c33 	.word	0x08003c33
 80039f0:	08003a27 	.word	0x08003a27
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039f4:	4b94      	ldr	r3, [pc, #592]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a00:	4b91      	ldr	r3, [pc, #580]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	08db      	lsrs	r3, r3, #3
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	4a90      	ldr	r2, [pc, #576]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a12:	e111      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a14:	4b8d      	ldr	r3, [pc, #564]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a16:	61bb      	str	r3, [r7, #24]
    break;
 8003a18:	e10e      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a1a:	4b8d      	ldr	r3, [pc, #564]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a1c:	61bb      	str	r3, [r7, #24]
    break;
 8003a1e:	e10b      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a20:	4b8c      	ldr	r3, [pc, #560]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a22:	61bb      	str	r3, [r7, #24]
    break;
 8003a24:	e108      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a26:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a30:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a3c:	4b82      	ldr	r3, [pc, #520]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a46:	4b80      	ldr	r3, [pc, #512]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	08db      	lsrs	r3, r3, #3
 8003a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80e1 	beq.w	8003c2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	f000 8083 	beq.w	8003b78 <HAL_RCC_GetSysClockFreq+0x204>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	f200 80a1 	bhi.w	8003bbc <HAL_RCC_GetSysClockFreq+0x248>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x114>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d056      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a86:	e099      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a88:	4b6f      	ldr	r3, [pc, #444]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02d      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a94:	4b6c      	ldr	r3, [pc, #432]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	08db      	lsrs	r3, r3, #3
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	4a6b      	ldr	r2, [pc, #428]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	ee07 3a90 	vmov	s15, r3
 8003aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abe:	4b62      	ldr	r3, [pc, #392]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ad2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003aee:	e087      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b02:	4b51      	ldr	r3, [pc, #324]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b16:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b32:	e065      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b46:	4b40      	ldr	r3, [pc, #256]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b5a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b76:	e043      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b82:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bba:	e021      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bce:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bfe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	0a5b      	lsrs	r3, r3, #9
 8003c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c24:	ee17 3a90 	vmov	r3, s15
 8003c28:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c2a:	e005      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
    break;
 8003c30:	e002      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c34:	61bb      	str	r3, [r7, #24]
    break;
 8003c36:	bf00      	nop
  }

  return sysclockfreq;
 8003c38:	69bb      	ldr	r3, [r7, #24]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3724      	adds	r7, #36	; 0x24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	03d09000 	.word	0x03d09000
 8003c50:	003d0900 	.word	0x003d0900
 8003c54:	007a1200 	.word	0x007a1200
 8003c58:	46000000 	.word	0x46000000
 8003c5c:	4c742400 	.word	0x4c742400
 8003c60:	4a742400 	.word	0x4a742400
 8003c64:	4af42400 	.word	0x4af42400

08003c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003c6e:	f7ff fe81 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	490f      	ldr	r1, [pc, #60]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8003c80:	5ccb      	ldrb	r3, [r1, r3]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca2:	4a07      	ldr	r2, [pc, #28]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ca4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ca6:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	080077bc 	.word	0x080077bc
 8003cc0:	24000004 	.word	0x24000004
 8003cc4:	24000000 	.word	0x24000000

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003ccc:	f7ff ffcc 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4904      	ldr	r1, [pc, #16]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	58024400 	.word	0x58024400
 8003cf0:	080077bc 	.word	0x080077bc

08003cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003cf8:	f7ff ffb6 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4904      	ldr	r1, [pc, #16]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	080077bc 	.word	0x080077bc

08003d20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d28:	2300      	movs	r3, #0
 8003d2a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03f      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d44:	d02a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d4a:	d824      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d50:	d018      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d56:	d81e      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d60:	d007      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d62:	e018      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d64:	4b9f      	ldr	r3, [pc, #636]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	4a9e      	ldr	r2, [pc, #632]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d70:	e015      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	2102      	movs	r1, #2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 f99b 	bl	80050b4 <RCCEx_PLL2_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d82:	e00c      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3324      	adds	r3, #36	; 0x24
 8003d88:	2102      	movs	r1, #2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 fa44 	bl	8005218 <RCCEx_PLL3_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d94:	e003      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
      break;
 8003d9a:	e000      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d109      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003da4:	4b8f      	ldr	r3, [pc, #572]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db0:	498c      	ldr	r1, [pc, #560]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	650b      	str	r3, [r1, #80]	; 0x50
 8003db6:	e001      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
 8003dba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d03d      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d826      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003dd0:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003ded 	.word	0x08003ded
 8003ddc:	08003dfb 	.word	0x08003dfb
 8003de0:	08003e0d 	.word	0x08003e0d
 8003de4:	08003e25 	.word	0x08003e25
 8003de8:	08003e25 	.word	0x08003e25
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dec:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4a7c      	ldr	r2, [pc, #496]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003df8:	e015      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 f957 	bl	80050b4 <RCCEx_PLL2_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e0a:	e00c      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3324      	adds	r3, #36	; 0x24
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 fa00 	bl	8005218 <RCCEx_PLL3_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e1c:	e003      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
      break;
 8003e22:	e000      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e2c:	4b6d      	ldr	r3, [pc, #436]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	f023 0207 	bic.w	r2, r3, #7
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	496a      	ldr	r1, [pc, #424]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	650b      	str	r3, [r1, #80]	; 0x50
 8003e3e:	e001      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d04a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e58:	d031      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e5e:	d82b      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e64:	d02d      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6a:	d825      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e6c:	2bc0      	cmp	r3, #192	; 0xc0
 8003e6e:	d02a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e70:	2bc0      	cmp	r3, #192	; 0xc0
 8003e72:	d821      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d016      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d81d      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d007      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003e84:	e018      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e86:	4b57      	ldr	r3, [pc, #348]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	4a56      	ldr	r2, [pc, #344]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003e92:	e019      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 f90a 	bl	80050b4 <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003ea4:	e010      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3324      	adds	r3, #36	; 0x24
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 f9b3 	bl	8005218 <RCCEx_PLL3_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003eb6:	e007      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
      break;
 8003ebc:	e004      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003ece:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	4942      	ldr	r1, [pc, #264]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	650b      	str	r3, [r1, #80]	; 0x50
 8003ee0:	e001      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d04f      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003efa:	d036      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003efc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f00:	d830      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f06:	d032      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0c:	d82a      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f12:	d02e      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003f14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f18:	d824      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d018      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f24:	d81e      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2e:	d007      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003f30:	e018      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f32:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f3e:	e019      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f8b4 	bl	80050b4 <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f50:	e010      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	; 0x24
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 f95d 	bl	8005218 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f62:	e007      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
      break;
 8003f68:	e004      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e002      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	4917      	ldr	r1, [pc, #92]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	650b      	str	r3, [r1, #80]	; 0x50
 8003f8c:	e001      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8e:	7dfb      	ldrb	r3, [r7, #23]
 8003f90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d034      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa2:	2b30      	cmp	r3, #48	; 0x30
 8003fa4:	d01c      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003fa6:	2b30      	cmp	r3, #48	; 0x30
 8003fa8:	d817      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d00c      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d813      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d018      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d10f      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003fc6:	e010      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	2102      	movs	r1, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 f870 	bl	80050b4 <RCCEx_PLL2_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003fd8:	e007      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8003fe0:	bf00      	nop
 8003fe2:	e002      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003fe4:	58024400 	.word	0x58024400
      break;
 8003fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ff0:	4b9b      	ldr	r3, [pc, #620]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffc:	4998      	ldr	r1, [pc, #608]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004002:	e001      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d047      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401c:	d030      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800401e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004022:	d82a      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004024:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004028:	d02c      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800402a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800402e:	d824      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004034:	d018      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403a:	d81e      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d007      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004046:	e018      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004048:	4b85      	ldr	r3, [pc, #532]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	4a84      	ldr	r2, [pc, #528]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800404e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004052:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004054:	e017      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3304      	adds	r3, #4
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f001 f829 	bl	80050b4 <RCCEx_PLL2_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004066:	e00e      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3324      	adds	r3, #36	; 0x24
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f001 f8d2 	bl	8005218 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004078:	e005      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
      break;
 800407e:	e002      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004080:	bf00      	nop
 8004082:	e000      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004086:	7dfb      	ldrb	r3, [r7, #23]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d109      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800408c:	4b74      	ldr	r3, [pc, #464]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800408e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004090:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004098:	4971      	ldr	r1, [pc, #452]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800409a:	4313      	orrs	r3, r2
 800409c:	650b      	str	r3, [r1, #80]	; 0x50
 800409e:	e001      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d049      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b8:	d02e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80040ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040be:	d828      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040c4:	d02a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80040c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ca:	d822      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040d0:	d026      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80040d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040d6:	d81c      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040dc:	d010      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80040de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e2:	d816      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01d      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	d111      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	2101      	movs	r1, #1
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 ffdd 	bl	80050b4 <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040fe:	e012      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3324      	adds	r3, #36	; 0x24
 8004104:	2101      	movs	r1, #1
 8004106:	4618      	mov	r0, r3
 8004108:	f001 f886 	bl	8005218 <RCCEx_PLL3_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004110:	e009      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
      break;
 8004116:	e006      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004118:	bf00      	nop
 800411a:	e004      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800411c:	bf00      	nop
 800411e:	e002      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004120:	bf00      	nop
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800412c:	4b4c      	ldr	r3, [pc, #304]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004138:	4949      	ldr	r1, [pc, #292]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800413a:	4313      	orrs	r3, r2
 800413c:	650b      	str	r3, [r1, #80]	; 0x50
 800413e:	e001      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d053      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004156:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800415a:	d034      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800415c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004160:	d82e      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004166:	d030      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800416c:	d828      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d02c      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d822      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800417a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800417e:	d028      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004180:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004184:	d81c      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800418a:	d010      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004190:	d816      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01f      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419a:	d111      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 ff86 	bl	80050b4 <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041ac:	e014      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3324      	adds	r3, #36	; 0x24
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 f82f 	bl	8005218 <RCCEx_PLL3_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041be:	e00b      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
      break;
 80041c4:	e008      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e006      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e004      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041ec:	491c      	ldr	r1, [pc, #112]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	658b      	str	r3, [r1, #88]	; 0x58
 80041f2:	e001      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d031      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800420c:	d00e      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800420e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004212:	d814      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d015      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800421c:	d10f      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800422a:	e00c      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	2101      	movs	r1, #1
 8004232:	4618      	mov	r0, r3
 8004234:	f000 ff3e 	bl	80050b4 <RCCEx_PLL2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
      break;
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	4901      	ldr	r1, [pc, #4]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800425a:	4313      	orrs	r3, r2
 800425c:	650b      	str	r3, [r1, #80]	; 0x50
 800425e:	e003      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004260:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d032      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004278:	2b03      	cmp	r3, #3
 800427a:	d81b      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800427c:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	080042bb 	.word	0x080042bb
 8004288:	08004295 	.word	0x08004295
 800428c:	080042a3 	.word	0x080042a3
 8004290:	080042bb 	.word	0x080042bb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4bb2      	ldr	r3, [pc, #712]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	4ab1      	ldr	r2, [pc, #708]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042a0:	e00c      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 ff03 	bl	80050b4 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042b2:	e003      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	75fb      	strb	r3, [r7, #23]
      break;
 80042b8:	e000      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80042ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042c2:	4ba7      	ldr	r3, [pc, #668]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	49a4      	ldr	r1, [pc, #656]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042d4:	e001      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 8086 	beq.w	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e8:	4b9e      	ldr	r3, [pc, #632]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a9d      	ldr	r2, [pc, #628]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042f4:	f7fd fc50 	bl	8001b98 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042fa:	e009      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fc:	f7fd fc4c 	bl	8001b98 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	; 0x64
 8004308:	d902      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	75fb      	strb	r3, [r7, #23]
        break;
 800430e:	e005      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004310:	4b94      	ldr	r3, [pc, #592]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ef      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d166      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004322:	4b8f      	ldr	r3, [pc, #572]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800432c:	4053      	eors	r3, r2
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	2b00      	cmp	r3, #0
 8004334:	d013      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004336:	4b8a      	ldr	r3, [pc, #552]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004340:	4b87      	ldr	r3, [pc, #540]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	4a86      	ldr	r2, [pc, #536]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800434c:	4b84      	ldr	r3, [pc, #528]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	4a83      	ldr	r2, [pc, #524]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004356:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004358:	4a81      	ldr	r2, [pc, #516]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004368:	d115      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436a:	f7fd fc15 	bl	8001b98 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004370:	e00b      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7fd fc11 	bl	8001b98 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d902      	bls.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	75fb      	strb	r3, [r7, #23]
            break;
 8004388:	e005      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800438a:	4b75      	ldr	r3, [pc, #468]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ed      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d126      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043aa:	d10d      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80043ac:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ba:	0919      	lsrs	r1, r3, #4
 80043bc:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043be:	400b      	ands	r3, r1
 80043c0:	4967      	ldr	r1, [pc, #412]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	610b      	str	r3, [r1, #16]
 80043c6:	e005      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80043c8:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	4a64      	ldr	r2, [pc, #400]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043d2:	6113      	str	r3, [r2, #16]
 80043d4:	4b62      	ldr	r3, [pc, #392]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e2:	495f      	ldr	r1, [pc, #380]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	670b      	str	r3, [r1, #112]	; 0x70
 80043e8:	e004      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
 80043ec:	75bb      	strb	r3, [r7, #22]
 80043ee:	e001      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d07f      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004406:	2b28      	cmp	r3, #40	; 0x28
 8004408:	d866      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800440a:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 800440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004410:	080044df 	.word	0x080044df
 8004414:	080044d9 	.word	0x080044d9
 8004418:	080044d9 	.word	0x080044d9
 800441c:	080044d9 	.word	0x080044d9
 8004420:	080044d9 	.word	0x080044d9
 8004424:	080044d9 	.word	0x080044d9
 8004428:	080044d9 	.word	0x080044d9
 800442c:	080044d9 	.word	0x080044d9
 8004430:	080044b5 	.word	0x080044b5
 8004434:	080044d9 	.word	0x080044d9
 8004438:	080044d9 	.word	0x080044d9
 800443c:	080044d9 	.word	0x080044d9
 8004440:	080044d9 	.word	0x080044d9
 8004444:	080044d9 	.word	0x080044d9
 8004448:	080044d9 	.word	0x080044d9
 800444c:	080044d9 	.word	0x080044d9
 8004450:	080044c7 	.word	0x080044c7
 8004454:	080044d9 	.word	0x080044d9
 8004458:	080044d9 	.word	0x080044d9
 800445c:	080044d9 	.word	0x080044d9
 8004460:	080044d9 	.word	0x080044d9
 8004464:	080044d9 	.word	0x080044d9
 8004468:	080044d9 	.word	0x080044d9
 800446c:	080044d9 	.word	0x080044d9
 8004470:	080044df 	.word	0x080044df
 8004474:	080044d9 	.word	0x080044d9
 8004478:	080044d9 	.word	0x080044d9
 800447c:	080044d9 	.word	0x080044d9
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044d9 	.word	0x080044d9
 8004488:	080044d9 	.word	0x080044d9
 800448c:	080044d9 	.word	0x080044d9
 8004490:	080044df 	.word	0x080044df
 8004494:	080044d9 	.word	0x080044d9
 8004498:	080044d9 	.word	0x080044d9
 800449c:	080044d9 	.word	0x080044d9
 80044a0:	080044d9 	.word	0x080044d9
 80044a4:	080044d9 	.word	0x080044d9
 80044a8:	080044d9 	.word	0x080044d9
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	080044df 	.word	0x080044df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	2101      	movs	r1, #1
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fdfa 	bl	80050b4 <RCCEx_PLL2_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044c4:	e00c      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3324      	adds	r3, #36	; 0x24
 80044ca:	2101      	movs	r1, #1
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fea3 	bl	8005218 <RCCEx_PLL3_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044d6:	e003      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
      break;
 80044dc:	e000      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80044de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f4:	491a      	ldr	r1, [pc, #104]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	654b      	str	r3, [r1, #84]	; 0x54
 80044fa:	e001      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d03f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004510:	2b05      	cmp	r3, #5
 8004512:	d821      	bhi.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	0800456d 	.word	0x0800456d
 8004520:	08004535 	.word	0x08004535
 8004524:	08004547 	.word	0x08004547
 8004528:	0800456d 	.word	0x0800456d
 800452c:	0800456d 	.word	0x0800456d
 8004530:	0800456d 	.word	0x0800456d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fdba 	bl	80050b4 <RCCEx_PLL2_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004544:	e013      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3324      	adds	r3, #36	; 0x24
 800454a:	2101      	movs	r1, #1
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fe63 	bl	8005218 <RCCEx_PLL3_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004556:	e00a      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
      break;
 800455c:	e007      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800455e:	bf00      	nop
 8004560:	58024400 	.word	0x58024400
 8004564:	58024800 	.word	0x58024800
 8004568:	00ffffcf 	.word	0x00ffffcf
      break;
 800456c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004574:	4b9f      	ldr	r3, [pc, #636]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f023 0207 	bic.w	r2, r3, #7
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004580:	499c      	ldr	r1, [pc, #624]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	654b      	str	r3, [r1, #84]	; 0x54
 8004586:	e001      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d039      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d820      	bhi.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045eb 	.word	0x080045eb
 80045ac:	080045c1 	.word	0x080045c1
 80045b0:	080045d3 	.word	0x080045d3
 80045b4:	080045eb 	.word	0x080045eb
 80045b8:	080045eb 	.word	0x080045eb
 80045bc:	080045eb 	.word	0x080045eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fd74 	bl	80050b4 <RCCEx_PLL2_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045d0:	e00c      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3324      	adds	r3, #36	; 0x24
 80045d6:	2101      	movs	r1, #1
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fe1d 	bl	8005218 <RCCEx_PLL3_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045e2:	e003      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	75fb      	strb	r3, [r7, #23]
      break;
 80045e8:	e000      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80045ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f2:	4b80      	ldr	r3, [pc, #512]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	f023 0207 	bic.w	r2, r3, #7
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004600:	497c      	ldr	r1, [pc, #496]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004602:	4313      	orrs	r3, r2
 8004604:	658b      	str	r3, [r1, #88]	; 0x58
 8004606:	e001      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d04b      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004622:	d02e      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004628:	d828      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462e:	d02a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d822      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800463a:	d026      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800463c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004640:	d81c      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004646:	d010      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800464c:	d816      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01d      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004656:	d111      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fd28 	bl	80050b4 <RCCEx_PLL2_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004668:	e012      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3324      	adds	r3, #36	; 0x24
 800466e:	2102      	movs	r1, #2
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fdd1 	bl	8005218 <RCCEx_PLL3_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800467a:	e009      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	75fb      	strb	r3, [r7, #23]
      break;
 8004680:	e006      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004682:	bf00      	nop
 8004684:	e004      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004686:	bf00      	nop
 8004688:	e002      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800468e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004696:	4b57      	ldr	r3, [pc, #348]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a4:	4953      	ldr	r1, [pc, #332]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	654b      	str	r3, [r1, #84]	; 0x54
 80046aa:	e001      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d04b      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046c6:	d02e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80046c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046cc:	d828      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d2:	d02a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80046d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d8:	d822      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046de:	d026      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80046e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046e4:	d81c      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ea:	d010      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f0:	d816      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01d      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	d111      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fcd6 	bl	80050b4 <RCCEx_PLL2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800470c:	e012      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3324      	adds	r3, #36	; 0x24
 8004712:	2102      	movs	r1, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fd7f 	bl	8005218 <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800471e:	e009      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
      break;
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004726:	bf00      	nop
 8004728:	e004      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800473a:	4b2e      	ldr	r3, [pc, #184]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004748:	492a      	ldr	r1, [pc, #168]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	658b      	str	r3, [r1, #88]	; 0x58
 800474e:	e001      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d04d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004766:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800476a:	d02e      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800476c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004770:	d828      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004776:	d02a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477c:	d822      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800477e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004782:	d026      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004784:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004788:	d81c      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800478a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800478e:	d010      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004794:	d816      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d01d      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479e:	d111      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fc84 	bl	80050b4 <RCCEx_PLL2_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047b0:	e012      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3324      	adds	r3, #36	; 0x24
 80047b6:	2102      	movs	r1, #2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fd2d 	bl	8005218 <RCCEx_PLL3_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047c2:	e009      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75fb      	strb	r3, [r7, #23]
      break;
 80047c8:	e006      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047ca:	bf00      	nop
 80047cc:	e004      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047ce:	bf00      	nop
 80047d0:	e002      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047ec:	4901      	ldr	r1, [pc, #4]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	658b      	str	r3, [r1, #88]	; 0x58
 80047f2:	e003      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80047f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d10a      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	2102      	movs	r1, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fcfc 	bl	8005218 <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800482a:	4b8c      	ldr	r3, [pc, #560]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	4988      	ldr	r1, [pc, #544]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004854:	d10a      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3324      	adds	r3, #36	; 0x24
 800485a:	2102      	movs	r1, #2
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fcdb 	bl	8005218 <RCCEx_PLL3_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800486c:	4b7b      	ldr	r3, [pc, #492]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800487a:	4978      	ldr	r1, [pc, #480]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d034      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004896:	d01d      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800489c:	d817      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80048a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a6:	d009      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048a8:	e011      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fbff 	bl	80050b4 <RCCEx_PLL2_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048ba:	e00c      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	2102      	movs	r1, #2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fca8 	bl	8005218 <RCCEx_PLL3_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048cc:	e003      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
      break;
 80048d2:	e000      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80048d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048dc:	4b5f      	ldr	r3, [pc, #380]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048ea:	495c      	ldr	r1, [pc, #368]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	658b      	str	r3, [r1, #88]	; 0x58
 80048f0:	e001      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d033      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004908:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800490c:	d01c      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800490e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004912:	d816      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004918:	d003      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800491a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800491e:	d007      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004920:	e00f      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004922:	4b4e      	ldr	r3, [pc, #312]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	4a4d      	ldr	r2, [pc, #308]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800492e:	e00c      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3324      	adds	r3, #36	; 0x24
 8004934:	2101      	movs	r1, #1
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fc6e 	bl	8005218 <RCCEx_PLL3_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004940:	e003      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
      break;
 8004946:	e000      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004950:	4b42      	ldr	r3, [pc, #264]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495e:	493f      	ldr	r1, [pc, #252]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	654b      	str	r3, [r1, #84]	; 0x54
 8004964:	e001      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004966:	7dfb      	ldrb	r3, [r7, #23]
 8004968:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d029      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800497e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004982:	d007      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004984:	e00f      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004986:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	4a34      	ldr	r2, [pc, #208]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800498c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004992:	e00b      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fb8a 	bl	80050b4 <RCCEx_PLL2_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049a4:	e002      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
      break;
 80049aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ac:	7dfb      	ldrb	r3, [r7, #23]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049b2:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	4927      	ldr	r1, [pc, #156]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049c4:	e001      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3324      	adds	r3, #36	; 0x24
 80049da:	2102      	movs	r1, #2
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fc1b 	bl	8005218 <RCCEx_PLL3_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d035      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a02:	d017      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a08:	d811      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0e:	d013      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a14:	d80b      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d010      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1e:	d106      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a20:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	4a0d      	ldr	r2, [pc, #52]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a2c:	e007      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
      break;
 8004a32:	e004      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a34:	bf00      	nop
 8004a36:	e002      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a38:	bf00      	nop
 8004a3a:	e000      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a52:	4902      	ldr	r1, [pc, #8]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	654b      	str	r3, [r1, #84]	; 0x54
 8004a58:	e004      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a5a:	bf00      	nop
 8004a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
 8004a62:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a70:	4b30      	ldr	r3, [pc, #192]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a7c:	492d      	ldr	r1, [pc, #180]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a8e:	4b29      	ldr	r3, [pc, #164]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9a:	4926      	ldr	r1, [pc, #152]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004aac:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	491e      	ldr	r1, [pc, #120]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aca:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ad0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ad4:	6113      	str	r3, [r2, #16]
 8004ad6:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ae0:	4914      	ldr	r1, [pc, #80]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da08      	bge.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afa:	490e      	ldr	r1, [pc, #56]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	4906      	ldr	r1, [pc, #24]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004b20:	7dbb      	ldrb	r3, [r7, #22]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	58024400 	.word	0x58024400

08004b38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004b3c:	f7ff f894 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4904      	ldr	r1, [pc, #16]	; (8004b60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	58024400 	.word	0x58024400
 8004b60:	080077bc 	.word	0x080077bc

08004b64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b089      	sub	sp, #36	; 0x24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b6c:	4ba1      	ldr	r3, [pc, #644]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b76:	4b9f      	ldr	r3, [pc, #636]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	0b1b      	lsrs	r3, r3, #12
 8004b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b82:	4b9c      	ldr	r3, [pc, #624]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b8e:	4b99      	ldr	r3, [pc, #612]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	08db      	lsrs	r3, r3, #3
 8004b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8111 	beq.w	8004dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	f000 8083 	beq.w	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f200 80a1 	bhi.w	8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d056      	beq.n	8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004bce:	e099      	b.n	8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bd0:	4b88      	ldr	r3, [pc, #544]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02d      	beq.n	8004c38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bdc:	4b85      	ldr	r3, [pc, #532]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	08db      	lsrs	r3, r3, #3
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	4a84      	ldr	r2, [pc, #528]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b7b      	ldr	r3, [pc, #492]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c36:	e087      	b.n	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c7a:	e065      	b.n	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b59      	ldr	r3, [pc, #356]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cbe:	e043      	b.n	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b48      	ldr	r3, [pc, #288]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d02:	e021      	b.n	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b37      	ldr	r3, [pc, #220]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	0a5b      	lsrs	r3, r3, #9
 8004d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6e:	ee17 2a90 	vmov	r2, s15
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d76:	4b1f      	ldr	r3, [pc, #124]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	0c1b      	lsrs	r3, r3, #16
 8004d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9c:	ee17 2a90 	vmov	r2, s15
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004da4:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	0e1b      	lsrs	r3, r3, #24
 8004daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dca:	ee17 2a90 	vmov	r2, s15
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004dd2:	e008      	b.n	8004de6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
}
 8004de6:	bf00      	nop
 8004de8:	3724      	adds	r7, #36	; 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	58024400 	.word	0x58024400
 8004df8:	03d09000 	.word	0x03d09000
 8004dfc:	46000000 	.word	0x46000000
 8004e00:	4c742400 	.word	0x4c742400
 8004e04:	4a742400 	.word	0x4a742400
 8004e08:	4af42400 	.word	0x4af42400

08004e0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	; 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e14:	4ba1      	ldr	r3, [pc, #644]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004e1e:	4b9f      	ldr	r3, [pc, #636]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	0d1b      	lsrs	r3, r3, #20
 8004e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e2a:	4b9c      	ldr	r3, [pc, #624]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e36:	4b99      	ldr	r3, [pc, #612]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	08db      	lsrs	r3, r3, #3
 8004e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8111 	beq.w	800507c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	f000 8083 	beq.w	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	f200 80a1 	bhi.w	8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d056      	beq.n	8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e76:	e099      	b.n	8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e78:	4b88      	ldr	r3, [pc, #544]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02d      	beq.n	8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e84:	4b85      	ldr	r3, [pc, #532]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	4a84      	ldr	r2, [pc, #528]	; (80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
 8004e94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	ee07 3a90 	vmov	s15, r3
 8004e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eae:	4b7b      	ldr	r3, [pc, #492]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ede:	e087      	b.n	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef2:	4b6a      	ldr	r3, [pc, #424]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f06:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f22:	e065      	b.n	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f36:	4b59      	ldr	r3, [pc, #356]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f66:	e043      	b.n	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7a:	4b48      	ldr	r3, [pc, #288]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004faa:	e021      	b.n	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbe:	4b37      	ldr	r3, [pc, #220]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004ff0:	4b2a      	ldr	r3, [pc, #168]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	0a5b      	lsrs	r3, r3, #9
 8004ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800500a:	edd7 6a07 	vldr	s13, [r7, #28]
 800500e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005016:	ee17 2a90 	vmov	r2, s15
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800501e:	4b1f      	ldr	r3, [pc, #124]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	0c1b      	lsrs	r3, r3, #16
 8005024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005028:	ee07 3a90 	vmov	s15, r3
 800502c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005038:	edd7 6a07 	vldr	s13, [r7, #28]
 800503c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005044:	ee17 2a90 	vmov	r2, s15
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	0e1b      	lsrs	r3, r3, #24
 8005052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005066:	edd7 6a07 	vldr	s13, [r7, #28]
 800506a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800506e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005072:	ee17 2a90 	vmov	r2, s15
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800507a:	e008      	b.n	800508e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	609a      	str	r2, [r3, #8]
}
 800508e:	bf00      	nop
 8005090:	3724      	adds	r7, #36	; 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
 80050a0:	03d09000 	.word	0x03d09000
 80050a4:	46000000 	.word	0x46000000
 80050a8:	4c742400 	.word	0x4c742400
 80050ac:	4a742400 	.word	0x4a742400
 80050b0:	4af42400 	.word	0x4af42400

080050b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050c2:	4b53      	ldr	r3, [pc, #332]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d101      	bne.n	80050d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e099      	b.n	8005206 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050d2:	4b4f      	ldr	r3, [pc, #316]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a4e      	ldr	r2, [pc, #312]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050de:	f7fc fd5b 	bl	8001b98 <HAL_GetTick>
 80050e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050e4:	e008      	b.n	80050f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050e6:	f7fc fd57 	bl	8001b98 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e086      	b.n	8005206 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050f8:	4b45      	ldr	r3, [pc, #276]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f0      	bne.n	80050e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005104:	4b42      	ldr	r3, [pc, #264]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	493f      	ldr	r1, [pc, #252]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	628b      	str	r3, [r1, #40]	; 0x28
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	3b01      	subs	r3, #1
 800511e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	3b01      	subs	r3, #1
 8005128:	025b      	lsls	r3, r3, #9
 800512a:	b29b      	uxth	r3, r3
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	3b01      	subs	r3, #1
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	3b01      	subs	r3, #1
 8005142:	061b      	lsls	r3, r3, #24
 8005144:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005148:	4931      	ldr	r1, [pc, #196]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 800514a:	4313      	orrs	r3, r2
 800514c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800514e:	4b30      	ldr	r3, [pc, #192]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	492d      	ldr	r1, [pc, #180]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 800515c:	4313      	orrs	r3, r2
 800515e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005160:	4b2b      	ldr	r3, [pc, #172]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	f023 0220 	bic.w	r2, r3, #32
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	4928      	ldr	r1, [pc, #160]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 800516e:	4313      	orrs	r3, r2
 8005170:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005172:	4b27      	ldr	r3, [pc, #156]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	4a26      	ldr	r2, [pc, #152]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 8005178:	f023 0310 	bic.w	r3, r3, #16
 800517c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 8005180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005182:	4b24      	ldr	r3, [pc, #144]	; (8005214 <RCCEx_PLL2_Config+0x160>)
 8005184:	4013      	ands	r3, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	69d2      	ldr	r2, [r2, #28]
 800518a:	00d2      	lsls	r2, r2, #3
 800518c:	4920      	ldr	r1, [pc, #128]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005192:	4b1f      	ldr	r3, [pc, #124]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 8005198:	f043 0310 	orr.w	r3, r3, #16
 800519c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4a19      	ldr	r2, [pc, #100]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80051aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051b0:	e00f      	b.n	80051d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d106      	bne.n	80051c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051b8:	4b15      	ldr	r3, [pc, #84]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	4a14      	ldr	r2, [pc, #80]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80051be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c4:	e005      	b.n	80051d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	4a11      	ldr	r2, [pc, #68]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80051cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051d2:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a0e      	ldr	r2, [pc, #56]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80051d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051de:	f7fc fcdb 	bl	8001b98 <HAL_GetTick>
 80051e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051e4:	e008      	b.n	80051f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051e6:	f7fc fcd7 	bl	8001b98 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e006      	b.n	8005206 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <RCCEx_PLL2_Config+0x15c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	58024400 	.word	0x58024400
 8005214:	ffff0007 	.word	0xffff0007

08005218 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005226:	4b53      	ldr	r3, [pc, #332]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b03      	cmp	r3, #3
 8005230:	d101      	bne.n	8005236 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e099      	b.n	800536a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005236:	4b4f      	ldr	r3, [pc, #316]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a4e      	ldr	r2, [pc, #312]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005242:	f7fc fca9 	bl	8001b98 <HAL_GetTick>
 8005246:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005248:	e008      	b.n	800525c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800524a:	f7fc fca5 	bl	8001b98 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e086      	b.n	800536a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800525c:	4b45      	ldr	r3, [pc, #276]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005268:	4b42      	ldr	r3, [pc, #264]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	051b      	lsls	r3, r3, #20
 8005276:	493f      	ldr	r1, [pc, #252]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	628b      	str	r3, [r1, #40]	; 0x28
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	3b01      	subs	r3, #1
 8005282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	3b01      	subs	r3, #1
 800528c:	025b      	lsls	r3, r3, #9
 800528e:	b29b      	uxth	r3, r3
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	3b01      	subs	r3, #1
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	061b      	lsls	r3, r3, #24
 80052a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052ac:	4931      	ldr	r1, [pc, #196]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052b2:	4b30      	ldr	r3, [pc, #192]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	492d      	ldr	r1, [pc, #180]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	4928      	ldr	r1, [pc, #160]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052d6:	4b27      	ldr	r3, [pc, #156]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	4a26      	ldr	r2, [pc, #152]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052e2:	4b24      	ldr	r3, [pc, #144]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e6:	4b24      	ldr	r3, [pc, #144]	; (8005378 <RCCEx_PLL3_Config+0x160>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	69d2      	ldr	r2, [r2, #28]
 80052ee:	00d2      	lsls	r2, r2, #3
 80052f0:	4920      	ldr	r1, [pc, #128]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052f6:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005308:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a19      	ldr	r2, [pc, #100]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 800530e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005314:	e00f      	b.n	8005336 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d106      	bne.n	800532a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800531c:	4b15      	ldr	r3, [pc, #84]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	4a14      	ldr	r2, [pc, #80]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 8005322:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005328:	e005      	b.n	8005336 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 8005330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005334:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a0e      	ldr	r2, [pc, #56]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005342:	f7fc fc29 	bl	8001b98 <HAL_GetTick>
 8005346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005348:	e008      	b.n	800535c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800534a:	f7fc fc25 	bl	8001b98 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <RCCEx_PLL3_Config+0x15c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	58024400 	.word	0x58024400
 8005378:	ffff0007 	.word	0xffff0007

0800537c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e042      	b.n	8005414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005394:	2b00      	cmp	r3, #0
 8005396:	d106      	bne.n	80053a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fc f97b 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2224      	movs	r2, #36	; 0x24
 80053aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f82c 	bl	800541c <UART_SetConfig>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e022      	b.n	8005414 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fe8c 	bl	80060f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 ff13 	bl	8006238 <UART_CheckIdleState>
 8005412:	4603      	mov	r3, r0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800541c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005420:	b092      	sub	sp, #72	; 0x48
 8005422:	af00      	add	r7, sp, #0
 8005424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	431a      	orrs	r2, r3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	431a      	orrs	r2, r3
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	4313      	orrs	r3, r2
 8005442:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4bbe      	ldr	r3, [pc, #760]	; (8005744 <UART_SetConfig+0x328>)
 800544c:	4013      	ands	r3, r2
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005454:	430b      	orrs	r3, r1
 8005456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4ab3      	ldr	r2, [pc, #716]	; (8005748 <UART_SetConfig+0x32c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005484:	4313      	orrs	r3, r2
 8005486:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	4baf      	ldr	r3, [pc, #700]	; (800574c <UART_SetConfig+0x330>)
 8005490:	4013      	ands	r3, r2
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005498:	430b      	orrs	r3, r1
 800549a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	f023 010f 	bic.w	r1, r3, #15
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4aa6      	ldr	r2, [pc, #664]	; (8005750 <UART_SetConfig+0x334>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d177      	bne.n	80055ac <UART_SetConfig+0x190>
 80054bc:	4ba5      	ldr	r3, [pc, #660]	; (8005754 <UART_SetConfig+0x338>)
 80054be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054c4:	2b28      	cmp	r3, #40	; 0x28
 80054c6:	d86d      	bhi.n	80055a4 <UART_SetConfig+0x188>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <UART_SetConfig+0xb4>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	08005575 	.word	0x08005575
 80054d4:	080055a5 	.word	0x080055a5
 80054d8:	080055a5 	.word	0x080055a5
 80054dc:	080055a5 	.word	0x080055a5
 80054e0:	080055a5 	.word	0x080055a5
 80054e4:	080055a5 	.word	0x080055a5
 80054e8:	080055a5 	.word	0x080055a5
 80054ec:	080055a5 	.word	0x080055a5
 80054f0:	0800557d 	.word	0x0800557d
 80054f4:	080055a5 	.word	0x080055a5
 80054f8:	080055a5 	.word	0x080055a5
 80054fc:	080055a5 	.word	0x080055a5
 8005500:	080055a5 	.word	0x080055a5
 8005504:	080055a5 	.word	0x080055a5
 8005508:	080055a5 	.word	0x080055a5
 800550c:	080055a5 	.word	0x080055a5
 8005510:	08005585 	.word	0x08005585
 8005514:	080055a5 	.word	0x080055a5
 8005518:	080055a5 	.word	0x080055a5
 800551c:	080055a5 	.word	0x080055a5
 8005520:	080055a5 	.word	0x080055a5
 8005524:	080055a5 	.word	0x080055a5
 8005528:	080055a5 	.word	0x080055a5
 800552c:	080055a5 	.word	0x080055a5
 8005530:	0800558d 	.word	0x0800558d
 8005534:	080055a5 	.word	0x080055a5
 8005538:	080055a5 	.word	0x080055a5
 800553c:	080055a5 	.word	0x080055a5
 8005540:	080055a5 	.word	0x080055a5
 8005544:	080055a5 	.word	0x080055a5
 8005548:	080055a5 	.word	0x080055a5
 800554c:	080055a5 	.word	0x080055a5
 8005550:	08005595 	.word	0x08005595
 8005554:	080055a5 	.word	0x080055a5
 8005558:	080055a5 	.word	0x080055a5
 800555c:	080055a5 	.word	0x080055a5
 8005560:	080055a5 	.word	0x080055a5
 8005564:	080055a5 	.word	0x080055a5
 8005568:	080055a5 	.word	0x080055a5
 800556c:	080055a5 	.word	0x080055a5
 8005570:	0800559d 	.word	0x0800559d
 8005574:	2301      	movs	r3, #1
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e326      	b.n	8005bca <UART_SetConfig+0x7ae>
 800557c:	2304      	movs	r3, #4
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e322      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005584:	2308      	movs	r3, #8
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e31e      	b.n	8005bca <UART_SetConfig+0x7ae>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e31a      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005594:	2320      	movs	r3, #32
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e316      	b.n	8005bca <UART_SetConfig+0x7ae>
 800559c:	2340      	movs	r3, #64	; 0x40
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e312      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e30e      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a69      	ldr	r2, [pc, #420]	; (8005758 <UART_SetConfig+0x33c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d130      	bne.n	8005618 <UART_SetConfig+0x1fc>
 80055b6:	4b67      	ldr	r3, [pc, #412]	; (8005754 <UART_SetConfig+0x338>)
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d826      	bhi.n	8005610 <UART_SetConfig+0x1f4>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <UART_SetConfig+0x1ac>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055e1 	.word	0x080055e1
 80055cc:	080055e9 	.word	0x080055e9
 80055d0:	080055f1 	.word	0x080055f1
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005609 	.word	0x08005609
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e6:	e2f0      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055e8:	2304      	movs	r3, #4
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e2ec      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055f0:	2308      	movs	r3, #8
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e2e8      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055f8:	2310      	movs	r3, #16
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e2e4      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005600:	2320      	movs	r3, #32
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e2e0      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e2dc      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005616:	e2d8      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a4f      	ldr	r2, [pc, #316]	; (800575c <UART_SetConfig+0x340>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d130      	bne.n	8005684 <UART_SetConfig+0x268>
 8005622:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <UART_SetConfig+0x338>)
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b05      	cmp	r3, #5
 800562c:	d826      	bhi.n	800567c <UART_SetConfig+0x260>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0x218>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	0800564d 	.word	0x0800564d
 8005638:	08005655 	.word	0x08005655
 800563c:	0800565d 	.word	0x0800565d
 8005640:	08005665 	.word	0x08005665
 8005644:	0800566d 	.word	0x0800566d
 8005648:	08005675 	.word	0x08005675
 800564c:	2300      	movs	r3, #0
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005652:	e2ba      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005654:	2304      	movs	r3, #4
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565a:	e2b6      	b.n	8005bca <UART_SetConfig+0x7ae>
 800565c:	2308      	movs	r3, #8
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005662:	e2b2      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005664:	2310      	movs	r3, #16
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e2ae      	b.n	8005bca <UART_SetConfig+0x7ae>
 800566c:	2320      	movs	r3, #32
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e2aa      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005674:	2340      	movs	r3, #64	; 0x40
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567a:	e2a6      	b.n	8005bca <UART_SetConfig+0x7ae>
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005682:	e2a2      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a35      	ldr	r2, [pc, #212]	; (8005760 <UART_SetConfig+0x344>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d130      	bne.n	80056f0 <UART_SetConfig+0x2d4>
 800568e:	4b31      	ldr	r3, [pc, #196]	; (8005754 <UART_SetConfig+0x338>)
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b05      	cmp	r3, #5
 8005698:	d826      	bhi.n	80056e8 <UART_SetConfig+0x2cc>
 800569a:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <UART_SetConfig+0x284>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056b9 	.word	0x080056b9
 80056a4:	080056c1 	.word	0x080056c1
 80056a8:	080056c9 	.word	0x080056c9
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056be:	e284      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056c0:	2304      	movs	r3, #4
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e280      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056c8:	2308      	movs	r3, #8
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e27c      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056d0:	2310      	movs	r3, #16
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e278      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056d8:	2320      	movs	r3, #32
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e274      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056e0:	2340      	movs	r3, #64	; 0x40
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e270      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ee:	e26c      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <UART_SetConfig+0x348>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d142      	bne.n	8005780 <UART_SetConfig+0x364>
 80056fa:	4b16      	ldr	r3, [pc, #88]	; (8005754 <UART_SetConfig+0x338>)
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	2b05      	cmp	r3, #5
 8005704:	d838      	bhi.n	8005778 <UART_SetConfig+0x35c>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <UART_SetConfig+0x2f0>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005725 	.word	0x08005725
 8005710:	0800572d 	.word	0x0800572d
 8005714:	08005735 	.word	0x08005735
 8005718:	0800573d 	.word	0x0800573d
 800571c:	08005769 	.word	0x08005769
 8005720:	08005771 	.word	0x08005771
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e24e      	b.n	8005bca <UART_SetConfig+0x7ae>
 800572c:	2304      	movs	r3, #4
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e24a      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005734:	2308      	movs	r3, #8
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e246      	b.n	8005bca <UART_SetConfig+0x7ae>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005742:	e242      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005744:	cfff69f3 	.word	0xcfff69f3
 8005748:	58000c00 	.word	0x58000c00
 800574c:	11fff4ff 	.word	0x11fff4ff
 8005750:	40011000 	.word	0x40011000
 8005754:	58024400 	.word	0x58024400
 8005758:	40004400 	.word	0x40004400
 800575c:	40004800 	.word	0x40004800
 8005760:	40004c00 	.word	0x40004c00
 8005764:	40005000 	.word	0x40005000
 8005768:	2320      	movs	r3, #32
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576e:	e22c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005770:	2340      	movs	r3, #64	; 0x40
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005776:	e228      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577e:	e224      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4ab1      	ldr	r2, [pc, #708]	; (8005a4c <UART_SetConfig+0x630>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d176      	bne.n	8005878 <UART_SetConfig+0x45c>
 800578a:	4bb1      	ldr	r3, [pc, #708]	; (8005a50 <UART_SetConfig+0x634>)
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005792:	2b28      	cmp	r3, #40	; 0x28
 8005794:	d86c      	bhi.n	8005870 <UART_SetConfig+0x454>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x380>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	08005841 	.word	0x08005841
 80057a0:	08005871 	.word	0x08005871
 80057a4:	08005871 	.word	0x08005871
 80057a8:	08005871 	.word	0x08005871
 80057ac:	08005871 	.word	0x08005871
 80057b0:	08005871 	.word	0x08005871
 80057b4:	08005871 	.word	0x08005871
 80057b8:	08005871 	.word	0x08005871
 80057bc:	08005849 	.word	0x08005849
 80057c0:	08005871 	.word	0x08005871
 80057c4:	08005871 	.word	0x08005871
 80057c8:	08005871 	.word	0x08005871
 80057cc:	08005871 	.word	0x08005871
 80057d0:	08005871 	.word	0x08005871
 80057d4:	08005871 	.word	0x08005871
 80057d8:	08005871 	.word	0x08005871
 80057dc:	08005851 	.word	0x08005851
 80057e0:	08005871 	.word	0x08005871
 80057e4:	08005871 	.word	0x08005871
 80057e8:	08005871 	.word	0x08005871
 80057ec:	08005871 	.word	0x08005871
 80057f0:	08005871 	.word	0x08005871
 80057f4:	08005871 	.word	0x08005871
 80057f8:	08005871 	.word	0x08005871
 80057fc:	08005859 	.word	0x08005859
 8005800:	08005871 	.word	0x08005871
 8005804:	08005871 	.word	0x08005871
 8005808:	08005871 	.word	0x08005871
 800580c:	08005871 	.word	0x08005871
 8005810:	08005871 	.word	0x08005871
 8005814:	08005871 	.word	0x08005871
 8005818:	08005871 	.word	0x08005871
 800581c:	08005861 	.word	0x08005861
 8005820:	08005871 	.word	0x08005871
 8005824:	08005871 	.word	0x08005871
 8005828:	08005871 	.word	0x08005871
 800582c:	08005871 	.word	0x08005871
 8005830:	08005871 	.word	0x08005871
 8005834:	08005871 	.word	0x08005871
 8005838:	08005871 	.word	0x08005871
 800583c:	08005869 	.word	0x08005869
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005846:	e1c0      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	e1bc      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e1b8      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e1b4      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005860:	2320      	movs	r3, #32
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005866:	e1b0      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005868:	2340      	movs	r3, #64	; 0x40
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e1ac      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005876:	e1a8      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a75      	ldr	r2, [pc, #468]	; (8005a54 <UART_SetConfig+0x638>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d130      	bne.n	80058e4 <UART_SetConfig+0x4c8>
 8005882:	4b73      	ldr	r3, [pc, #460]	; (8005a50 <UART_SetConfig+0x634>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b05      	cmp	r3, #5
 800588c:	d826      	bhi.n	80058dc <UART_SetConfig+0x4c0>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <UART_SetConfig+0x478>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058ad 	.word	0x080058ad
 8005898:	080058b5 	.word	0x080058b5
 800589c:	080058bd 	.word	0x080058bd
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058cd 	.word	0x080058cd
 80058a8:	080058d5 	.word	0x080058d5
 80058ac:	2300      	movs	r3, #0
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b2:	e18a      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058b4:	2304      	movs	r3, #4
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ba:	e186      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058bc:	2308      	movs	r3, #8
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e182      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ca:	e17e      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058cc:	2320      	movs	r3, #32
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d2:	e17a      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058d4:	2340      	movs	r3, #64	; 0x40
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058da:	e176      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e2:	e172      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a5b      	ldr	r2, [pc, #364]	; (8005a58 <UART_SetConfig+0x63c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d130      	bne.n	8005950 <UART_SetConfig+0x534>
 80058ee:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <UART_SetConfig+0x634>)
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d826      	bhi.n	8005948 <UART_SetConfig+0x52c>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x4e4>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005919 	.word	0x08005919
 8005904:	08005921 	.word	0x08005921
 8005908:	08005929 	.word	0x08005929
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591e:	e154      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005926:	e150      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e14c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e148      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005938:	2320      	movs	r3, #32
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593e:	e144      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005940:	2340      	movs	r3, #64	; 0x40
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005946:	e140      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594e:	e13c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a41      	ldr	r2, [pc, #260]	; (8005a5c <UART_SetConfig+0x640>)
 8005956:	4293      	cmp	r3, r2
 8005958:	f040 8082 	bne.w	8005a60 <UART_SetConfig+0x644>
 800595c:	4b3c      	ldr	r3, [pc, #240]	; (8005a50 <UART_SetConfig+0x634>)
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005964:	2b28      	cmp	r3, #40	; 0x28
 8005966:	d86d      	bhi.n	8005a44 <UART_SetConfig+0x628>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <UART_SetConfig+0x554>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005a15 	.word	0x08005a15
 8005974:	08005a45 	.word	0x08005a45
 8005978:	08005a45 	.word	0x08005a45
 800597c:	08005a45 	.word	0x08005a45
 8005980:	08005a45 	.word	0x08005a45
 8005984:	08005a45 	.word	0x08005a45
 8005988:	08005a45 	.word	0x08005a45
 800598c:	08005a45 	.word	0x08005a45
 8005990:	08005a1d 	.word	0x08005a1d
 8005994:	08005a45 	.word	0x08005a45
 8005998:	08005a45 	.word	0x08005a45
 800599c:	08005a45 	.word	0x08005a45
 80059a0:	08005a45 	.word	0x08005a45
 80059a4:	08005a45 	.word	0x08005a45
 80059a8:	08005a45 	.word	0x08005a45
 80059ac:	08005a45 	.word	0x08005a45
 80059b0:	08005a25 	.word	0x08005a25
 80059b4:	08005a45 	.word	0x08005a45
 80059b8:	08005a45 	.word	0x08005a45
 80059bc:	08005a45 	.word	0x08005a45
 80059c0:	08005a45 	.word	0x08005a45
 80059c4:	08005a45 	.word	0x08005a45
 80059c8:	08005a45 	.word	0x08005a45
 80059cc:	08005a45 	.word	0x08005a45
 80059d0:	08005a2d 	.word	0x08005a2d
 80059d4:	08005a45 	.word	0x08005a45
 80059d8:	08005a45 	.word	0x08005a45
 80059dc:	08005a45 	.word	0x08005a45
 80059e0:	08005a45 	.word	0x08005a45
 80059e4:	08005a45 	.word	0x08005a45
 80059e8:	08005a45 	.word	0x08005a45
 80059ec:	08005a45 	.word	0x08005a45
 80059f0:	08005a35 	.word	0x08005a35
 80059f4:	08005a45 	.word	0x08005a45
 80059f8:	08005a45 	.word	0x08005a45
 80059fc:	08005a45 	.word	0x08005a45
 8005a00:	08005a45 	.word	0x08005a45
 8005a04:	08005a45 	.word	0x08005a45
 8005a08:	08005a45 	.word	0x08005a45
 8005a0c:	08005a45 	.word	0x08005a45
 8005a10:	08005a3d 	.word	0x08005a3d
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e0d6      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e0d2      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a24:	2308      	movs	r3, #8
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2a:	e0ce      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a32:	e0ca      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a34:	2320      	movs	r3, #32
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3a:	e0c6      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a3c:	2340      	movs	r3, #64	; 0x40
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e0c2      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4a:	e0be      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a4c:	40011400 	.word	0x40011400
 8005a50:	58024400 	.word	0x58024400
 8005a54:	40007800 	.word	0x40007800
 8005a58:	40007c00 	.word	0x40007c00
 8005a5c:	40011800 	.word	0x40011800
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4aad      	ldr	r2, [pc, #692]	; (8005d1c <UART_SetConfig+0x900>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d176      	bne.n	8005b58 <UART_SetConfig+0x73c>
 8005a6a:	4bad      	ldr	r3, [pc, #692]	; (8005d20 <UART_SetConfig+0x904>)
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a72:	2b28      	cmp	r3, #40	; 0x28
 8005a74:	d86c      	bhi.n	8005b50 <UART_SetConfig+0x734>
 8005a76:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <UART_SetConfig+0x660>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005b21 	.word	0x08005b21
 8005a80:	08005b51 	.word	0x08005b51
 8005a84:	08005b51 	.word	0x08005b51
 8005a88:	08005b51 	.word	0x08005b51
 8005a8c:	08005b51 	.word	0x08005b51
 8005a90:	08005b51 	.word	0x08005b51
 8005a94:	08005b51 	.word	0x08005b51
 8005a98:	08005b51 	.word	0x08005b51
 8005a9c:	08005b29 	.word	0x08005b29
 8005aa0:	08005b51 	.word	0x08005b51
 8005aa4:	08005b51 	.word	0x08005b51
 8005aa8:	08005b51 	.word	0x08005b51
 8005aac:	08005b51 	.word	0x08005b51
 8005ab0:	08005b51 	.word	0x08005b51
 8005ab4:	08005b51 	.word	0x08005b51
 8005ab8:	08005b51 	.word	0x08005b51
 8005abc:	08005b31 	.word	0x08005b31
 8005ac0:	08005b51 	.word	0x08005b51
 8005ac4:	08005b51 	.word	0x08005b51
 8005ac8:	08005b51 	.word	0x08005b51
 8005acc:	08005b51 	.word	0x08005b51
 8005ad0:	08005b51 	.word	0x08005b51
 8005ad4:	08005b51 	.word	0x08005b51
 8005ad8:	08005b51 	.word	0x08005b51
 8005adc:	08005b39 	.word	0x08005b39
 8005ae0:	08005b51 	.word	0x08005b51
 8005ae4:	08005b51 	.word	0x08005b51
 8005ae8:	08005b51 	.word	0x08005b51
 8005aec:	08005b51 	.word	0x08005b51
 8005af0:	08005b51 	.word	0x08005b51
 8005af4:	08005b51 	.word	0x08005b51
 8005af8:	08005b51 	.word	0x08005b51
 8005afc:	08005b41 	.word	0x08005b41
 8005b00:	08005b51 	.word	0x08005b51
 8005b04:	08005b51 	.word	0x08005b51
 8005b08:	08005b51 	.word	0x08005b51
 8005b0c:	08005b51 	.word	0x08005b51
 8005b10:	08005b51 	.word	0x08005b51
 8005b14:	08005b51 	.word	0x08005b51
 8005b18:	08005b51 	.word	0x08005b51
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e050      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2e:	e04c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b30:	2308      	movs	r3, #8
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b36:	e048      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3e:	e044      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b40:	2320      	movs	r3, #32
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b46:	e040      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4e:	e03c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b56:	e038      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a71      	ldr	r2, [pc, #452]	; (8005d24 <UART_SetConfig+0x908>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d130      	bne.n	8005bc4 <UART_SetConfig+0x7a8>
 8005b62:	4b6f      	ldr	r3, [pc, #444]	; (8005d20 <UART_SetConfig+0x904>)
 8005b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	d826      	bhi.n	8005bbc <UART_SetConfig+0x7a0>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0x758>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b8d 	.word	0x08005b8d
 8005b78:	08005b95 	.word	0x08005b95
 8005b7c:	08005b9d 	.word	0x08005b9d
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bad 	.word	0x08005bad
 8005b88:	08005bb5 	.word	0x08005bb5
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e01a      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b94:	2304      	movs	r3, #4
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e016      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba2:	e012      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005baa:	e00e      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005bac:	2320      	movs	r3, #32
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb2:	e00a      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005bb4:	2340      	movs	r3, #64	; 0x40
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bba:	e006      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc2:	e002      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a55      	ldr	r2, [pc, #340]	; (8005d24 <UART_SetConfig+0x908>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	f040 80f8 	bne.w	8005dc6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	dc46      	bgt.n	8005c6c <UART_SetConfig+0x850>
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	db75      	blt.n	8005cce <UART_SetConfig+0x8b2>
 8005be2:	3b02      	subs	r3, #2
 8005be4:	2b1e      	cmp	r3, #30
 8005be6:	d872      	bhi.n	8005cce <UART_SetConfig+0x8b2>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x7d4>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c73 	.word	0x08005c73
 8005bf4:	08005ccf 	.word	0x08005ccf
 8005bf8:	08005c7b 	.word	0x08005c7b
 8005bfc:	08005ccf 	.word	0x08005ccf
 8005c00:	08005ccf 	.word	0x08005ccf
 8005c04:	08005ccf 	.word	0x08005ccf
 8005c08:	08005c8b 	.word	0x08005c8b
 8005c0c:	08005ccf 	.word	0x08005ccf
 8005c10:	08005ccf 	.word	0x08005ccf
 8005c14:	08005ccf 	.word	0x08005ccf
 8005c18:	08005ccf 	.word	0x08005ccf
 8005c1c:	08005ccf 	.word	0x08005ccf
 8005c20:	08005ccf 	.word	0x08005ccf
 8005c24:	08005ccf 	.word	0x08005ccf
 8005c28:	08005c9b 	.word	0x08005c9b
 8005c2c:	08005ccf 	.word	0x08005ccf
 8005c30:	08005ccf 	.word	0x08005ccf
 8005c34:	08005ccf 	.word	0x08005ccf
 8005c38:	08005ccf 	.word	0x08005ccf
 8005c3c:	08005ccf 	.word	0x08005ccf
 8005c40:	08005ccf 	.word	0x08005ccf
 8005c44:	08005ccf 	.word	0x08005ccf
 8005c48:	08005ccf 	.word	0x08005ccf
 8005c4c:	08005ccf 	.word	0x08005ccf
 8005c50:	08005ccf 	.word	0x08005ccf
 8005c54:	08005ccf 	.word	0x08005ccf
 8005c58:	08005ccf 	.word	0x08005ccf
 8005c5c:	08005ccf 	.word	0x08005ccf
 8005c60:	08005ccf 	.word	0x08005ccf
 8005c64:	08005ccf 	.word	0x08005ccf
 8005c68:	08005cc1 	.word	0x08005cc1
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d02a      	beq.n	8005cc6 <UART_SetConfig+0x8aa>
 8005c70:	e02d      	b.n	8005cce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c72:	f7fe ff61 	bl	8004b38 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c78:	e02f      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe ff70 	bl	8004b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c88:	e027      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c8a:	f107 0318 	add.w	r3, r7, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff f8bc 	bl	8004e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c98:	e01f      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c9a:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <UART_SetConfig+0x904>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ca6:	4b1e      	ldr	r3, [pc, #120]	; (8005d20 <UART_SetConfig+0x904>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	08db      	lsrs	r3, r3, #3
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <UART_SetConfig+0x90c>)
 8005cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cb8:	e00f      	b.n	8005cda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005cba:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <UART_SetConfig+0x90c>)
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cbe:	e00c      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <UART_SetConfig+0x910>)
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc4:	e009      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ccc:	e005      	b.n	8005cda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 81ee 	beq.w	80060be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	4a12      	ldr	r2, [pc, #72]	; (8005d30 <UART_SetConfig+0x914>)
 8005ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d305      	bcc.n	8005d12 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d910      	bls.n	8005d34 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d18:	e1d1      	b.n	80060be <UART_SetConfig+0xca2>
 8005d1a:	bf00      	nop
 8005d1c:	40011c00 	.word	0x40011c00
 8005d20:	58024400 	.word	0x58024400
 8005d24:	58000c00 	.word	0x58000c00
 8005d28:	03d09000 	.word	0x03d09000
 8005d2c:	003d0900 	.word	0x003d0900
 8005d30:	080077cc 	.word	0x080077cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d36:	2200      	movs	r2, #0
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	60fa      	str	r2, [r7, #12]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	4ac0      	ldr	r2, [pc, #768]	; (8006044 <UART_SetConfig+0xc28>)
 8005d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d56:	f7fa fb1b 	bl	8000390 <__aeabi_uldivmod>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4610      	mov	r0, r2
 8005d60:	4619      	mov	r1, r3
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	020b      	lsls	r3, r1, #8
 8005d6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d70:	0202      	lsls	r2, r0, #8
 8005d72:	6979      	ldr	r1, [r7, #20]
 8005d74:	6849      	ldr	r1, [r1, #4]
 8005d76:	0849      	lsrs	r1, r1, #1
 8005d78:	2000      	movs	r0, #0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	eb12 0804 	adds.w	r8, r2, r4
 8005d82:	eb43 0905 	adc.w	r9, r3, r5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	469a      	mov	sl, r3
 8005d8e:	4693      	mov	fp, r2
 8005d90:	4652      	mov	r2, sl
 8005d92:	465b      	mov	r3, fp
 8005d94:	4640      	mov	r0, r8
 8005d96:	4649      	mov	r1, r9
 8005d98:	f7fa fafa 	bl	8000390 <__aeabi_uldivmod>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4613      	mov	r3, r2
 8005da2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005daa:	d308      	bcc.n	8005dbe <UART_SetConfig+0x9a2>
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db2:	d204      	bcs.n	8005dbe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	e17f      	b.n	80060be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005dc4:	e17b      	b.n	80060be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dce:	f040 80bd 	bne.w	8005f4c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005dd2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	dc48      	bgt.n	8005e6c <UART_SetConfig+0xa50>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	db7b      	blt.n	8005ed6 <UART_SetConfig+0xaba>
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d879      	bhi.n	8005ed6 <UART_SetConfig+0xaba>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x9cc>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005e73 	.word	0x08005e73
 8005dec:	08005e7b 	.word	0x08005e7b
 8005df0:	08005ed7 	.word	0x08005ed7
 8005df4:	08005ed7 	.word	0x08005ed7
 8005df8:	08005e83 	.word	0x08005e83
 8005dfc:	08005ed7 	.word	0x08005ed7
 8005e00:	08005ed7 	.word	0x08005ed7
 8005e04:	08005ed7 	.word	0x08005ed7
 8005e08:	08005e93 	.word	0x08005e93
 8005e0c:	08005ed7 	.word	0x08005ed7
 8005e10:	08005ed7 	.word	0x08005ed7
 8005e14:	08005ed7 	.word	0x08005ed7
 8005e18:	08005ed7 	.word	0x08005ed7
 8005e1c:	08005ed7 	.word	0x08005ed7
 8005e20:	08005ed7 	.word	0x08005ed7
 8005e24:	08005ed7 	.word	0x08005ed7
 8005e28:	08005ea3 	.word	0x08005ea3
 8005e2c:	08005ed7 	.word	0x08005ed7
 8005e30:	08005ed7 	.word	0x08005ed7
 8005e34:	08005ed7 	.word	0x08005ed7
 8005e38:	08005ed7 	.word	0x08005ed7
 8005e3c:	08005ed7 	.word	0x08005ed7
 8005e40:	08005ed7 	.word	0x08005ed7
 8005e44:	08005ed7 	.word	0x08005ed7
 8005e48:	08005ed7 	.word	0x08005ed7
 8005e4c:	08005ed7 	.word	0x08005ed7
 8005e50:	08005ed7 	.word	0x08005ed7
 8005e54:	08005ed7 	.word	0x08005ed7
 8005e58:	08005ed7 	.word	0x08005ed7
 8005e5c:	08005ed7 	.word	0x08005ed7
 8005e60:	08005ed7 	.word	0x08005ed7
 8005e64:	08005ed7 	.word	0x08005ed7
 8005e68:	08005ec9 	.word	0x08005ec9
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d02e      	beq.n	8005ece <UART_SetConfig+0xab2>
 8005e70:	e031      	b.n	8005ed6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e72:	f7fd ff29 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8005e76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e78:	e033      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e7a:	f7fd ff3b 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 8005e7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e80:	e02f      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fe6c 	bl	8004b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e90:	e027      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e92:	f107 0318 	add.w	r3, r7, #24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe ffb8 	bl	8004e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ea0:	e01f      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea2:	4b69      	ldr	r3, [pc, #420]	; (8006048 <UART_SetConfig+0xc2c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eae:	4b66      	ldr	r3, [pc, #408]	; (8006048 <UART_SetConfig+0xc2c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	4a64      	ldr	r2, [pc, #400]	; (800604c <UART_SetConfig+0xc30>)
 8005eba:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ec0:	e00f      	b.n	8005ee2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005ec2:	4b62      	ldr	r3, [pc, #392]	; (800604c <UART_SetConfig+0xc30>)
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec6:	e00c      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ec8:	4b61      	ldr	r3, [pc, #388]	; (8006050 <UART_SetConfig+0xc34>)
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ecc:	e009      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ed4:	e005      	b.n	8005ee2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ee0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80ea 	beq.w	80060be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	4a55      	ldr	r2, [pc, #340]	; (8006044 <UART_SetConfig+0xc28>)
 8005ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005efc:	005a      	lsls	r2, r3, #1
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	441a      	add	r2, r3
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	2b0f      	cmp	r3, #15
 8005f14:	d916      	bls.n	8005f44 <UART_SetConfig+0xb28>
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1c:	d212      	bcs.n	8005f44 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f023 030f 	bic.w	r3, r3, #15
 8005f26:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f36:	4313      	orrs	r3, r2
 8005f38:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f40:	60da      	str	r2, [r3, #12]
 8005f42:	e0bc      	b.n	80060be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f4a:	e0b8      	b.n	80060be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	dc4b      	bgt.n	8005fec <UART_SetConfig+0xbd0>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f2c0 8087 	blt.w	8006068 <UART_SetConfig+0xc4c>
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	f200 8084 	bhi.w	8006068 <UART_SetConfig+0xc4c>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0xb4c>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005ff3 	.word	0x08005ff3
 8005f6c:	08005ffb 	.word	0x08005ffb
 8005f70:	08006069 	.word	0x08006069
 8005f74:	08006069 	.word	0x08006069
 8005f78:	08006003 	.word	0x08006003
 8005f7c:	08006069 	.word	0x08006069
 8005f80:	08006069 	.word	0x08006069
 8005f84:	08006069 	.word	0x08006069
 8005f88:	08006013 	.word	0x08006013
 8005f8c:	08006069 	.word	0x08006069
 8005f90:	08006069 	.word	0x08006069
 8005f94:	08006069 	.word	0x08006069
 8005f98:	08006069 	.word	0x08006069
 8005f9c:	08006069 	.word	0x08006069
 8005fa0:	08006069 	.word	0x08006069
 8005fa4:	08006069 	.word	0x08006069
 8005fa8:	08006023 	.word	0x08006023
 8005fac:	08006069 	.word	0x08006069
 8005fb0:	08006069 	.word	0x08006069
 8005fb4:	08006069 	.word	0x08006069
 8005fb8:	08006069 	.word	0x08006069
 8005fbc:	08006069 	.word	0x08006069
 8005fc0:	08006069 	.word	0x08006069
 8005fc4:	08006069 	.word	0x08006069
 8005fc8:	08006069 	.word	0x08006069
 8005fcc:	08006069 	.word	0x08006069
 8005fd0:	08006069 	.word	0x08006069
 8005fd4:	08006069 	.word	0x08006069
 8005fd8:	08006069 	.word	0x08006069
 8005fdc:	08006069 	.word	0x08006069
 8005fe0:	08006069 	.word	0x08006069
 8005fe4:	08006069 	.word	0x08006069
 8005fe8:	0800605b 	.word	0x0800605b
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d037      	beq.n	8006060 <UART_SetConfig+0xc44>
 8005ff0:	e03a      	b.n	8006068 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff2:	f7fd fe69 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8005ff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ff8:	e03c      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ffa:	f7fd fe7b 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 8005ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006000:	e038      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe fdac 	bl	8004b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006010:	e030      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006012:	f107 0318 	add.w	r3, r7, #24
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fef8 	bl	8004e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006020:	e028      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006022:	4b09      	ldr	r3, [pc, #36]	; (8006048 <UART_SetConfig+0xc2c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d012      	beq.n	8006054 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800602e:	4b06      	ldr	r3, [pc, #24]	; (8006048 <UART_SetConfig+0xc2c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	08db      	lsrs	r3, r3, #3
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <UART_SetConfig+0xc30>)
 800603a:	fa22 f303 	lsr.w	r3, r2, r3
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006040:	e018      	b.n	8006074 <UART_SetConfig+0xc58>
 8006042:	bf00      	nop
 8006044:	080077cc 	.word	0x080077cc
 8006048:	58024400 	.word	0x58024400
 800604c:	03d09000 	.word	0x03d09000
 8006050:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006054:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <UART_SetConfig+0xccc>)
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006058:	e00c      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800605a:	4b24      	ldr	r3, [pc, #144]	; (80060ec <UART_SetConfig+0xcd0>)
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800605e:	e009      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006066:	e005      	b.n	8006074 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006072:	bf00      	nop
    }

    if (pclk != 0U)
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d021      	beq.n	80060be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <UART_SetConfig+0xcd4>)
 8006080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006084:	461a      	mov	r2, r3
 8006086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006088:	fbb3 f2f2 	udiv	r2, r3, r2
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	441a      	add	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	2b0f      	cmp	r3, #15
 80060a2:	d909      	bls.n	80060b8 <UART_SetConfig+0xc9c>
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d205      	bcs.n	80060b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	e002      	b.n	80060be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2200      	movs	r2, #0
 80060d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2200      	movs	r2, #0
 80060d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80060da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3748      	adds	r7, #72	; 0x48
 80060e2:	46bd      	mov	sp, r7
 80060e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060e8:	03d09000 	.word	0x03d09000
 80060ec:	003d0900 	.word	0x003d0900
 80060f0:	080077cc 	.word	0x080077cc

080060f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01a      	beq.n	800620a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f2:	d10a      	bne.n	800620a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af02      	add	r7, sp, #8
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006248:	f7fb fca6 	bl	8001b98 <HAL_GetTick>
 800624c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b08      	cmp	r3, #8
 800625a:	d10e      	bne.n	800627a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800625c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f82f 	bl	80062ce <UART_WaitOnFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e025      	b.n	80062c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b04      	cmp	r3, #4
 8006286:	d10e      	bne.n	80062a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f819 	bl	80062ce <UART_WaitOnFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e00f      	b.n	80062c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b09c      	sub	sp, #112	; 0x70
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	4613      	mov	r3, r2
 80062dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062de:	e0a9      	b.n	8006434 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	f000 80a5 	beq.w	8006434 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ea:	f7fb fc55 	bl	8001b98 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <UART_WaitOnFlagUntilTimeout+0x32>
 80062fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d140      	bne.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800630e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006314:	667b      	str	r3, [r7, #100]	; 0x64
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800631e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006320:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800632c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e6      	bne.n	8006300 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	663b      	str	r3, [r7, #96]	; 0x60
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006352:	64ba      	str	r2, [r7, #72]	; 0x48
 8006354:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e5      	bne.n	8006332 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e069      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d051      	beq.n	8006434 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800639e:	d149      	bne.n	8006434 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e6      	bne.n	80063aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3308      	adds	r3, #8
 80063e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	613b      	str	r3, [r7, #16]
   return(result);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063fc:	623a      	str	r2, [r7, #32]
 80063fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	69f9      	ldr	r1, [r7, #28]
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	61bb      	str	r3, [r7, #24]
   return(result);
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e010      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69da      	ldr	r2, [r3, #28]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4013      	ands	r3, r2
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	429a      	cmp	r2, r3
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	429a      	cmp	r2, r3
 8006450:	f43f af46 	beq.w	80062e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3770      	adds	r7, #112	; 0x70
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800645e:	b480      	push	{r7}
 8006460:	b085      	sub	sp, #20
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_UARTEx_DisableFifoMode+0x16>
 8006470:	2302      	movs	r3, #2
 8006472:	e027      	b.n	80064c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2224      	movs	r2, #36	; 0x24
 8006480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e02d      	b.n	8006544 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	; 0x24
 80064f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0201 	bic.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f84f 	bl	80065c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006560:	2302      	movs	r3, #2
 8006562:	e02d      	b.n	80065c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2224      	movs	r2, #36	; 0x24
 8006570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0201 	bic.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f811 	bl	80065c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d108      	bne.n	80065ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065e8:	e031      	b.n	800664e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065ea:	2310      	movs	r3, #16
 80065ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065ee:	2310      	movs	r3, #16
 80065f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	0e5b      	lsrs	r3, r3, #25
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	0f5b      	lsrs	r3, r3, #29
 800660a:	b2db      	uxtb	r3, r3
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	7b3a      	ldrb	r2, [r7, #12]
 8006616:	4911      	ldr	r1, [pc, #68]	; (800665c <UARTEx_SetNbDataToProcess+0x94>)
 8006618:	5c8a      	ldrb	r2, [r1, r2]
 800661a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800661e:	7b3a      	ldrb	r2, [r7, #12]
 8006620:	490f      	ldr	r1, [pc, #60]	; (8006660 <UARTEx_SetNbDataToProcess+0x98>)
 8006622:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006624:	fb93 f3f2 	sdiv	r3, r3, r2
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	7b7a      	ldrb	r2, [r7, #13]
 8006634:	4909      	ldr	r1, [pc, #36]	; (800665c <UARTEx_SetNbDataToProcess+0x94>)
 8006636:	5c8a      	ldrb	r2, [r1, r2]
 8006638:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800663c:	7b7a      	ldrb	r2, [r7, #13]
 800663e:	4908      	ldr	r1, [pc, #32]	; (8006660 <UARTEx_SetNbDataToProcess+0x98>)
 8006640:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006642:	fb93 f3f2 	sdiv	r3, r3, r2
 8006646:	b29a      	uxth	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	080077e4 	.word	0x080077e4
 8006660:	080077ec 	.word	0x080077ec

08006664 <__assert_func>:
 8006664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006666:	4614      	mov	r4, r2
 8006668:	461a      	mov	r2, r3
 800666a:	4b09      	ldr	r3, [pc, #36]	; (8006690 <__assert_func+0x2c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4605      	mov	r5, r0
 8006670:	68d8      	ldr	r0, [r3, #12]
 8006672:	b14c      	cbz	r4, 8006688 <__assert_func+0x24>
 8006674:	4b07      	ldr	r3, [pc, #28]	; (8006694 <__assert_func+0x30>)
 8006676:	9100      	str	r1, [sp, #0]
 8006678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800667c:	4906      	ldr	r1, [pc, #24]	; (8006698 <__assert_func+0x34>)
 800667e:	462b      	mov	r3, r5
 8006680:	f000 f814 	bl	80066ac <fiprintf>
 8006684:	f000 fbfe 	bl	8006e84 <abort>
 8006688:	4b04      	ldr	r3, [pc, #16]	; (800669c <__assert_func+0x38>)
 800668a:	461c      	mov	r4, r3
 800668c:	e7f3      	b.n	8006676 <__assert_func+0x12>
 800668e:	bf00      	nop
 8006690:	24000010 	.word	0x24000010
 8006694:	080077f4 	.word	0x080077f4
 8006698:	08007801 	.word	0x08007801
 800669c:	0800782f 	.word	0x0800782f

080066a0 <__errno>:
 80066a0:	4b01      	ldr	r3, [pc, #4]	; (80066a8 <__errno+0x8>)
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	24000010 	.word	0x24000010

080066ac <fiprintf>:
 80066ac:	b40e      	push	{r1, r2, r3}
 80066ae:	b503      	push	{r0, r1, lr}
 80066b0:	4601      	mov	r1, r0
 80066b2:	ab03      	add	r3, sp, #12
 80066b4:	4805      	ldr	r0, [pc, #20]	; (80066cc <fiprintf+0x20>)
 80066b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	f000 f85d 	bl	800677c <_vfiprintf_r>
 80066c2:	b002      	add	sp, #8
 80066c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066c8:	b003      	add	sp, #12
 80066ca:	4770      	bx	lr
 80066cc:	24000010 	.word	0x24000010

080066d0 <__libc_init_array>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4d0d      	ldr	r5, [pc, #52]	; (8006708 <__libc_init_array+0x38>)
 80066d4:	4c0d      	ldr	r4, [pc, #52]	; (800670c <__libc_init_array+0x3c>)
 80066d6:	1b64      	subs	r4, r4, r5
 80066d8:	10a4      	asrs	r4, r4, #2
 80066da:	2600      	movs	r6, #0
 80066dc:	42a6      	cmp	r6, r4
 80066de:	d109      	bne.n	80066f4 <__libc_init_array+0x24>
 80066e0:	4d0b      	ldr	r5, [pc, #44]	; (8006710 <__libc_init_array+0x40>)
 80066e2:	4c0c      	ldr	r4, [pc, #48]	; (8006714 <__libc_init_array+0x44>)
 80066e4:	f000 ffe2 	bl	80076ac <_init>
 80066e8:	1b64      	subs	r4, r4, r5
 80066ea:	10a4      	asrs	r4, r4, #2
 80066ec:	2600      	movs	r6, #0
 80066ee:	42a6      	cmp	r6, r4
 80066f0:	d105      	bne.n	80066fe <__libc_init_array+0x2e>
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f8:	4798      	blx	r3
 80066fa:	3601      	adds	r6, #1
 80066fc:	e7ee      	b.n	80066dc <__libc_init_array+0xc>
 80066fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006702:	4798      	blx	r3
 8006704:	3601      	adds	r6, #1
 8006706:	e7f2      	b.n	80066ee <__libc_init_array+0x1e>
 8006708:	080078d0 	.word	0x080078d0
 800670c:	080078d0 	.word	0x080078d0
 8006710:	080078d0 	.word	0x080078d0
 8006714:	080078d4 	.word	0x080078d4

08006718 <memset>:
 8006718:	4402      	add	r2, r0
 800671a:	4603      	mov	r3, r0
 800671c:	4293      	cmp	r3, r2
 800671e:	d100      	bne.n	8006722 <memset+0xa>
 8006720:	4770      	bx	lr
 8006722:	f803 1b01 	strb.w	r1, [r3], #1
 8006726:	e7f9      	b.n	800671c <memset+0x4>

08006728 <__sfputc_r>:
 8006728:	6893      	ldr	r3, [r2, #8]
 800672a:	3b01      	subs	r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	b410      	push	{r4}
 8006730:	6093      	str	r3, [r2, #8]
 8006732:	da08      	bge.n	8006746 <__sfputc_r+0x1e>
 8006734:	6994      	ldr	r4, [r2, #24]
 8006736:	42a3      	cmp	r3, r4
 8006738:	db01      	blt.n	800673e <__sfputc_r+0x16>
 800673a:	290a      	cmp	r1, #10
 800673c:	d103      	bne.n	8006746 <__sfputc_r+0x1e>
 800673e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006742:	f000 badf 	b.w	8006d04 <__swbuf_r>
 8006746:	6813      	ldr	r3, [r2, #0]
 8006748:	1c58      	adds	r0, r3, #1
 800674a:	6010      	str	r0, [r2, #0]
 800674c:	7019      	strb	r1, [r3, #0]
 800674e:	4608      	mov	r0, r1
 8006750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006754:	4770      	bx	lr

08006756 <__sfputs_r>:
 8006756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006758:	4606      	mov	r6, r0
 800675a:	460f      	mov	r7, r1
 800675c:	4614      	mov	r4, r2
 800675e:	18d5      	adds	r5, r2, r3
 8006760:	42ac      	cmp	r4, r5
 8006762:	d101      	bne.n	8006768 <__sfputs_r+0x12>
 8006764:	2000      	movs	r0, #0
 8006766:	e007      	b.n	8006778 <__sfputs_r+0x22>
 8006768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676c:	463a      	mov	r2, r7
 800676e:	4630      	mov	r0, r6
 8006770:	f7ff ffda 	bl	8006728 <__sfputc_r>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d1f3      	bne.n	8006760 <__sfputs_r+0xa>
 8006778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800677c <_vfiprintf_r>:
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	460d      	mov	r5, r1
 8006782:	b09d      	sub	sp, #116	; 0x74
 8006784:	4614      	mov	r4, r2
 8006786:	4698      	mov	r8, r3
 8006788:	4606      	mov	r6, r0
 800678a:	b118      	cbz	r0, 8006794 <_vfiprintf_r+0x18>
 800678c:	6983      	ldr	r3, [r0, #24]
 800678e:	b90b      	cbnz	r3, 8006794 <_vfiprintf_r+0x18>
 8006790:	f000 fc9a 	bl	80070c8 <__sinit>
 8006794:	4b89      	ldr	r3, [pc, #548]	; (80069bc <_vfiprintf_r+0x240>)
 8006796:	429d      	cmp	r5, r3
 8006798:	d11b      	bne.n	80067d2 <_vfiprintf_r+0x56>
 800679a:	6875      	ldr	r5, [r6, #4]
 800679c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800679e:	07d9      	lsls	r1, r3, #31
 80067a0:	d405      	bmi.n	80067ae <_vfiprintf_r+0x32>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	059a      	lsls	r2, r3, #22
 80067a6:	d402      	bmi.n	80067ae <_vfiprintf_r+0x32>
 80067a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067aa:	f000 fd2b 	bl	8007204 <__retarget_lock_acquire_recursive>
 80067ae:	89ab      	ldrh	r3, [r5, #12]
 80067b0:	071b      	lsls	r3, r3, #28
 80067b2:	d501      	bpl.n	80067b8 <_vfiprintf_r+0x3c>
 80067b4:	692b      	ldr	r3, [r5, #16]
 80067b6:	b9eb      	cbnz	r3, 80067f4 <_vfiprintf_r+0x78>
 80067b8:	4629      	mov	r1, r5
 80067ba:	4630      	mov	r0, r6
 80067bc:	f000 faf4 	bl	8006da8 <__swsetup_r>
 80067c0:	b1c0      	cbz	r0, 80067f4 <_vfiprintf_r+0x78>
 80067c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067c4:	07dc      	lsls	r4, r3, #31
 80067c6:	d50e      	bpl.n	80067e6 <_vfiprintf_r+0x6a>
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295
 80067cc:	b01d      	add	sp, #116	; 0x74
 80067ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d2:	4b7b      	ldr	r3, [pc, #492]	; (80069c0 <_vfiprintf_r+0x244>)
 80067d4:	429d      	cmp	r5, r3
 80067d6:	d101      	bne.n	80067dc <_vfiprintf_r+0x60>
 80067d8:	68b5      	ldr	r5, [r6, #8]
 80067da:	e7df      	b.n	800679c <_vfiprintf_r+0x20>
 80067dc:	4b79      	ldr	r3, [pc, #484]	; (80069c4 <_vfiprintf_r+0x248>)
 80067de:	429d      	cmp	r5, r3
 80067e0:	bf08      	it	eq
 80067e2:	68f5      	ldreq	r5, [r6, #12]
 80067e4:	e7da      	b.n	800679c <_vfiprintf_r+0x20>
 80067e6:	89ab      	ldrh	r3, [r5, #12]
 80067e8:	0598      	lsls	r0, r3, #22
 80067ea:	d4ed      	bmi.n	80067c8 <_vfiprintf_r+0x4c>
 80067ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ee:	f000 fd0a 	bl	8007206 <__retarget_lock_release_recursive>
 80067f2:	e7e9      	b.n	80067c8 <_vfiprintf_r+0x4c>
 80067f4:	2300      	movs	r3, #0
 80067f6:	9309      	str	r3, [sp, #36]	; 0x24
 80067f8:	2320      	movs	r3, #32
 80067fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006802:	2330      	movs	r3, #48	; 0x30
 8006804:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069c8 <_vfiprintf_r+0x24c>
 8006808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800680c:	f04f 0901 	mov.w	r9, #1
 8006810:	4623      	mov	r3, r4
 8006812:	469a      	mov	sl, r3
 8006814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006818:	b10a      	cbz	r2, 800681e <_vfiprintf_r+0xa2>
 800681a:	2a25      	cmp	r2, #37	; 0x25
 800681c:	d1f9      	bne.n	8006812 <_vfiprintf_r+0x96>
 800681e:	ebba 0b04 	subs.w	fp, sl, r4
 8006822:	d00b      	beq.n	800683c <_vfiprintf_r+0xc0>
 8006824:	465b      	mov	r3, fp
 8006826:	4622      	mov	r2, r4
 8006828:	4629      	mov	r1, r5
 800682a:	4630      	mov	r0, r6
 800682c:	f7ff ff93 	bl	8006756 <__sfputs_r>
 8006830:	3001      	adds	r0, #1
 8006832:	f000 80aa 	beq.w	800698a <_vfiprintf_r+0x20e>
 8006836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006838:	445a      	add	r2, fp
 800683a:	9209      	str	r2, [sp, #36]	; 0x24
 800683c:	f89a 3000 	ldrb.w	r3, [sl]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80a2 	beq.w	800698a <_vfiprintf_r+0x20e>
 8006846:	2300      	movs	r3, #0
 8006848:	f04f 32ff 	mov.w	r2, #4294967295
 800684c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006850:	f10a 0a01 	add.w	sl, sl, #1
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	9307      	str	r3, [sp, #28]
 8006858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800685c:	931a      	str	r3, [sp, #104]	; 0x68
 800685e:	4654      	mov	r4, sl
 8006860:	2205      	movs	r2, #5
 8006862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006866:	4858      	ldr	r0, [pc, #352]	; (80069c8 <_vfiprintf_r+0x24c>)
 8006868:	f7f9 fd42 	bl	80002f0 <memchr>
 800686c:	9a04      	ldr	r2, [sp, #16]
 800686e:	b9d8      	cbnz	r0, 80068a8 <_vfiprintf_r+0x12c>
 8006870:	06d1      	lsls	r1, r2, #27
 8006872:	bf44      	itt	mi
 8006874:	2320      	movmi	r3, #32
 8006876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800687a:	0713      	lsls	r3, r2, #28
 800687c:	bf44      	itt	mi
 800687e:	232b      	movmi	r3, #43	; 0x2b
 8006880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006884:	f89a 3000 	ldrb.w	r3, [sl]
 8006888:	2b2a      	cmp	r3, #42	; 0x2a
 800688a:	d015      	beq.n	80068b8 <_vfiprintf_r+0x13c>
 800688c:	9a07      	ldr	r2, [sp, #28]
 800688e:	4654      	mov	r4, sl
 8006890:	2000      	movs	r0, #0
 8006892:	f04f 0c0a 	mov.w	ip, #10
 8006896:	4621      	mov	r1, r4
 8006898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800689c:	3b30      	subs	r3, #48	; 0x30
 800689e:	2b09      	cmp	r3, #9
 80068a0:	d94e      	bls.n	8006940 <_vfiprintf_r+0x1c4>
 80068a2:	b1b0      	cbz	r0, 80068d2 <_vfiprintf_r+0x156>
 80068a4:	9207      	str	r2, [sp, #28]
 80068a6:	e014      	b.n	80068d2 <_vfiprintf_r+0x156>
 80068a8:	eba0 0308 	sub.w	r3, r0, r8
 80068ac:	fa09 f303 	lsl.w	r3, r9, r3
 80068b0:	4313      	orrs	r3, r2
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	46a2      	mov	sl, r4
 80068b6:	e7d2      	b.n	800685e <_vfiprintf_r+0xe2>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	1d19      	adds	r1, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	9103      	str	r1, [sp, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfbb      	ittet	lt
 80068c4:	425b      	neglt	r3, r3
 80068c6:	f042 0202 	orrlt.w	r2, r2, #2
 80068ca:	9307      	strge	r3, [sp, #28]
 80068cc:	9307      	strlt	r3, [sp, #28]
 80068ce:	bfb8      	it	lt
 80068d0:	9204      	strlt	r2, [sp, #16]
 80068d2:	7823      	ldrb	r3, [r4, #0]
 80068d4:	2b2e      	cmp	r3, #46	; 0x2e
 80068d6:	d10c      	bne.n	80068f2 <_vfiprintf_r+0x176>
 80068d8:	7863      	ldrb	r3, [r4, #1]
 80068da:	2b2a      	cmp	r3, #42	; 0x2a
 80068dc:	d135      	bne.n	800694a <_vfiprintf_r+0x1ce>
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	1d1a      	adds	r2, r3, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	9203      	str	r2, [sp, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bfb8      	it	lt
 80068ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80068ee:	3402      	adds	r4, #2
 80068f0:	9305      	str	r3, [sp, #20]
 80068f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069d8 <_vfiprintf_r+0x25c>
 80068f6:	7821      	ldrb	r1, [r4, #0]
 80068f8:	2203      	movs	r2, #3
 80068fa:	4650      	mov	r0, sl
 80068fc:	f7f9 fcf8 	bl	80002f0 <memchr>
 8006900:	b140      	cbz	r0, 8006914 <_vfiprintf_r+0x198>
 8006902:	2340      	movs	r3, #64	; 0x40
 8006904:	eba0 000a 	sub.w	r0, r0, sl
 8006908:	fa03 f000 	lsl.w	r0, r3, r0
 800690c:	9b04      	ldr	r3, [sp, #16]
 800690e:	4303      	orrs	r3, r0
 8006910:	3401      	adds	r4, #1
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006918:	482c      	ldr	r0, [pc, #176]	; (80069cc <_vfiprintf_r+0x250>)
 800691a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800691e:	2206      	movs	r2, #6
 8006920:	f7f9 fce6 	bl	80002f0 <memchr>
 8006924:	2800      	cmp	r0, #0
 8006926:	d03f      	beq.n	80069a8 <_vfiprintf_r+0x22c>
 8006928:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <_vfiprintf_r+0x254>)
 800692a:	bb1b      	cbnz	r3, 8006974 <_vfiprintf_r+0x1f8>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	3307      	adds	r3, #7
 8006930:	f023 0307 	bic.w	r3, r3, #7
 8006934:	3308      	adds	r3, #8
 8006936:	9303      	str	r3, [sp, #12]
 8006938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693a:	443b      	add	r3, r7
 800693c:	9309      	str	r3, [sp, #36]	; 0x24
 800693e:	e767      	b.n	8006810 <_vfiprintf_r+0x94>
 8006940:	fb0c 3202 	mla	r2, ip, r2, r3
 8006944:	460c      	mov	r4, r1
 8006946:	2001      	movs	r0, #1
 8006948:	e7a5      	b.n	8006896 <_vfiprintf_r+0x11a>
 800694a:	2300      	movs	r3, #0
 800694c:	3401      	adds	r4, #1
 800694e:	9305      	str	r3, [sp, #20]
 8006950:	4619      	mov	r1, r3
 8006952:	f04f 0c0a 	mov.w	ip, #10
 8006956:	4620      	mov	r0, r4
 8006958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800695c:	3a30      	subs	r2, #48	; 0x30
 800695e:	2a09      	cmp	r2, #9
 8006960:	d903      	bls.n	800696a <_vfiprintf_r+0x1ee>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0c5      	beq.n	80068f2 <_vfiprintf_r+0x176>
 8006966:	9105      	str	r1, [sp, #20]
 8006968:	e7c3      	b.n	80068f2 <_vfiprintf_r+0x176>
 800696a:	fb0c 2101 	mla	r1, ip, r1, r2
 800696e:	4604      	mov	r4, r0
 8006970:	2301      	movs	r3, #1
 8006972:	e7f0      	b.n	8006956 <_vfiprintf_r+0x1da>
 8006974:	ab03      	add	r3, sp, #12
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	462a      	mov	r2, r5
 800697a:	4b16      	ldr	r3, [pc, #88]	; (80069d4 <_vfiprintf_r+0x258>)
 800697c:	a904      	add	r1, sp, #16
 800697e:	4630      	mov	r0, r6
 8006980:	f3af 8000 	nop.w
 8006984:	4607      	mov	r7, r0
 8006986:	1c78      	adds	r0, r7, #1
 8006988:	d1d6      	bne.n	8006938 <_vfiprintf_r+0x1bc>
 800698a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800698c:	07d9      	lsls	r1, r3, #31
 800698e:	d405      	bmi.n	800699c <_vfiprintf_r+0x220>
 8006990:	89ab      	ldrh	r3, [r5, #12]
 8006992:	059a      	lsls	r2, r3, #22
 8006994:	d402      	bmi.n	800699c <_vfiprintf_r+0x220>
 8006996:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006998:	f000 fc35 	bl	8007206 <__retarget_lock_release_recursive>
 800699c:	89ab      	ldrh	r3, [r5, #12]
 800699e:	065b      	lsls	r3, r3, #25
 80069a0:	f53f af12 	bmi.w	80067c8 <_vfiprintf_r+0x4c>
 80069a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069a6:	e711      	b.n	80067cc <_vfiprintf_r+0x50>
 80069a8:	ab03      	add	r3, sp, #12
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	462a      	mov	r2, r5
 80069ae:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <_vfiprintf_r+0x258>)
 80069b0:	a904      	add	r1, sp, #16
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 f880 	bl	8006ab8 <_printf_i>
 80069b8:	e7e4      	b.n	8006984 <_vfiprintf_r+0x208>
 80069ba:	bf00      	nop
 80069bc:	08007888 	.word	0x08007888
 80069c0:	080078a8 	.word	0x080078a8
 80069c4:	08007868 	.word	0x08007868
 80069c8:	08007834 	.word	0x08007834
 80069cc:	0800783e 	.word	0x0800783e
 80069d0:	00000000 	.word	0x00000000
 80069d4:	08006757 	.word	0x08006757
 80069d8:	0800783a 	.word	0x0800783a

080069dc <_printf_common>:
 80069dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	4616      	mov	r6, r2
 80069e2:	4699      	mov	r9, r3
 80069e4:	688a      	ldr	r2, [r1, #8]
 80069e6:	690b      	ldr	r3, [r1, #16]
 80069e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	bfb8      	it	lt
 80069f0:	4613      	movlt	r3, r2
 80069f2:	6033      	str	r3, [r6, #0]
 80069f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069f8:	4607      	mov	r7, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	b10a      	cbz	r2, 8006a02 <_printf_common+0x26>
 80069fe:	3301      	adds	r3, #1
 8006a00:	6033      	str	r3, [r6, #0]
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	0699      	lsls	r1, r3, #26
 8006a06:	bf42      	ittt	mi
 8006a08:	6833      	ldrmi	r3, [r6, #0]
 8006a0a:	3302      	addmi	r3, #2
 8006a0c:	6033      	strmi	r3, [r6, #0]
 8006a0e:	6825      	ldr	r5, [r4, #0]
 8006a10:	f015 0506 	ands.w	r5, r5, #6
 8006a14:	d106      	bne.n	8006a24 <_printf_common+0x48>
 8006a16:	f104 0a19 	add.w	sl, r4, #25
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	6832      	ldr	r2, [r6, #0]
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	42ab      	cmp	r3, r5
 8006a22:	dc26      	bgt.n	8006a72 <_printf_common+0x96>
 8006a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a28:	1e13      	subs	r3, r2, #0
 8006a2a:	6822      	ldr	r2, [r4, #0]
 8006a2c:	bf18      	it	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	0692      	lsls	r2, r2, #26
 8006a32:	d42b      	bmi.n	8006a8c <_printf_common+0xb0>
 8006a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a38:	4649      	mov	r1, r9
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	47c0      	blx	r8
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d01e      	beq.n	8006a80 <_printf_common+0xa4>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	68e5      	ldr	r5, [r4, #12]
 8006a46:	6832      	ldr	r2, [r6, #0]
 8006a48:	f003 0306 	and.w	r3, r3, #6
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	bf08      	it	eq
 8006a50:	1aad      	subeq	r5, r5, r2
 8006a52:	68a3      	ldr	r3, [r4, #8]
 8006a54:	6922      	ldr	r2, [r4, #16]
 8006a56:	bf0c      	ite	eq
 8006a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a5c:	2500      	movne	r5, #0
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	bfc4      	itt	gt
 8006a62:	1a9b      	subgt	r3, r3, r2
 8006a64:	18ed      	addgt	r5, r5, r3
 8006a66:	2600      	movs	r6, #0
 8006a68:	341a      	adds	r4, #26
 8006a6a:	42b5      	cmp	r5, r6
 8006a6c:	d11a      	bne.n	8006aa4 <_printf_common+0xc8>
 8006a6e:	2000      	movs	r0, #0
 8006a70:	e008      	b.n	8006a84 <_printf_common+0xa8>
 8006a72:	2301      	movs	r3, #1
 8006a74:	4652      	mov	r2, sl
 8006a76:	4649      	mov	r1, r9
 8006a78:	4638      	mov	r0, r7
 8006a7a:	47c0      	blx	r8
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d103      	bne.n	8006a88 <_printf_common+0xac>
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a88:	3501      	adds	r5, #1
 8006a8a:	e7c6      	b.n	8006a1a <_printf_common+0x3e>
 8006a8c:	18e1      	adds	r1, r4, r3
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	2030      	movs	r0, #48	; 0x30
 8006a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a96:	4422      	add	r2, r4
 8006a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa0:	3302      	adds	r3, #2
 8006aa2:	e7c7      	b.n	8006a34 <_printf_common+0x58>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	4638      	mov	r0, r7
 8006aac:	47c0      	blx	r8
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d0e6      	beq.n	8006a80 <_printf_common+0xa4>
 8006ab2:	3601      	adds	r6, #1
 8006ab4:	e7d9      	b.n	8006a6a <_printf_common+0x8e>
	...

08006ab8 <_printf_i>:
 8006ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006abc:	7e0f      	ldrb	r7, [r1, #24]
 8006abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac0:	2f78      	cmp	r7, #120	; 0x78
 8006ac2:	4691      	mov	r9, r2
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	469a      	mov	sl, r3
 8006aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ace:	d807      	bhi.n	8006ae0 <_printf_i+0x28>
 8006ad0:	2f62      	cmp	r7, #98	; 0x62
 8006ad2:	d80a      	bhi.n	8006aea <_printf_i+0x32>
 8006ad4:	2f00      	cmp	r7, #0
 8006ad6:	f000 80d8 	beq.w	8006c8a <_printf_i+0x1d2>
 8006ada:	2f58      	cmp	r7, #88	; 0x58
 8006adc:	f000 80a3 	beq.w	8006c26 <_printf_i+0x16e>
 8006ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ae8:	e03a      	b.n	8006b60 <_printf_i+0xa8>
 8006aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aee:	2b15      	cmp	r3, #21
 8006af0:	d8f6      	bhi.n	8006ae0 <_printf_i+0x28>
 8006af2:	a101      	add	r1, pc, #4	; (adr r1, 8006af8 <_printf_i+0x40>)
 8006af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006af8:	08006b51 	.word	0x08006b51
 8006afc:	08006b65 	.word	0x08006b65
 8006b00:	08006ae1 	.word	0x08006ae1
 8006b04:	08006ae1 	.word	0x08006ae1
 8006b08:	08006ae1 	.word	0x08006ae1
 8006b0c:	08006ae1 	.word	0x08006ae1
 8006b10:	08006b65 	.word	0x08006b65
 8006b14:	08006ae1 	.word	0x08006ae1
 8006b18:	08006ae1 	.word	0x08006ae1
 8006b1c:	08006ae1 	.word	0x08006ae1
 8006b20:	08006ae1 	.word	0x08006ae1
 8006b24:	08006c71 	.word	0x08006c71
 8006b28:	08006b95 	.word	0x08006b95
 8006b2c:	08006c53 	.word	0x08006c53
 8006b30:	08006ae1 	.word	0x08006ae1
 8006b34:	08006ae1 	.word	0x08006ae1
 8006b38:	08006c93 	.word	0x08006c93
 8006b3c:	08006ae1 	.word	0x08006ae1
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006ae1 	.word	0x08006ae1
 8006b48:	08006ae1 	.word	0x08006ae1
 8006b4c:	08006c5b 	.word	0x08006c5b
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	1d1a      	adds	r2, r3, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	602a      	str	r2, [r5, #0]
 8006b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0a3      	b.n	8006cac <_printf_i+0x1f4>
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	6829      	ldr	r1, [r5, #0]
 8006b68:	0606      	lsls	r6, r0, #24
 8006b6a:	f101 0304 	add.w	r3, r1, #4
 8006b6e:	d50a      	bpl.n	8006b86 <_printf_i+0xce>
 8006b70:	680e      	ldr	r6, [r1, #0]
 8006b72:	602b      	str	r3, [r5, #0]
 8006b74:	2e00      	cmp	r6, #0
 8006b76:	da03      	bge.n	8006b80 <_printf_i+0xc8>
 8006b78:	232d      	movs	r3, #45	; 0x2d
 8006b7a:	4276      	negs	r6, r6
 8006b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b80:	485e      	ldr	r0, [pc, #376]	; (8006cfc <_printf_i+0x244>)
 8006b82:	230a      	movs	r3, #10
 8006b84:	e019      	b.n	8006bba <_printf_i+0x102>
 8006b86:	680e      	ldr	r6, [r1, #0]
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b8e:	bf18      	it	ne
 8006b90:	b236      	sxthne	r6, r6
 8006b92:	e7ef      	b.n	8006b74 <_printf_i+0xbc>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	1d19      	adds	r1, r3, #4
 8006b9a:	6029      	str	r1, [r5, #0]
 8006b9c:	0601      	lsls	r1, r0, #24
 8006b9e:	d501      	bpl.n	8006ba4 <_printf_i+0xec>
 8006ba0:	681e      	ldr	r6, [r3, #0]
 8006ba2:	e002      	b.n	8006baa <_printf_i+0xf2>
 8006ba4:	0646      	lsls	r6, r0, #25
 8006ba6:	d5fb      	bpl.n	8006ba0 <_printf_i+0xe8>
 8006ba8:	881e      	ldrh	r6, [r3, #0]
 8006baa:	4854      	ldr	r0, [pc, #336]	; (8006cfc <_printf_i+0x244>)
 8006bac:	2f6f      	cmp	r7, #111	; 0x6f
 8006bae:	bf0c      	ite	eq
 8006bb0:	2308      	moveq	r3, #8
 8006bb2:	230a      	movne	r3, #10
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bba:	6865      	ldr	r5, [r4, #4]
 8006bbc:	60a5      	str	r5, [r4, #8]
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	bfa2      	ittt	ge
 8006bc2:	6821      	ldrge	r1, [r4, #0]
 8006bc4:	f021 0104 	bicge.w	r1, r1, #4
 8006bc8:	6021      	strge	r1, [r4, #0]
 8006bca:	b90e      	cbnz	r6, 8006bd0 <_printf_i+0x118>
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	d04d      	beq.n	8006c6c <_printf_i+0x1b4>
 8006bd0:	4615      	mov	r5, r2
 8006bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8006bda:	5dc7      	ldrb	r7, [r0, r7]
 8006bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006be0:	4637      	mov	r7, r6
 8006be2:	42bb      	cmp	r3, r7
 8006be4:	460e      	mov	r6, r1
 8006be6:	d9f4      	bls.n	8006bd2 <_printf_i+0x11a>
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d10b      	bne.n	8006c04 <_printf_i+0x14c>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	07de      	lsls	r6, r3, #31
 8006bf0:	d508      	bpl.n	8006c04 <_printf_i+0x14c>
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	6861      	ldr	r1, [r4, #4]
 8006bf6:	4299      	cmp	r1, r3
 8006bf8:	bfde      	ittt	le
 8006bfa:	2330      	movle	r3, #48	; 0x30
 8006bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c04:	1b52      	subs	r2, r2, r5
 8006c06:	6122      	str	r2, [r4, #16]
 8006c08:	f8cd a000 	str.w	sl, [sp]
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	aa03      	add	r2, sp, #12
 8006c10:	4621      	mov	r1, r4
 8006c12:	4640      	mov	r0, r8
 8006c14:	f7ff fee2 	bl	80069dc <_printf_common>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d14c      	bne.n	8006cb6 <_printf_i+0x1fe>
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	b004      	add	sp, #16
 8006c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c26:	4835      	ldr	r0, [pc, #212]	; (8006cfc <_printf_i+0x244>)
 8006c28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c2c:	6829      	ldr	r1, [r5, #0]
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c34:	6029      	str	r1, [r5, #0]
 8006c36:	061d      	lsls	r5, r3, #24
 8006c38:	d514      	bpl.n	8006c64 <_printf_i+0x1ac>
 8006c3a:	07df      	lsls	r7, r3, #31
 8006c3c:	bf44      	itt	mi
 8006c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c42:	6023      	strmi	r3, [r4, #0]
 8006c44:	b91e      	cbnz	r6, 8006c4e <_printf_i+0x196>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	f023 0320 	bic.w	r3, r3, #32
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	2310      	movs	r3, #16
 8006c50:	e7b0      	b.n	8006bb4 <_printf_i+0xfc>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	f043 0320 	orr.w	r3, r3, #32
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	2378      	movs	r3, #120	; 0x78
 8006c5c:	4828      	ldr	r0, [pc, #160]	; (8006d00 <_printf_i+0x248>)
 8006c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c62:	e7e3      	b.n	8006c2c <_printf_i+0x174>
 8006c64:	0659      	lsls	r1, r3, #25
 8006c66:	bf48      	it	mi
 8006c68:	b2b6      	uxthmi	r6, r6
 8006c6a:	e7e6      	b.n	8006c3a <_printf_i+0x182>
 8006c6c:	4615      	mov	r5, r2
 8006c6e:	e7bb      	b.n	8006be8 <_printf_i+0x130>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	6826      	ldr	r6, [r4, #0]
 8006c74:	6961      	ldr	r1, [r4, #20]
 8006c76:	1d18      	adds	r0, r3, #4
 8006c78:	6028      	str	r0, [r5, #0]
 8006c7a:	0635      	lsls	r5, r6, #24
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	d501      	bpl.n	8006c84 <_printf_i+0x1cc>
 8006c80:	6019      	str	r1, [r3, #0]
 8006c82:	e002      	b.n	8006c8a <_printf_i+0x1d2>
 8006c84:	0670      	lsls	r0, r6, #25
 8006c86:	d5fb      	bpl.n	8006c80 <_printf_i+0x1c8>
 8006c88:	8019      	strh	r1, [r3, #0]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	4615      	mov	r5, r2
 8006c90:	e7ba      	b.n	8006c08 <_printf_i+0x150>
 8006c92:	682b      	ldr	r3, [r5, #0]
 8006c94:	1d1a      	adds	r2, r3, #4
 8006c96:	602a      	str	r2, [r5, #0]
 8006c98:	681d      	ldr	r5, [r3, #0]
 8006c9a:	6862      	ldr	r2, [r4, #4]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f7f9 fb26 	bl	80002f0 <memchr>
 8006ca4:	b108      	cbz	r0, 8006caa <_printf_i+0x1f2>
 8006ca6:	1b40      	subs	r0, r0, r5
 8006ca8:	6060      	str	r0, [r4, #4]
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	6123      	str	r3, [r4, #16]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb4:	e7a8      	b.n	8006c08 <_printf_i+0x150>
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4649      	mov	r1, r9
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	47d0      	blx	sl
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d0ab      	beq.n	8006c1c <_printf_i+0x164>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	079b      	lsls	r3, r3, #30
 8006cc8:	d413      	bmi.n	8006cf2 <_printf_i+0x23a>
 8006cca:	68e0      	ldr	r0, [r4, #12]
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	4298      	cmp	r0, r3
 8006cd0:	bfb8      	it	lt
 8006cd2:	4618      	movlt	r0, r3
 8006cd4:	e7a4      	b.n	8006c20 <_printf_i+0x168>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4632      	mov	r2, r6
 8006cda:	4649      	mov	r1, r9
 8006cdc:	4640      	mov	r0, r8
 8006cde:	47d0      	blx	sl
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d09b      	beq.n	8006c1c <_printf_i+0x164>
 8006ce4:	3501      	adds	r5, #1
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	9903      	ldr	r1, [sp, #12]
 8006cea:	1a5b      	subs	r3, r3, r1
 8006cec:	42ab      	cmp	r3, r5
 8006cee:	dcf2      	bgt.n	8006cd6 <_printf_i+0x21e>
 8006cf0:	e7eb      	b.n	8006cca <_printf_i+0x212>
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	f104 0619 	add.w	r6, r4, #25
 8006cf8:	e7f5      	b.n	8006ce6 <_printf_i+0x22e>
 8006cfa:	bf00      	nop
 8006cfc:	08007845 	.word	0x08007845
 8006d00:	08007856 	.word	0x08007856

08006d04 <__swbuf_r>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	460e      	mov	r6, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	b118      	cbz	r0, 8006d16 <__swbuf_r+0x12>
 8006d0e:	6983      	ldr	r3, [r0, #24]
 8006d10:	b90b      	cbnz	r3, 8006d16 <__swbuf_r+0x12>
 8006d12:	f000 f9d9 	bl	80070c8 <__sinit>
 8006d16:	4b21      	ldr	r3, [pc, #132]	; (8006d9c <__swbuf_r+0x98>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	d12b      	bne.n	8006d74 <__swbuf_r+0x70>
 8006d1c:	686c      	ldr	r4, [r5, #4]
 8006d1e:	69a3      	ldr	r3, [r4, #24]
 8006d20:	60a3      	str	r3, [r4, #8]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	071a      	lsls	r2, r3, #28
 8006d26:	d52f      	bpl.n	8006d88 <__swbuf_r+0x84>
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	b36b      	cbz	r3, 8006d88 <__swbuf_r+0x84>
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	6820      	ldr	r0, [r4, #0]
 8006d30:	1ac0      	subs	r0, r0, r3
 8006d32:	6963      	ldr	r3, [r4, #20]
 8006d34:	b2f6      	uxtb	r6, r6
 8006d36:	4283      	cmp	r3, r0
 8006d38:	4637      	mov	r7, r6
 8006d3a:	dc04      	bgt.n	8006d46 <__swbuf_r+0x42>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f92e 	bl	8006fa0 <_fflush_r>
 8006d44:	bb30      	cbnz	r0, 8006d94 <__swbuf_r+0x90>
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	60a3      	str	r3, [r4, #8]
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	6022      	str	r2, [r4, #0]
 8006d52:	701e      	strb	r6, [r3, #0]
 8006d54:	6963      	ldr	r3, [r4, #20]
 8006d56:	3001      	adds	r0, #1
 8006d58:	4283      	cmp	r3, r0
 8006d5a:	d004      	beq.n	8006d66 <__swbuf_r+0x62>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	07db      	lsls	r3, r3, #31
 8006d60:	d506      	bpl.n	8006d70 <__swbuf_r+0x6c>
 8006d62:	2e0a      	cmp	r6, #10
 8006d64:	d104      	bne.n	8006d70 <__swbuf_r+0x6c>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f000 f919 	bl	8006fa0 <_fflush_r>
 8006d6e:	b988      	cbnz	r0, 8006d94 <__swbuf_r+0x90>
 8006d70:	4638      	mov	r0, r7
 8006d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <__swbuf_r+0x9c>)
 8006d76:	429c      	cmp	r4, r3
 8006d78:	d101      	bne.n	8006d7e <__swbuf_r+0x7a>
 8006d7a:	68ac      	ldr	r4, [r5, #8]
 8006d7c:	e7cf      	b.n	8006d1e <__swbuf_r+0x1a>
 8006d7e:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <__swbuf_r+0xa0>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	bf08      	it	eq
 8006d84:	68ec      	ldreq	r4, [r5, #12]
 8006d86:	e7ca      	b.n	8006d1e <__swbuf_r+0x1a>
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 f80c 	bl	8006da8 <__swsetup_r>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d0cb      	beq.n	8006d2c <__swbuf_r+0x28>
 8006d94:	f04f 37ff 	mov.w	r7, #4294967295
 8006d98:	e7ea      	b.n	8006d70 <__swbuf_r+0x6c>
 8006d9a:	bf00      	nop
 8006d9c:	08007888 	.word	0x08007888
 8006da0:	080078a8 	.word	0x080078a8
 8006da4:	08007868 	.word	0x08007868

08006da8 <__swsetup_r>:
 8006da8:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <__swsetup_r+0xcc>)
 8006daa:	b570      	push	{r4, r5, r6, lr}
 8006dac:	681d      	ldr	r5, [r3, #0]
 8006dae:	4606      	mov	r6, r0
 8006db0:	460c      	mov	r4, r1
 8006db2:	b125      	cbz	r5, 8006dbe <__swsetup_r+0x16>
 8006db4:	69ab      	ldr	r3, [r5, #24]
 8006db6:	b913      	cbnz	r3, 8006dbe <__swsetup_r+0x16>
 8006db8:	4628      	mov	r0, r5
 8006dba:	f000 f985 	bl	80070c8 <__sinit>
 8006dbe:	4b2e      	ldr	r3, [pc, #184]	; (8006e78 <__swsetup_r+0xd0>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	d10f      	bne.n	8006de4 <__swsetup_r+0x3c>
 8006dc4:	686c      	ldr	r4, [r5, #4]
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dcc:	0719      	lsls	r1, r3, #28
 8006dce:	d42c      	bmi.n	8006e2a <__swsetup_r+0x82>
 8006dd0:	06dd      	lsls	r5, r3, #27
 8006dd2:	d411      	bmi.n	8006df8 <__swsetup_r+0x50>
 8006dd4:	2309      	movs	r3, #9
 8006dd6:	6033      	str	r3, [r6, #0]
 8006dd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ddc:	81a3      	strh	r3, [r4, #12]
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	e03e      	b.n	8006e62 <__swsetup_r+0xba>
 8006de4:	4b25      	ldr	r3, [pc, #148]	; (8006e7c <__swsetup_r+0xd4>)
 8006de6:	429c      	cmp	r4, r3
 8006de8:	d101      	bne.n	8006dee <__swsetup_r+0x46>
 8006dea:	68ac      	ldr	r4, [r5, #8]
 8006dec:	e7eb      	b.n	8006dc6 <__swsetup_r+0x1e>
 8006dee:	4b24      	ldr	r3, [pc, #144]	; (8006e80 <__swsetup_r+0xd8>)
 8006df0:	429c      	cmp	r4, r3
 8006df2:	bf08      	it	eq
 8006df4:	68ec      	ldreq	r4, [r5, #12]
 8006df6:	e7e6      	b.n	8006dc6 <__swsetup_r+0x1e>
 8006df8:	0758      	lsls	r0, r3, #29
 8006dfa:	d512      	bpl.n	8006e22 <__swsetup_r+0x7a>
 8006dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dfe:	b141      	cbz	r1, 8006e12 <__swsetup_r+0x6a>
 8006e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e04:	4299      	cmp	r1, r3
 8006e06:	d002      	beq.n	8006e0e <__swsetup_r+0x66>
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f000 fa63 	bl	80072d4 <_free_r>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	6363      	str	r3, [r4, #52]	; 0x34
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6063      	str	r3, [r4, #4]
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	f043 0308 	orr.w	r3, r3, #8
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	b94b      	cbnz	r3, 8006e42 <__swsetup_r+0x9a>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e38:	d003      	beq.n	8006e42 <__swsetup_r+0x9a>
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f000 fa09 	bl	8007254 <__smakebuf_r>
 8006e42:	89a0      	ldrh	r0, [r4, #12]
 8006e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e48:	f010 0301 	ands.w	r3, r0, #1
 8006e4c:	d00a      	beq.n	8006e64 <__swsetup_r+0xbc>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60a3      	str	r3, [r4, #8]
 8006e52:	6963      	ldr	r3, [r4, #20]
 8006e54:	425b      	negs	r3, r3
 8006e56:	61a3      	str	r3, [r4, #24]
 8006e58:	6923      	ldr	r3, [r4, #16]
 8006e5a:	b943      	cbnz	r3, 8006e6e <__swsetup_r+0xc6>
 8006e5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e60:	d1ba      	bne.n	8006dd8 <__swsetup_r+0x30>
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	0781      	lsls	r1, r0, #30
 8006e66:	bf58      	it	pl
 8006e68:	6963      	ldrpl	r3, [r4, #20]
 8006e6a:	60a3      	str	r3, [r4, #8]
 8006e6c:	e7f4      	b.n	8006e58 <__swsetup_r+0xb0>
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e7f7      	b.n	8006e62 <__swsetup_r+0xba>
 8006e72:	bf00      	nop
 8006e74:	24000010 	.word	0x24000010
 8006e78:	08007888 	.word	0x08007888
 8006e7c:	080078a8 	.word	0x080078a8
 8006e80:	08007868 	.word	0x08007868

08006e84 <abort>:
 8006e84:	b508      	push	{r3, lr}
 8006e86:	2006      	movs	r0, #6
 8006e88:	f000 fb3c 	bl	8007504 <raise>
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	f7fa fcad 	bl	80017ec <_exit>
	...

08006e94 <__sflush_r>:
 8006e94:	898a      	ldrh	r2, [r1, #12]
 8006e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	0710      	lsls	r0, r2, #28
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	d458      	bmi.n	8006f54 <__sflush_r+0xc0>
 8006ea2:	684b      	ldr	r3, [r1, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dc05      	bgt.n	8006eb4 <__sflush_r+0x20>
 8006ea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	dc02      	bgt.n	8006eb4 <__sflush_r+0x20>
 8006eae:	2000      	movs	r0, #0
 8006eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eb6:	2e00      	cmp	r6, #0
 8006eb8:	d0f9      	beq.n	8006eae <__sflush_r+0x1a>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ec0:	682f      	ldr	r7, [r5, #0]
 8006ec2:	602b      	str	r3, [r5, #0]
 8006ec4:	d032      	beq.n	8006f2c <__sflush_r+0x98>
 8006ec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	075a      	lsls	r2, r3, #29
 8006ecc:	d505      	bpl.n	8006eda <__sflush_r+0x46>
 8006ece:	6863      	ldr	r3, [r4, #4]
 8006ed0:	1ac0      	subs	r0, r0, r3
 8006ed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ed4:	b10b      	cbz	r3, 8006eda <__sflush_r+0x46>
 8006ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ed8:	1ac0      	subs	r0, r0, r3
 8006eda:	2300      	movs	r3, #0
 8006edc:	4602      	mov	r2, r0
 8006ede:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ee0:	6a21      	ldr	r1, [r4, #32]
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b0      	blx	r6
 8006ee6:	1c43      	adds	r3, r0, #1
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	d106      	bne.n	8006efa <__sflush_r+0x66>
 8006eec:	6829      	ldr	r1, [r5, #0]
 8006eee:	291d      	cmp	r1, #29
 8006ef0:	d82c      	bhi.n	8006f4c <__sflush_r+0xb8>
 8006ef2:	4a2a      	ldr	r2, [pc, #168]	; (8006f9c <__sflush_r+0x108>)
 8006ef4:	40ca      	lsrs	r2, r1
 8006ef6:	07d6      	lsls	r6, r2, #31
 8006ef8:	d528      	bpl.n	8006f4c <__sflush_r+0xb8>
 8006efa:	2200      	movs	r2, #0
 8006efc:	6062      	str	r2, [r4, #4]
 8006efe:	04d9      	lsls	r1, r3, #19
 8006f00:	6922      	ldr	r2, [r4, #16]
 8006f02:	6022      	str	r2, [r4, #0]
 8006f04:	d504      	bpl.n	8006f10 <__sflush_r+0x7c>
 8006f06:	1c42      	adds	r2, r0, #1
 8006f08:	d101      	bne.n	8006f0e <__sflush_r+0x7a>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	b903      	cbnz	r3, 8006f10 <__sflush_r+0x7c>
 8006f0e:	6560      	str	r0, [r4, #84]	; 0x54
 8006f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f12:	602f      	str	r7, [r5, #0]
 8006f14:	2900      	cmp	r1, #0
 8006f16:	d0ca      	beq.n	8006eae <__sflush_r+0x1a>
 8006f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f1c:	4299      	cmp	r1, r3
 8006f1e:	d002      	beq.n	8006f26 <__sflush_r+0x92>
 8006f20:	4628      	mov	r0, r5
 8006f22:	f000 f9d7 	bl	80072d4 <_free_r>
 8006f26:	2000      	movs	r0, #0
 8006f28:	6360      	str	r0, [r4, #52]	; 0x34
 8006f2a:	e7c1      	b.n	8006eb0 <__sflush_r+0x1c>
 8006f2c:	6a21      	ldr	r1, [r4, #32]
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b0      	blx	r6
 8006f34:	1c41      	adds	r1, r0, #1
 8006f36:	d1c7      	bne.n	8006ec8 <__sflush_r+0x34>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0c4      	beq.n	8006ec8 <__sflush_r+0x34>
 8006f3e:	2b1d      	cmp	r3, #29
 8006f40:	d001      	beq.n	8006f46 <__sflush_r+0xb2>
 8006f42:	2b16      	cmp	r3, #22
 8006f44:	d101      	bne.n	8006f4a <__sflush_r+0xb6>
 8006f46:	602f      	str	r7, [r5, #0]
 8006f48:	e7b1      	b.n	8006eae <__sflush_r+0x1a>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f50:	81a3      	strh	r3, [r4, #12]
 8006f52:	e7ad      	b.n	8006eb0 <__sflush_r+0x1c>
 8006f54:	690f      	ldr	r7, [r1, #16]
 8006f56:	2f00      	cmp	r7, #0
 8006f58:	d0a9      	beq.n	8006eae <__sflush_r+0x1a>
 8006f5a:	0793      	lsls	r3, r2, #30
 8006f5c:	680e      	ldr	r6, [r1, #0]
 8006f5e:	bf08      	it	eq
 8006f60:	694b      	ldreq	r3, [r1, #20]
 8006f62:	600f      	str	r7, [r1, #0]
 8006f64:	bf18      	it	ne
 8006f66:	2300      	movne	r3, #0
 8006f68:	eba6 0807 	sub.w	r8, r6, r7
 8006f6c:	608b      	str	r3, [r1, #8]
 8006f6e:	f1b8 0f00 	cmp.w	r8, #0
 8006f72:	dd9c      	ble.n	8006eae <__sflush_r+0x1a>
 8006f74:	6a21      	ldr	r1, [r4, #32]
 8006f76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f78:	4643      	mov	r3, r8
 8006f7a:	463a      	mov	r2, r7
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b0      	blx	r6
 8006f80:	2800      	cmp	r0, #0
 8006f82:	dc06      	bgt.n	8006f92 <__sflush_r+0xfe>
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f90:	e78e      	b.n	8006eb0 <__sflush_r+0x1c>
 8006f92:	4407      	add	r7, r0
 8006f94:	eba8 0800 	sub.w	r8, r8, r0
 8006f98:	e7e9      	b.n	8006f6e <__sflush_r+0xda>
 8006f9a:	bf00      	nop
 8006f9c:	20400001 	.word	0x20400001

08006fa0 <_fflush_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	690b      	ldr	r3, [r1, #16]
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	b913      	cbnz	r3, 8006fb0 <_fflush_r+0x10>
 8006faa:	2500      	movs	r5, #0
 8006fac:	4628      	mov	r0, r5
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	b118      	cbz	r0, 8006fba <_fflush_r+0x1a>
 8006fb2:	6983      	ldr	r3, [r0, #24]
 8006fb4:	b90b      	cbnz	r3, 8006fba <_fflush_r+0x1a>
 8006fb6:	f000 f887 	bl	80070c8 <__sinit>
 8006fba:	4b14      	ldr	r3, [pc, #80]	; (800700c <_fflush_r+0x6c>)
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	d11b      	bne.n	8006ff8 <_fflush_r+0x58>
 8006fc0:	686c      	ldr	r4, [r5, #4]
 8006fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0ef      	beq.n	8006faa <_fflush_r+0xa>
 8006fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fcc:	07d0      	lsls	r0, r2, #31
 8006fce:	d404      	bmi.n	8006fda <_fflush_r+0x3a>
 8006fd0:	0599      	lsls	r1, r3, #22
 8006fd2:	d402      	bmi.n	8006fda <_fflush_r+0x3a>
 8006fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fd6:	f000 f915 	bl	8007204 <__retarget_lock_acquire_recursive>
 8006fda:	4628      	mov	r0, r5
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f7ff ff59 	bl	8006e94 <__sflush_r>
 8006fe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fe4:	07da      	lsls	r2, r3, #31
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	d4e0      	bmi.n	8006fac <_fflush_r+0xc>
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	059b      	lsls	r3, r3, #22
 8006fee:	d4dd      	bmi.n	8006fac <_fflush_r+0xc>
 8006ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ff2:	f000 f908 	bl	8007206 <__retarget_lock_release_recursive>
 8006ff6:	e7d9      	b.n	8006fac <_fflush_r+0xc>
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <_fflush_r+0x70>)
 8006ffa:	429c      	cmp	r4, r3
 8006ffc:	d101      	bne.n	8007002 <_fflush_r+0x62>
 8006ffe:	68ac      	ldr	r4, [r5, #8]
 8007000:	e7df      	b.n	8006fc2 <_fflush_r+0x22>
 8007002:	4b04      	ldr	r3, [pc, #16]	; (8007014 <_fflush_r+0x74>)
 8007004:	429c      	cmp	r4, r3
 8007006:	bf08      	it	eq
 8007008:	68ec      	ldreq	r4, [r5, #12]
 800700a:	e7da      	b.n	8006fc2 <_fflush_r+0x22>
 800700c:	08007888 	.word	0x08007888
 8007010:	080078a8 	.word	0x080078a8
 8007014:	08007868 	.word	0x08007868

08007018 <std>:
 8007018:	2300      	movs	r3, #0
 800701a:	b510      	push	{r4, lr}
 800701c:	4604      	mov	r4, r0
 800701e:	e9c0 3300 	strd	r3, r3, [r0]
 8007022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007026:	6083      	str	r3, [r0, #8]
 8007028:	8181      	strh	r1, [r0, #12]
 800702a:	6643      	str	r3, [r0, #100]	; 0x64
 800702c:	81c2      	strh	r2, [r0, #14]
 800702e:	6183      	str	r3, [r0, #24]
 8007030:	4619      	mov	r1, r3
 8007032:	2208      	movs	r2, #8
 8007034:	305c      	adds	r0, #92	; 0x5c
 8007036:	f7ff fb6f 	bl	8006718 <memset>
 800703a:	4b05      	ldr	r3, [pc, #20]	; (8007050 <std+0x38>)
 800703c:	6263      	str	r3, [r4, #36]	; 0x24
 800703e:	4b05      	ldr	r3, [pc, #20]	; (8007054 <std+0x3c>)
 8007040:	62a3      	str	r3, [r4, #40]	; 0x28
 8007042:	4b05      	ldr	r3, [pc, #20]	; (8007058 <std+0x40>)
 8007044:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007046:	4b05      	ldr	r3, [pc, #20]	; (800705c <std+0x44>)
 8007048:	6224      	str	r4, [r4, #32]
 800704a:	6323      	str	r3, [r4, #48]	; 0x30
 800704c:	bd10      	pop	{r4, pc}
 800704e:	bf00      	nop
 8007050:	0800753d 	.word	0x0800753d
 8007054:	0800755f 	.word	0x0800755f
 8007058:	08007597 	.word	0x08007597
 800705c:	080075bb 	.word	0x080075bb

08007060 <_cleanup_r>:
 8007060:	4901      	ldr	r1, [pc, #4]	; (8007068 <_cleanup_r+0x8>)
 8007062:	f000 b8af 	b.w	80071c4 <_fwalk_reent>
 8007066:	bf00      	nop
 8007068:	08006fa1 	.word	0x08006fa1

0800706c <__sfmoreglue>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	2268      	movs	r2, #104	; 0x68
 8007070:	1e4d      	subs	r5, r1, #1
 8007072:	4355      	muls	r5, r2
 8007074:	460e      	mov	r6, r1
 8007076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800707a:	f000 f997 	bl	80073ac <_malloc_r>
 800707e:	4604      	mov	r4, r0
 8007080:	b140      	cbz	r0, 8007094 <__sfmoreglue+0x28>
 8007082:	2100      	movs	r1, #0
 8007084:	e9c0 1600 	strd	r1, r6, [r0]
 8007088:	300c      	adds	r0, #12
 800708a:	60a0      	str	r0, [r4, #8]
 800708c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007090:	f7ff fb42 	bl	8006718 <memset>
 8007094:	4620      	mov	r0, r4
 8007096:	bd70      	pop	{r4, r5, r6, pc}

08007098 <__sfp_lock_acquire>:
 8007098:	4801      	ldr	r0, [pc, #4]	; (80070a0 <__sfp_lock_acquire+0x8>)
 800709a:	f000 b8b3 	b.w	8007204 <__retarget_lock_acquire_recursive>
 800709e:	bf00      	nop
 80070a0:	240001b5 	.word	0x240001b5

080070a4 <__sfp_lock_release>:
 80070a4:	4801      	ldr	r0, [pc, #4]	; (80070ac <__sfp_lock_release+0x8>)
 80070a6:	f000 b8ae 	b.w	8007206 <__retarget_lock_release_recursive>
 80070aa:	bf00      	nop
 80070ac:	240001b5 	.word	0x240001b5

080070b0 <__sinit_lock_acquire>:
 80070b0:	4801      	ldr	r0, [pc, #4]	; (80070b8 <__sinit_lock_acquire+0x8>)
 80070b2:	f000 b8a7 	b.w	8007204 <__retarget_lock_acquire_recursive>
 80070b6:	bf00      	nop
 80070b8:	240001b6 	.word	0x240001b6

080070bc <__sinit_lock_release>:
 80070bc:	4801      	ldr	r0, [pc, #4]	; (80070c4 <__sinit_lock_release+0x8>)
 80070be:	f000 b8a2 	b.w	8007206 <__retarget_lock_release_recursive>
 80070c2:	bf00      	nop
 80070c4:	240001b6 	.word	0x240001b6

080070c8 <__sinit>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	4604      	mov	r4, r0
 80070cc:	f7ff fff0 	bl	80070b0 <__sinit_lock_acquire>
 80070d0:	69a3      	ldr	r3, [r4, #24]
 80070d2:	b11b      	cbz	r3, 80070dc <__sinit+0x14>
 80070d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d8:	f7ff bff0 	b.w	80070bc <__sinit_lock_release>
 80070dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070e0:	6523      	str	r3, [r4, #80]	; 0x50
 80070e2:	4b13      	ldr	r3, [pc, #76]	; (8007130 <__sinit+0x68>)
 80070e4:	4a13      	ldr	r2, [pc, #76]	; (8007134 <__sinit+0x6c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	bf04      	itt	eq
 80070ee:	2301      	moveq	r3, #1
 80070f0:	61a3      	streq	r3, [r4, #24]
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 f820 	bl	8007138 <__sfp>
 80070f8:	6060      	str	r0, [r4, #4]
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 f81c 	bl	8007138 <__sfp>
 8007100:	60a0      	str	r0, [r4, #8]
 8007102:	4620      	mov	r0, r4
 8007104:	f000 f818 	bl	8007138 <__sfp>
 8007108:	2200      	movs	r2, #0
 800710a:	60e0      	str	r0, [r4, #12]
 800710c:	2104      	movs	r1, #4
 800710e:	6860      	ldr	r0, [r4, #4]
 8007110:	f7ff ff82 	bl	8007018 <std>
 8007114:	68a0      	ldr	r0, [r4, #8]
 8007116:	2201      	movs	r2, #1
 8007118:	2109      	movs	r1, #9
 800711a:	f7ff ff7d 	bl	8007018 <std>
 800711e:	68e0      	ldr	r0, [r4, #12]
 8007120:	2202      	movs	r2, #2
 8007122:	2112      	movs	r1, #18
 8007124:	f7ff ff78 	bl	8007018 <std>
 8007128:	2301      	movs	r3, #1
 800712a:	61a3      	str	r3, [r4, #24]
 800712c:	e7d2      	b.n	80070d4 <__sinit+0xc>
 800712e:	bf00      	nop
 8007130:	08007830 	.word	0x08007830
 8007134:	08007061 	.word	0x08007061

08007138 <__sfp>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	4607      	mov	r7, r0
 800713c:	f7ff ffac 	bl	8007098 <__sfp_lock_acquire>
 8007140:	4b1e      	ldr	r3, [pc, #120]	; (80071bc <__sfp+0x84>)
 8007142:	681e      	ldr	r6, [r3, #0]
 8007144:	69b3      	ldr	r3, [r6, #24]
 8007146:	b913      	cbnz	r3, 800714e <__sfp+0x16>
 8007148:	4630      	mov	r0, r6
 800714a:	f7ff ffbd 	bl	80070c8 <__sinit>
 800714e:	3648      	adds	r6, #72	; 0x48
 8007150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007154:	3b01      	subs	r3, #1
 8007156:	d503      	bpl.n	8007160 <__sfp+0x28>
 8007158:	6833      	ldr	r3, [r6, #0]
 800715a:	b30b      	cbz	r3, 80071a0 <__sfp+0x68>
 800715c:	6836      	ldr	r6, [r6, #0]
 800715e:	e7f7      	b.n	8007150 <__sfp+0x18>
 8007160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007164:	b9d5      	cbnz	r5, 800719c <__sfp+0x64>
 8007166:	4b16      	ldr	r3, [pc, #88]	; (80071c0 <__sfp+0x88>)
 8007168:	60e3      	str	r3, [r4, #12]
 800716a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800716e:	6665      	str	r5, [r4, #100]	; 0x64
 8007170:	f000 f847 	bl	8007202 <__retarget_lock_init_recursive>
 8007174:	f7ff ff96 	bl	80070a4 <__sfp_lock_release>
 8007178:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800717c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007180:	6025      	str	r5, [r4, #0]
 8007182:	61a5      	str	r5, [r4, #24]
 8007184:	2208      	movs	r2, #8
 8007186:	4629      	mov	r1, r5
 8007188:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800718c:	f7ff fac4 	bl	8006718 <memset>
 8007190:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007194:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007198:	4620      	mov	r0, r4
 800719a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800719c:	3468      	adds	r4, #104	; 0x68
 800719e:	e7d9      	b.n	8007154 <__sfp+0x1c>
 80071a0:	2104      	movs	r1, #4
 80071a2:	4638      	mov	r0, r7
 80071a4:	f7ff ff62 	bl	800706c <__sfmoreglue>
 80071a8:	4604      	mov	r4, r0
 80071aa:	6030      	str	r0, [r6, #0]
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d1d5      	bne.n	800715c <__sfp+0x24>
 80071b0:	f7ff ff78 	bl	80070a4 <__sfp_lock_release>
 80071b4:	230c      	movs	r3, #12
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	e7ee      	b.n	8007198 <__sfp+0x60>
 80071ba:	bf00      	nop
 80071bc:	08007830 	.word	0x08007830
 80071c0:	ffff0001 	.word	0xffff0001

080071c4 <_fwalk_reent>:
 80071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	4606      	mov	r6, r0
 80071ca:	4688      	mov	r8, r1
 80071cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071d0:	2700      	movs	r7, #0
 80071d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071d6:	f1b9 0901 	subs.w	r9, r9, #1
 80071da:	d505      	bpl.n	80071e8 <_fwalk_reent+0x24>
 80071dc:	6824      	ldr	r4, [r4, #0]
 80071de:	2c00      	cmp	r4, #0
 80071e0:	d1f7      	bne.n	80071d2 <_fwalk_reent+0xe>
 80071e2:	4638      	mov	r0, r7
 80071e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e8:	89ab      	ldrh	r3, [r5, #12]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d907      	bls.n	80071fe <_fwalk_reent+0x3a>
 80071ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071f2:	3301      	adds	r3, #1
 80071f4:	d003      	beq.n	80071fe <_fwalk_reent+0x3a>
 80071f6:	4629      	mov	r1, r5
 80071f8:	4630      	mov	r0, r6
 80071fa:	47c0      	blx	r8
 80071fc:	4307      	orrs	r7, r0
 80071fe:	3568      	adds	r5, #104	; 0x68
 8007200:	e7e9      	b.n	80071d6 <_fwalk_reent+0x12>

08007202 <__retarget_lock_init_recursive>:
 8007202:	4770      	bx	lr

08007204 <__retarget_lock_acquire_recursive>:
 8007204:	4770      	bx	lr

08007206 <__retarget_lock_release_recursive>:
 8007206:	4770      	bx	lr

08007208 <__swhatbuf_r>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	460e      	mov	r6, r1
 800720c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007210:	2900      	cmp	r1, #0
 8007212:	b096      	sub	sp, #88	; 0x58
 8007214:	4614      	mov	r4, r2
 8007216:	461d      	mov	r5, r3
 8007218:	da08      	bge.n	800722c <__swhatbuf_r+0x24>
 800721a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	602a      	str	r2, [r5, #0]
 8007222:	061a      	lsls	r2, r3, #24
 8007224:	d410      	bmi.n	8007248 <__swhatbuf_r+0x40>
 8007226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800722a:	e00e      	b.n	800724a <__swhatbuf_r+0x42>
 800722c:	466a      	mov	r2, sp
 800722e:	f000 f9eb 	bl	8007608 <_fstat_r>
 8007232:	2800      	cmp	r0, #0
 8007234:	dbf1      	blt.n	800721a <__swhatbuf_r+0x12>
 8007236:	9a01      	ldr	r2, [sp, #4]
 8007238:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800723c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007240:	425a      	negs	r2, r3
 8007242:	415a      	adcs	r2, r3
 8007244:	602a      	str	r2, [r5, #0]
 8007246:	e7ee      	b.n	8007226 <__swhatbuf_r+0x1e>
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	2000      	movs	r0, #0
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	b016      	add	sp, #88	; 0x58
 8007250:	bd70      	pop	{r4, r5, r6, pc}
	...

08007254 <__smakebuf_r>:
 8007254:	898b      	ldrh	r3, [r1, #12]
 8007256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007258:	079d      	lsls	r5, r3, #30
 800725a:	4606      	mov	r6, r0
 800725c:	460c      	mov	r4, r1
 800725e:	d507      	bpl.n	8007270 <__smakebuf_r+0x1c>
 8007260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	2301      	movs	r3, #1
 800726a:	6163      	str	r3, [r4, #20]
 800726c:	b002      	add	sp, #8
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	ab01      	add	r3, sp, #4
 8007272:	466a      	mov	r2, sp
 8007274:	f7ff ffc8 	bl	8007208 <__swhatbuf_r>
 8007278:	9900      	ldr	r1, [sp, #0]
 800727a:	4605      	mov	r5, r0
 800727c:	4630      	mov	r0, r6
 800727e:	f000 f895 	bl	80073ac <_malloc_r>
 8007282:	b948      	cbnz	r0, 8007298 <__smakebuf_r+0x44>
 8007284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007288:	059a      	lsls	r2, r3, #22
 800728a:	d4ef      	bmi.n	800726c <__smakebuf_r+0x18>
 800728c:	f023 0303 	bic.w	r3, r3, #3
 8007290:	f043 0302 	orr.w	r3, r3, #2
 8007294:	81a3      	strh	r3, [r4, #12]
 8007296:	e7e3      	b.n	8007260 <__smakebuf_r+0xc>
 8007298:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <__smakebuf_r+0x7c>)
 800729a:	62b3      	str	r3, [r6, #40]	; 0x28
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	6020      	str	r0, [r4, #0]
 80072a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a4:	81a3      	strh	r3, [r4, #12]
 80072a6:	9b00      	ldr	r3, [sp, #0]
 80072a8:	6163      	str	r3, [r4, #20]
 80072aa:	9b01      	ldr	r3, [sp, #4]
 80072ac:	6120      	str	r0, [r4, #16]
 80072ae:	b15b      	cbz	r3, 80072c8 <__smakebuf_r+0x74>
 80072b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072b4:	4630      	mov	r0, r6
 80072b6:	f000 f9b9 	bl	800762c <_isatty_r>
 80072ba:	b128      	cbz	r0, 80072c8 <__smakebuf_r+0x74>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	89a0      	ldrh	r0, [r4, #12]
 80072ca:	4305      	orrs	r5, r0
 80072cc:	81a5      	strh	r5, [r4, #12]
 80072ce:	e7cd      	b.n	800726c <__smakebuf_r+0x18>
 80072d0:	08007061 	.word	0x08007061

080072d4 <_free_r>:
 80072d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d044      	beq.n	8007364 <_free_r+0x90>
 80072da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072de:	9001      	str	r0, [sp, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f1a1 0404 	sub.w	r4, r1, #4
 80072e6:	bfb8      	it	lt
 80072e8:	18e4      	addlt	r4, r4, r3
 80072ea:	f000 f9c1 	bl	8007670 <__malloc_lock>
 80072ee:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <_free_r+0x94>)
 80072f0:	9801      	ldr	r0, [sp, #4]
 80072f2:	6813      	ldr	r3, [r2, #0]
 80072f4:	b933      	cbnz	r3, 8007304 <_free_r+0x30>
 80072f6:	6063      	str	r3, [r4, #4]
 80072f8:	6014      	str	r4, [r2, #0]
 80072fa:	b003      	add	sp, #12
 80072fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007300:	f000 b9bc 	b.w	800767c <__malloc_unlock>
 8007304:	42a3      	cmp	r3, r4
 8007306:	d908      	bls.n	800731a <_free_r+0x46>
 8007308:	6825      	ldr	r5, [r4, #0]
 800730a:	1961      	adds	r1, r4, r5
 800730c:	428b      	cmp	r3, r1
 800730e:	bf01      	itttt	eq
 8007310:	6819      	ldreq	r1, [r3, #0]
 8007312:	685b      	ldreq	r3, [r3, #4]
 8007314:	1949      	addeq	r1, r1, r5
 8007316:	6021      	streq	r1, [r4, #0]
 8007318:	e7ed      	b.n	80072f6 <_free_r+0x22>
 800731a:	461a      	mov	r2, r3
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	b10b      	cbz	r3, 8007324 <_free_r+0x50>
 8007320:	42a3      	cmp	r3, r4
 8007322:	d9fa      	bls.n	800731a <_free_r+0x46>
 8007324:	6811      	ldr	r1, [r2, #0]
 8007326:	1855      	adds	r5, r2, r1
 8007328:	42a5      	cmp	r5, r4
 800732a:	d10b      	bne.n	8007344 <_free_r+0x70>
 800732c:	6824      	ldr	r4, [r4, #0]
 800732e:	4421      	add	r1, r4
 8007330:	1854      	adds	r4, r2, r1
 8007332:	42a3      	cmp	r3, r4
 8007334:	6011      	str	r1, [r2, #0]
 8007336:	d1e0      	bne.n	80072fa <_free_r+0x26>
 8007338:	681c      	ldr	r4, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	6053      	str	r3, [r2, #4]
 800733e:	4421      	add	r1, r4
 8007340:	6011      	str	r1, [r2, #0]
 8007342:	e7da      	b.n	80072fa <_free_r+0x26>
 8007344:	d902      	bls.n	800734c <_free_r+0x78>
 8007346:	230c      	movs	r3, #12
 8007348:	6003      	str	r3, [r0, #0]
 800734a:	e7d6      	b.n	80072fa <_free_r+0x26>
 800734c:	6825      	ldr	r5, [r4, #0]
 800734e:	1961      	adds	r1, r4, r5
 8007350:	428b      	cmp	r3, r1
 8007352:	bf04      	itt	eq
 8007354:	6819      	ldreq	r1, [r3, #0]
 8007356:	685b      	ldreq	r3, [r3, #4]
 8007358:	6063      	str	r3, [r4, #4]
 800735a:	bf04      	itt	eq
 800735c:	1949      	addeq	r1, r1, r5
 800735e:	6021      	streq	r1, [r4, #0]
 8007360:	6054      	str	r4, [r2, #4]
 8007362:	e7ca      	b.n	80072fa <_free_r+0x26>
 8007364:	b003      	add	sp, #12
 8007366:	bd30      	pop	{r4, r5, pc}
 8007368:	240001b8 	.word	0x240001b8

0800736c <sbrk_aligned>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	4e0e      	ldr	r6, [pc, #56]	; (80073a8 <sbrk_aligned+0x3c>)
 8007370:	460c      	mov	r4, r1
 8007372:	6831      	ldr	r1, [r6, #0]
 8007374:	4605      	mov	r5, r0
 8007376:	b911      	cbnz	r1, 800737e <sbrk_aligned+0x12>
 8007378:	f000 f88c 	bl	8007494 <_sbrk_r>
 800737c:	6030      	str	r0, [r6, #0]
 800737e:	4621      	mov	r1, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f000 f887 	bl	8007494 <_sbrk_r>
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	d00a      	beq.n	80073a0 <sbrk_aligned+0x34>
 800738a:	1cc4      	adds	r4, r0, #3
 800738c:	f024 0403 	bic.w	r4, r4, #3
 8007390:	42a0      	cmp	r0, r4
 8007392:	d007      	beq.n	80073a4 <sbrk_aligned+0x38>
 8007394:	1a21      	subs	r1, r4, r0
 8007396:	4628      	mov	r0, r5
 8007398:	f000 f87c 	bl	8007494 <_sbrk_r>
 800739c:	3001      	adds	r0, #1
 800739e:	d101      	bne.n	80073a4 <sbrk_aligned+0x38>
 80073a0:	f04f 34ff 	mov.w	r4, #4294967295
 80073a4:	4620      	mov	r0, r4
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	240001bc 	.word	0x240001bc

080073ac <_malloc_r>:
 80073ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b0:	1ccd      	adds	r5, r1, #3
 80073b2:	f025 0503 	bic.w	r5, r5, #3
 80073b6:	3508      	adds	r5, #8
 80073b8:	2d0c      	cmp	r5, #12
 80073ba:	bf38      	it	cc
 80073bc:	250c      	movcc	r5, #12
 80073be:	2d00      	cmp	r5, #0
 80073c0:	4607      	mov	r7, r0
 80073c2:	db01      	blt.n	80073c8 <_malloc_r+0x1c>
 80073c4:	42a9      	cmp	r1, r5
 80073c6:	d905      	bls.n	80073d4 <_malloc_r+0x28>
 80073c8:	230c      	movs	r3, #12
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	2600      	movs	r6, #0
 80073ce:	4630      	mov	r0, r6
 80073d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d4:	4e2e      	ldr	r6, [pc, #184]	; (8007490 <_malloc_r+0xe4>)
 80073d6:	f000 f94b 	bl	8007670 <__malloc_lock>
 80073da:	6833      	ldr	r3, [r6, #0]
 80073dc:	461c      	mov	r4, r3
 80073de:	bb34      	cbnz	r4, 800742e <_malloc_r+0x82>
 80073e0:	4629      	mov	r1, r5
 80073e2:	4638      	mov	r0, r7
 80073e4:	f7ff ffc2 	bl	800736c <sbrk_aligned>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	4604      	mov	r4, r0
 80073ec:	d14d      	bne.n	800748a <_malloc_r+0xde>
 80073ee:	6834      	ldr	r4, [r6, #0]
 80073f0:	4626      	mov	r6, r4
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d140      	bne.n	8007478 <_malloc_r+0xcc>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	4631      	mov	r1, r6
 80073fa:	4638      	mov	r0, r7
 80073fc:	eb04 0803 	add.w	r8, r4, r3
 8007400:	f000 f848 	bl	8007494 <_sbrk_r>
 8007404:	4580      	cmp	r8, r0
 8007406:	d13a      	bne.n	800747e <_malloc_r+0xd2>
 8007408:	6821      	ldr	r1, [r4, #0]
 800740a:	3503      	adds	r5, #3
 800740c:	1a6d      	subs	r5, r5, r1
 800740e:	f025 0503 	bic.w	r5, r5, #3
 8007412:	3508      	adds	r5, #8
 8007414:	2d0c      	cmp	r5, #12
 8007416:	bf38      	it	cc
 8007418:	250c      	movcc	r5, #12
 800741a:	4629      	mov	r1, r5
 800741c:	4638      	mov	r0, r7
 800741e:	f7ff ffa5 	bl	800736c <sbrk_aligned>
 8007422:	3001      	adds	r0, #1
 8007424:	d02b      	beq.n	800747e <_malloc_r+0xd2>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	442b      	add	r3, r5
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	e00e      	b.n	800744c <_malloc_r+0xa0>
 800742e:	6822      	ldr	r2, [r4, #0]
 8007430:	1b52      	subs	r2, r2, r5
 8007432:	d41e      	bmi.n	8007472 <_malloc_r+0xc6>
 8007434:	2a0b      	cmp	r2, #11
 8007436:	d916      	bls.n	8007466 <_malloc_r+0xba>
 8007438:	1961      	adds	r1, r4, r5
 800743a:	42a3      	cmp	r3, r4
 800743c:	6025      	str	r5, [r4, #0]
 800743e:	bf18      	it	ne
 8007440:	6059      	strne	r1, [r3, #4]
 8007442:	6863      	ldr	r3, [r4, #4]
 8007444:	bf08      	it	eq
 8007446:	6031      	streq	r1, [r6, #0]
 8007448:	5162      	str	r2, [r4, r5]
 800744a:	604b      	str	r3, [r1, #4]
 800744c:	4638      	mov	r0, r7
 800744e:	f104 060b 	add.w	r6, r4, #11
 8007452:	f000 f913 	bl	800767c <__malloc_unlock>
 8007456:	f026 0607 	bic.w	r6, r6, #7
 800745a:	1d23      	adds	r3, r4, #4
 800745c:	1af2      	subs	r2, r6, r3
 800745e:	d0b6      	beq.n	80073ce <_malloc_r+0x22>
 8007460:	1b9b      	subs	r3, r3, r6
 8007462:	50a3      	str	r3, [r4, r2]
 8007464:	e7b3      	b.n	80073ce <_malloc_r+0x22>
 8007466:	6862      	ldr	r2, [r4, #4]
 8007468:	42a3      	cmp	r3, r4
 800746a:	bf0c      	ite	eq
 800746c:	6032      	streq	r2, [r6, #0]
 800746e:	605a      	strne	r2, [r3, #4]
 8007470:	e7ec      	b.n	800744c <_malloc_r+0xa0>
 8007472:	4623      	mov	r3, r4
 8007474:	6864      	ldr	r4, [r4, #4]
 8007476:	e7b2      	b.n	80073de <_malloc_r+0x32>
 8007478:	4634      	mov	r4, r6
 800747a:	6876      	ldr	r6, [r6, #4]
 800747c:	e7b9      	b.n	80073f2 <_malloc_r+0x46>
 800747e:	230c      	movs	r3, #12
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	4638      	mov	r0, r7
 8007484:	f000 f8fa 	bl	800767c <__malloc_unlock>
 8007488:	e7a1      	b.n	80073ce <_malloc_r+0x22>
 800748a:	6025      	str	r5, [r4, #0]
 800748c:	e7de      	b.n	800744c <_malloc_r+0xa0>
 800748e:	bf00      	nop
 8007490:	240001b8 	.word	0x240001b8

08007494 <_sbrk_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4d06      	ldr	r5, [pc, #24]	; (80074b0 <_sbrk_r+0x1c>)
 8007498:	2300      	movs	r3, #0
 800749a:	4604      	mov	r4, r0
 800749c:	4608      	mov	r0, r1
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	f7fa fa1c 	bl	80018dc <_sbrk>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_sbrk_r+0x1a>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_sbrk_r+0x1a>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	240001c0 	.word	0x240001c0

080074b4 <_raise_r>:
 80074b4:	291f      	cmp	r1, #31
 80074b6:	b538      	push	{r3, r4, r5, lr}
 80074b8:	4604      	mov	r4, r0
 80074ba:	460d      	mov	r5, r1
 80074bc:	d904      	bls.n	80074c8 <_raise_r+0x14>
 80074be:	2316      	movs	r3, #22
 80074c0:	6003      	str	r3, [r0, #0]
 80074c2:	f04f 30ff 	mov.w	r0, #4294967295
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074ca:	b112      	cbz	r2, 80074d2 <_raise_r+0x1e>
 80074cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074d0:	b94b      	cbnz	r3, 80074e6 <_raise_r+0x32>
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 f830 	bl	8007538 <_getpid_r>
 80074d8:	462a      	mov	r2, r5
 80074da:	4601      	mov	r1, r0
 80074dc:	4620      	mov	r0, r4
 80074de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e2:	f000 b817 	b.w	8007514 <_kill_r>
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d00a      	beq.n	8007500 <_raise_r+0x4c>
 80074ea:	1c59      	adds	r1, r3, #1
 80074ec:	d103      	bne.n	80074f6 <_raise_r+0x42>
 80074ee:	2316      	movs	r3, #22
 80074f0:	6003      	str	r3, [r0, #0]
 80074f2:	2001      	movs	r0, #1
 80074f4:	e7e7      	b.n	80074c6 <_raise_r+0x12>
 80074f6:	2400      	movs	r4, #0
 80074f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074fc:	4628      	mov	r0, r5
 80074fe:	4798      	blx	r3
 8007500:	2000      	movs	r0, #0
 8007502:	e7e0      	b.n	80074c6 <_raise_r+0x12>

08007504 <raise>:
 8007504:	4b02      	ldr	r3, [pc, #8]	; (8007510 <raise+0xc>)
 8007506:	4601      	mov	r1, r0
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	f7ff bfd3 	b.w	80074b4 <_raise_r>
 800750e:	bf00      	nop
 8007510:	24000010 	.word	0x24000010

08007514 <_kill_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	; (8007534 <_kill_r+0x20>)
 8007518:	2300      	movs	r3, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	4611      	mov	r1, r2
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	f7fa f953 	bl	80017cc <_kill>
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	d102      	bne.n	8007530 <_kill_r+0x1c>
 800752a:	682b      	ldr	r3, [r5, #0]
 800752c:	b103      	cbz	r3, 8007530 <_kill_r+0x1c>
 800752e:	6023      	str	r3, [r4, #0]
 8007530:	bd38      	pop	{r3, r4, r5, pc}
 8007532:	bf00      	nop
 8007534:	240001c0 	.word	0x240001c0

08007538 <_getpid_r>:
 8007538:	f7fa b940 	b.w	80017bc <_getpid>

0800753c <__sread>:
 800753c:	b510      	push	{r4, lr}
 800753e:	460c      	mov	r4, r1
 8007540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007544:	f000 f8a0 	bl	8007688 <_read_r>
 8007548:	2800      	cmp	r0, #0
 800754a:	bfab      	itete	ge
 800754c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800754e:	89a3      	ldrhlt	r3, [r4, #12]
 8007550:	181b      	addge	r3, r3, r0
 8007552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007556:	bfac      	ite	ge
 8007558:	6563      	strge	r3, [r4, #84]	; 0x54
 800755a:	81a3      	strhlt	r3, [r4, #12]
 800755c:	bd10      	pop	{r4, pc}

0800755e <__swrite>:
 800755e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007562:	461f      	mov	r7, r3
 8007564:	898b      	ldrh	r3, [r1, #12]
 8007566:	05db      	lsls	r3, r3, #23
 8007568:	4605      	mov	r5, r0
 800756a:	460c      	mov	r4, r1
 800756c:	4616      	mov	r6, r2
 800756e:	d505      	bpl.n	800757c <__swrite+0x1e>
 8007570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007574:	2302      	movs	r3, #2
 8007576:	2200      	movs	r2, #0
 8007578:	f000 f868 	bl	800764c <_lseek_r>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007586:	81a3      	strh	r3, [r4, #12]
 8007588:	4632      	mov	r2, r6
 800758a:	463b      	mov	r3, r7
 800758c:	4628      	mov	r0, r5
 800758e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007592:	f000 b817 	b.w	80075c4 <_write_r>

08007596 <__sseek>:
 8007596:	b510      	push	{r4, lr}
 8007598:	460c      	mov	r4, r1
 800759a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759e:	f000 f855 	bl	800764c <_lseek_r>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	bf15      	itete	ne
 80075a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80075aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075b2:	81a3      	strheq	r3, [r4, #12]
 80075b4:	bf18      	it	ne
 80075b6:	81a3      	strhne	r3, [r4, #12]
 80075b8:	bd10      	pop	{r4, pc}

080075ba <__sclose>:
 80075ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075be:	f000 b813 	b.w	80075e8 <_close_r>
	...

080075c4 <_write_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d07      	ldr	r5, [pc, #28]	; (80075e4 <_write_r+0x20>)
 80075c8:	4604      	mov	r4, r0
 80075ca:	4608      	mov	r0, r1
 80075cc:	4611      	mov	r1, r2
 80075ce:	2200      	movs	r2, #0
 80075d0:	602a      	str	r2, [r5, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	f7fa f931 	bl	800183a <_write>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_write_r+0x1e>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_write_r+0x1e>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	240001c0 	.word	0x240001c0

080075e8 <_close_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d06      	ldr	r5, [pc, #24]	; (8007604 <_close_r+0x1c>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7fa f93d 	bl	8001872 <_close>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_close_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_close_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	240001c0 	.word	0x240001c0

08007608 <_fstat_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4d07      	ldr	r5, [pc, #28]	; (8007628 <_fstat_r+0x20>)
 800760c:	2300      	movs	r3, #0
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	602b      	str	r3, [r5, #0]
 8007616:	f7fa f938 	bl	800188a <_fstat>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	d102      	bne.n	8007624 <_fstat_r+0x1c>
 800761e:	682b      	ldr	r3, [r5, #0]
 8007620:	b103      	cbz	r3, 8007624 <_fstat_r+0x1c>
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	bd38      	pop	{r3, r4, r5, pc}
 8007626:	bf00      	nop
 8007628:	240001c0 	.word	0x240001c0

0800762c <_isatty_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d06      	ldr	r5, [pc, #24]	; (8007648 <_isatty_r+0x1c>)
 8007630:	2300      	movs	r3, #0
 8007632:	4604      	mov	r4, r0
 8007634:	4608      	mov	r0, r1
 8007636:	602b      	str	r3, [r5, #0]
 8007638:	f7fa f937 	bl	80018aa <_isatty>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d102      	bne.n	8007646 <_isatty_r+0x1a>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b103      	cbz	r3, 8007646 <_isatty_r+0x1a>
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	240001c0 	.word	0x240001c0

0800764c <_lseek_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4d07      	ldr	r5, [pc, #28]	; (800766c <_lseek_r+0x20>)
 8007650:	4604      	mov	r4, r0
 8007652:	4608      	mov	r0, r1
 8007654:	4611      	mov	r1, r2
 8007656:	2200      	movs	r2, #0
 8007658:	602a      	str	r2, [r5, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	f7fa f930 	bl	80018c0 <_lseek>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_lseek_r+0x1e>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_lseek_r+0x1e>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	240001c0 	.word	0x240001c0

08007670 <__malloc_lock>:
 8007670:	4801      	ldr	r0, [pc, #4]	; (8007678 <__malloc_lock+0x8>)
 8007672:	f7ff bdc7 	b.w	8007204 <__retarget_lock_acquire_recursive>
 8007676:	bf00      	nop
 8007678:	240001b4 	.word	0x240001b4

0800767c <__malloc_unlock>:
 800767c:	4801      	ldr	r0, [pc, #4]	; (8007684 <__malloc_unlock+0x8>)
 800767e:	f7ff bdc2 	b.w	8007206 <__retarget_lock_release_recursive>
 8007682:	bf00      	nop
 8007684:	240001b4 	.word	0x240001b4

08007688 <_read_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d07      	ldr	r5, [pc, #28]	; (80076a8 <_read_r+0x20>)
 800768c:	4604      	mov	r4, r0
 800768e:	4608      	mov	r0, r1
 8007690:	4611      	mov	r1, r2
 8007692:	2200      	movs	r2, #0
 8007694:	602a      	str	r2, [r5, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f7fa f8b2 	bl	8001800 <_read>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_read_r+0x1e>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_read_r+0x1e>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	240001c0 	.word	0x240001c0

080076ac <_init>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr

080076b8 <_fini>:
 80076b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ba:	bf00      	nop
 80076bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076be:	bc08      	pop	{r3}
 80076c0:	469e      	mov	lr, r3
 80076c2:	4770      	bx	lr
